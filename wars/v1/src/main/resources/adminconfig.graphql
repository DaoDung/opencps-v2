schema {
    query: Query
    mutation: Mutation
}

type Query {
	getAdminConfig(code: String): AdminConfig
	getDynamicReports(start: Int = 0, end: Int = 10): [DynamicReport]
	getDynamicReport(reportCode: String): DynamicReport
}

type Mutation {
    updateDynamicReport(body: String): DynamicReport
}

type AdminConfig {
 	id : Long
 	code: String
 	name: String
 	bundleName: String
 	modelName: String
 	serviceUtilName: String
 	headersName: String
 	mappingData: String
 	columns: String
 	detailColumns: String
 	extForm: Boolean
 	groupFilter: Boolean
 	publicManager: Boolean
 	foreignTable: Boolean
}

type DynamicReport {
 	dynamicReportId : Long
 	companyId: Long
 	groupId: Long
 	userId: Long
 	userName: String
 	createDate: String
 	modifiedDate: String
 	reportCode: String
 	reportName: String
 	sharing: Int
 	filterConfig: String
 	tableConfig: String
 	userConfig: String
}
