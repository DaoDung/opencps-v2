/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.communication.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.communication.model.LGSPToken;
import org.opencps.communication.model.LGSPTokenModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the LGSPToken service. Represents a row in the &quot;opencps_lgsp_token&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link LGSPTokenModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link LGSPTokenImpl}.
 * </p>
 *
 * @author khoavd
 * @see LGSPTokenImpl
 * @see LGSPToken
 * @see LGSPTokenModel
 * @generated
 */
@ProviderType
public class LGSPTokenModelImpl extends BaseModelImpl<LGSPToken>
	implements LGSPTokenModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a lgsp token model instance should use the {@link LGSPToken} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_lgsp_token";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "tokenId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "token", Types.VARCHAR },
			{ "tokenType", Types.VARCHAR },
			{ "refreshToken", Types.VARCHAR },
			{ "expiryDate", Types.TIMESTAMP }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tokenId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("token", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("tokenType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("refreshToken", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("expiryDate", Types.TIMESTAMP);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_lgsp_token (uuid_ VARCHAR(75) null,tokenId LONG not null primary key,createDate DATE null,modifiedDate DATE null,token VARCHAR(75) null,tokenType VARCHAR(75) null,refreshToken VARCHAR(75) null,expiryDate DATE null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_lgsp_token";
	public static final String ORDER_BY_JPQL = " ORDER BY lgspToken.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_lgsp_token.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.communication.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.communication.model.LGSPToken"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.communication.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.communication.model.LGSPToken"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.communication.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.communication.model.LGSPToken"),
			true);
	public static final long TOKENTYPE_COLUMN_BITMASK = 1L;
	public static final long UUID_COLUMN_BITMASK = 2L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.communication.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.communication.model.LGSPToken"));

	public LGSPTokenModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _tokenId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTokenId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _tokenId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return LGSPToken.class;
	}

	@Override
	public String getModelClassName() {
		return LGSPToken.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("tokenId", getTokenId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("token", getToken());
		attributes.put("tokenType", getTokenType());
		attributes.put("refreshToken", getRefreshToken());
		attributes.put("expiryDate", getExpiryDate());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long tokenId = (Long)attributes.get("tokenId");

		if (tokenId != null) {
			setTokenId(tokenId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String token = (String)attributes.get("token");

		if (token != null) {
			setToken(token);
		}

		String tokenType = (String)attributes.get("tokenType");

		if (tokenType != null) {
			setTokenType(tokenType);
		}

		String refreshToken = (String)attributes.get("refreshToken");

		if (refreshToken != null) {
			setRefreshToken(refreshToken);
		}

		Date expiryDate = (Date)attributes.get("expiryDate");

		if (expiryDate != null) {
			setExpiryDate(expiryDate);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getTokenId() {
		return _tokenId;
	}

	@Override
	public void setTokenId(long tokenId) {
		_tokenId = tokenId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getToken() {
		if (_token == null) {
			return "";
		}
		else {
			return _token;
		}
	}

	@Override
	public void setToken(String token) {
		_token = token;
	}

	@Override
	public String getTokenType() {
		if (_tokenType == null) {
			return "";
		}
		else {
			return _tokenType;
		}
	}

	@Override
	public void setTokenType(String tokenType) {
		_columnBitmask |= TOKENTYPE_COLUMN_BITMASK;

		if (_originalTokenType == null) {
			_originalTokenType = _tokenType;
		}

		_tokenType = tokenType;
	}

	public String getOriginalTokenType() {
		return GetterUtil.getString(_originalTokenType);
	}

	@Override
	public String getRefreshToken() {
		if (_refreshToken == null) {
			return "";
		}
		else {
			return _refreshToken;
		}
	}

	@Override
	public void setRefreshToken(String refreshToken) {
		_refreshToken = refreshToken;
	}

	@Override
	public Date getExpiryDate() {
		return _expiryDate;
	}

	@Override
	public void setExpiryDate(Date expiryDate) {
		_expiryDate = expiryDate;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			LGSPToken.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public LGSPToken toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (LGSPToken)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		LGSPTokenImpl lgspTokenImpl = new LGSPTokenImpl();

		lgspTokenImpl.setUuid(getUuid());
		lgspTokenImpl.setTokenId(getTokenId());
		lgspTokenImpl.setCreateDate(getCreateDate());
		lgspTokenImpl.setModifiedDate(getModifiedDate());
		lgspTokenImpl.setToken(getToken());
		lgspTokenImpl.setTokenType(getTokenType());
		lgspTokenImpl.setRefreshToken(getRefreshToken());
		lgspTokenImpl.setExpiryDate(getExpiryDate());

		lgspTokenImpl.resetOriginalValues();

		return lgspTokenImpl;
	}

	@Override
	public int compareTo(LGSPToken lgspToken) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				lgspToken.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof LGSPToken)) {
			return false;
		}

		LGSPToken lgspToken = (LGSPToken)obj;

		long primaryKey = lgspToken.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		LGSPTokenModelImpl lgspTokenModelImpl = this;

		lgspTokenModelImpl._originalUuid = lgspTokenModelImpl._uuid;

		lgspTokenModelImpl._setModifiedDate = false;

		lgspTokenModelImpl._originalTokenType = lgspTokenModelImpl._tokenType;

		lgspTokenModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<LGSPToken> toCacheModel() {
		LGSPTokenCacheModel lgspTokenCacheModel = new LGSPTokenCacheModel();

		lgspTokenCacheModel.uuid = getUuid();

		String uuid = lgspTokenCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			lgspTokenCacheModel.uuid = null;
		}

		lgspTokenCacheModel.tokenId = getTokenId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			lgspTokenCacheModel.createDate = createDate.getTime();
		}
		else {
			lgspTokenCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			lgspTokenCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			lgspTokenCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		lgspTokenCacheModel.token = getToken();

		String token = lgspTokenCacheModel.token;

		if ((token != null) && (token.length() == 0)) {
			lgspTokenCacheModel.token = null;
		}

		lgspTokenCacheModel.tokenType = getTokenType();

		String tokenType = lgspTokenCacheModel.tokenType;

		if ((tokenType != null) && (tokenType.length() == 0)) {
			lgspTokenCacheModel.tokenType = null;
		}

		lgspTokenCacheModel.refreshToken = getRefreshToken();

		String refreshToken = lgspTokenCacheModel.refreshToken;

		if ((refreshToken != null) && (refreshToken.length() == 0)) {
			lgspTokenCacheModel.refreshToken = null;
		}

		Date expiryDate = getExpiryDate();

		if (expiryDate != null) {
			lgspTokenCacheModel.expiryDate = expiryDate.getTime();
		}
		else {
			lgspTokenCacheModel.expiryDate = Long.MIN_VALUE;
		}

		return lgspTokenCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", tokenId=");
		sb.append(getTokenId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", token=");
		sb.append(getToken());
		sb.append(", tokenType=");
		sb.append(getTokenType());
		sb.append(", refreshToken=");
		sb.append(getRefreshToken());
		sb.append(", expiryDate=");
		sb.append(getExpiryDate());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.opencps.communication.model.LGSPToken");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tokenId</column-name><column-value><![CDATA[");
		sb.append(getTokenId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>token</column-name><column-value><![CDATA[");
		sb.append(getToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tokenType</column-name><column-value><![CDATA[");
		sb.append(getTokenType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>refreshToken</column-name><column-value><![CDATA[");
		sb.append(getRefreshToken());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiryDate</column-name><column-value><![CDATA[");
		sb.append(getExpiryDate());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = LGSPToken.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			LGSPToken.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _tokenId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _token;
	private String _tokenType;
	private String _originalTokenType;
	private String _refreshToken;
	private Date _expiryDate;
	private long _columnBitmask;
	private LGSPToken _escapedModel;
}