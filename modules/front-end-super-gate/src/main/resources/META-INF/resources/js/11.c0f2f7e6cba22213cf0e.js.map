{"version":3,"sources":["webpack:///o/front-end-super-gate/js/11.c0f2f7e6cba22213cf0e.js","webpack:///./src/components/Comment.vue?2e8a**","webpack:///./~/babel-runtime/core-js/object/keys.js?fe06******","webpack:///./~/core-js/library/fn/object/keys.js?cc3f******","webpack:///./~/core-js/library/modules/_object-sap.js?a03e******","webpack:///./~/core-js/library/modules/es6.object.keys.js?c98f******","webpack:///Comment.vue?4481**","webpack:///./~/jquery-comments/js/jquery-comments.js?3fc0**","webpack:///./~/jquery-textcomplete/dist/jquery.textcomplete.js?3e1f**","webpack:///./src/components/Comment.vue?0237***"],"names":["webpackJsonp","224","module","exports","__webpack_require__","Component","options","__file","esModule","Object","keys","some","key","console","error","functional","526","default","__esModule","651","652","$export","core","fails","KEY","exec","fn","exp","S","F","653","toObject","$keys","it","691","__webpack_exports__","defineProperty","value","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default","n","__WEBPACK_IMPORTED_MODULE_1_jquery__","__WEBPACK_IMPORTED_MODULE_1_jquery___default","__WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete__","__WEBPACK_IMPORTED_MODULE_3_jquery_comments__","props","data","usersComment","comment","argShowMore","checkOpinion","computed","loading","this","$store","getters","initData","loadingInitData","watch","classPK","val","vm","dispatch","then","result","initComment","catch","reject","created","mounted","methods","runComment","comments","profilePictureURL","textareaRows","enableAttachments","enableHashtags","enablePinging","postCommentOnEnter","forceResponsive","readOnly","textareaPlaceholderText","newestText","oldestText","popularText","attachmentsText","sendText","replyText","editText","editedText","youText","saveText","deleteText","hideRepliesText","noCommentsText","noAttachmentsText","attachmentDropText","fieldMappings","id","parent","userId","modified","content","fileURL","fileMimeType","fileName","pings","creator","fullname","profileURL","isNew","createdByAdmin","createdByCurrentUser","upvoteCount","userHasUpvoted","email","opinion","className","timeFormatter","time","Date","setHours","getHours","getDate","toString","padStart","getMonth","getFullYear","getMinutes","getUsers","onSuccess","onError","getComments","dataGet","a","each","index","item","formatComment","push","postComment","document","getElementById","checked","hide","putComment","deleteComment","log","upvoteComment","uploadAttachments","responses","successfulUploads","serverResponded","length","formData","FormData","append","file","name","type","size","join","user","userEmail","userName","ajax","url","commentApi","dataType","headers","groupId","cache","contentType","processData","success","xhr","fileType","fileUrl","pictureUrl","split","createdDate","createDate","modifiedDate","dateTimeView","arg","filters","703","jQuery","__WEBPACK_AMD_DEFINE_FACTORY__","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","factory","undefined","apply","$","Comments","$el","commentsById","usersById","dataFetched","currentSortKey","events","click","keydown [contenteditable]","focus [contenteditable]","keyup [contenteditable]","paste [contenteditable]","input [contenteditable]","blur [contenteditable]","click .navigation li[data-sort-key]","click .navigation li.title","click .commenting-field.main .textarea","click .commenting-field.main .close","click .commenting-field .textarea","change .commenting-field .textarea","click .commenting-field:not(.main) .close","click .commenting-field .send.enabled","click .commenting-field .update.enabled","click .commenting-field .delete.enabled","change .commenting-field .upload.enabled input[type=\"file\"]","click li.comment button.upvote","click li.comment button.delete.enabled","click li.comment .hashtag","click li.comment .ping","click li.comment ul.child-comments .toggle-all","click li.comment button.reply","click li.comment button.edit","dragenter","dragenter .droppable-overlay","dragleave .droppable-overlay","dragenter .droppable-overlay .droppable","dragleave .droppable-overlay .droppable","dragover .droppable-overlay","drop .droppable-overlay","click .dropdown.autocomplete","mousedown .dropdown.autocomplete","touchstart .dropdown.autocomplete","getDefaultOptions","currentUserIsAdmin","currentUserId","spinnerIconURL","upvoteIconURL","replyIconURL","uploadIconURL","attachmentIconURL","fileIconURL","noCommentsIconURL","noCommentsImptIconURL","importantCmtText","newText","viewAllRepliesText","noCommentsImportantText","textFormatter","text","enableReplying","enableEditing","enableUpvoting","enableDeleting","enableDeletingCommentWithReplies","enableNavigation","defaultNavigationSortKey","highlightColor","deleteButtonColor","scrollContainer","roundProfilePictures","textareaRowsOnFocus","textareaMaxRows","maxRepliesVisible","commentJSON","hashtagClicked","hashtag","pingClicked","commentArray","refresh","toLocaleDateString","appendNewComments","commentJSONs","init","el","addClass","undelegateEvents","delegateEvents","browser","mobile","test","substr","navigator","userAgent","vendor","window","opera","extend","createCssDeclarations","fetchDataAndRender","bindEvents","unbind","bindFunction","eventName","selector","slice","methodNames","hasOwnProperty","method","proxy","self","setTimeout","empty","createHTML","after","render","commentsFetched","commentsArray","commentModels","map","commentsJSON","createCommentModel","sortComments","commentModel","addCommentToDataModel","usersFetched","userArray","fetchNext","spinner","createSpinner","find","createComment","remove","applyInternalMappings","childs","getOutermostParent","updateCommentModel","showActiveContainer","createComments","createAttachments","createImportantComments","activeNavigationEl","containerName","containerEl","siblings","show","commentList","class","mainLevelComments","replies","reverse","addComment","prepend","attachmentList","attachments","getAttachments","addAttachment","importantCmtList","importantCmt","getImportantCmt","addImportantCmt","commentEl","createCommentElement","directParentEl","reRenderCommentActionBar","outerMostParent","parents","last","childCommentsEl","commentingField","before","updateToggleAllButton","removeComment","commentId","childComments","getChildComments","childComment","outermostParent","indexToRemove","indexOf","splice","commentElements","parentEl","files","isReply","hasClass","fileCount","uploadButton","textarea","removeClass","attachmentListSpinner","commentListSpinner","getTextareaContent","trigger","createCommentJSON","applyExternalMappings","toggleAllButton","hiddenReplies","toggleAllButtonText","caret","setToggleAllButtonText","sortKey","sort","commentA","commentB","pointsOfA","pointsOfB","createdA","getTime","createdB","sortUsers","users","b","nameA","toLowerCase","trim","nameB","sortAndReArrangeComments","filter","showActiveSort","activeElements","titleEl","html","first","defaultDropdownEl","children","closeDropdowns","saveOnKeydown","ev","keyCode","metaKey","ctrlKey","currentTarget","stopPropagation","preventDefault","saveEditableContent","checkEditableContentForChange","navigationElementClicked","navigationEl","toggleNavigationDropdown","toggle","showMainCommentingField","mainTextarea","focus","hideMainCommentingField","closeButton","mainControlRow","clearTextarea","adjustTextareaHeight","blur","increaseTextareaHeight","textareaContentChanged","saveButton","attr","parentComments","parentId","scrollHeight","outerHeight","contentOrParentChangedIfEditing","parentFromModel","contentChanged","parentChanged","removeCommentingField","context","clearTimeout","myVar","commentsNew","commentsEdit","c","cmt","reRenderComment","sendButton","getPings","deleteButton","fileInputChanged","newUpvoteCount","model","previousUpvoteCount","reRenderUpvotes","toggleReplies","toggleClass","replyButtonClicked","replyButton","replyField","createCommentingFieldElement","moveCursorToEnd","scrollTop","endOfReply","position","top","endOfScrollable","newScrollTop","editButtonClicked","editButton","editField","getFormattedCommentContent","showDroppableOverlay","css","handleDragEnter","count","handleDragLeave","callback","handleDragLeaveForOverlay","hideDroppableOverlay","handleDragLeaveForDroppable","handleDragOverForOverlay","originalEvent","dataTransfer","dropEffect","handleDrop","target","mainCommentingField","createNavigationElement","commentsContainer","data-container","noComments","noCommentsIcon","importantCmtContainer","noCommentsImpt","noCommentsImptIcon","attachmentsContainer","noAttachments","noAttachmentsIcon","droppableOverlay","droppableContainer","droppable","uploadIcon","dropAttachmentText","createProfilePictureElement","src","profilePicture","existingCommentId","enableOpinion","textareaWrapper","controlRow","data-placeholder","contenteditable","saveButtonText","opinionCmtId","fileInput","data-role","saveButtonClass","labelCheckOpinion","for","parentModel","replyToName","replyToTag","createTagElement","textcomplete","match","search","term","normalizeSpaces","isSelf","alreadyPinged","lowercaseTerm","nameMatch","emailMatch","template","wrapper","profilePictureEl","detailsEl","nameEl","emailEl","replace","outerHTML","appendTo","dropdownClassName","maxCount","rightEdgeOffset","Dropdown","prototype","zippedData","contentsHtml","_buildContents","unzippedData","d","strategy","removeAttr","_renderHeader","_renderFooter","_renderContents","_fitToBottom","_fitToRight","_activateIndexedItem","_setScroll","noResultsMessage","_renderNoResultsMessage","shown","deactivate","parseInt","originalLeft","maxLeft","width","outerWidth","left","Math","min","navigationWrapper","newest","data-sort-key","data-container-name","oldest","important","popular","attachmentsIcon","dropdownNavigationWrapper","dropdownNavigation","dropdownTitle","dropdownTitleHeader","clone","spinnerIcon","data-id","commentWrapper","createCommentWrapperElement","data-original","nameText","link","href","replyTo","replyIcon","newTag","noteOpinion","isAttachment","format","mimeTypeParts","image","video","controls","availableIcons","iconClass","fileIcon","editedTime","edited","actions","reply","upvoteIcon","upvotes","createUpvoteElement","isAllowedToDelete","extraClasses","tagEl","replaceWith","createCss","styleEl","commentArr","importantCmtArr","importantCmtUser","attachCmtArr","directParentId","parentComment","toISOString","textContainer","showExpandingText","replyCount","rowCount","rows","height","isAreaScrollable","maxRowsUsed","humanReadable","textareaClone","ce","innerHTML","replaceNewLines","escape","linkify","highlightTags","getSelection","createRange","range","selectNodeContents","collapse","sel","removeAllRanges","addRange","body","createTextRange","textRange","moveToElementText","select","inputText","RegExp","times","func","arguments","highlightHashtags","highlightPings","__createTag","tag","regex","$0","$1","$2","highlightedHtml","pingText","endIndex","current","replacedText","replacePattern1","replacePattern2","replacePattern3","splitInput","i","waitUntil","condition","invertedMappings","mappings","prop","applyMappings","key1","key2","create","call","704","Error","warn","message","strategies","option","args","Array","$this","completer","_oid","Completer","shift","removeData","obj","register","Strategy","parse","element","uniqueId","views","defaults","is","isContentEditable","contentEditable","ownerDocument","activeElement","initialize","one","adapter","CKEDITOR","on","event","inArray","editor","initializedEditors","event2","editable","ckeditor_instance","isString","zIndex","dropdown","$iframe","get","frames","iframeIndex","frameElement","Adapter","viewName","selectionEnd","destroy","off","skipUnchangedTerm","getTextFromHeadToCaret","searchQuery","_extractSearchQuery","_term","_search","fire","e","_clearAtNext","matchRegexp","isFunction","locked","queuedArgsToReplay","unshift","replayOrFree","replayArgs","free","stillSearching","activate","clear","setPosition","getCaretPosition","_zip","createElement","_data","$inputEl","listPosition","_i","_bindEvents","dropdownViews","$window","include","datum","elem","idProperty","keepTextCompleteDropdown","view","commands","SKIP_DEFAULT","KEY_UP","KEY_DOWN","KEY_ENTER","KEY_PAGEUP","KEY_PAGEDOWN","KEY_ESCAPE","$parent","display","footer","header","placement","pos","add","scrollLeft","_applyPlacement","_index","_$header","_$footer","_$noResultsMessage","isUp","isDown","isEnter","altKey","shiftKey","completeOnSpace","isPageup","isPagedown","isEscape","_onClick","_onMouseover","_onKeydown","closest","command","onKeydown","_defaultKeydown","_up","_down","_enter","_pageup","_pagedown","_getActiveElement","threshold","innerHeight","$activeEl","itemTop","itemHeight","visibleHeight","visibleTop","prependTo","windowScrollBottom","offset","tolerance","lastOffset","bottom","lineHeight","right","memoize","memo","concat","strategiesArray","params","strategyObj","now","debounce","wait","timeout","timestamp","later","constructor","_onKeyup","_getCaretRelativePosition","parentOffset","offsetParent","_skipSearch","clickEvent","Textarea","regExp","pre","post","substring","newSubstr","isArray","selectionStart","p","getCaretCoordinates","_calculateLineHeight","isNaN","parentNode","temp","nodeName","style","setAttribute","fontFamily","fontSize","appendChild","clientHeight","removeChild","IETextarea","sentinelChar","insertBefore","moveEnd","moveStart","selection","arr","ContentEditable","getRangeAt","cloneRange","startContainer","startOffset","deleteContents","preWrapper","postWrapper","childNode","lastOfPre","fragment","createDocumentFragment","firstChild","insertNode","setStartAfter","wrapperNode","endContainer","node","normalize","$node","iframePosition","contentWindow","CKEditor","domEvent","isBrowser","debug","querySelector","div","getComputedStyle","currentStyle","whiteSpace","wordWrap","visibility","properties","forEach","isFirefox","overflowY","overflow","textContent","span","coordinates","offsetTop","offsetLeft","backgroundColor","mozInnerScreenX","708","_vm","_h","$createElement","_c","_self","staticClass","attrs","hide-actions","staticRenderFns","_withStripped"],"mappings":"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","file":"o/front-end-super-gate/js/11.c0f2f7e6cba22213cf0e.js","sourcesContent":["webpackJsonp([11],{\n\n/***/ 224:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar Component = __webpack_require__(138)(\n  /* script */\n  __webpack_require__(691),\n  /* template */\n  __webpack_require__(708),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/home/hoanganh/Pictures/FrontEnd_Opencps2.1/frontend-opencps-v2.1/onegate_21_fe/src/components/Comment.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] Comment.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (false) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-c8f36406\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-c8f36406\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ 526:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(651), __esModule: true };\n\n/***/ }),\n\n/***/ 651:\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(653);\nmodule.exports = __webpack_require__(30).Object.keys;\n\n\n/***/ }),\n\n/***/ 652:\n/***/ (function(module, exports, __webpack_require__) {\n\n// most Object methods by ES6 should accept primitives\nvar $export = __webpack_require__(51);\nvar core = __webpack_require__(30);\nvar fails = __webpack_require__(95);\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n/***/ }),\n\n/***/ 653:\n/***/ (function(module, exports, __webpack_require__) {\n\n// 19.1.2.14 Object.keys(O)\nvar toObject = __webpack_require__(98);\nvar $keys = __webpack_require__(139);\n\n__webpack_require__(652)('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n/***/ }),\n\n/***/ 691:\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__ = __webpack_require__(526);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete__ = __webpack_require__(704);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_comments__ = __webpack_require__(703);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_comments___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery_comments__);\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: ['classPK', 'className'],\n  data: function data() {\n    return {\n      usersComment: [],\n      comment: [],\n      argShowMore: true,\n\n      checkOpinion: true\n    };\n  },\n  computed: {\n    loading: function loading() {\n      return this.$store.getters.loading;\n    },\n    initData: function initData() {\n      return this.$store.getters.loadingInitData;\n    }\n  },\n  watch: {\n    classPK: function classPK(val) {\n      var vm = this;\n      vm.$store.dispatch('loadUsersComment', val).then(function (result) {\n        vm.usersComment = result;\n        vm.initComment();\n      }).catch(function (reject) {\n        vm.initComment();\n      });\n    }\n  },\n  created: function created() {},\n  mounted: function mounted() {},\n\n  methods: {\n    runComment: function runComment() {\n      var vm = this;\n      if (vm.classPK) {\n        vm.initComment();\n      }\n    },\n\n    initComment: function initComment() {\n      var vm = this;\n      __WEBPACK_IMPORTED_MODULE_1_jquery___default()('#comments-container-el').comments({\n        profilePictureURL: 'https://png.icons8.com/material/50/000000/guest-male.png',\n        textareaRows: 2,\n        enableAttachments: true,\n        enableHashtags: true,\n        enablePinging: true,\n        postCommentOnEnter: false,\n        forceResponsive: false,\n        readOnly: false,\n        textareaPlaceholderText: 'Thêm bình luận mới',\n        newestText: 'Mới nhất',\n        oldestText: 'Cũ nhất',\n        popularText: 'Phổ biến',\n        attachmentsText: 'Đính kèm',\n        sendText: 'Gửi',\n        replyText: 'Trả lời',\n        editText: 'Sửa',\n        editedText: 'Đã sửa',\n        youText: 'Bạn',\n        saveText: 'Ghi lại',\n        deleteText: 'Xóa',\n\n        hideRepliesText: 'Ẩn câu trả lời',\n        noCommentsText: 'Không có bình luận nào',\n        noAttachmentsText: 'Không có tệp đính kèm',\n        attachmentDropText: 'Kéo thả tệp đính kèm',\n        fieldMappings: {\n          id: 'commentId',\n          parent: 'parent',\n          userId: 'userId',\n          created: 'createdDate',\n          modified: 'modifiedDate',\n          content: 'content',\n          fileURL: 'fileUrl',\n          fileMimeType: 'fileType',\n          fileName: 'fileName',\n          pings: 'pings',\n          creator: 'userId',\n          fullname: 'fullname',\n          profileURL: 'profileUrl',\n          profilePictureURL: 'pictureUrl',\n          isNew: 'isNew',\n          createdByAdmin: 'isAdmin',\n          createdByCurrentUser: 'createdByCurrentUser',\n          upvoteCount: 'upvoteCount',\n          userHasUpvoted: 'userHasUpvoted',\n          email: 'email',\n          opinion: 'opinion',\n          className: 'className',\n          classPK: 'classPK'\n        },\n        timeFormatter: function timeFormatter(time) {\n          if (time) {\n            var value = new Date(time);\n            value.setHours(value.getHours() - 7);\n            return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + ' ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');\n          } else {\n            return '';\n          }\n        },\n        getUsers: function getUsers(onSuccess, onError) {\n          onSuccess(vm.usersComment);\n        },\n        getComments: function getComments(onSuccess, onError) {\n          var dataGet = {\n            'classPK': vm.classPK,\n            'className': vm.className\n          };\n          var promise = vm.$store.dispatch('loadCommentItems', dataGet);\n          promise.then(function (result) {\n            var data = [];\n            __WEBPACK_IMPORTED_MODULE_1_jquery___default.a.each(result, function (index, item) {\n              vm.comment = item;\n              vm.formatComment(vm.comment);\n              data.push(vm.comment);\n            });\n            onSuccess(data);\n          }).catch(function (reject) {\n            onSuccess([]);\n            onError();\n          });\n        },\n        postComment: function postComment(data, onSuccess, onError) {\n          data.classPK = vm.classPK;\n          data.className = vm.className;\n          data.opinion = document.getElementById('opinion').checked;\n          vm.$store.dispatch('postComment', data).then(function (result) {\n            if (result.opinion) {\n              __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.opinion').hide();\n            }\n            document.getElementById('opinion').checked = false;\n            vm.comment = result;\n            vm.formatComment(vm.comment);\n            onSuccess(vm.comment);\n          });\n        },\n        putComment: function putComment(data, onSuccess, onError) {\n          data.classPK = vm.classPK;\n          data.className = vm.className;\n          vm.$store.dispatch('putComment', data).then(function (result) {\n            vm.comment = result;\n            vm.formatComment(vm.comment);\n            onSuccess(vm.comment);\n          });\n        },\n        deleteComment: function deleteComment(data, onSuccess, onError) {\n          data.classPK = vm.classPK;\n          data.className = vm.className;\n          vm.$store.dispatch('deleteComment', data).then(function (result) {\n            onSuccess();\n          }).catch(function (reject) {\n            onError();\n            console.log(reject);\n          });\n        },\n        upvoteComment: function upvoteComment(data, onSuccess, onError) {\n          data.classPK = vm.classPK;\n          data.className = vm.className;\n          vm.$store.dispatch('upvoteComment', data).then(function (result) {\n            vm.comment = result;\n            vm.formatComment(vm.comment);\n            onSuccess(vm.comment);\n          }).catch(function (reject) {\n            console.log(reject);\n          });\n        },\n        uploadAttachments: function uploadAttachments(comments, onSuccess, onError) {\n          var responses = 0;\n          var successfulUploads = [];\n          var serverResponded = function serverResponded() {\n            responses++;\n            if (responses === comments.length) {\n              if (successfulUploads.length === 0) {\n                onError();\n              } else {\n                onSuccess(successfulUploads);\n              }\n            }\n          };\n          __WEBPACK_IMPORTED_MODULE_1_jquery___default()(comments).each(function (index, comment) {\n            var formData = new FormData();\n            __WEBPACK_IMPORTED_MODULE_1_jquery___default()(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default()(comment)).each(function (index, key) {\n              var value = comment[key];\n              if (value) {\n                formData.append(key, value);\n              }\n            });\n            formData.append('file', comment.file);\n            formData.append('className', vm.className);\n            formData.append('classPK', vm.classPK);\n            formData.append('parent', comment.parent != null ? comment.parent : 0);\n            formData.append('fileName', comment.file.name);\n            formData.append('fileType', comment.file.type);\n            formData.append('fileSize', comment.file.size);\n            formData.append('pings', comment.pings.join());\n            formData.append('opinion', document.getElementById('opinion').checked);\n\n            formData.append('email', vm.initData.user.userEmail);\n            formData.append('fullname', vm.initData.user.userName);\n            formData.append('opinion', document.getElementById('opinion').checked);\n            __WEBPACK_IMPORTED_MODULE_1_jquery___default.a.ajax({\n              url: vm.initData.commentApi + '/uploads',\n              dataType: 'json',\n              type: 'POST',\n              headers: {\n                'groupId': vm.initData.groupId\n              },\n              data: formData,\n              cache: false,\n              contentType: false,\n              processData: false,\n              success: function success(comment) {\n                if (comment.opinion) {\n                  __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.opinion').hide();\n                }\n                document.getElementById('opinion').checked = false;\n                vm.formatComment(comment);\n                successfulUploads.push(vm.comment);\n                serverResponded();\n                if (comment.opinion) {\n                  __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.opinion').hide();\n                }\n                document.getElementById('opinion').checked = false;\n              },\n              error: function error(xhr, data) {\n                serverResponded();\n              }\n            });\n          });\n        }\n      });\n    },\n    formatComment: function formatComment(comment) {\n      var vm = this;\n      vm.comment = comment;\n      if (comment.parent === 0) {\n        vm.comment.parent = null;\n      }\n      if (comment.fileName === '') {\n        vm.comment.fileName = null;\n      }\n      if (comment.fileType === '') {\n        vm.comment.fileType = null;\n      }\n      if (comment.fileUrl === '') {\n        vm.comment.fileUrl = null;\n      }\n      if (comment.pictureUrl === '') {\n        vm.comment.pictureUrl = 'https://png.icons8.com/material/50/000000/guest-male.png';\n      }\n      vm.comment.fullname = comment.fullname;\n      vm.comment.opinion = comment.opinion;\n      vm.comment.pings = comment.pings.toString().split(',');\n      vm.comment.createdDate = vm.comment.createDate;\n      vm.comment.modifiedDate = vm.comment.modifiedDate;\n    },\n    dateTimeView: function dateTimeView(arg) {\n      if (arg) {\n        var value = new Date(arg);\n        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + ' ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');\n      } else {\n        return '';\n      }\n    }\n  },\n  filters: {\n    dateTimeView: function dateTimeView(arg) {\n      if (arg) {\n        var value = new Date(arg);\n        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + '  ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');\n      } else {\n        return '';\n      }\n    }\n  }\n});\n\n/***/ }),\n\n/***/ 703:\n/***/ (function(module, exports, __webpack_require__) {\n\n/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-disable */\n\n(function (factory) {\n    if (true) {\n        // AMD. Register as an anonymous module.\n        !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(36)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = function(root, jQuery) {\n            if (jQuery === undefined) {\n                // require('jQuery') returns a factory that requires window to\n                // build a jQuery instance, we normalize how we use modules\n                // that require this pattern but the window provided is a noop\n                // if it's defined (how jquery works)\n                if (typeof window !== 'undefined') {\n                    jQuery = require('jquery');\n                }\n                else {\n                    jQuery = require('jquery')(root);\n                }\n            }\n            factory(jQuery);\n            return jQuery;\n        };\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function($) {\n\n    var Comments = {\n        // Instance variables\n        $el: null,\n        commentsById: {},\n        usersById: {},\n        dataFetched: false,\n        currentSortKey: '',\n        options: {},\n        events: {\n            // Close dropdowns\n            'click': 'closeDropdowns',\n            // Save comment on keydown\n            'keydown [contenteditable]' : 'saveOnKeydown',\n            // Listening changes in contenteditable fields (due to input event not working with IE)\n            'focus [contenteditable]' : 'saveEditableContent',\n            'keyup [contenteditable]' : 'checkEditableContentForChange',\n            'paste [contenteditable]' : 'checkEditableContentForChange',\n            'input [contenteditable]' : 'checkEditableContentForChange',\n            'blur [contenteditable]' : 'checkEditableContentForChange',\n            // Navigation\n            'click .navigation li[data-sort-key]' : 'navigationElementClicked',\n            'click .navigation li.title' : 'toggleNavigationDropdown',\n            // Main comenting field\n            'click .commenting-field.main .textarea': 'showMainCommentingField',\n            'click .commenting-field.main .close' : 'hideMainCommentingField',\n            // All commenting fields\n            'click .commenting-field .textarea' : 'increaseTextareaHeight',\n            'change .commenting-field .textarea' : 'increaseTextareaHeight textareaContentChanged',\n            'click .commenting-field:not(.main) .close' : 'removeCommentingField',\n            // Edit mode actions\n            'click .commenting-field .send.enabled' : 'postComment',\n            'click .commenting-field .update.enabled' : 'putComment',\n            'click .commenting-field .delete.enabled' : 'deleteComment',\n            'change .commenting-field .upload.enabled input[type=\"file\"]' : 'fileInputChanged',\n            // Other actions\n            'click li.comment button.upvote' : 'upvoteComment',\n            'click li.comment button.delete.enabled' : 'deleteComment',\n            'click li.comment .hashtag' : 'hashtagClicked',\n            'click li.comment .ping' : 'pingClicked',\n            // Other\n            'click li.comment ul.child-comments .toggle-all': 'toggleReplies',\n            'click li.comment button.reply': 'replyButtonClicked',\n            'click li.comment button.edit': 'editButtonClicked',\n            // Drag & dropping attachments\n            'dragenter' : 'showDroppableOverlay',\n            'dragenter .droppable-overlay' : 'handleDragEnter',\n            'dragleave .droppable-overlay' : 'handleDragLeaveForOverlay',\n            'dragenter .droppable-overlay .droppable' : 'handleDragEnter',\n            'dragleave .droppable-overlay .droppable' : 'handleDragLeaveForDroppable',\n            'dragover .droppable-overlay' : 'handleDragOverForOverlay',\n            'drop .droppable-overlay' : 'handleDrop',\n            // Prevent propagating the click event into buttons under the autocomplete dropdown\n            'click .dropdown.autocomplete': 'stopPropagation',\n            'mousedown .dropdown.autocomplete': 'stopPropagation',\n            'touchstart .dropdown.autocomplete': 'stopPropagation',\n        },\n        // Default options\n\n        getDefaultOptions: function() {\n            return {\n                // User        \n                profilePictureURL: '',\n                currentUserIsAdmin: false,\n                currentUserId: null,\n                // Font awesome icon overrides        \n                spinnerIconURL: '',\n                upvoteIconURL: '',\n                replyIconURL: '',\n                uploadIconURL: '',\n                attachmentIconURL: '',\n                fileIconURL: '',\n                noCommentsIconURL: '',\n                noCommentsImptIconURL: '',\n                // Strings to be formatted (for example localization)     \n                textareaPlaceholderText: 'Thêm bình luận mới',\n                newestText: 'Mới nhất',\n                oldestText: 'Cũ nhất',\n                importantCmtText: 'Ý kiến chính thức',\n                popularText: 'Phổ biến',\n                attachmentsText: 'Tệp đính kèm',\n                sendText: 'Gửi',\n                replyText: 'Trả lời',\n                editText: 'Sửa',\n                editedText: 'Đã sửa',\n                youText: 'You',\n                saveText: 'Ghi lại',\n                deleteText: 'Xoá',\n                newText: 'Mới',\n                viewAllRepliesText: 'Xem tất cả __replyCount__ trả lời',\n                hideRepliesText: 'Hide replies',\n                noCommentsText: 'Không có bình luận',\n                noCommentsImportantText: 'Không có ý kiến chính thức',\n                noAttachmentsText: 'Không có tệp đính kèm',\n                attachmentDropText: 'Kéo thả tệp để tải lên',\n                textFormatter: function(text) {return text},\n                \n                // Functionalities        \n                enableReplying: true,\n                enableEditing: true,\n                enableUpvoting: true,\n                enableDeleting: true,\n                enableAttachments: false,\n                enableHashtags: false,\n                enablePinging: false,\n                enableDeletingCommentWithReplies: false,\n                enableNavigation: true,\n                postCommentOnEnter: false,\n                forceResponsive: false,\n                readOnly: false,\n                defaultNavigationSortKey: 'newest',\n                // Colors     \n                highlightColor: '#2793e6',\n                deleteButtonColor: '#C9302C',\n                scrollContainer: this.$el,\n                roundProfilePictures: false,\n                textareaRows: 2,\n                textareaRowsOnFocus: 2,\n                textareaMaxRows: 5,\n                maxRepliesVisible: 2,\n                \n                fieldMappings: {\n                    id: 'id',\n                    parent: 'parent',\n                    created: 'createdDate',\n                    modified: 'modifiedDate',\n                    content: 'content',\n                    file: 'file',\n                    fileURL: 'file_url',\n                    fileMimeType: 'file_mime_type',\n                    pings: 'pings',\n                    creator: 'creator',\n                    fullname: 'fullname',\n                    profileURL: 'profile_url',\n                    profilePictureURL: 'profile_picture_url',\n                    isNew: 'is_new',\n                    createdByAdmin: 'created_by_admin',\n                    createdByCurrentUser: 'created_by_current_user',\n                    upvoteCount: 'upvote_count',\n                    userHasUpvoted: 'user_has_upvoted'\n                },\n                \n                getUsers: function(success, error) {success([])},\n                getComments: function(success, error) {success([])},\n                postComment: function(commentJSON, success, error) {success(commentJSON)},\n                putComment: function(commentJSON, success, error) {success(commentJSON)},\n                deleteComment: function(commentJSON, success, error) {success()},\n                upvoteComment: function(commentJSON, success, error) {success(commentJSON)},\n                hashtagClicked: function(hashtag) {},\n                pingClicked: function(userId) {},\n                uploadAttachments: function(commentArray, success, error) {success(commentArray)},\n                refresh: function() {},\n                timeFormatter: function(time) {return new Date(time).toLocaleDateString()},\n                appendNewComments: function(commentJSONs, success, error) {success([])}\n            }\n        },\n\n        // Initialization\n        init: function(options, el) {\n            this.$el = $(el);\n            this.$el.addClass('jquery-comments');\n            this.undelegateEvents();\n            this.delegateEvents();\n            // Detect mobile devices\n            (function(a){(jQuery.browser=jQuery.browser||{}).mobile=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))})(navigator.userAgent||navigator.vendor||window.opera);\n            if($.browser.mobile) this.$el.addClass('mobile');\n            // Init options\n            this.options = $.extend(true, {}, this.getDefaultOptions(), options);;\n            // Read-only mode\n            if(this.options.readOnly) this.$el.addClass('read-only');\n            // Set initial sort key\n            this.currentSortKey = this.options.defaultNavigationSortKey;\n            // Create CSS declarations for highlight color\n            this.createCssDeclarations();\n            // Fetching data and rendering\n            this.fetchDataAndRender();\n        },\n\n        delegateEvents: function() {\n            this.bindEvents(false);\n        },\n\n        undelegateEvents: function() {\n            this.bindEvents(true);\n        },\n\n        bindEvents: function(unbind) {\n                var bindFunction = unbind ? 'off' : 'on';\n                for (var key in this.events) {\n                        var eventName = key.split(' ')[0];\n                        var selector = key.split(' ').slice(1).join(' ');\n                        var methodNames = this.events[key].split(' ');\n\n                        for(var index in methodNames) {\n                                if(methodNames.hasOwnProperty(index)) {\n                                        var method = this[methodNames[index]];\n\n                                        // Keep the context\n                                        method = $.proxy(method, this);\n\n                                        if (selector == '') {\n                                                this.$el[bindFunction](eventName, method);\n                                        } else {\n                                                this.$el[bindFunction](eventName, selector, method);\n                                        }\n                                }\n                        }\n                }\n        },\n\n        // Basic functionalities\n        fetchDataAndRender: function () {\n            var self = this;\n            setTimeout(function(){self.appendNewComments()},30000);\n            this.commentsById = {};\n            this.usersById = {};\n            this.$el.empty();\n            this.createHTML();\n            // Render after data has been fetched\n            var dataFetched = this.after(this.options.enablePinging ? 2 : 1, function() {\n                self.dataFetched = true;\n                self.render();\n            });\n\n            // Comments\n            var commentsFetched = function(commentsArray) {\n                // Convert comments to custom data model\n                var commentModels = commentsArray.map(function(commentsJSON){\n                    return self.createCommentModel(commentsJSON)\n                });\n                // Sort comments by date (oldest first so that they can be appended to the data model\n                // without caring dependencies)\n                self.sortComments(commentModels, 'oldest');\n                $(commentModels).each(function(index, commentModel) {\n                        self.addCommentToDataModel(commentModel);\n                });\n                dataFetched();\n            };\n            this.options.getComments(commentsFetched, dataFetched);\n\n            // Users\n            if(this.options.enablePinging) {\n                var usersFetched = function(userArray) {\n                    $(userArray).each(function(index, user) {\n                        self.usersById[user.id] = user;\n                    });\n                    dataFetched();\n                }\n                this.options.getUsers(usersFetched, dataFetched);\n            };\n        },\n\n        fetchNext: function() {\n            var self = this;\n            // Loading indicator\n            var spinner = this.createSpinner();\n            this.$el.find('ul#comment-list').append(spinner);\n            var success = function (commentModels) {\n                $(commentModels).each(function(index, commentModel) {\n                    self.createComment(commentModel);\n                });\n                spinner.remove();\n            }\n\n            var error = function() {\n                spinner.remove();\n            }\n            this.options.getComments(success, error);\n        },\n\n        createCommentModel: function(commentJSON) {\n            var commentModel = this.applyInternalMappings(commentJSON);\n            commentModel.childs = [];\n            this.commentsById[commentModel.id] = commentModel;\n            return commentModel;\n        },\n\n        addCommentToDataModel: function(commentModel) {\n            if(!(commentModel.id in this.commentsById)) {\n                this.commentsById[commentModel.id] = commentModel;\n\n                // Update child array of the parent (append childs to the array of outer most parent)\n                if(commentModel.parent) {\n                    var outermostParent = this.getOutermostParent(commentModel.parent);\n                    outermostParent.childs.push(commentModel.id);\n                }\n            }\n        },\n\n        updateCommentModel: function(commentModel) {\n            $.extend(this.commentsById[commentModel.id], commentModel);\n        },\n\n        render: function() {\n            var self = this;\n            // Prevent re-rendering if data hasn't been fetched\n            if(!this.dataFetched) return;\n            // Show active container\n            this.showActiveContainer();\n            // Create comments\n            this.createComments();\n            // Create attachments if enabled\n            if(this.options.enableAttachments) this.createAttachments(); \n            // Create important comment\n            this.createImportantComments();\n            // Remove spinner\n            this.$el.find('> .spinner').remove();\n            this.options.refresh();\n        },\n\n        showActiveContainer: function() {\n            var activeNavigationEl = this.$el.find('.navigation li[data-container-name].active');\n            var containerName = activeNavigationEl.data('container-name');\n            var containerEl = this.$el.find('[data-container=\"' + containerName + '\"]');\n            containerEl.siblings('[data-container]').hide();\n            containerEl.show();\n        },\n\n        createComments: function() {\n            var self = this;\n            // Create the list element before appending to DOM in order to reach better performance\n            this.$el.find('#comment-list').remove();\n            var commentList = $('<ul/>', {\n                id: 'comment-list',\n                'class': 'main'\n            });\n\n            // Divide commments into main level comments and replies\n            var mainLevelComments = [];\n            var replies = [];\n\n            $(this.getComments()).each(function(index, commentModel) {\n                if(commentModel.parent == null) {\n                    mainLevelComments.push(commentModel);\n                } else {\n                    replies.push(commentModel);\n                }\n            });\n\n            // Append main level comments\n            this.sortComments(mainLevelComments, this.currentSortKey);\n            mainLevelComments.reverse();    // Reverse the order as they are prepended to DOM\n            $(mainLevelComments).each(function(index, commentModel) {\n                self.addComment(commentModel, commentList);\n            });\n\n            // Append replies in chronological order\n            this.sortComments(replies, 'oldest');\n            $(replies).each(function(index, commentModel) {\n                self.addComment(commentModel, commentList);\n            });\n\n            // Appned list to DOM\n            this.$el.find('[data-container=\"comments\"]').prepend(commentList);\n        },\n\n        createAttachments: function() {\n            var self = this;\n            // Create the list element before appending to DOM in order to reach better performance\n            this.$el.find('#attachment-list').remove();\n            var attachmentList = $('<ul/>', {\n                id: 'attachment-list',\n                'class': 'main'\n            });\n\n            var attachments = this.getAttachments();\n            this.sortComments(attachments, 'newest');\n            attachments.reverse();    // Reverse the order as they are prepended to DOM\n            $(attachments).each(function(index, commentModel) {\n                self.addAttachment(commentModel, attachmentList);\n            });\n\n            // Appned list to DOM\n            this.$el.find('[data-container=\"attachments\"]').prepend(attachmentList);\n        },\n        createImportantComments: function() {\n            var self = this;\n            // Create the list element before appending to DOM in order to reach better performance\n            this.$el.find('#importantCmt-list').remove();\n            var importantCmtList = $('<ul/>', {\n                    id: 'importantCmt-list',\n                    'class': 'main'\n            });\n\n            var importantCmt = this.getImportantCmt();\n\n            this.sortComments(importantCmt, 'newest');\n            importantCmt.reverse();    // Reverse the order as they are prepended to DOM\n            $(importantCmt).each(function(index, commentModel) {\n                    self.addImportantCmt(commentModel, importantCmtList);\n            });\n\n            // Appned list to DOM\n            this.$el.find('[data-container=\"importantCmt\"]').prepend(importantCmtList);\n        },\n        addComment: function(commentModel, commentList) {\n            commentList = commentList || this.$el.find('#comment-list');\n            var commentEl = this.createCommentElement(commentModel);\n\n            // Case: reply\n            if(commentModel.parent) {\n                var directParentEl = commentList.find('.comment[data-id=\"'+commentModel.parent+'\"]');\n\n                // Re-render action bar of direct parent element\n                this.reRenderCommentActionBar(commentModel.parent);\n\n                // Force replies into one level only\n                var outerMostParent = directParentEl.parents('.comment').last();\n                if(outerMostParent.length == 0) outerMostParent = directParentEl;\n\n                // Append element to DOM\n                var childCommentsEl = outerMostParent.find('.child-comments');\n                var commentingField = childCommentsEl.find('.commenting-field');\n                if(commentingField.length) {\n                    commentingField.before(commentEl)\n                } else {\n                    childCommentsEl.append(commentEl);\n                }\n\n                // Update toggle all -button\n                this.updateToggleAllButton(outerMostParent);\n\n            // Case: main level comment\n            } else {\n                commentList.prepend(commentEl);\n            }\n        },\n        addAttachment: function(commentModel, commentList) {\n            commentList = commentList || this.$el.find('#attachment-list');\n            var commentEl = this.createCommentElement(commentModel);\n            commentList.prepend(commentEl);\n        },\n        addImportantCmt: function(commentModel, commentList) {\n            commentList = commentList || this.$el.find('#importantCmt-list');\n            var commentEl = this.createCommentElement(commentModel);\n            commentList.prepend(commentEl);\n        },\n        removeComment: function(commentId) {\n            var self = this;\n            var commentModel = this.commentsById[commentId];\n\n            // Remove child comments recursively\n            var childComments = this.getChildComments(commentModel.id);\n            $(childComments).each(function(index, childComment) {\n                self.removeComment(childComment.id);\n            });\n\n            // Update the child array of outermost parent\n            if(commentModel.parent) {\n                var outermostParent = this.getOutermostParent(commentModel.parent);\n                var indexToRemove = outermostParent.childs.indexOf(commentModel.id);\n                outermostParent.childs.splice(indexToRemove, 1);\n            }\n\n            // Remove the comment from data model\n            delete this.commentsById[commentId];\n            var commentElements = this.$el.find('li.comment[data-id=\"'+commentId+'\"]');\n            var parentEl = commentElements.parents('li.comment').last();\n\n            // Remove the element\n            commentElements.remove();\n\n            // Update the toggle all button\n            this.updateToggleAllButton(parentEl);\n        },\n\n        uploadAttachments: function(files, commentingField) {\n            var self = this;\n            if(!commentingField) commentingField = this.$el.find('.commenting-field.main');\n            var isReply = !commentingField.hasClass('main');\n            var fileCount = files.length;\n\n            if(fileCount) {\n                var uploadButton = commentingField.find('.upload');\n                var textarea = commentingField.find('.textarea');\n\n                // Disable upload button and append spinners while request is pending\n                uploadButton.removeClass('enabled');\n                var attachmentListSpinner = this.createSpinner();\n                var commentListSpinner = this.createSpinner();\n                this.$el.find('ul#attachment-list').prepend(attachmentListSpinner);\n                if(isReply) {\n                    commentingField.before(commentListSpinner);\n                } else {\n                    this.$el.find('ul#comment-list').prepend(commentListSpinner);\n                }\n\n                var success = function(commentArray) {\n                    $(commentArray).each(function(index, commentJSON) {\n                        var commentModel = self.createCommentModel(commentJSON);\n                        self.addCommentToDataModel(commentModel);\n                        self.addComment(commentModel);\n                        self.addAttachment(commentModel);\n                    });\n\n                    // Close the commenting field if all the uploads were successfull\n                    // and there's no content besides the attachment\n                    if(commentArray.length == fileCount && self.getTextareaContent(textarea).length == 0) {\n                        commentingField.find('.close').trigger('click');\n                    }\n\n                    // Enable upload button and remove spinners\n                    uploadButton.addClass('enabled');\n                    commentListSpinner.remove();\n                    attachmentListSpinner.remove();\n                };\n\n                var error = function() {\n                    // Enable upload button and remove spinners\n                    uploadButton.addClass('enabled');\n                    commentListSpinner.remove();\n                    attachmentListSpinner.remove();\n                };\n\n                var commentArray = [];\n                $(files).each(function(index, file) {\n                    // Create comment JSON\n                    var commentJSON = self.createCommentJSON(textarea);\n                    commentJSON.id += '-' + index;\n                    commentJSON.content = '';\n                    commentJSON.file = file;\n                    commentJSON.fileURL = 'C:/fakepath/' + file.name;\n                    commentJSON.fileMimeType = file.type;\n                    // Reverse mapping\n                    commentJSON = self.applyExternalMappings(commentJSON);\n                    commentArray.push(commentJSON);\n                });\n\n                self.options.uploadAttachments(commentArray, success, error);\n            }\n\n            // Clear the input field\n            uploadButton.find('input').val('');\n        },\n\n        updateToggleAllButton: function(parentEl) {\n            // Don't hide replies if maxRepliesVisible is null or undefined\n            if (this.options.maxRepliesVisible == null) return;\n\n            var childCommentsEl = parentEl.find('.child-comments');\n            var childComments = childCommentsEl.find('.comment');\n            var toggleAllButton = childCommentsEl.find('li.toggle-all');\n            childComments.removeClass('hidden-reply');\n\n            // Select replies to be hidden\n            if (this.options.maxRepliesVisible === 0) {\n                var hiddenReplies = childComments;\n            } else {\n                var hiddenReplies = childComments.slice(0, -this.options.maxRepliesVisible);\n            }\n\n            // Add identifying class for hidden replies so they can be toggled\n            hiddenReplies.addClass('hidden-reply');\n\n            // Show all replies if replies are expanded\n            if(toggleAllButton.find('span.text').text() == this.options.textFormatter(this.options.hideRepliesText)) {\n                hiddenReplies.addClass('visible');\n            }\n\n            // Make sure that toggle all button is present\n            if(childComments.length > this.options.maxRepliesVisible) {\n\n                // Append button to toggle all replies if necessary\n                if(!toggleAllButton.length) {\n\n                    toggleAllButton = $('<li/>', {\n                        'class': 'toggle-all highlight-font-bold'\n                    });\n                    var toggleAllButtonText = $('<span/>', {\n                        'class': 'text'\n                    });\n                    var caret = $('<span/>', {\n                        'class': 'caret'\n                    });\n\n                    // Append toggle button to DOM\n                    toggleAllButton.append(toggleAllButtonText).append(caret);\n                    childCommentsEl.prepend(toggleAllButton);\n                }\n\n                // Update the text of toggle all -button\n                this.setToggleAllButtonText(toggleAllButton, false);\n            // Make sure that toggle all button is not present\n            } else {\n                toggleAllButton.remove();\n            }\n        },\n\n        sortComments: function (comments, sortKey) {\n            var self = this;\n            // Sort by popularity\n            if(sortKey == 'popularity') {\n                comments.sort(function(commentA, commentB) {\n                    var pointsOfA = commentA.childs.length;\n                    var pointsOfB = commentB.childs.length;\n\n                    if(self.options.enableUpvoting) {\n                        pointsOfA += commentA.upvoteCount;\n                        pointsOfB += commentB.upvoteCount;\n                    }\n\n                    if(pointsOfB != pointsOfA) {\n                        return pointsOfB - pointsOfA;\n\n                    } else {\n                        // Return newer if popularity is the same\n                        var createdA = new Date(commentA.created).getTime();\n                        var createdB = new Date(commentB.created).getTime();\n                        return createdB - createdA;\n                    }\n                });\n            // Sort by date\n            } else {\n                comments.sort(function(commentA, commentB) {\n                    var createdA = (new Date(commentA.created)).getTime();\n                    var createdB = (new Date(commentB.created)).getTime();\n                    if(sortKey == 'oldest') {\n                        return createdA - createdB;\n                    } else {\n                        return createdB - createdA;\n                    }\n                });\n            }\n        },\n\n        sortUsers: function(users) {\n            users.sort(function(a,b) {\n                var nameA = a.fullname.toLowerCase().trim();\n                var nameB = b.fullname.toLowerCase().trim();\n                if(nameA < nameB) return -1;\n                if(nameA > nameB) return 1;\n                return 0;\n            });\n        },\n\n        sortAndReArrangeComments: function(sortKey) {\n            var commentList = this.$el.find('#comment-list');\n\n            // Get main level comments\n            var mainLevelComments = this.getComments().filter(function(commentModel){return !commentModel.parent});\n            this.sortComments(mainLevelComments, sortKey);\n\n            // Rearrange the main level comments\n            $(mainLevelComments).each(function(index, commentModel) {\n                    var commentEl = commentList.find('> li.comment[data-id='+commentModel.id+']');\n                    commentList.append(commentEl);\n            });\n        },\n\n        showActiveSort: function() {\n            var activeElements = this.$el.find('.navigation li[data-sort-key=\"' + this.currentSortKey + '\"]');\n\n            // Indicate active sort\n            this.$el.find('.navigation li').removeClass('active');\n            activeElements.addClass('active');\n\n            // Update title for dropdown\n            var titleEl = this.$el.find('.navigation .title');\n            if(this.currentSortKey != 'attachments') {\n                titleEl.addClass('active');\n                titleEl.find('header').html(activeElements.first().html());\n            } else {\n                var defaultDropdownEl = this.$el.find('.navigation ul.dropdown').children().first();\n                titleEl.find('header').html(defaultDropdownEl.html());\n            } \n\n            // Show active container\n            this.showActiveContainer();\n        },\n\n        forceResponsive: function() {\n            this.$el.addClass('responsive');\n        },\n\n        // Event handlers\n\n        closeDropdowns: function() {\n            this.$el.find('.dropdown').hide();\n        },\n\n        saveOnKeydown: function(ev) {\n            // Save comment on cmd/ctrl + enter\n            if(ev.keyCode == 13) {\n                var metaKey = ev.metaKey || ev.ctrlKey;\n                if(this.options.postCommentOnEnter || metaKey) {                \n                    var el = $(ev.currentTarget);\n                    el.siblings('.control-row').find('.save').trigger('click');\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                }\n            }\n        },\n\n        saveEditableContent: function(ev) {\n            var el = $(ev.currentTarget);\n            el.data('before', el.html());\n        },\n\n        checkEditableContentForChange: function(ev) {\n            var el = $(ev.currentTarget);\n            if (el.data('before') != el.html()) {\n                el.data('before', el.html());\n                el.trigger('change');\n            }\n        },\n\n        navigationElementClicked: function(ev) {\n            var navigationEl = $(ev.currentTarget);\n            var sortKey = navigationEl.data().sortKey;\n\n            // Sort the comments if necessary\n            if(sortKey != 'attachments') {\n                    this.sortAndReArrangeComments(sortKey);\n            }\n            // Save the current sort key\n            this.currentSortKey = sortKey;\n            this.showActiveSort();\n        },\n\n        toggleNavigationDropdown: function(ev) {\n            // Prevent closing immediately\n            ev.stopPropagation();\n\n            var dropdown = $(ev.currentTarget).find('~ .dropdown');\n            dropdown.toggle();\n        },\n\n        showMainCommentingField: function(ev) {\n            var mainTextarea = $(ev.currentTarget);\n            mainTextarea.siblings('.control-row').show();\n            mainTextarea.parent().find('.close').show();\n            mainTextarea.focus();\n        },\n\n        hideMainCommentingField: function(ev) {\n            var closeButton = $(ev.currentTarget);\n            var mainTextarea = this.$el.find('.commenting-field.main .textarea');\n            var mainControlRow = this.$el.find('.commenting-field.main .control-row');\n\n            this.clearTextarea(mainTextarea);\n            this.adjustTextareaHeight(mainTextarea, false);\n\n            mainControlRow.hide();\n            closeButton.hide();\n            mainTextarea.blur();\n        },\n\n        increaseTextareaHeight: function(ev) {\n            var textarea = $(ev.currentTarget);\n            this.adjustTextareaHeight(textarea, true);\n        },\n\n        textareaContentChanged: function(ev) {\n            var textarea = $(ev.currentTarget);\n            var saveButton = textarea.siblings('.control-row').find('.save');\n\n            // Update parent id if reply-to tag was removed\n            if(!textarea.find('.reply-to.tag').length) {\n                var commentId = textarea.attr('data-comment');\n\n                // Case: editing comment\n                if(commentId) {\n                    var parentComments = textarea.parents('li.comment');\n                    if(parentComments.length > 1) {\n                        var parentId = parentComments.last().data('id');\n                        textarea.attr('data-parent', parentId);\n                    }\n\n                // Case: new comment\n                } else {\n                    var parentId = textarea.parents('li.comment').last().data('id');\n                    textarea.attr('data-parent', parentId);\n                }\n            }\n\n            // Move close button if scrollbar is visible\n            var commentingField = textarea.parents('.commenting-field').first();\n            if(textarea[0].scrollHeight > textarea.outerHeight()) {\n                commentingField.addClass('scrollable');\n            } else {\n                commentingField.removeClass('scrollable');\n            }\n\n            // Check if content or parent has changed if editing\n            var contentOrParentChangedIfEditing = true;\n            var content = this.getTextareaContent(textarea, true);\n            if(commentId = textarea.attr('data-comment')) {\n                var contentChanged = content != this.commentsById[commentId].content;\n                var parentFromModel;\n                if(this.commentsById[commentId].parent) {\n                    parentFromModel = this.commentsById[commentId].parent.toString();\n                }\n                var parentChanged = textarea.attr('data-parent') != parentFromModel;\n                contentOrParentChangedIfEditing = contentChanged || parentChanged;\n            }\n\n            // Check whether save button needs to be enabled\n            if(content.length && contentOrParentChangedIfEditing) {\n                saveButton.addClass('enabled');\n            } else {\n                saveButton.removeClass('enabled');\n            }\n        },\n\n        removeCommentingField: function(ev) {\n            var closeButton = $(ev.currentTarget);\n\n            // Remove edit class from comment if user was editing the comment\n            var textarea = closeButton.siblings('.textarea');\n            if(textarea.attr('data-comment')) {\n                closeButton.parents('li.comment').first().removeClass('edit');\n            }\n\n            // Remove the field\n            var commentingField = closeButton.parents('.commenting-field').first();\n            commentingField.remove();\n        },\n\n        appendNewComments: function() {\n            var self = this;\n            console.log($(self.$el.context), $(self.$el.context).length);\n            if ($(self.$el.context).length == 0) {\n                clearTimeout(myVar);\n                return;\n            }\n            var commentJSONs = this.getComments();\n\n            var success = function(commentsNew, commentsEdit) {\n                for (var c in commentsNew) {\n                    self.createComment(commentsNew[c]);\n                }\n                \n                for (var cmt in commentsEdit) {\n                    var commentModel = self.createCommentModel(commentsEdit[cmt]);\n                    self.updateCommentModel(commentModel);\n                    self.reRenderComment(commentModel.id);\n                }\n            };\n\n            var error = function() {\n                console.log('jquery comment append new error');\n            };\n            var myVar = setTimeout(function(){self.appendNewComments()},30000);\n            this.options.appendNewComments(commentJSONs, success, error);\n        },\n            \n        postComment: function(ev) {\n            var self = this;\n            var sendButton = $(ev.currentTarget);\n            var commentingField = sendButton.parents('.commenting-field').first();\n            var textarea = commentingField.find('.textarea');\n\n            // Disable send button while request is pending\n            sendButton.removeClass('enabled');\n\n            // Create comment JSON\n            var commentJSON = this.createCommentJSON(textarea);\n\n            // Reverse mapping\n            commentJSON = this.applyExternalMappings(commentJSON);\n\n            var success = function(commentJSON) {\n                self.currentSortKey = 'newest'\n                self.showActiveSort()\n                self.createComment(commentJSON);\n                commentingField.find('.close').trigger('click');\n            };\n\n            var error = function() {\n                sendButton.addClass('enabled');\n            };\n\n            this.options.postComment(commentJSON, success, error);\n        },\n\n        createComment: function(commentJSON) {\n            var commentModel = this.createCommentModel(commentJSON);\n            this.addCommentToDataModel(commentModel);\n            this.addComment(commentModel);\n            if (commentModel.opinion == true) {\n                this.addImportantCmt(commentModel);\n            }\n        },\n\n        putComment: function(ev) {\n            var self = this;\n            var saveButton = $(ev.currentTarget);\n            var commentingField = saveButton.parents('.commenting-field').first();\n            var textarea = commentingField.find('.textarea');\n\n            // Disable send button while request is pending\n            saveButton.removeClass('enabled');\n\n            // Use a clone of the existing model and update the model after succesfull update\n            var commentJSON =  $.extend({}, this.commentsById[textarea.attr('data-comment')]);\n            $.extend(commentJSON, {\n                parent: textarea.attr('data-parent') || null,\n                content: this.getTextareaContent(textarea),\n                pings: this.getPings(textarea),\n                modified: new Date().getTime()\n            });\n\n            // Reverse mapping\n            commentJSON = this.applyExternalMappings(commentJSON);\n            \n            var success = function(commentJSON) {\n                // The outermost parent can not be changed by editing the comment so the childs array\n                // of parent does not require an update\n\n                var commentModel = self.createCommentModel(commentJSON);\n            \n                // Delete childs array from new comment model since it doesn't need an update\n                delete commentModel['childs'];\n                self.updateCommentModel(commentModel);\n                // Close the editing field\n                commentingField.find('.close').trigger('click');\n\n                // Re-render the comment\n                self.reRenderComment(commentModel.id);\n            };\n\n            var error = function() {\n                saveButton.addClass('enabled');\n            };\n\n            this.options.putComment(commentJSON, success, error);\n        },\n\n        deleteComment: function(ev) {\n            var self = this;\n            var deleteButton = $(ev.currentTarget);\n            var commentEl = deleteButton.parents('.comment').first();\n            var commentJSON =  $.extend({}, this.commentsById[commentEl.attr('data-id')]);\n            var commentId = commentJSON.id;\n            var parentId = commentJSON.parent;\n\n            // Disable send button while request is pending\n            deleteButton.removeClass('enabled');\n\n            // Reverse mapping\n            commentJSON = this.applyExternalMappings(commentJSON);\n\n            var success = function() {\n                self.removeComment(commentId);\n                if(parentId) self.reRenderCommentActionBar(parentId);\n                // \n                if (commentJSON.opinion==true) {\n                    // $('[data-sort-key=${self.currentSortKey}]').trigger('click')\n                }\n                // \n            };\n\n            var error = function() {\n                deleteButton.addClass('enabled');\n            };\n\n            this.options.deleteComment(commentJSON, success, error);\n        },\n\n        hashtagClicked: function(ev) {\n            var el = $(ev.currentTarget);\n            var value = el.attr('data-value');\n            this.options.hashtagClicked(value);\n        },\n\n        pingClicked: function(ev) {\n            var el = $(ev.currentTarget);\n            var value = el.attr('data-value');\n            this.options.pingClicked(value);\n        },\n\n        fileInputChanged: function(ev, files) {\n            var files = ev.currentTarget.files;\n            var commentingField = $(ev.currentTarget).parents('.commenting-field').first();\n            this.uploadAttachments(files, commentingField);\n        },\n\n        upvoteComment: function(ev) {\n            var self = this;\n            var commentEl = $(ev.currentTarget).parents('li.comment').first();\n            var commentModel = commentEl.data().model;\n\n            // Check whether user upvoted the comment or revoked the upvote\n            var previousUpvoteCount = commentModel.upvoteCount;\n            var newUpvoteCount;\n            if(commentModel.userHasUpvoted) {\n                newUpvoteCount = previousUpvoteCount - 1;\n            } else {\n                newUpvoteCount = previousUpvoteCount + 1;\n            }\n\n            // Show changes immediatelly\n            commentModel.userHasUpvoted = !commentModel.userHasUpvoted;\n            commentModel.upvoteCount = newUpvoteCount;\n            this.reRenderUpvotes(commentModel.id);\n\n            // Reverse mapping\n            var commentJSON = $.extend({}, commentModel);\n            commentJSON = this.applyExternalMappings(commentJSON);\n\n            var success = function(commentJSON) {\n                var commentModel = self.createCommentModel(commentJSON);\n                self.updateCommentModel(commentModel);\n                self.reRenderUpvotes(commentModel.id);\n            };\n\n            var error = function() {\n                // Revert changes\n                commentModel.userHasUpvoted = !commentModel.userHasUpvoted;\n                commentModel.upvoteCount = previousUpvoteCount;\n                self.reRenderUpvotes(commentModel.id);\n            };\n\n            this.options.upvoteComment(commentJSON, success, error);\n        },\n\n        toggleReplies: function(ev) {\n            var el = $(ev.currentTarget);\n            el.siblings('.hidden-reply').toggleClass('visible');\n            this.setToggleAllButtonText(el, true);\n        },\n\n        replyButtonClicked: function(ev) {\n            var replyButton = $(ev.currentTarget);\n            var outermostParent = replyButton.parents('li.comment').last();\n            var parentId = replyButton.parents('.comment').first().data().id;\n\n            // Remove existing field\n            var replyField = outermostParent.find('.child-comments > .commenting-field');\n            if(replyField.length) replyField.remove();\n            var previousParentId = replyField.find('.textarea').attr('data-parent');\n\n            // Create the reply field (do not re-create)\n            if(previousParentId != parentId) {\n                replyField = this.createCommentingFieldElement(parentId, null, false);\n                outermostParent.find('.child-comments').append(replyField);\n\n                // Move cursor to end\n                var textarea = replyField.find('.textarea');\n                this.moveCursorToEnd(textarea)\n\n                // Make sure the reply field will be displayed\n                var scrollTop = this.options.scrollContainer.scrollTop();\n                var endOfReply = scrollTop + replyField.position().top + replyField.outerHeight();\n                var endOfScrollable = scrollTop + this.options.scrollContainer.outerHeight();\n                if(endOfReply > endOfScrollable) {\n                    var newScrollTop = scrollTop + (endOfReply - endOfScrollable);\n                    this.options.scrollContainer.scrollTop(newScrollTop);\n                }\n            }\n        },\n\n        editButtonClicked: function(ev) {\n            var editButton = $(ev.currentTarget);\n            var commentEl = editButton.parents('li.comment').first();\n            var commentModel = commentEl.data().model;\n            \n            commentModel = this.commentsById[commentModel.id];\n            commentEl.addClass('edit');\n\n            // Create the editing field\n            var editField = this.createCommentingFieldElement(commentModel.parent, commentModel.id, false);\n            commentEl.find('.comment-wrapper').first().append(editField);\n\n            // Append original content\n            var textarea = editField.find('.textarea');\n            textarea.attr('data-comment', commentModel.id);\n\n            // Escaping HTML\n            textarea.append(this.getFormattedCommentContent(commentModel, true));\n\n            // Move cursor to end\n            this.moveCursorToEnd(textarea);\n        },\n\n        showDroppableOverlay: function(ev) {\n            if(this.options.enableAttachments) {\n                this.$el.find('.droppable-overlay').css('top', this.$el[0].scrollTop);\n                this.$el.find('.droppable-overlay').show();\n                this.$el.addClass('drag-ongoing');\n            }\n        },\n\n        handleDragEnter: function(ev) {\n            var count = $(ev.currentTarget).data('dnd-count') || 0;\n            count++;\n            $(ev.currentTarget).data('dnd-count', count);\n            $(ev.currentTarget).addClass('drag-over');\n        },\n\n        handleDragLeave: function(ev, callback) {\n            var count = $(ev.currentTarget).data('dnd-count');\n            count--;\n            $(ev.currentTarget).data('dnd-count', count);\n\n            if(count == 0) {            \n                $(ev.currentTarget).removeClass('drag-over');\n                if(callback) callback();\n            }\n        },\n\n        handleDragLeaveForOverlay: function(ev) {\n            var self = this;\n            this.handleDragLeave(ev, function() {\n                self.hideDroppableOverlay();\n            });\n        },\n\n        handleDragLeaveForDroppable: function(ev) {\n            this.handleDragLeave(ev);\n        },\n\n        handleDragOverForOverlay: function(ev) {\n            ev.stopPropagation();\n            ev.preventDefault();\n            ev.originalEvent.dataTransfer.dropEffect = 'copy';\n        },\n\n        hideDroppableOverlay: function() {\n            this.$el.find('.droppable-overlay').hide();\n            this.$el.removeClass('drag-ongoing');\n        },\n\n        handleDrop: function(ev) {\n            ev.preventDefault();\n\n            // Reset DND counts\n            $(ev.target).trigger('dragleave');\n\n            // Hide the overlay and upload the files\n            this.hideDroppableOverlay();\n            this.uploadAttachments(ev.originalEvent.dataTransfer.files);\n        },\n\n        stopPropagation: function(ev) {\n            ev.stopPropagation();\n        },\n\n\n        // HTML elements\n\n        createHTML: function() {\n            var self = this;\n            // Commenting field\n            var mainCommentingField = this.createCommentingFieldElement(null, null, true);\n            mainCommentingField.addClass('main');\n            this.$el.append(mainCommentingField);\n\n            // Hide control row and close button\n            var mainControlRow = mainCommentingField.find('.control-row');\n            mainControlRow.hide();\n            mainCommentingField.find('.close').hide();\n\n            // Navigation bar\n            if (this.options.enableNavigation) {\n                this.$el.append(this.createNavigationElement());\n                this.showActiveSort();\n            }\n\n            // Loading spinner\n            var spinner = this.createSpinner();\n            this.$el.append(spinner);\n\n            // Comments container\n            var commentsContainer = $('<div/>', {\n                'class': 'data-container overflowComment',\n                'data-container': 'comments'\n            });\n            this.$el.append(commentsContainer);\n                \n            // \"No comments\" placeholder\n            var noComments = $('<div/>', {\n                'class': 'no-comments no-data',\n                text: this.options.textFormatter(this.options.noCommentsText)\n            });\n            var noCommentsIcon = $('<i/>', {\n                'class': 'fa fa-comments fa-2x'\n            });\n            if(this.options.noCommentsIconURL.length) {\n                noCommentsIcon.css('background-image', 'url(\"'+this.options.noCommentsIconURL+'\")');\n                noCommentsIcon.addClass('image');\n            }\n            noComments.prepend($('<br/>')).prepend(noCommentsIcon);            \n            commentsContainer.append(noComments);\n\n            // important Comment Container\n            var importantCmtContainer = $('<div/>', {\n                'class': 'data-container overflowComment',\n                'data-container': 'importantCmt'\n            });\n            this.$el.append(importantCmtContainer);\n                // \"No comments Important\" placeholder\n            var noCommentsImpt = $('<div/>', {\n                'class': 'no-comments no-data',\n                text: this.options.textFormatter(this.options.noCommentsImportantText)\n            });\n            var noCommentsImptIcon = $('<i/>', {\n                'class': 'fa fa-comments fa-2x'\n            });\n            if(this.options.noCommentsImptIconURL.length) {\n                noCommentsImptIcon.css('background-image', 'url(\"'+this.options.noCommentsImptIconURL+'\")');\n                noCommentsImptIcon.addClass('image');\n            }\n            noCommentsImpt.prepend($('<br/>')).prepend(noCommentsImptIcon);            \n            importantCmtContainer.append(noCommentsImpt);\n\n            // Attachments\n            if(this.options.enableAttachments) {\n                // Attachments container\n                var attachmentsContainer = $('<div/>', {\n                    'class': 'data-container overflowComment',\n                    'data-container': 'attachments'\n                });\n                this.$el.append(attachmentsContainer);\n                \n                // \"No attachments\" placeholder\n                var noAttachments = $('<div/>', {\n                    'class': 'no-attachments no-data',\n                    text: this.options.textFormatter(this.options.noAttachmentsText)\n                });\n                var noAttachmentsIcon = $('<i/>', {\n                    'class': 'fa fa-paperclip fa-2x'\n                });\n                if(this.options.attachmentIconURL.length) {\n                    noAttachmentsIcon.css('background-image', 'url(\"'+this.options.attachmentIconURL+'\")');\n                    noAttachmentsIcon.addClass('image');\n                }\n                noAttachments.prepend($('<br/>')).prepend(noAttachmentsIcon);\n                attachmentsContainer.append(noAttachments);\n\n\n                // Drag & dropping attachments\n                var droppableOverlay = $('<div/>', {\n                    'class': 'droppable-overlay'\n                });\n\n                var droppableContainer = $('<div/>', {\n                    'class': 'droppable-container'\n                });\n\n                var droppable = $('<div/>', {\n                    'class': 'droppable'\n                });\n\n                var uploadIcon = $('<i/>', {\n                    'class': 'fa fa-upload fa-4x'\n                });\n                if(this.options.uploadIconURL.length) {\n                    uploadIcon.css('background-image', 'url(\"'+this.options.uploadIconURL+'\")');\n                    uploadIcon.addClass('image');\n                }\n\n                var dropAttachmentText = $('<div/>', {\n                    text: this.options.textFormatter(this.options.attachmentDropText)\n                });\n                droppable.append(uploadIcon);\n                droppable.append(dropAttachmentText);\n\n                droppableOverlay.html(droppableContainer.html(droppable)).hide();\n                this.$el.append(droppableOverlay);\n            }\n        },\n\n        createProfilePictureElement: function(src) {\n            if(src) {\n                var profilePicture = $('<img/>', {\n                    src: src\n                });\n            } else {\n                var profilePicture = $('<i/>', {\n                    'class': 'fa fa-user'\n                });\n            }\n            profilePicture.addClass('profile-picture');\n            if(this.options.roundProfilePictures) profilePicture.addClass('round');\n            return profilePicture;\n        },\n\n        createCommentingFieldElement: function(parentId, existingCommentId, enableOpinion) {\n            var self = this;\n            // Commenting field\n            var commentingField = $('<div/>', {\n                'class': 'commenting-field'\n            });\n\n            // Profile picture\n            if(existingCommentId) {\n                var profilePictureURL = this.commentsById[existingCommentId].profilePictureURL;\n            } else {\n                var profilePictureURL = this.options.profilePictureURL;\n            }\n            var profilePicture = this.createProfilePictureElement(profilePictureURL);\n\n            // New comment\n            var textareaWrapper = $('<div/>', {\n                'class': 'textarea-wrapper'\n            });\n\n            // Control row\n            var controlRow = $('<div/>', {\n                'class': 'control-row'\n            });\n\n            // Textarea\n            var textarea = $('<div/>', {\n                'class': 'textarea',\n                'data-placeholder': this.options.textFormatter(this.options.textareaPlaceholderText),\n                contenteditable: true\n            });\n\n            // Setting the initial height for the textarea\n            this.adjustTextareaHeight(textarea, false);\n\n            // Close button\n            var closeButton = $('<span/>', {\n                'class': 'close'\n            }).append($('<span class=\"left\"/>')).append($('<span class=\"right\"/>'));\n\n            // Save button text\n            if(existingCommentId) {\n                var saveButtonText = this.options.textFormatter(this.options.saveText);\n                var opinionCmtId = existingCommentId\n                // Delete button Edit Comment\n                // var deleteButton = $('<span/>', {\n                //      'class': 'delete',\n                //      text: this.options.textFormatter(this.options.deleteText)\n                // }).css('background-color', this.options.deleteButtonColor);\n                // controlRow.append(deleteButton);\n\n                // // Enable the delete button only if the user is allowed to delete\n                // if(this.isAllowedToDelete(existingCommentId)) deleteButton.addClass('enabled')\n\n            } else {\n                var saveButtonText = this.options.textFormatter(this.options.sendText);\n                var opinionCmtId =''\n                // Add upload button if attachments are enabled\n                if(this.options.enableAttachments) {\n                    var uploadButton = $('<span/>', {\n                        'class': 'enabled upload'\n                    });\n                    var uploadIcon = $('<i/>', {\n                        'class': 'md-icon',\n                        text: 'Tải lên'\n                    });\n                    var fileInput = $('<input/>', {\n                        type: 'file',\n                        'data-role': 'none' // Prevent jquery-mobile for adding classes\n                    });\n                    // Multi file upload might not work with backend as the the file names\n                    // may be the same causing duplicates\n                    if(!$.browser.mobile) fileInput.attr('multiple', 'multiple');\n\n                    if(this.options.uploadIconURL.length) {\n                        uploadIcon.css('background-image', 'url(\"'+this.options.uploadIconURL+'\")');\n                        uploadIcon.addClass('image');\n                    }\n                    uploadButton.append(uploadIcon).append(fileInput);\n                    controlRow.append(uploadButton);\n                }\n            }\n\n            // Save button\n            var saveButtonClass = existingCommentId ? 'update' : 'send';\n            var saveButton = $('<span/>', {\n                'class': saveButtonClass + ' save highlight-background',\n                text: saveButtonText\n            });\n            // Check opinion\n\n            if (enableOpinion) {\n                var checkOpinion = $('<input/>', {\n                    'class': 'opinion checkOpinion mt-1 mr-1',\n                    'id': 'opinion' + opinionCmtId,\n                    'name': 'opinion' + opinionCmtId,\n                    'type': 'checkbox'\n                });\n                var labelCheckOpinion = $('<label/>', {\n                    'class': 'opinion label-opinion',\n                    'for': 'opinion'+opinionCmtId,\n                    text: 'Ý kiến chính thức'\n                });\n                controlRow.append(checkOpinion).append(labelCheckOpinion);\n            }\n            \n            // Populate the element\n            controlRow.prepend(saveButton);\n            textareaWrapper.append(closeButton).append(textarea).append(controlRow);\n            commentingField.append(profilePicture).append(textareaWrapper);\n\n\n            if(parentId) {\n\n                    // Set the parent id to the field if necessary\n                textarea.attr('data-parent', parentId);\n\n                // Append reply-to tag if necessary\n                var parentModel = this.commentsById[parentId];\n                if(parentModel.parent) {\n                    textarea.html('&nbsp;');    // Needed to set the cursor to correct place\n\n                    // Creating the reply-to tag\n                    var replyToName = '@' + parentModel.fullname;\n                    var replyToTag = this.createTagElement(replyToName, 'reply-to', parentModel.creator);\n                    textarea.prepend(replyToTag);\n                }\n            }\n\n            // Pinging users\n            if(this.options.enablePinging) {\n                    textarea.textcomplete([{\n                            /**match: /(^|\\s)@(([a-zäöüß]|\\s)*)$/im,*/\n                        match: /(^|\\s)@(([0-9]|[^\\u0000-\\u007F]|[a-zäöüß]|\\s)*)$/im,\n                            search: function (term, callback) {\n                                // console.log(term);\n                                    term = self.normalizeSpaces(term);\n\n                                    // Users excluding self and already pinged users\n                                    var pings = self.getPings(textarea);\n                                    var users = self.getUsers().filter(function(user) {\n                                            var isSelf = user.id == self.options.currentUserId;\n                                            var alreadyPinged = pings.indexOf(user.id) != -1;\n                                            return !isSelf && !alreadyPinged;\n                                    });\n\n                                    // Sort users\n                                    self.sortUsers(users);\n\n                                    callback($.map(users, function (user) {\n                                            var lowercaseTerm = term.toLowerCase();\n                                            var nameMatch = user.fullname.toLowerCase().indexOf(lowercaseTerm) != -1;\n                                            var emailMatch = user.email.toLowerCase().indexOf(lowercaseTerm) != -1;\n                                            return nameMatch || emailMatch ? user : null;\n                                    }));\n                            },\n                            template: function(user) {\n                                    var wrapper = $('<div/>');\n\n                                    var profilePictureEl = $('<img/>', {\n                                            src: user.pictureUrl,\n                                            'class': 'profile-picture round'\n                                    });\n                                    var detailsEl = $('<div/>', {\n                                            'class': 'details',\n                                    });\n                                    var nameEl = $('<div/>', {\n                                            'class': 'name',\n                                    }).html(user.fullname);\n\n                                    var emailEl = $('<div/>', {\n                                            'class': 'email',\n                                    }).html(user.email);\n                                            \n                                    if (user.email) {\n                                            detailsEl.append(nameEl).append(emailEl);\n                                    } else {\n                                            detailsEl.addClass('no-email')\n                                            detailsEl.append(nameEl)\n                                    }\n\n                                    wrapper.append(profilePictureEl).append(detailsEl);\n                                    return wrapper.html();\n                            },\n                            replace: function (user) {\n                                    var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);\n                                    return ' ' + tag[0].outerHTML + ' ';\n                            },\n                    }], {\n                            appendTo: '.jquery-comments',\n                            dropdownClassName: 'dropdown autocomplete',\n                            maxCount: 5,\n                            rightEdgeOffset: 0,\n                    });\n\n\n                    // OVERIDE TEXTCOMPLETE DROPDOWN POSITIONING\n\n                    $.fn.textcomplete.Dropdown.prototype.render = function(zippedData) {\n                        var contentsHtml = this._buildContents(zippedData);\n                        var unzippedData = $.map(zippedData, function (d) { return d.value; });\n                        if (zippedData.length) {\n                            var strategy = zippedData[0].strategy;\n                            if (strategy.id) {\n                                this.$el.attr('data-strategy', strategy.id);\n                            } else {\n                                this.$el.removeAttr('data-strategy');\n                            }\n                            this._renderHeader(unzippedData);\n                            this._renderFooter(unzippedData);\n                            if (contentsHtml) {\n                                this._renderContents(contentsHtml);\n                                this._fitToBottom();\n                                this._fitToRight();\n                                this._activateIndexedItem();\n                            }\n                            this._setScroll();\n                        } else if (this.noResultsMessage) {\n                            this._renderNoResultsMessage(unzippedData);\n                        } else if (this.shown) {\n                            this.deactivate();\n                        }\n\n                        // CUSTOM CODE\n                        // ===========\n\n                        // Adjust vertical position\n                        var top = parseInt(this.$el.css('top')) + self.options.scrollContainer.scrollTop();\n                        this.$el.css('top', top);\n\n                        // Adjust horizontal position\n                        var originalLeft = this.$el.css('left');\n                        this.$el.css('left', 0);    // Left must be set to 0 in order to get the real width of the el\n                        var maxLeft = self.$el.width() - this.$el.outerWidth();\n                        var left = Math.min(maxLeft, parseInt(originalLeft));\n                        this.$el.css('left', left);\n\n                        // ===========\n                    }\n            }\n\n            return commentingField;\n    },\n\n    createNavigationElement: function() {\n        var navigationEl = $('<ul/>', {\n            'class': 'navigation'\n        });\n        var navigationWrapper = $('<div/>', {\n            'class': 'navigation-wrapper'\n        });\n        navigationEl.append(navigationWrapper);\n\n        // Newest\n        var newest = $('<li/>', {\n            text: this.options.textFormatter(this.options.newestText),\n            'data-sort-key': 'newest',\n            'data-container-name': 'comments'\n        });\n\n        // Oldest\n        var oldest = $('<li/>', {\n            text: this.options.textFormatter(this.options.oldestText),\n            'data-sort-key': 'oldest',\n            'data-container-name': 'comments'\n        });\n        // Important\n        var important = $('<li/>', {\n            text: this.options.textFormatter(this.options.importantCmtText),\n            'data-sort-key': 'important',\n            'data-container-name': 'importantCmt'\n        });\n        // Popular\n        var popular = $('<li/>', {\n            text: this.options.textFormatter(this.options.popularText),\n            'data-sort-key': 'popularity',\n            'data-container-name': 'comments'\n        });\n\n        // Attachments\n        var attachments = $('<li/>', {\n            text: this.options.textFormatter(this.options.attachmentsText),\n            'data-sort-key': 'attachments',\n            'data-container-name': 'attachments'\n        });\n\n        // Attachments icon\n        var attachmentsIcon = $('<i/>', {\n            'class': 'fa fa-paperclip'\n        });\n        if(this.options.attachmentIconURL.length) {\n            attachmentsIcon.css('background-image', 'url(\"'+this.options.attachmentIconURL+'\")');\n            attachmentsIcon.addClass('image');\n        }\n        attachments.prepend(attachmentsIcon);\n\n        // Responsive navigation\n        var dropdownNavigationWrapper = $('<div/>', {\n            'class': 'navigation-wrapper responsive'\n        });\n        var dropdownNavigation = $('<ul/>', {\n            'class': 'dropdown'\n        });\n        var dropdownTitle = $('<li/>', {\n            'class': 'title'\n        });\n        var dropdownTitleHeader = $('<header/>');\n\n        dropdownTitle.append(dropdownTitleHeader);\n        dropdownNavigationWrapper.append(dropdownTitle);\n        dropdownNavigationWrapper.append(dropdownNavigation);\n        navigationEl.append(dropdownNavigationWrapper);\n\n        // Populate elements\n        navigationWrapper.append(newest).append(oldest).append(important);\n        dropdownNavigation.append(newest.clone()).append(oldest.clone()).append(important.clone());\n\n        if(this.options.enableReplying || this.options.enableUpvoting) {\n            navigationWrapper.append(popular);\n            dropdownNavigation.append(popular.clone());\n        }\n        if(this.options.enableAttachments) {\n            navigationWrapper.append(attachments);\n            dropdownNavigationWrapper.append(attachments.clone());\n        }\n\n        if(this.options.forceResponsive) this.forceResponsive();\n        return navigationEl;\n    },\n\n    createSpinner: function() {\n        var spinner = $('<div/>', {\n            'class': 'spinner'\n        });\n        var spinnerIcon = $('<i/>', {\n            'class': 'fa fa-spinner fa-spin'\n        });\n        if(this.options.spinnerIconURL.length) {\n            spinnerIcon.css('background-image', 'url(\"'+this.options.spinnerIconURL+'\")');\n            spinnerIcon.addClass('image');\n        }\n        spinner.html(spinnerIcon);\n        return spinner;\n    },\n\n    createCommentElement: function(commentModel) {\n\n        // Comment container element\n        var commentEl = $('<li/>', {\n            'data-id': commentModel.id,\n            'class': 'comment'\n        }).data('model', commentModel);\n\n        if(commentModel.createdByCurrentUser) commentEl.addClass('by-current-user');\n        if(commentModel.createdByAdmin) commentEl.addClass('by-admin');\n\n        // Child comments\n        var childComments = $('<ul/>', {\n            'class': 'child-comments'\n        });\n\n        // Comment wrapper\n        var commentWrapper = this.createCommentWrapperElement(commentModel);\n\n        commentEl.append(commentWrapper);\n        if(commentModel.parent == null) commentEl.append(childComments);\n        return commentEl;\n    },\n\n    createCommentWrapperElement: function(commentModel) {\n        var commentWrapper = $('<div/>', {\n            'class': 'comment-wrapper'\n        });\n\n        // Profile picture\n        var profilePicture = this.createProfilePictureElement(commentModel.profilePictureURL);\n\n        // Time\n        var time = $('<time/>', {\n            text: this.options.timeFormatter(commentModel.created),\n            'data-original': commentModel.created\n        });\n\n        // Name\n        var nameText = commentModel.createdByCurrentUser ? this.options.textFormatter(this.options.youText) : commentModel.fullname;\n        var name = $('<div/>', {\n            'class': 'name'\n        });\n        if(commentModel.profileURL) {\n            var link = $('<a/>', {\n                href: commentModel.profileURL,\n                text: nameText\n            });\n            name.html(link);\n        } else {\n            name.text(nameText);\n        }\n\n        // Highlight name for own comments and admin\n        if(commentModel.createdByCurrentUser || commentModel.createdByAdmin) name.addClass('highlight-font-bold');\n\n        // Show reply-to name if parent of parent exists\n        if(commentModel.parent) {\n            var parent = this.commentsById[commentModel.parent];\n            if(parent.parent) {\n                var replyTo = $('<span/>', {\n                    'class': 'reply-to',\n                    text: parent.fullname\n                });\n\n                // reply icon\n                var replyIcon = $('<i/>', {\n                    'class': 'fa fa-share'\n                });\n                if(this.options.replyIconURL.length) {\n                    replyIcon.css('background-image', 'url(\"'+this.options.replyIconURL+'\")');\n                    replyIcon.addClass('image');\n                }\n\n                replyTo.prepend(replyIcon);\n                name.append(replyTo);\n            }\n        }\n\n        // New tag\n        if(commentModel.isNew) {\n            var newTag = $('<span/>', {\n                'class': 'new highlight-background',\n                text: this.options.newText\n            });\n            name.append(newTag);\n        }\n\n        // Wrapper\n        var wrapper = $('<div/>', {\n            'class': 'wrapper'\n        });\n        // Note Ý kiến chính thức\n        var noteOpinion = $('<div/>', {\n            'class': 'note-opinion',\n            text: '(Ý kiến chính thức)'\n        });\n        // Content\n        var content = $('<div/>', {\n            'class': 'content'\n        });\n\n        // Case: attachment\n        var isAttachment = commentModel.fileURL != undefined;\n        if(isAttachment) {\n            var format = null;\n            var type = null;\n\n            // Type and format\n            if(commentModel.fileMimeType) {\n                var mimeTypeParts = commentModel.fileMimeType.split('/');\n                if(mimeTypeParts.length == 2) {\n                    format = mimeTypeParts[1];\n                    type = mimeTypeParts[0];\n                }\n            }\n\n            // Attachment link\n            var link = $('<a/>', {\n                'class': 'attachment',\n                href: commentModel.fileURL,\n                target: '_blank'\n            });\n            \n            // var link = $('<a/>', {\n            //      'class': 'attachment',\n            //      href: 'javascript:viewCommentFileAttach(\"' + commentModel.fileURL + '\",\"' + commentModel.fileMimeType + '\");'\n            // });\n            \n            // Case: image preview\n            if(type == 'image') {\n                var image = $('<img/>', {\n                    src: commentModel.fileURL\n                });\n                link.html(image);\n            // Case: video preview\n            } else if(type == 'video') {\n                var video = $('<video/>', {\n                    src: commentModel.fileURL,\n                    type: commentModel.fileMimeType,\n                    controls: 'controls'\n                });\n                link.html(video);\n\n            // Case: icon and text\n            } else {\n\n                // Icon\n                var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo',\n                    'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'];\n                \n                var iconClass = 'fa fa-file-o';\n                if(availableIcons.indexOf(format) > 0) {\n                    iconClass = 'fa fa-file-' + format + '-o';\n                } else if(availableIcons.indexOf(type) > 0) {\n                    iconClass = 'fa fa-file-' + type + '-o';\n                }\n\n                var fileIcon = $('<i/>', {\n                    'class': iconClass\n                });\n                if(this.options.fileIconURL.length) {\n                    fileIcon.css('background-image', 'url(\"'+this.options.fileIconURL+'\")');\n                    fileIcon.addClass('image');\n                }\n                // File name\n                /**\n                var parts = commentModel.fileURL.split('/');\n                var fileName = parts[parts.length - 1];\n                fileName = fileName.split('?')[0];\n                fileName = decodeURIComponent(fileName);\n                */\n                var fileName = commentModel.fileName;\n                link.text(fileName);\n                link.prepend(fileIcon);\n            }\n            content.html(link);\n        // Case: regular comment\n        } else {\n            content.html(this.getFormattedCommentContent(commentModel));\n        }\n\n        // Edited timestamp\n        if(commentModel.modified && commentModel.modified != commentModel.created) {\n            var editedTime = this.options.timeFormatter(commentModel.modified);\n            var edited = $('<time/>', {\n                'class': 'edited',\n                text: this.options.textFormatter(this.options.editedText) + ' ' + editedTime,\n                'data-original': commentModel.modified\n            });\n            content.append(edited);\n        }\n\n        // Actions\n        var actions = $('<span/>', {\n            'class': 'actions'\n        });\n\n        // Reply\n        var reply = $('<button/>', {\n            'class': 'action reply',\n            'type': 'button',\n            text: this.options.textFormatter(this.options.replyText)\n        });\n\n        // Upvote icon\n        var upvoteIcon = $('<i/>', {\n            'class': 'fa fa-thumbs-up'\n        });\n        if(this.options.upvoteIconURL.length) {\n            upvoteIcon.css('background-image', 'url(\"'+this.options.upvoteIconURL+'\")');\n            upvoteIcon.addClass('image');\n        }\n\n        // Upvotes\n        var upvotes = this.createUpvoteElement(commentModel);\n\n        // Append buttons for actions that are enabled\n        if(this.options.enableReplying) actions.append(reply);\n        if(this.options.enableUpvoting) actions.append(upvotes);\n\n        if(commentModel.createdByCurrentUser || this.options.currentUserIsAdmin) {\n            // Case: delete button for attachment and currentUser\n            if(isAttachment && this.isAllowedToDelete(commentModel.id)) {\n                var deleteButton = $('<button/>', {\n                    'class': 'action delete enabled',\n                    text: this.options.textFormatter(this.options.deleteText)\n                });\n                actions.append(deleteButton);\n\n            // Case: edit button for regular comment\n            } else if(!isAttachment && this.options.enableEditing) {\n                var editButton = $('<button/>', {\n                    'class': 'action edit',\n                    text: this.options.textFormatter(this.options.editText)\n                });\n                actions.append(editButton);\n                var deleteButton = $('<button/>', {\n                    'class': 'action delete enabled',\n                    text: this.options.textFormatter(this.options.deleteText)\n                });\n                actions.append(deleteButton);\n            }\n        }\n\n        wrapper.append(content);\n        if(commentModel.opinion == true) {\n            wrapper.append(noteOpinion);\n        }\n        wrapper.append(actions);\n        commentWrapper.append(profilePicture).append(time).append(name).append(wrapper);\n        return commentWrapper;\n    },\n\n    createUpvoteElement: function(commentModel) {\n        // Upvote icon\n        var upvoteIcon = $('<i/>', {\n            'class': 'fa fa-thumbs-up'\n        });\n        if(this.options.upvoteIconURL.length) {\n            upvoteIcon.css('background-image', 'url(\"'+this.options.upvoteIconURL+'\")');\n            upvoteIcon.addClass('image');\n        }\n\n        // Upvotes\n        var upvoteEl = $('<button/>', {\n            'class': 'action upvote' + (commentModel.userHasUpvoted ? ' highlight-font' : '')\n        }).append($('<span/>', {\n            text: commentModel.upvoteCount,\n            'class': 'upvote-count'\n        })).append(upvoteIcon);\n\n        return upvoteEl;\n    },\n\n    createTagElement: function(text, extraClasses, value) {\n        var tagEl = $('<input/>', {\n            'class': 'tag',\n            'type': 'button',\n            'data-role': 'none',\n        });\n        if(extraClasses) tagEl.addClass(extraClasses);\n        tagEl.val(text);\n        tagEl.attr('data-value', value);\n        return tagEl;\n    },\n\n    reRenderComment: function(id) {\n        var commentModel = this.commentsById[id];\n        var commentElements = this.$el.find('li.comment[data-id=\"'+commentModel.id+'\"]');\n\n        var self = this;\n        commentElements.each(function(index, commentEl) {\n            var commentWrapper = self.createCommentWrapperElement(commentModel);\n            $(commentEl).find('.comment-wrapper').first().replaceWith(commentWrapper);\n        });\n    },\n\n    reRenderCommentActionBar: function(id) {\n        var commentModel = this.commentsById[id];\n        var commentElements = this.$el.find('li.comment[data-id=\"'+commentModel.id+'\"]');\n\n        var self = this;\n        commentElements.each(function(index, commentEl) {\n            var commentWrapper = self.createCommentWrapperElement(commentModel);\n            $(commentEl).find('.actions').first().replaceWith(commentWrapper.find('.actions'));\n        });\n    },\n\n    reRenderUpvotes: function(id) {\n        var commentModel = this.commentsById[id];\n        var commentElements = this.$el.find('li.comment[data-id=\"'+commentModel.id+'\"]');\n\n        var self = this;\n        commentElements.each(function(index, commentEl) {\n            var upvotes = self.createUpvoteElement(commentModel);\n            $(commentEl).find('.upvote').first().replaceWith(upvotes);\n        });\n    },\n\n\n    // Styling\n    createCssDeclarations: function() {\n\n        // Remove previous css-declarations\n        $('head style.jquery-comments-css').remove();\n\n        // Navigation underline\n        this.createCss('.jquery-comments ul.navigation li.active:after {background: '\n            + this.options.highlightColor  + ' !important;',\n            +'}');\n\n        // Dropdown active element\n        this.createCss('.jquery-comments ul.navigation ul.dropdown li.active {background: '\n            + this.options.highlightColor  + ' !important;',\n            +'}');\n\n        // Background highlight\n        this.createCss('.jquery-comments .highlight-background {background: '\n            + this.options.highlightColor  + ' !important;',\n            +'}');\n\n        // Font highlight\n        this.createCss('.jquery-comments .highlight-font {color: '\n            + this.options.highlightColor + ' !important;'\n            +'}');\n        this.createCss('.jquery-comments .highlight-font-bold {color: '\n            + this.options.highlightColor + ' !important;'\n            + 'font-weight: bold;'\n            +'}');\n    },\n\n    createCss: function(css) {\n        var styleEl = $('<style/>', {\n            type: 'text/css',\n            'class': 'jquery-comments-css',\n            text: css\n        });\n        $('head').append(styleEl);\n    },\n\n    //\n    getComments: function() {\n        var self = this;\n        var commentArr = Object.keys(this.commentsById).map(function(id){return self.commentsById[id]})\n        var importantCmtArr = commentArr.filter(function(comment){return comment.opinion})\n        var importantCmtUser = commentArr.filter(function(comment){return comment.opinion&&comment.createdByCurrentUser})\n        var attachCmtArr = commentArr.filter(function(comment){return comment.fileURL != undefined})\n        if (commentArr.length > 3) {\n            $('.data-container[data-container=comments]').addClass('lessEl')\n        } else {\n            $('.data-container[data-container=comments]').addClass('fullEl')\n        }\n        // \n        if (importantCmtArr.length > 3) {\n            $('.data-container[data-container=importantCmt]').addClass('lessEl')\n        } else {\n            $('.data-container[data-container=importantCmt]').addClass('fullEl')\n        }\n        if (importantCmtUser.length > 0) {\n            $('.opinion').hide()\n        } else {\n            $('.opinion').show()\n        }\n        // \n        if (attachCmtArr.length > 3) {\n            $('.data-container[data-container=attachments]').addClass('lessEl')\n        } else {\n            $('.data-container[data-container=attachments]').addClass('fullEl')\n        }\n\n        return Object.keys(this.commentsById).map(function(id){return self.commentsById[id]});\n    },\n\n    getUsers: function() {\n        var self = this;\n        return Object.keys(this.usersById).map(function(id){return self.usersById[id]});\n    },\n\n    getChildComments: function(parentId) {\n        return this.getComments().filter(function(comment){return comment.parent == parentId});\n    },\n\n    getAttachments: function() {\n        var self = this;\n        return this.getComments().filter(function(comment){return comment.fileURL != undefined});\n    },\n    getImportantCmt: function() {\n        var self = this;\n        return this.getComments().filter(function(comment){return comment.opinion == true});\n    },\n    getOutermostParent: function(directParentId) {\n        var parentId = directParentId;\n        do {\n            var parentComment = this.commentsById[parentId];\n            parentId = parentComment.parent;\n        } while(parentComment.parent != null);\n        return parentComment;\n    },\n\n    createCommentJSON: function(textarea) {\n        var time = new Date().toISOString();\n        var commentJSON = {\n            id: 'c' +  (this.getComments().length + 1),   // Temporary id\n            parent: textarea.attr('data-parent') || null,\n            created: time,\n            modified: time,\n            content: this.getTextareaContent(textarea),\n            pings: this.getPings(textarea),\n            fullname: this.options.textFormatter(this.options.youText),\n            profilePictureURL: this.options.profilePictureURL,\n            createdByCurrentUser: true,\n            upvoteCount: 0,\n            userHasUpvoted: false\n        };\n        return commentJSON;\n    },\n\n    isAllowedToDelete: function(commentId) {\n        if(this.options.enableDeleting) {\n            var isAllowedToDelete = true;\n            if(!this.options.enableDeletingCommentWithReplies) {\n                $(this.getComments()).each(function(index, comment) {\n                    if(comment.parent == commentId) isAllowedToDelete = false;\n                });\n            }\n            return isAllowedToDelete;\n        }\n        return false;\n    },\n\n    setToggleAllButtonText: function(toggleAllButton, toggle) {\n        var self = this;\n        var textContainer = toggleAllButton.find('span.text');\n        var caret = toggleAllButton.find('.caret');\n\n        var showExpandingText = function() {\n                var text = self.options.textFormatter(self.options.viewAllRepliesText);\n                var replyCount = toggleAllButton.siblings('.comment').length;\n                text = text.replace('__replyCount__', replyCount);\n                textContainer.text(text);\n        };\n\n        var hideRepliesText = this.options.textFormatter(this.options.hideRepliesText);\n\n        if(toggle) {\n            // Toggle text\n            if(textContainer.text() == hideRepliesText) {\n                showExpandingText();\n            } else {\n                textContainer.text(hideRepliesText);\n            }\n            // Toggle direction of the caret\n            caret.toggleClass('up');\n        } else {\n            // Update text if necessary\n            if(textContainer.text() != hideRepliesText) {\n                showExpandingText();\n            }\n        }\n    },\n\n    adjustTextareaHeight: function(textarea, focus) {\n        var textareaBaseHeight = 2.2;\n        var lineHeight = 1.45;\n\n        var setRows = function(rows) {\n            var height = textareaBaseHeight + (rows - 1) * lineHeight;\n            textarea.css('height', height + 'em');\n        };\n\n        textarea = $(textarea);\n        var rowCount = focus == true ? this.options.textareaRowsOnFocus : this.options.textareaRows;\n        do {\n            setRows(rowCount);\n            rowCount++;\n            var isAreaScrollable = textarea[0].scrollHeight > textarea.outerHeight();\n            var maxRowsUsed = this.options.textareaMaxRows == false ?\n                false : rowCount > this.options.textareaMaxRows;\n        } while(isAreaScrollable && !maxRowsUsed);\n    },\n\n    clearTextarea: function(textarea) {\n        textarea.empty().trigger('input');\n    },\n\n    getTextareaContent: function(textarea, humanReadable) {\n        var textareaClone = textarea.clone();\n\n        // Remove reply-to tag\n        textareaClone.find('.reply-to.tag').remove();\n\n        // Replace tags with text values\n        textareaClone.find('.tag.hashtag').replaceWith(function(){\n            return humanReadable ? $(this).val() : '#' + $(this).attr('data-value');\n        });\n        textareaClone.find('.tag.ping').replaceWith(function(){\n            return humanReadable ? $(this).val() : '@' + $(this).attr('data-value');\n        });\n\n        var ce = $('<pre/>').html(textareaClone.html());\n        ce.find('div, p, br').replaceWith(function() { return '\\n' + this.innerHTML; });\n\n        // Trim leading spaces\n        var text = ce.text().replace(/^\\s+/g, '');\n\n        // Normalize spaces\n        var text = this.normalizeSpaces(text);\n        return text;\n    },\n\n    getFormattedCommentContent: function(commentModel, replaceNewLines) {\n        var html = this.escape(commentModel.content);\n        html = this.linkify(html);\n        html = this.highlightTags(commentModel, html);\n        if(replaceNewLines) html = html.replace(/(?:\\n)/g, '<br>');\n        return html;\n    },\n\n    getPings: function(textarea) {\n        return $.map(textarea.find('.ping'), function(el){return parseInt($(el).attr('data-value'))});\n    },\n\n    moveCursorToEnd: function(el) {\n        el = $(el)[0];\n\n        // Trigger input to adjust size\n        $(el).trigger('input');\n\n        // Scroll to bottom\n        $(el).scrollTop(el.scrollHeight);\n\n        // Move cursor to end\n        if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {\n            var range = document.createRange();\n            range.selectNodeContents(el);\n            range.collapse(false);\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        } else if (typeof document.body.createTextRange != 'undefined') {\n            var textRange = document.body.createTextRange();\n            textRange.moveToElementText(el);\n            textRange.collapse(false);\n            textRange.select();\n        }\n\n        // Focus\n        el.focus();\n    },\n\n    escape: function(inputText) {\n        return $('<pre/>').text(this.normalizeSpaces(inputText)).html();\n    },\n\n    normalizeSpaces: function(inputText) {\n        return inputText.replace(new RegExp('\\u00a0', 'g'), ' ');   // Convert non-breaking spaces to reguar spaces\n    },\n\n    after: function(times, func) {\n        var self = this;\n        return function() {\n            times--;\n            if (times == 0) {\n                return func.apply(self, arguments);\n            }\n        }\n    },\n\n    highlightTags: function(commentModel, html) {\n        if(this.options.enableHashtags) html = this.highlightHashtags(commentModel, html);\n        if(this.options.enablePinging) html = this.highlightPings(commentModel, html);\n        return html;\n    },\n\n    highlightHashtags: function(commentModel, html) {\n        var self = this;\n\n        if(html.indexOf('#') != -1) {\n            var __createTag = function(tag) {\n                var tag = self.createTagElement('#' + tag, 'hashtag', tag);\n                return tag[0].outerHTML;\n            }\n\n            var regex = /(^|\\s)#([a-zäöüß\\d-_]+)/gim;\n            html = html.replace(regex, function($0, $1, $2){\n                return $1 + __createTag($2);\n            });\n        }\n        return html;\n    },\n\n    highlightPings: function(commentModel, html) {\n        var self = this;\n\n        if(html.indexOf('@') != -1) {\n\n            var __createTag = function(user) {\n                var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);\n                return tag[0].outerHTML;\n            }\n\n            var highlightedHtml = '';\n            $(commentModel.pings).each(function(index, id) {\n                if(id in self.usersById) {\n                    var user = self.usersById[id];\n                    var pingText = '@' + user.id;\n\n                    var endIndex = html.indexOf(pingText) + pingText.length;\n                    var current = html.slice(0, endIndex);\n                    highlightedHtml += current.replace(pingText, __createTag(user));\n\n                    html = html.slice(endIndex);\n                }\n            });\n            highlightedHtml += html;\n            return highlightedHtml;\n        }\n        return html;\n    },\n\n    linkify: function(inputText) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, file:// or ftp://\n        replacePattern1 = /(^|\\s)((https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '$1<a href=\"$2\" target=\"_blank\">$2</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|\\s)(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(^|\\s)(([a-zA-Z0-9\\-\\_\\.]+)@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '$1<a href=\"mailto:$2\">$2</a>');\n\n        // If there are hrefs in the original text, let's split\n        // the text up and only work on the parts that don't have urls yet.\n        var count = inputText.match(/<a href/g) || [];\n\n        if(count.length > 0){\n            // Keep delimiter when splitting\n            var splitInput = inputText.split(/(<\\/a>)/g);\n            for (var i = 0 ; i < splitInput.length ; i++){\n                if(splitInput[i].match(/<a href/g) == null){\n                    splitInput[i] = splitInput[i].replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>').replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>').replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n                }\n            }\n            var combinedReplacedText = splitInput.join('');\n            return combinedReplacedText;\n        } else {\n            return replacedText;\n        }\n    },\n\n    waitUntil: function(condition, callback) {\n        var self = this;\n\n        if(condition()) {\n            callback();\n        } else {\n            setTimeout(function() {\n                self.waitUntil(condition, callback);\n            }, 100);\n        }\n    },\n\n    applyInternalMappings: function(commentJSON) {\n        // Inverting field mappings\n        var invertedMappings = {};\n        var mappings = this.options.fieldMappings;\n        for (var prop in mappings) {\n            if(mappings.hasOwnProperty(prop)) {\n                invertedMappings[mappings[prop]] = prop;\n            }\n        }\n\n        return this.applyMappings(invertedMappings, commentJSON);\n    },\n\n    applyExternalMappings: function(commentJSON) {\n        var mappings = this.options.fieldMappings;\n        return this.applyMappings(mappings, commentJSON);\n    },\n\n    applyMappings: function(mappings, commentJSON) {\n        var result = {};\n\n        for(var key1 in commentJSON) {\n            if(key1 in mappings) {\n                var key2 = mappings[key1];\n                result[key2] = commentJSON[key1];\n            }\n        }\n        return result;\n    }\n\n    };\n\n    $.fn.comments = function(options) {\n        return this.each(function() {\n            var comments = Object.create(Comments);\n            $.data(this, 'comments', comments);\n            comments.init(options || {}, this);\n        });\n    };\n}));\n\n\n/* eslint-disable */\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)))\n\n/***/ }),\n\n/***/ 704:\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {\n  if (true) {\n    // AMD. Register as an anonymous module.\n    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(36)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?\n\t\t\t\t(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n  } else if (typeof module === \"object\" && module.exports) {\n    var $ = require('jquery');\n    module.exports = factory($);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function (jQuery) {\n\n/*!\n * jQuery.textcomplete\n *\n * Repository: https://github.com/yuku-t/jquery-textcomplete\n * License:    MIT (https://github.com/yuku-t/jquery-textcomplete/blob/master/LICENSE)\n * Author:     Yuku Takahashi\n */\n\nif (typeof jQuery === 'undefined') {\n  throw new Error('jQuery.textcomplete requires jQuery');\n}\n\n+function ($) {\n  'use strict';\n\n  var warn = function (message) {\n    if (console.warn) { console.warn(message); }\n  };\n\n  var id = 1;\n\n  $.fn.textcomplete = function (strategies, option) {\n    var args = Array.prototype.slice.call(arguments);\n    return this.each(function () {\n      var self = this;\n      var $this = $(this);\n      var completer = $this.data('textComplete');\n      if (!completer) {\n        option || (option = {});\n        option._oid = id++;  // unique object id\n        completer = new $.fn.textcomplete.Completer(this, option);\n        $this.data('textComplete', completer);\n      }\n      if (typeof strategies === 'string') {\n        if (!completer) return;\n        args.shift()\n        completer[strategies].apply(completer, args);\n        if (strategies === 'destroy') {\n          $this.removeData('textComplete');\n        }\n      } else {\n        // For backward compatibility.\n        // TODO: Remove at v0.4\n        $.each(strategies, function (obj) {\n          $.each(['header', 'footer', 'placement', 'maxCount'], function (name) {\n            if (obj[name]) {\n              completer.option[name] = obj[name];\n              warn(name + 'as a strategy param is deprecated. Use option.');\n              delete obj[name];\n            }\n          });\n        });\n        completer.register($.fn.textcomplete.Strategy.parse(strategies, {\n          el: self,\n          $el: $this\n        }));\n      }\n    });\n  };\n\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  // Exclusive execution control utility.\n  //\n  // func - The function to be locked. It is executed with a function named\n  //        `free` as the first argument. Once it is called, additional\n  //        execution are ignored until the free is invoked. Then the last\n  //        ignored execution will be replayed immediately.\n  //\n  // Examples\n  //\n  //   var lockedFunc = lock(function (free) {\n  //     setTimeout(function { free(); }, 1000); // It will be free in 1 sec.\n  //     console.log('Hello, world');\n  //   });\n  //   lockedFunc();  // => 'Hello, world'\n  //   lockedFunc();  // none\n  //   lockedFunc();  // none\n  //   // 1 sec past then\n  //   // => 'Hello, world'\n  //   lockedFunc();  // => 'Hello, world'\n  //   lockedFunc();  // none\n  //\n  // Returns a wrapped function.\n  var lock = function (func) {\n    var locked, queuedArgsToReplay;\n\n    return function () {\n      // Convert arguments into a real array.\n      var args = Array.prototype.slice.call(arguments);\n      if (locked) {\n        // Keep a copy of this argument list to replay later.\n        // OK to overwrite a previous value because we only replay\n        // the last one.\n        queuedArgsToReplay = args;\n        return;\n      }\n      locked = true;\n      var self = this;\n      args.unshift(function replayOrFree() {\n        if (queuedArgsToReplay) {\n          // Other request(s) arrived while we were locked.\n          // Now that the lock is becoming available, replay\n          // the latest such request, then call back here to\n          // unlock (or replay another request that arrived\n          // while this one was in flight).\n          var replayArgs = queuedArgsToReplay;\n          queuedArgsToReplay = undefined;\n          replayArgs.unshift(replayOrFree);\n          func.apply(self, replayArgs);\n        } else {\n          locked = false;\n        }\n      });\n      func.apply(this, args);\n    };\n  };\n\n  var isString = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n  };\n\n  var uniqueId = 0;\n  var initializedEditors = [];\n\n  function Completer(element, option) {\n    this.$el        = $(element);\n    this.id         = 'textcomplete' + uniqueId++;\n    this.strategies = [];\n    this.views      = [];\n    this.option     = $.extend({}, Completer.defaults, option);\n\n    if (!this.$el.is('input[type=text]') && !this.$el.is('input[type=search]') && !this.$el.is('textarea') && !element.isContentEditable && element.contentEditable != 'true') {\n      throw new Error('textcomplete must be called on a Textarea or a ContentEditable.');\n    }\n\n    // use ownerDocument to fix iframe / IE issues\n    if (element === element.ownerDocument.activeElement) {\n      // element has already been focused. Initialize view objects immediately.\n      this.initialize()\n    } else {\n      // Initialize view objects lazily.\n      var self = this;\n      this.$el.one('focus.' + this.id, function () { self.initialize(); });\n\n      // Special handling for CKEditor: lazy init on instance load\n      if ((!this.option.adapter || this.option.adapter == 'CKEditor') && typeof CKEDITOR != 'undefined' && (this.$el.is('textarea'))) {\n        CKEDITOR.on(\"instanceReady\", function(event) { //For multiple ckeditors on one page: this needs to be executed each time a ckeditor-instance is ready.\n\n          if($.inArray(event.editor.id, initializedEditors) == -1) { //For multiple ckeditors on one page: focus-eventhandler should only be added once for every editor.\n            initializedEditors.push(event.editor.id);\n\t\t\t\n            event.editor.on(\"focus\", function(event2) {\n\t\t\t\t//replace the element with the Iframe element and flag it as CKEditor\n\t\t\t\tself.$el = $(event.editor.editable().$);\n\t\t\t\tif (!self.option.adapter) {\n\t\t\t\t\tself.option.adapter = $.fn.textcomplete['CKEditor'];\n\t\t\t\t}\n\t\t\t\tself.option.ckeditor_instance = event.editor; //For multiple ckeditors on one page: in the old code this was not executed when adapter was alread set. So we were ALWAYS working with the FIRST instance.\n              \tself.initialize();\n            });\n          }\n        });\n      }\n    }\n  }\n\n  Completer.defaults = {\n    appendTo: 'body',\n    className: '',  // deprecated option\n    dropdownClassName: 'dropdown-menu textcomplete-dropdown',\n    maxCount: 10,\n    zIndex: '100',\n    rightEdgeOffset: 30\n  };\n\n  $.extend(Completer.prototype, {\n    // Public properties\n    // -----------------\n\n    id:         null,\n    option:     null,\n    strategies: null,\n    adapter:    null,\n    dropdown:   null,\n    $el:        null,\n    $iframe:    null,\n\n    // Public methods\n    // --------------\n\n    initialize: function () {\n      var element = this.$el.get(0);\n      \n      // check if we are in an iframe\n      // we need to alter positioning logic if using an iframe\n      if (this.$el.prop('ownerDocument') !== document && window.frames.length) {\n        for (var iframeIndex = 0; iframeIndex < window.frames.length; iframeIndex++) {\n          if (this.$el.prop('ownerDocument') === window.frames[iframeIndex].document) {\n            this.$iframe = $(window.frames[iframeIndex].frameElement);\n            break;\n          }\n        }\n      }\n      \n      \n      // Initialize view objects.\n      this.dropdown = new $.fn.textcomplete.Dropdown(element, this, this.option);\n      var Adapter, viewName;\n      if (this.option.adapter) {\n        Adapter = this.option.adapter;\n      } else {\n        if (this.$el.is('textarea') || this.$el.is('input[type=text]') || this.$el.is('input[type=search]')) {\n          viewName = typeof element.selectionEnd === 'number' ? 'Textarea' : 'IETextarea';\n        } else {\n          viewName = 'ContentEditable';\n        }\n        Adapter = $.fn.textcomplete[viewName];\n      }\n      this.adapter = new Adapter(element, this, this.option);\n    },\n\n    destroy: function () {\n      this.$el.off('.' + this.id);\n      if (this.adapter) {\n        this.adapter.destroy();\n      }\n      if (this.dropdown) {\n        this.dropdown.destroy();\n      }\n      this.$el = this.adapter = this.dropdown = null;\n    },\n\n    deactivate: function () {\n      if (this.dropdown) {\n        this.dropdown.deactivate();\n      }\n    },\n\n    // Invoke textcomplete.\n    trigger: function (text, skipUnchangedTerm) {\n      if (!this.dropdown) { this.initialize(); }\n      text != null || (text = this.adapter.getTextFromHeadToCaret());\n      var searchQuery = this._extractSearchQuery(text);\n      if (searchQuery.length) {\n        var term = searchQuery[1];\n        // Ignore shift-key, ctrl-key and so on.\n        if (skipUnchangedTerm && this._term === term && term !== \"\") { return; }\n        this._term = term;\n        this._search.apply(this, searchQuery);\n      } else {\n        this._term = null;\n        this.dropdown.deactivate();\n      }\n    },\n\n    fire: function (eventName) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      this.$el.trigger(eventName, args);\n      return this;\n    },\n\n    register: function (strategies) {\n      Array.prototype.push.apply(this.strategies, strategies);\n    },\n\n    // Insert the value into adapter view. It is called when the dropdown is clicked\n    // or selected.\n    //\n    // value    - The selected element of the array callbacked from search func.\n    // strategy - The Strategy object.\n    // e        - Click or keydown event object.\n    select: function (value, strategy, e) {\n      this._term = null;\n      this.adapter.select(value, strategy, e);\n      this.fire('change').fire('textComplete:select', value, strategy);\n      this.adapter.focus();\n    },\n\n    // Private properties\n    // ------------------\n\n    _clearAtNext: true,\n    _term:        null,\n\n    // Private methods\n    // ---------------\n\n    // Parse the given text and extract the first matching strategy.\n    //\n    // Returns an array including the strategy, the query term and the match\n    // object if the text matches an strategy; otherwise returns an empty array.\n    _extractSearchQuery: function (text) {\n      for (var i = 0; i < this.strategies.length; i++) {\n        var strategy = this.strategies[i];\n        var context = strategy.context(text);\n        if (context || context === '') {\n          var matchRegexp = $.isFunction(strategy.match) ? strategy.match(text) : strategy.match;\n          if (isString(context)) { text = context; }\n          var match = text.match(matchRegexp);\n          if (match) { return [strategy, match[strategy.index], match]; }\n        }\n      }\n      return []\n    },\n\n    // Call the search method of selected strategy..\n    _search: lock(function (free, strategy, term, match) {\n      var self = this;\n      strategy.search(term, function (data, stillSearching) {\n        if (!self.dropdown.shown) {\n          self.dropdown.activate();\n        }\n        if (self._clearAtNext) {\n          // The first callback in the current lock.\n          self.dropdown.clear();\n          self._clearAtNext = false;\n        }\n        self.dropdown.setPosition(self.adapter.getCaretPosition());\n        self.dropdown.render(self._zip(data, strategy, term));\n        if (!stillSearching) {\n          // The last callback in the current lock.\n          free();\n          self._clearAtNext = true; // Call dropdown.clear at the next time.\n        }\n      }, match);\n    }),\n\n    // Build a parameter for Dropdown#render.\n    //\n    // Examples\n    //\n    //  this._zip(['a', 'b'], 's');\n    //  //=> [{ value: 'a', strategy: 's' }, { value: 'b', strategy: 's' }]\n    _zip: function (data, strategy, term) {\n      return $.map(data, function (value) {\n        return { value: value, strategy: strategy, term: term };\n      });\n    }\n  });\n\n  $.fn.textcomplete.Completer = Completer;\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  var $window = $(window);\n\n  var include = function (zippedData, datum) {\n    var i, elem;\n    var idProperty = datum.strategy.idProperty\n    for (i = 0; i < zippedData.length; i++) {\n      elem = zippedData[i];\n      if (elem.strategy !== datum.strategy) continue;\n      if (idProperty) {\n        if (elem.value[idProperty] === datum.value[idProperty]) return true;\n      } else {\n        if (elem.value === datum.value) return true;\n      }\n    }\n    return false;\n  };\n\n  var dropdownViews = {};\n  $(document).on('click', function (e) {\n    var id = e.originalEvent && e.originalEvent.keepTextCompleteDropdown;\n    $.each(dropdownViews, function (key, view) {\n      if (key !== id) { view.deactivate(); }\n    });\n  });\n\n  var commands = {\n    SKIP_DEFAULT: 0,\n    KEY_UP: 1,\n    KEY_DOWN: 2,\n    KEY_ENTER: 3,\n    KEY_PAGEUP: 4,\n    KEY_PAGEDOWN: 5,\n    KEY_ESCAPE: 6\n  };\n\n  // Dropdown view\n  // =============\n\n  // Construct Dropdown object.\n  //\n  // element - Textarea or contenteditable element.\n  function Dropdown(element, completer, option) {\n    this.$el       = Dropdown.createElement(option);\n    this.completer = completer;\n    this.id        = completer.id + 'dropdown';\n    this._data     = []; // zipped data.\n    this.$inputEl  = $(element);\n    this.option    = option;\n\n    // Override setPosition method.\n    if (option.listPosition) { this.setPosition = option.listPosition; }\n    if (option.height) { this.$el.height(option.height); }\n    var self = this;\n    $.each(['maxCount', 'placement', 'footer', 'header', 'noResultsMessage', 'className'], function (_i, name) {\n      if (option[name] != null) { self[name] = option[name]; }\n    });\n    this._bindEvents(element);\n    dropdownViews[this.id] = this;\n  }\n\n  $.extend(Dropdown, {\n    // Class methods\n    // -------------\n\n    createElement: function (option) {\n      var $parent = option.appendTo;\n      if (!($parent instanceof $)) { $parent = $($parent); }\n      var $el = $('<ul></ul>')\n        .addClass(option.dropdownClassName)\n        .attr('id', 'textcomplete-dropdown-' + option._oid)\n        .css({\n          display: 'none',\n          left: 0,\n          position: 'absolute',\n          zIndex: option.zIndex\n        })\n        .appendTo($parent);\n      return $el;\n    }\n  });\n\n  $.extend(Dropdown.prototype, {\n    // Public properties\n    // -----------------\n\n    $el:       null,  // jQuery object of ul.dropdown-menu element.\n    $inputEl:  null,  // jQuery object of target textarea.\n    completer: null,\n    footer:    null,\n    header:    null,\n    id:        null,\n    maxCount:  null,\n    placement: '',\n    shown:     false,\n    data:      [],     // Shown zipped data.\n    className: '',\n\n    // Public methods\n    // --------------\n\n    destroy: function () {\n      // Don't remove $el because it may be shared by several textcompletes.\n      this.deactivate();\n\n      this.$el.off('.' + this.id);\n      this.$inputEl.off('.' + this.id);\n      this.clear();\n      this.$el.remove();\n      this.$el = this.$inputEl = this.completer = null;\n      delete dropdownViews[this.id]\n    },\n\n    render: function (zippedData) {\n      var contentsHtml = this._buildContents(zippedData);\n      var unzippedData = $.map(zippedData, function (d) { return d.value; });\n      if (zippedData.length) {\n        var strategy = zippedData[0].strategy;\n        if (strategy.id) {\n          this.$el.attr('data-strategy', strategy.id);\n        } else {\n          this.$el.removeAttr('data-strategy');\n        }\n        this._renderHeader(unzippedData);\n        this._renderFooter(unzippedData);\n        if (contentsHtml) {\n          this._renderContents(contentsHtml);\n          this._fitToBottom();\n          this._fitToRight();\n          this._activateIndexedItem();\n        }\n        this._setScroll();\n      } else if (this.noResultsMessage) {\n        this._renderNoResultsMessage(unzippedData);\n      } else if (this.shown) {\n        this.deactivate();\n      }\n    },\n\n    setPosition: function (pos) {\n      // Make the dropdown fixed if the input is also fixed\n      // This can't be done during init, as textcomplete may be used on multiple elements on the same page\n      // Because the same dropdown is reused behind the scenes, we need to recheck every time the dropdown is showed\n      var position = 'absolute';\n      // Check if input or one of its parents has positioning we need to care about\n      this.$inputEl.add(this.$inputEl.parents()).each(function() {\n        if($(this).css('position') === 'absolute') // The element has absolute positioning, so it's all OK\n          return false;\n        if($(this).css('position') === 'fixed') {\n          pos.top -= $window.scrollTop();\n          pos.left -= $window.scrollLeft();\n          position = 'fixed';\n          return false;\n        }\n      });\n      this.$el.css(this._applyPlacement(pos));\n      this.$el.css({ position: position }); // Update positioning\n\n      return this;\n    },\n\n    clear: function () {\n      this.$el.html('');\n      this.data = [];\n      this._index = 0;\n      this._$header = this._$footer = this._$noResultsMessage = null;\n    },\n\n    activate: function () {\n      if (!this.shown) {\n        this.clear();\n        this.$el.show();\n        if (this.className) { this.$el.addClass(this.className); }\n        this.completer.fire('textComplete:show');\n        this.shown = true;\n      }\n      return this;\n    },\n\n    deactivate: function () {\n      if (this.shown) {\n        this.$el.hide();\n        if (this.className) { this.$el.removeClass(this.className); }\n        this.completer.fire('textComplete:hide');\n        this.shown = false;\n      }\n      return this;\n    },\n\n    isUp: function (e) {\n      return e.keyCode === 38 || (e.ctrlKey && e.keyCode === 80);  // UP, Ctrl-P\n    },\n\n    isDown: function (e) {\n      return e.keyCode === 40 || (e.ctrlKey && e.keyCode === 78);  // DOWN, Ctrl-N\n    },\n\n    isEnter: function (e) {\n      var modifiers = e.ctrlKey || e.altKey || e.metaKey || e.shiftKey;\n      return !modifiers && (e.keyCode === 13 || e.keyCode === 9 || (this.option.completeOnSpace === true && e.keyCode === 32))  // ENTER, TAB\n    },\n\n    isPageup: function (e) {\n      return e.keyCode === 33;  // PAGEUP\n    },\n\n    isPagedown: function (e) {\n      return e.keyCode === 34;  // PAGEDOWN\n    },\n\n    isEscape: function (e) {\n      return e.keyCode === 27;  // ESCAPE\n    },\n\n    // Private properties\n    // ------------------\n\n    _data:    null,  // Currently shown zipped data.\n    _index:   null,\n    _$header: null,\n    _$noResultsMessage: null,\n    _$footer: null,\n\n    // Private methods\n    // ---------------\n\n    _bindEvents: function () {\n      this.$el.on('mousedown.' + this.id, '.textcomplete-item', $.proxy(this._onClick, this));\n      this.$el.on('touchstart.' + this.id, '.textcomplete-item', $.proxy(this._onClick, this));\n      this.$el.on('mouseover.' + this.id, '.textcomplete-item', $.proxy(this._onMouseover, this));\n      this.$inputEl.on('keydown.' + this.id, $.proxy(this._onKeydown, this));\n    },\n\n    _onClick: function (e) {\n      var $el = $(e.target);\n      e.preventDefault();\n      e.originalEvent.keepTextCompleteDropdown = this.id;\n      if (!$el.hasClass('textcomplete-item')) {\n        $el = $el.closest('.textcomplete-item');\n      }\n      var datum = this.data[parseInt($el.data('index'), 10)];\n      this.completer.select(datum.value, datum.strategy, e);\n      var self = this;\n      // Deactive at next tick to allow other event handlers to know whether\n      // the dropdown has been shown or not.\n      setTimeout(function () {\n        self.deactivate();\n        if (e.type === 'touchstart') {\n          self.$inputEl.focus();\n        }\n      }, 0);\n    },\n\n    // Activate hovered item.\n    _onMouseover: function (e) {\n      var $el = $(e.target);\n      e.preventDefault();\n      if (!$el.hasClass('textcomplete-item')) {\n        $el = $el.closest('.textcomplete-item');\n      }\n      this._index = parseInt($el.data('index'), 10);\n      this._activateIndexedItem();\n    },\n\n    _onKeydown: function (e) {\n      if (!this.shown) { return; }\n\n      var command;\n\n      if ($.isFunction(this.option.onKeydown)) {\n        command = this.option.onKeydown(e, commands);\n      }\n\n      if (command == null) {\n        command = this._defaultKeydown(e);\n      }\n\n      switch (command) {\n        case commands.KEY_UP:\n          e.preventDefault();\n          this._up();\n          break;\n        case commands.KEY_DOWN:\n          e.preventDefault();\n          this._down();\n          break;\n        case commands.KEY_ENTER:\n          e.preventDefault();\n          this._enter(e);\n          break;\n        case commands.KEY_PAGEUP:\n          e.preventDefault();\n          this._pageup();\n          break;\n        case commands.KEY_PAGEDOWN:\n          e.preventDefault();\n          this._pagedown();\n          break;\n        case commands.KEY_ESCAPE:\n          e.preventDefault();\n          this.deactivate();\n          break;\n      }\n    },\n\n    _defaultKeydown: function (e) {\n      if (this.isUp(e)) {\n        return commands.KEY_UP;\n      } else if (this.isDown(e)) {\n        return commands.KEY_DOWN;\n      } else if (this.isEnter(e)) {\n        return commands.KEY_ENTER;\n      } else if (this.isPageup(e)) {\n        return commands.KEY_PAGEUP;\n      } else if (this.isPagedown(e)) {\n        return commands.KEY_PAGEDOWN;\n      } else if (this.isEscape(e)) {\n        return commands.KEY_ESCAPE;\n      }\n    },\n\n    _up: function () {\n      if (this._index === 0) {\n        this._index = this.data.length - 1;\n      } else {\n        this._index -= 1;\n      }\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _down: function () {\n      if (this._index === this.data.length - 1) {\n        this._index = 0;\n      } else {\n        this._index += 1;\n      }\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _enter: function (e) {\n      var datum = this.data[parseInt(this._getActiveElement().data('index'), 10)];\n      this.completer.select(datum.value, datum.strategy, e);\n      this.deactivate();\n    },\n\n    _pageup: function () {\n      var target = 0;\n      var threshold = this._getActiveElement().position().top - this.$el.innerHeight();\n      this.$el.children().each(function (i) {\n        if ($(this).position().top + $(this).outerHeight() > threshold) {\n          target = i;\n          return false;\n        }\n      });\n      this._index = target;\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _pagedown: function () {\n      var target = this.data.length - 1;\n      var threshold = this._getActiveElement().position().top + this.$el.innerHeight();\n      this.$el.children().each(function (i) {\n        if ($(this).position().top > threshold) {\n          target = i;\n          return false\n        }\n      });\n      this._index = target;\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _activateIndexedItem: function () {\n      this.$el.find('.textcomplete-item.active').removeClass('active');\n      this._getActiveElement().addClass('active');\n    },\n\n    _getActiveElement: function () {\n      return this.$el.children('.textcomplete-item:nth(' + this._index + ')');\n    },\n\n    _setScroll: function () {\n      var $activeEl = this._getActiveElement();\n      var itemTop = $activeEl.position().top;\n      var itemHeight = $activeEl.outerHeight();\n      var visibleHeight = this.$el.innerHeight();\n      var visibleTop = this.$el.scrollTop();\n      if (this._index === 0 || this._index == this.data.length - 1 || itemTop < 0) {\n        this.$el.scrollTop(itemTop + visibleTop);\n      } else if (itemTop + itemHeight > visibleHeight) {\n        this.$el.scrollTop(itemTop + itemHeight + visibleTop - visibleHeight);\n      }\n    },\n\n    _buildContents: function (zippedData) {\n      var datum, i, index;\n      var html = '';\n      for (i = 0; i < zippedData.length; i++) {\n        if (this.data.length === this.maxCount) break;\n        datum = zippedData[i];\n        if (include(this.data, datum)) { continue; }\n        index = this.data.length;\n        this.data.push(datum);\n        html += '<li class=\"textcomplete-item\" data-index=\"' + index + '\"><a>';\n        html +=   datum.strategy.template(datum.value, datum.term);\n        html += '</a></li>';\n      }\n      return html;\n    },\n\n    _renderHeader: function (unzippedData) {\n      if (this.header) {\n        if (!this._$header) {\n          this._$header = $('<li class=\"textcomplete-header\"></li>').prependTo(this.$el);\n        }\n        var html = $.isFunction(this.header) ? this.header(unzippedData) : this.header;\n        this._$header.html(html);\n      }\n    },\n\n    _renderFooter: function (unzippedData) {\n      if (this.footer) {\n        if (!this._$footer) {\n          this._$footer = $('<li class=\"textcomplete-footer\"></li>').appendTo(this.$el);\n        }\n        var html = $.isFunction(this.footer) ? this.footer(unzippedData) : this.footer;\n        this._$footer.html(html);\n      }\n    },\n\n    _renderNoResultsMessage: function (unzippedData) {\n      if (this.noResultsMessage) {\n        if (!this._$noResultsMessage) {\n          this._$noResultsMessage = $('<li class=\"textcomplete-no-results-message\"></li>').appendTo(this.$el);\n        }\n        var html = $.isFunction(this.noResultsMessage) ? this.noResultsMessage(unzippedData) : this.noResultsMessage;\n        this._$noResultsMessage.html(html);\n      }\n    },\n\n    _renderContents: function (html) {\n      if (this._$footer) {\n        this._$footer.before(html);\n      } else {\n        this.$el.append(html);\n      }\n    },\n\n    _fitToBottom: function() {\n      var windowScrollBottom = $window.scrollTop() + $window.height();\n      var height = this.$el.height();\n      if ((this.$el.position().top + height) > windowScrollBottom) {\n        // only do this if we are not in an iframe\n        if (!this.completer.$iframe) {\n          this.$el.offset({top: windowScrollBottom - height});\n        }\n      }\n    },\n\n    _fitToRight: function() {\n      // We don't know how wide our content is until the browser positions us, and at that point it clips us\n      // to the document width so we don't know if we would have overrun it. As a heuristic to avoid that clipping\n      // (which makes our elements wrap onto the next line and corrupt the next item), if we're close to the right\n      // edge, move left. We don't know how far to move left, so just keep nudging a bit.\n      var tolerance = this.option.rightEdgeOffset; // pixels. Make wider than vertical scrollbar because we might not be able to use that space.\n      var lastOffset = this.$el.offset().left, offset;\n      var width = this.$el.width();\n      var maxLeft = $window.width() - tolerance;\n      while (lastOffset + width > maxLeft) {\n        this.$el.offset({left: lastOffset - tolerance});\n        offset = this.$el.offset().left;\n        if (offset >= lastOffset) { break; }\n        lastOffset = offset;\n      }\n    },\n\n    _applyPlacement: function (position) {\n      // If the 'placement' option set to 'top', move the position above the element.\n      if (this.placement.indexOf('top') !== -1) {\n        // Overwrite the position object to set the 'bottom' property instead of the top.\n        position = {\n          top: 'auto',\n          bottom: this.$el.parent().height() - position.top + position.lineHeight,\n          left: position.left\n        };\n      } else {\n        position.bottom = 'auto';\n        delete position.lineHeight;\n      }\n      if (this.placement.indexOf('absleft') !== -1) {\n        position.left = 0;\n      } else if (this.placement.indexOf('absright') !== -1) {\n        position.right = 0;\n        position.left = 'auto';\n      }\n      return position;\n    }\n  });\n\n  $.fn.textcomplete.Dropdown = Dropdown;\n  $.extend($.fn.textcomplete, commands);\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  // Memoize a search function.\n  var memoize = function (func) {\n    var memo = {};\n    return function (term, callback) {\n      if (memo[term]) {\n        callback(memo[term]);\n      } else {\n        func.call(this, term, function (data) {\n          memo[term] = (memo[term] || []).concat(data);\n          callback.apply(null, arguments);\n        });\n      }\n    };\n  };\n\n  function Strategy(options) {\n    $.extend(this, options);\n    if (this.cache) { this.search = memoize(this.search); }\n  }\n\n  Strategy.parse = function (strategiesArray, params) {\n    return $.map(strategiesArray, function (strategy) {\n      var strategyObj = new Strategy(strategy);\n      strategyObj.el = params.el;\n      strategyObj.$el = params.$el;\n      return strategyObj;\n    });\n  };\n\n  $.extend(Strategy.prototype, {\n    // Public properties\n    // -----------------\n\n    // Required\n    match:      null,\n    replace:    null,\n    search:     null,\n\n    // Optional\n    id:         null,\n    cache:      false,\n    context:    function () { return true; },\n    index:      2,\n    template:   function (obj) { return obj; },\n    idProperty: null\n  });\n\n  $.fn.textcomplete.Strategy = Strategy;\n\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  var now = Date.now || function () { return new Date().getTime(); };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // `wait` msec.\n  //\n  // This utility function was originally implemented at Underscore.js.\n  var debounce = function (func, wait) {\n    var timeout, args, context, timestamp, result;\n    var later = function () {\n      var last = now() - timestamp;\n      if (last < wait) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    };\n\n    return function () {\n      context = this;\n      args = arguments;\n      timestamp = now();\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      return result;\n    };\n  };\n\n  function Adapter () {}\n\n  $.extend(Adapter.prototype, {\n    // Public properties\n    // -----------------\n\n    id:        null, // Identity.\n    completer: null, // Completer object which creates it.\n    el:        null, // Textarea element.\n    $el:       null, // jQuery object of the textarea.\n    option:    null,\n\n    // Public methods\n    // --------------\n\n    initialize: function (element, completer, option) {\n      this.el        = element;\n      this.$el       = $(element);\n      this.id        = completer.id + this.constructor.name;\n      this.completer = completer;\n      this.option    = option;\n\n      if (this.option.debounce) {\n        this._onKeyup = debounce(this._onKeyup, this.option.debounce);\n      }\n\n      this._bindEvents();\n    },\n\n    destroy: function () {\n      this.$el.off('.' + this.id); // Remove all event handlers.\n      this.$el = this.el = this.completer = null;\n    },\n\n    // Update the element with the given value and strategy.\n    //\n    // value    - The selected object. It is one of the item of the array\n    //            which was callbacked from the search function.\n    // strategy - The Strategy associated with the selected value.\n    select: function (/* value, strategy */) {\n      throw new Error('Not implemented');\n    },\n\n    // Returns the caret's relative coordinates from body's left top corner.\n    getCaretPosition: function () {\n      var position = this._getCaretRelativePosition();\n      var offset = this.$el.offset();\n\n      // Calculate the left top corner of `this.option.appendTo` element.\n      var $parent = this.option.appendTo;\n      if ($parent) {\n         if (!($parent instanceof $)) { $parent = $($parent); }\n         var parentOffset = $parent.offsetParent().offset();\n         offset.top -= parentOffset.top;\n         offset.left -= parentOffset.left;\n      }\n\n      position.top += offset.top;\n      position.left += offset.left;\n      return position;\n    },\n\n    // Focus on the element.\n    focus: function () {\n      this.$el.focus();\n    },\n\n    // Private methods\n    // ---------------\n\n    _bindEvents: function () {\n      this.$el.on('keyup.' + this.id, $.proxy(this._onKeyup, this));\n    },\n\n    _onKeyup: function (e) {\n      if (this._skipSearch(e)) { return; }\n      this.completer.trigger(this.getTextFromHeadToCaret(), true);\n    },\n\n    // Suppress searching if it returns true.\n    _skipSearch: function (clickEvent) {\n      switch (clickEvent.keyCode) {\n        case 9:  // TAB\n        case 13: // ENTER\n        case 16: // SHIFT\n        case 17: // CTRL\n        case 18: // ALT\n        case 33: // PAGEUP\n        case 34: // PAGEDOWN\n        case 40: // DOWN\n        case 38: // UP\n        case 27: // ESC\n          return true;\n      }\n      if (clickEvent.ctrlKey) switch (clickEvent.keyCode) {\n        case 78: // Ctrl-N\n        case 80: // Ctrl-P\n          return true;\n      }\n    }\n  });\n\n  $.fn.textcomplete.Adapter = Adapter;\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  // Textarea adapter\n  // ================\n  //\n  // Managing a textarea. It doesn't know a Dropdown.\n  function Textarea(element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(Textarea.prototype, $.fn.textcomplete.Adapter.prototype, {\n    // Public methods\n    // --------------\n\n    // Update the textarea with the given value and strategy.\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      var post = this.el.value.substring(this.el.selectionEnd);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr);\n        this.$el.val(pre + post);\n        this.el.selectionStart = this.el.selectionEnd = pre.length;\n      }\n    },\n\n    getTextFromHeadToCaret: function () {\n      return this.el.value.substring(0, this.el.selectionEnd);\n    },\n\n    // Private methods\n    // ---------------\n\n    _getCaretRelativePosition: function () {\n      var p = $.fn.textcomplete.getCaretCoordinates(this.el, this.el.selectionStart);\n      return {\n        top: p.top + this._calculateLineHeight() - this.$el.scrollTop(),\n        left: p.left - this.$el.scrollLeft(),\n        lineHeight: this._calculateLineHeight()\n      };\n    },\n\n    _calculateLineHeight: function () {\n      var lineHeight = parseInt(this.$el.css('line-height'), 10);\n      if (isNaN(lineHeight)) {\n        // http://stackoverflow.com/a/4515470/1297336\n        var parentNode = this.el.parentNode;\n        var temp = document.createElement(this.el.nodeName);\n        var style = this.el.style;\n        temp.setAttribute(\n          'style',\n          'margin:0px;padding:0px;font-family:' + style.fontFamily + ';font-size:' + style.fontSize\n        );\n        temp.innerHTML = 'test';\n        parentNode.appendChild(temp);\n        lineHeight = temp.clientHeight;\n        parentNode.removeChild(temp);\n      }\n      return lineHeight;\n    }\n  });\n\n  $.fn.textcomplete.Textarea = Textarea;\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  var sentinelChar = '吶';\n\n  function IETextarea(element, completer, option) {\n    this.initialize(element, completer, option);\n    $('<span>' + sentinelChar + '</span>').css({\n      position: 'absolute',\n      top: -9999,\n      left: -9999\n    }).insertBefore(element);\n  }\n\n  $.extend(IETextarea.prototype, $.fn.textcomplete.Textarea.prototype, {\n    // Public methods\n    // --------------\n\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      var post = this.el.value.substring(pre.length);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr);\n        this.$el.val(pre + post);\n        this.el.focus();\n        var range = this.el.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pre.length);\n        range.moveStart('character', pre.length);\n        range.select();\n      }\n    },\n\n    getTextFromHeadToCaret: function () {\n      this.el.focus();\n      var range = document.selection.createRange();\n      range.moveStart('character', -this.el.value.length);\n      var arr = range.text.split(sentinelChar)\n      return arr.length === 1 ? arr[0] : arr[1];\n    }\n  });\n\n  $.fn.textcomplete.IETextarea = IETextarea;\n}(jQuery);\n\n// NOTE: TextComplete plugin has contenteditable support but it does not work\n//       fine especially on old IEs.\n//       Any pull requests are REALLY welcome.\n\n+function ($) {\n  'use strict';\n\n  // ContentEditable adapter\n  // =======================\n  //\n  // Adapter for contenteditable elements.\n  function ContentEditable (element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(ContentEditable.prototype, $.fn.textcomplete.Adapter.prototype, {\n    // Public methods\n    // --------------\n\n    // Update the content with the given value and strategy.\n    // When an dropdown item is selected, it is executed.\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      // use ownerDocument instead of window to support iframes\n      var sel = this.el.ownerDocument.getSelection();\n      \n      var range = sel.getRangeAt(0);\n      var selection = range.cloneRange();\n      selection.selectNodeContents(range.startContainer);\n      var content = selection.toString();\n      var post = content.substring(range.startOffset);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr)\n            .replace(/ $/, \"&nbsp\"); // &nbsp necessary at least for CKeditor to not eat spaces\n        range.selectNodeContents(range.startContainer);\n        range.deleteContents();\n        \n        // create temporary elements\n        var preWrapper = this.el.ownerDocument.createElement(\"div\");\n        preWrapper.innerHTML = pre;\n        var postWrapper = this.el.ownerDocument.createElement(\"div\");\n        postWrapper.innerHTML = post;\n        \n        // create the fragment thats inserted\n        var fragment = this.el.ownerDocument.createDocumentFragment();\n        var childNode;\n        var lastOfPre;\n        while (childNode = preWrapper.firstChild) {\n        \tlastOfPre = fragment.appendChild(childNode);\n        }\n        while (childNode = postWrapper.firstChild) {\n        \tfragment.appendChild(childNode);\n        }\n        \n        // insert the fragment & jump behind the last node in \"pre\"\n        range.insertNode(fragment);\n        range.setStartAfter(lastOfPre);\n        \n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    },\n\n    // Private methods\n    // ---------------\n\n    // Returns the caret's relative position from the contenteditable's\n    // left top corner.\n    //\n    // Examples\n    //\n    //   this._getCaretRelativePosition()\n    //   //=> { top: 18, left: 200, lineHeight: 16 }\n    //\n    // Dropdown's position will be decided using the result.\n    _getCaretRelativePosition: function () {\n      var range = this.el.ownerDocument.getSelection().getRangeAt(0).cloneRange();\n      var wrapperNode = range.endContainer.parentNode;\n      var node = this.el.ownerDocument.createElement('span');\n      range.insertNode(node);\n      range.selectNodeContents(node);\n      range.deleteContents();\n      setTimeout(function() { wrapperNode.normalize(); }, 0);\n      var $node = $(node);\n      var position = $node.offset();\n      position.left -= this.$el.offset().left;\n      position.top += $node.height() - this.$el.offset().top;\n      position.lineHeight = $node.height();\n      \n      // special positioning logic for iframes\n      // this is typically used for contenteditables such as tinymce or ckeditor\n      if (this.completer.$iframe) {\n        var iframePosition = this.completer.$iframe.offset();\n        position.top += iframePosition.top;\n        position.left += iframePosition.left;\n        // We need to get the scrollTop of the html-element inside the iframe and not of the body-element,\n        // because on IE the scrollTop of the body-element (this.$el) is always zero.\n        position.top -= $(this.completer.$iframe[0].contentWindow.document).scrollTop();\n      }\n      \n      $node.remove();\n      return position;\n    },\n\n    // Returns the string between the first character and the caret.\n    // Completer will be triggered with the result for start autocompleting.\n    //\n    // Example\n    //\n    //   // Suppose the html is '<b>hello</b> wor|ld' and | is the caret.\n    //   this.getTextFromHeadToCaret()\n    //   // => ' wor'  // not '<b>hello</b> wor'\n    getTextFromHeadToCaret: function () {\n      var range = this.el.ownerDocument.getSelection().getRangeAt(0);\n      var selection = range.cloneRange();\n      selection.selectNodeContents(range.startContainer);\n      return selection.toString().substring(0, range.startOffset);\n    }\n  });\n\n  $.fn.textcomplete.ContentEditable = ContentEditable;\n}(jQuery);\n\n// NOTE: TextComplete plugin has contenteditable support but it does not work\n//       fine especially on old IEs.\n//       Any pull requests are REALLY welcome.\n\n+function ($) {\n  'use strict';\n\n  // CKEditor adapter\n  // =======================\n  //\n  // Adapter for CKEditor, based on contenteditable elements.\n  function CKEditor (element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(CKEditor.prototype, $.fn.textcomplete.ContentEditable.prototype, {\n    _bindEvents: function () {\n      var $this = this;\n      this.option.ckeditor_instance.on('key', function(event) {\n        var domEvent = event.data;\n        $this._onKeyup(domEvent);\n        if ($this.completer.dropdown.shown && $this._skipSearch(domEvent)) {\n          return false;\n        }\n      }, null, null, 1); // 1 = Priority = Important!\n      // we actually also need the native event, as the CKEditor one is happening to late\n      this.$el.on('keyup.' + this.id, $.proxy(this._onKeyup, this));\n    },\n});\n\n  $.fn.textcomplete.CKEditor = CKEditor;\n}(jQuery);\n\n// The MIT License (MIT)\n// \n// Copyright (c) 2015 Jonathan Ong me@jongleberry.com\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n// associated documentation files (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge, publish, distribute,\n// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// https://github.com/component/textarea-caret-position\n\n(function ($) {\n\n// The properties that we copy into a mirrored div.\n// Note that some browsers, such as Firefox,\n// do not concatenate properties, i.e. padding-top, bottom etc. -> padding,\n// so we have to do every single property specifically.\nvar properties = [\n  'direction',  // RTL support\n  'boxSizing',\n  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height',\n  'overflowX',\n  'overflowY',  // copy the scrollbar for IE\n\n  'borderTopWidth',\n  'borderRightWidth',\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderStyle',\n\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle',\n  'fontVariant',\n  'fontWeight',\n  'fontStretch',\n  'fontSize',\n  'fontSizeAdjust',\n  'lineHeight',\n  'fontFamily',\n\n  'textAlign',\n  'textTransform',\n  'textIndent',\n  'textDecoration',  // might not make a difference, but better be safe\n\n  'letterSpacing',\n  'wordSpacing',\n\n  'tabSize',\n  'MozTabSize'\n\n];\n\nvar isBrowser = (typeof window !== 'undefined');\nvar isFirefox = (isBrowser && window.mozInnerScreenX != null);\n\nfunction getCaretCoordinates(element, position, options) {\n  if(!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  var debug = options && options.debug || false;\n  if (debug) {\n    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if ( el ) { el.parentNode.removeChild(el); }\n  }\n\n  // mirrored div\n  var div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n\n  var style = div.style;\n  var computed = window.getComputedStyle? getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n\n  // default textarea styles\n  style.whiteSpace = 'pre-wrap';\n  if (element.nodeName !== 'INPUT')\n    style.wordWrap = 'break-word';  // only for textarea-s\n\n  // position off-screen\n  style.position = 'absolute';  // required to return coordinates properly\n  if (!debug)\n    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n\n  // transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    style[prop] = computed[prop];\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height))\n      style.overflowY = 'scroll';\n  } else {\n    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position);\n  // the second special handling for input type=\"text\" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (element.nodeName === 'INPUT')\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n\n  var span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // for inputs, just '.' would be enough, but why bother?\n  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n    left: span.offsetLeft + parseInt(computed['borderLeftWidth'])\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\n$.fn.textcomplete.getCaretCoordinates = getCaretCoordinates;\n\n}(jQuery));\n\nreturn jQuery;\n}));\n\n\n/***/ }),\n\n/***/ 708:\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"comment-temp\"\n  }, [_c('div', [_c('v-expansion-panel', {\n    staticClass: \"expansion-pl-transparent\"\n  }, [_c('v-expansion-panel-content', {\n    attrs: {\n      \"hide-actions\": \"\",\n      \"value\": true\n    }\n  }, [_c('v-card', {\n    staticClass: \"comments__container\"\n  }, [_c('v-card-text', {\n    staticClass: \"pl-4\"\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"comments-container-el\"\n    }\n  })])], 1)], 1)], 1)], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (false) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-c8f36406\", module.exports)\n  }\n}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// o/front-end-super-gate/js/11.c0f2f7e6cba22213cf0e.js","var Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Comment.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler/index?{\\\"id\\\":\\\"data-v-c8f36406\\\"}!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Comment.vue\"),\n  /* scopeId */\n  null,\n  /* cssModules */\n  null\n)\nComponent.options.__file = \"/home/hoanganh/Pictures/FrontEnd_Opencps2.1/frontend-opencps-v2.1/onegate_21_fe/src/components/Comment.vue\"\nif (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== \"default\" && key !== \"__esModule\"})) {console.error(\"named exports are not supported in *.vue files.\")}\nif (Component.options.functional) {console.error(\"[vue-loader] Comment.vue: functional components are not supported with templates, they should use render functions.\")}\n\n/* hot reload */\nif (module.hot) {(function () {\n  var hotAPI = require(\"vue-hot-reload-api\")\n  hotAPI.install(require(\"vue\"), false)\n  if (!hotAPI.compatible) return\n  module.hot.accept()\n  if (!module.hot.data) {\n    hotAPI.createRecord(\"data-v-c8f36406\", Component.options)\n  } else {\n    hotAPI.reload(\"data-v-c8f36406\", Component.options)\n  }\n})()}\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Comment.vue\n// module id = 224\n// module chunks = 0 1 6 11","module.exports = { \"default\": require(\"core-js/library/fn/object/keys\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/object/keys.js\n// module id = 526\n// module chunks = 0 1 2 3 4 5 6 11","require('../../modules/es6.object.keys');\nmodule.exports = require('../../modules/_core').Object.keys;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/object/keys.js\n// module id = 651\n// module chunks = 0 1 2 3 4 5 6 11","// most Object methods by ES6 should accept primitives\nvar $export = require('./_export');\nvar core = require('./_core');\nvar fails = require('./_fails');\nmodule.exports = function (KEY, exec) {\n  var fn = (core.Object || {})[KEY] || Object[KEY];\n  var exp = {};\n  exp[KEY] = exec(fn);\n  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);\n};\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_object-sap.js\n// module id = 652\n// module chunks = 0 1 2 3 4 5 6 11","// 19.1.2.14 Object.keys(O)\nvar toObject = require('./_to-object');\nvar $keys = require('./_object-keys');\n\nrequire('./_object-sap')('keys', function () {\n  return function keys(it) {\n    return $keys(toObject(it));\n  };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/es6.object.keys.js\n// module id = 653\n// module chunks = 0 1 2 3 4 5 6 11","<template>\n  <div class=\"comment-temp\">\n    <!-- Component Trao đổi thảo luận -->\n    <div>\n      <v-expansion-panel class=\"expansion-pl-transparent\">\n        <v-expansion-panel-content hide-actions :value=\"true\">\n          <!-- <div slot=\"header\">\n            <div class=\"background-triangle-small\"> \n              <v-icon size=\"18\" color=\"white\">star_rate</v-icon> \n            </div>\n            TRAO ĐỔI THÔNG TIN\n          </div> -->\n          \n          <v-card class=\"comments__container\" >\n            <v-card-text class=\"pl-4\">\n              <div id=\"comments-container-el\"></div>\n              \n              <!-- <v-flex v-if=\"argShowMore2\"><span class=\"action-show primary--text mx-2 my-2\" @click=\"showMore2\">Xem thêm</span></v-flex>\n              <v-flex v-if=\"!argShowMore2\"><span class=\"action-show primary--text mx-2 my-2\" @click=\"showMore2\">Rút gọn</span></v-flex> -->\n            </v-card-text>\n          </v-card>\n        </v-expansion-panel-content>\n      </v-expansion-panel>\n    </div>\n  </div>\n</template>\n\n<script>\nimport $ from 'jquery'\n// import axios from 'axios'\nimport 'jquery-textcomplete'\nimport 'jquery-comments'\nexport default {\n  props: ['classPK', 'className'],\n  data: () => ({\n    usersComment: [\n      // {\n      //   id: 1,\n      //   fullname: 'Trịnh Công Trình',\n      //   email: 'trinhtc@fds.vn.com',\n      //   pictureUrl: 'https://app.viima.com/static/media/user_profiles/user-icon.png'\n      // },\n      // {\n      //   id: 2,\n      //   fullname: 'Thái Hoàng Anh',\n      //   email: 'anhth@fds.vn',\n      //   pictureUrl: 'https://app.viima.com/static/media/user_profiles/user-icon.png'\n      // }\n    ],\n    comment: [],\n    argShowMore: true,\n    //\n    checkOpinion: true\n  }),\n  computed: {\n    loading () {\n      return this.$store.getters.loading\n    },\n    initData () {\n      return this.$store.getters.loadingInitData\n    }\n  },\n  watch: {\n    classPK (val) {\n      var vm = this\n      vm.$store.dispatch('loadUsersComment', val).then(result => {\n        vm.usersComment = result\n        vm.initComment()\n      }).catch(reject => {\n        vm.initComment()\n      })\n    }\n  },\n  created () {\n    // var vm = this\n    // vm.$nextTick(function () {\n    //   vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n    //     vm.usersComment = result\n    //   })\n    // })\n  },\n  mounted () {\n    // var vm = this\n    // if (vm.classPK) {\n    //   vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n    //     vm.usersComment = result\n    //     vm.initComment()\n    //   }).catch(reject => {\n    //     vm.initComment()\n    //   })\n    // }\n  },\n  methods: {\n    runComment () {\n      var vm = this\n      if (vm.classPK) {\n        vm.initComment()\n        // vm.$store.dispatch('loadUsersComment', vm.classPK).then(result => {\n        //   vm.usersComment = result\n        //   vm.initComment()\n        // }).catch(reject => {\n        //   vm.initComment()\n        // })\n      }\n    },\n    initComment: function () {\n      var vm = this\n      $('#comments-container-el').comments({\n        profilePictureURL: 'https://png.icons8.com/material/50/000000/guest-male.png',\n        textareaRows: 2,\n        enableAttachments: true,\n        enableHashtags: true,\n        enablePinging: true,\n        postCommentOnEnter: false,\n        forceResponsive: false,\n        readOnly: false,\n        textareaPlaceholderText: 'Thêm bình luận mới',\n        newestText: 'Mới nhất',\n        oldestText: 'Cũ nhất',\n        popularText: 'Phổ biến',\n        attachmentsText: 'Đính kèm',\n        sendText: 'Gửi',\n        replyText: 'Trả lời',\n        editText: 'Sửa',\n        editedText: 'Đã sửa',\n        youText: 'Bạn',\n        saveText: 'Ghi lại',\n        deleteText: 'Xóa',\n        // viewAllRepliesText: 'Xem tất cả câu trả lời',\n        hideRepliesText: 'Ẩn câu trả lời',\n        noCommentsText: 'Không có bình luận nào',\n        noAttachmentsText: 'Không có tệp đính kèm',\n        attachmentDropText: 'Kéo thả tệp đính kèm',\n        fieldMappings: {\n          id: 'commentId',\n          parent: 'parent',\n          userId: 'userId',\n          created: 'createdDate',\n          modified: 'modifiedDate',\n          content: 'content',\n          fileURL: 'fileUrl',\n          fileMimeType: 'fileType',\n          fileName: 'fileName',\n          pings: 'pings',\n          creator: 'userId',\n          fullname: 'fullname',\n          profileURL: 'profileUrl',\n          profilePictureURL: 'pictureUrl',\n          isNew: 'isNew',\n          createdByAdmin: 'isAdmin',\n          createdByCurrentUser: 'createdByCurrentUser',\n          upvoteCount: 'upvoteCount',\n          userHasUpvoted: 'userHasUpvoted',\n          email: 'email',\n          opinion: 'opinion',\n          className: 'className',\n          classPK: 'classPK'\n        },\n        timeFormatter: function (time) {\n          if (time) {\n            let value = new Date(time)\n            value.setHours(value.getHours() - 7)\n            return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()} ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n          } else {\n            return ''\n          }\n        },\n        getUsers: function (onSuccess, onError) {\n          onSuccess(vm.usersComment)\n        },\n        getComments: function (onSuccess, onError) {\n          var dataGet = {\n            'classPK': vm.classPK,\n            'className': vm.className\n          }\n          let promise = vm.$store.dispatch('loadCommentItems', dataGet)\n          promise.then(result => {\n            var data = []\n            $.each(result, function (index, item) {\n              vm.comment = item\n              vm.formatComment(vm.comment)\n              data.push(vm.comment)\n            })\n            onSuccess(data)\n          }).catch(reject => {\n            onSuccess([])\n            onError()\n          })\n        },\n        postComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          data.opinion = document.getElementById('opinion').checked\n          vm.$store.dispatch('postComment', data).then(result => {\n            if (result.opinion) {\n              $('.opinion').hide()\n            }\n            document.getElementById('opinion').checked = false\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          })\n        },\n        putComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('putComment', data).then(result => {\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          })\n        },\n        deleteComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('deleteComment', data).then(result => {\n            onSuccess()\n          }).catch(reject => {\n            onError()\n            console.log(reject)\n          })\n        },\n        upvoteComment: function (data, onSuccess, onError) {\n          data.classPK = vm.classPK\n          data.className = vm.className\n          vm.$store.dispatch('upvoteComment', data).then(result => {\n            vm.comment = result\n            vm.formatComment(vm.comment)\n            onSuccess(vm.comment)\n          }).catch(reject => {\n            console.log(reject)\n          })\n        },\n        uploadAttachments: function (comments, onSuccess, onError) {\n          var responses = 0\n          var successfulUploads = []\n          var serverResponded = function () {\n            responses++\n            if (responses === comments.length) {\n              if (successfulUploads.length === 0) {\n                onError()\n              } else {\n                onSuccess(successfulUploads)\n              }\n            }\n          }\n          $(comments).each(function (index, comment) {\n            var formData = new FormData()\n            $(Object.keys(comment)).each(function (index, key) {\n              var value = comment[key]\n              if (value) {\n                formData.append(key, value)\n              }\n            })\n            formData.append('file', comment.file)\n            formData.append('className', vm.className)\n            formData.append('classPK', vm.classPK)\n            formData.append('parent', comment.parent != null ? comment.parent : 0)\n            formData.append('fileName', comment.file.name)\n            formData.append('fileType', comment.file.type)\n            formData.append('fileSize', comment.file.size)\n            formData.append('pings', comment.pings.join())\n            formData.append('opinion', document.getElementById('opinion').checked)\n            // formData.append('email', 'congtrinh0209@gmail.com')\n            // formData.append('fullname', 'Công Trình')\n            formData.append('email', vm.initData.user.userEmail)\n            formData.append('fullname', vm.initData.user.userName)\n            formData.append('opinion', document.getElementById('opinion').checked)\n            $.ajax({\n              url: vm.initData.commentApi + '/uploads',\n              dataType: 'json',\n              type: 'POST',\n              headers: {\n                'groupId': vm.initData.groupId\n                // 'groupId': 55301\n              },\n              data: formData,\n              cache: false,\n              contentType: false,\n              processData: false,\n              success: function (comment) {\n                if (comment.opinion) {\n                  $('.opinion').hide()\n                }\n                document.getElementById('opinion').checked = false\n                vm.formatComment(comment)\n                successfulUploads.push(vm.comment)\n                serverResponded()\n                if (comment.opinion) {\n                  $('.opinion').hide()\n                }\n                document.getElementById('opinion').checked = false\n              },\n              error: function (xhr, data) {\n                serverResponded()\n              }\n            })\n          })\n        }\n        // appendNewComments: function (commentJSONs, onSuccess, onError) {\n        //   const config = {\n        //     headers: {\n        //       'groupId': vm.group_id\n        //     }\n        //   }\n        //   let commentById = {}\n        //   let oldCommentsId = commentJSONs.map(function (c) {\n        //     commentById[c.id] = c.id + '' + c.userHasUpvoted + '' + c.upvoteCount + '' + c.content\n        //     return c.id\n        //   })\n        //   let url = vm.initData.commentApi + '/org.opencps.dossiermgt.model.Dossier/' + vm.classPK + '?start=0&end=10&sort=modified_Number&order=true'\n        //   axios.get(url, config).then(function (response) {\n        //     let data = []\n        //     let dataEdited = []\n        //     if (response.hasOwnProperty('data')) {\n        //       var serializable = response.data.data\n        //       let curId = 0\n        //       let code = ''\n        //       for (var key in serializable) {\n        //         vm.comment = serializable[key]\n        //         curId = vm.comment['commentId']\n        //         code = vm.comment['commentId'] + '' + vm.comment['userHasUpvoted'] + '' + vm.comment['upvoteCount'] + '' + vm.comment['content']\n        //         vm.formatComment(vm.comment)\n        //         /* check return if not exist */\n        //         if (oldCommentsId.indexOf(curId) === -1) {\n        //           data.push(vm.comment)\n        //         } else if (code !== commentById[curId]) {\n        //           /* if have changed */\n        //           dataEdited.push(vm.comment)\n        //         }\n        //       }\n        //       onSuccess(data, dataEdited)\n        //     }\n        //   })\n        //   .catch(function (error) {\n        //     console.log(error)\n        //   })\n        // }\n      })\n    },\n    formatComment: function (comment) {\n      var vm = this\n      vm.comment = comment\n      if (comment.parent === 0) {\n        vm.comment.parent = null\n      }\n      if (comment.fileName === '') {\n        vm.comment.fileName = null\n      }\n      if (comment.fileType === '') {\n        vm.comment.fileType = null\n      }\n      if (comment.fileUrl === '') {\n        vm.comment.fileUrl = null\n      }\n      if (comment.pictureUrl === '') {\n        vm.comment.pictureUrl = 'https://png.icons8.com/material/50/000000/guest-male.png'\n      }\n      vm.comment.fullname = comment.fullname\n      vm.comment.opinion = comment.opinion\n      vm.comment.pings = comment.pings.toString().split(',')\n      vm.comment.createdDate = vm.comment.createDate\n      vm.comment.modifiedDate = vm.comment.modifiedDate\n    },\n    dateTimeView (arg) {\n      if (arg) {\n        let value = new Date(arg)\n        return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()} ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n      } else {\n        return ''\n      }\n    }\n  },\n  filters: {\n    dateTimeView (arg) {\n      if (arg) {\n        let value = new Date(arg)\n        return `${value.getDate().toString().padStart(2, '0')}/${(value.getMonth() + 1).toString().padStart(2, '0')}/${value.getFullYear()}  ${value.getHours().toString().padStart(2, '0')}:${value.getMinutes().toString().padStart(2, '0')}`\n      } else {\n        return ''\n      }\n    }\n  }\n}\n</script>\n\n\n\n// WEBPACK FOOTER //\n// Comment.vue?77e99965","/* eslint-disable */\n\n(function (factory) {\n    if (typeof define === 'function' && define.amd) {\n        // AMD. Register as an anonymous module.\n        define(['jquery'], factory);\n    } else if (typeof module === 'object' && module.exports) {\n        // Node/CommonJS\n        module.exports = function(root, jQuery) {\n            if (jQuery === undefined) {\n                // require('jQuery') returns a factory that requires window to\n                // build a jQuery instance, we normalize how we use modules\n                // that require this pattern but the window provided is a noop\n                // if it's defined (how jquery works)\n                if (typeof window !== 'undefined') {\n                    jQuery = require('jquery');\n                }\n                else {\n                    jQuery = require('jquery')(root);\n                }\n            }\n            factory(jQuery);\n            return jQuery;\n        };\n    } else {\n        // Browser globals\n        factory(jQuery);\n    }\n}(function($) {\n\n    var Comments = {\n        // Instance variables\n        $el: null,\n        commentsById: {},\n        usersById: {},\n        dataFetched: false,\n        currentSortKey: '',\n        options: {},\n        events: {\n            // Close dropdowns\n            'click': 'closeDropdowns',\n            // Save comment on keydown\n            'keydown [contenteditable]' : 'saveOnKeydown',\n            // Listening changes in contenteditable fields (due to input event not working with IE)\n            'focus [contenteditable]' : 'saveEditableContent',\n            'keyup [contenteditable]' : 'checkEditableContentForChange',\n            'paste [contenteditable]' : 'checkEditableContentForChange',\n            'input [contenteditable]' : 'checkEditableContentForChange',\n            'blur [contenteditable]' : 'checkEditableContentForChange',\n            // Navigation\n            'click .navigation li[data-sort-key]' : 'navigationElementClicked',\n            'click .navigation li.title' : 'toggleNavigationDropdown',\n            // Main comenting field\n            'click .commenting-field.main .textarea': 'showMainCommentingField',\n            'click .commenting-field.main .close' : 'hideMainCommentingField',\n            // All commenting fields\n            'click .commenting-field .textarea' : 'increaseTextareaHeight',\n            'change .commenting-field .textarea' : 'increaseTextareaHeight textareaContentChanged',\n            'click .commenting-field:not(.main) .close' : 'removeCommentingField',\n            // Edit mode actions\n            'click .commenting-field .send.enabled' : 'postComment',\n            'click .commenting-field .update.enabled' : 'putComment',\n            'click .commenting-field .delete.enabled' : 'deleteComment',\n            'change .commenting-field .upload.enabled input[type=\"file\"]' : 'fileInputChanged',\n            // Other actions\n            'click li.comment button.upvote' : 'upvoteComment',\n            'click li.comment button.delete.enabled' : 'deleteComment',\n            'click li.comment .hashtag' : 'hashtagClicked',\n            'click li.comment .ping' : 'pingClicked',\n            // Other\n            'click li.comment ul.child-comments .toggle-all': 'toggleReplies',\n            'click li.comment button.reply': 'replyButtonClicked',\n            'click li.comment button.edit': 'editButtonClicked',\n            // Drag & dropping attachments\n            'dragenter' : 'showDroppableOverlay',\n            'dragenter .droppable-overlay' : 'handleDragEnter',\n            'dragleave .droppable-overlay' : 'handleDragLeaveForOverlay',\n            'dragenter .droppable-overlay .droppable' : 'handleDragEnter',\n            'dragleave .droppable-overlay .droppable' : 'handleDragLeaveForDroppable',\n            'dragover .droppable-overlay' : 'handleDragOverForOverlay',\n            'drop .droppable-overlay' : 'handleDrop',\n            // Prevent propagating the click event into buttons under the autocomplete dropdown\n            'click .dropdown.autocomplete': 'stopPropagation',\n            'mousedown .dropdown.autocomplete': 'stopPropagation',\n            'touchstart .dropdown.autocomplete': 'stopPropagation',\n        },\n        // Default options\n\n        getDefaultOptions: function() {\n            return {\n                // User        \n                profilePictureURL: '',\n                currentUserIsAdmin: false,\n                currentUserId: null,\n                // Font awesome icon overrides        \n                spinnerIconURL: '',\n                upvoteIconURL: '',\n                replyIconURL: '',\n                uploadIconURL: '',\n                attachmentIconURL: '',\n                fileIconURL: '',\n                noCommentsIconURL: '',\n                noCommentsImptIconURL: '',\n                // Strings to be formatted (for example localization)     \n                textareaPlaceholderText: 'Thêm bình luận mới',\n                newestText: 'Mới nhất',\n                oldestText: 'Cũ nhất',\n                importantCmtText: 'Ý kiến chính thức',\n                popularText: 'Phổ biến',\n                attachmentsText: 'Tệp đính kèm',\n                sendText: 'Gửi',\n                replyText: 'Trả lời',\n                editText: 'Sửa',\n                editedText: 'Đã sửa',\n                youText: 'You',\n                saveText: 'Ghi lại',\n                deleteText: 'Xoá',\n                newText: 'Mới',\n                viewAllRepliesText: 'Xem tất cả __replyCount__ trả lời',\n                hideRepliesText: 'Hide replies',\n                noCommentsText: 'Không có bình luận',\n                noCommentsImportantText: 'Không có ý kiến chính thức',\n                noAttachmentsText: 'Không có tệp đính kèm',\n                attachmentDropText: 'Kéo thả tệp để tải lên',\n                textFormatter: function(text) {return text},\n                \n                // Functionalities        \n                enableReplying: true,\n                enableEditing: true,\n                enableUpvoting: true,\n                enableDeleting: true,\n                enableAttachments: false,\n                enableHashtags: false,\n                enablePinging: false,\n                enableDeletingCommentWithReplies: false,\n                enableNavigation: true,\n                postCommentOnEnter: false,\n                forceResponsive: false,\n                readOnly: false,\n                defaultNavigationSortKey: 'newest',\n                // Colors     \n                highlightColor: '#2793e6',\n                deleteButtonColor: '#C9302C',\n                scrollContainer: this.$el,\n                roundProfilePictures: false,\n                textareaRows: 2,\n                textareaRowsOnFocus: 2,\n                textareaMaxRows: 5,\n                maxRepliesVisible: 2,\n                \n                fieldMappings: {\n                    id: 'id',\n                    parent: 'parent',\n                    created: 'createdDate',\n                    modified: 'modifiedDate',\n                    content: 'content',\n                    file: 'file',\n                    fileURL: 'file_url',\n                    fileMimeType: 'file_mime_type',\n                    pings: 'pings',\n                    creator: 'creator',\n                    fullname: 'fullname',\n                    profileURL: 'profile_url',\n                    profilePictureURL: 'profile_picture_url',\n                    isNew: 'is_new',\n                    createdByAdmin: 'created_by_admin',\n                    createdByCurrentUser: 'created_by_current_user',\n                    upvoteCount: 'upvote_count',\n                    userHasUpvoted: 'user_has_upvoted'\n                },\n                \n                getUsers: function(success, error) {success([])},\n                getComments: function(success, error) {success([])},\n                postComment: function(commentJSON, success, error) {success(commentJSON)},\n                putComment: function(commentJSON, success, error) {success(commentJSON)},\n                deleteComment: function(commentJSON, success, error) {success()},\n                upvoteComment: function(commentJSON, success, error) {success(commentJSON)},\n                hashtagClicked: function(hashtag) {},\n                pingClicked: function(userId) {},\n                uploadAttachments: function(commentArray, success, error) {success(commentArray)},\n                refresh: function() {},\n                timeFormatter: function(time) {return new Date(time).toLocaleDateString()},\n                appendNewComments: function(commentJSONs, success, error) {success([])}\n            }\n        },\n\n        // Initialization\n        init: function(options, el) {\n            this.$el = $(el);\n            this.$el.addClass('jquery-comments');\n            this.undelegateEvents();\n            this.delegateEvents();\n            // Detect mobile devices\n            (function(a){(jQuery.browser=jQuery.browser||{}).mobile=/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))})(navigator.userAgent||navigator.vendor||window.opera);\n            if($.browser.mobile) this.$el.addClass('mobile');\n            // Init options\n            this.options = $.extend(true, {}, this.getDefaultOptions(), options);;\n            // Read-only mode\n            if(this.options.readOnly) this.$el.addClass('read-only');\n            // Set initial sort key\n            this.currentSortKey = this.options.defaultNavigationSortKey;\n            // Create CSS declarations for highlight color\n            this.createCssDeclarations();\n            // Fetching data and rendering\n            this.fetchDataAndRender();\n        },\n\n        delegateEvents: function() {\n            this.bindEvents(false);\n        },\n\n        undelegateEvents: function() {\n            this.bindEvents(true);\n        },\n\n        bindEvents: function(unbind) {\n                var bindFunction = unbind ? 'off' : 'on';\n                for (var key in this.events) {\n                        var eventName = key.split(' ')[0];\n                        var selector = key.split(' ').slice(1).join(' ');\n                        var methodNames = this.events[key].split(' ');\n\n                        for(var index in methodNames) {\n                                if(methodNames.hasOwnProperty(index)) {\n                                        var method = this[methodNames[index]];\n\n                                        // Keep the context\n                                        method = $.proxy(method, this);\n\n                                        if (selector == '') {\n                                                this.$el[bindFunction](eventName, method);\n                                        } else {\n                                                this.$el[bindFunction](eventName, selector, method);\n                                        }\n                                }\n                        }\n                }\n        },\n\n        // Basic functionalities\n        fetchDataAndRender: function () {\n            var self = this;\n            setTimeout(function(){self.appendNewComments()},30000);\n            this.commentsById = {};\n            this.usersById = {};\n            this.$el.empty();\n            this.createHTML();\n            // Render after data has been fetched\n            var dataFetched = this.after(this.options.enablePinging ? 2 : 1, function() {\n                self.dataFetched = true;\n                self.render();\n            });\n\n            // Comments\n            var commentsFetched = function(commentsArray) {\n                // Convert comments to custom data model\n                var commentModels = commentsArray.map(function(commentsJSON){\n                    return self.createCommentModel(commentsJSON)\n                });\n                // Sort comments by date (oldest first so that they can be appended to the data model\n                // without caring dependencies)\n                self.sortComments(commentModels, 'oldest');\n                $(commentModels).each(function(index, commentModel) {\n                        self.addCommentToDataModel(commentModel);\n                });\n                dataFetched();\n            };\n            this.options.getComments(commentsFetched, dataFetched);\n\n            // Users\n            if(this.options.enablePinging) {\n                var usersFetched = function(userArray) {\n                    $(userArray).each(function(index, user) {\n                        self.usersById[user.id] = user;\n                    });\n                    dataFetched();\n                }\n                this.options.getUsers(usersFetched, dataFetched);\n            };\n        },\n\n        fetchNext: function() {\n            var self = this;\n            // Loading indicator\n            var spinner = this.createSpinner();\n            this.$el.find('ul#comment-list').append(spinner);\n            var success = function (commentModels) {\n                $(commentModels).each(function(index, commentModel) {\n                    self.createComment(commentModel);\n                });\n                spinner.remove();\n            }\n\n            var error = function() {\n                spinner.remove();\n            }\n            this.options.getComments(success, error);\n        },\n\n        createCommentModel: function(commentJSON) {\n            var commentModel = this.applyInternalMappings(commentJSON);\n            commentModel.childs = [];\n            this.commentsById[commentModel.id] = commentModel;\n            return commentModel;\n        },\n\n        addCommentToDataModel: function(commentModel) {\n            if(!(commentModel.id in this.commentsById)) {\n                this.commentsById[commentModel.id] = commentModel;\n\n                // Update child array of the parent (append childs to the array of outer most parent)\n                if(commentModel.parent) {\n                    var outermostParent = this.getOutermostParent(commentModel.parent);\n                    outermostParent.childs.push(commentModel.id);\n                }\n            }\n        },\n\n        updateCommentModel: function(commentModel) {\n            $.extend(this.commentsById[commentModel.id], commentModel);\n        },\n\n        render: function() {\n            var self = this;\n            // Prevent re-rendering if data hasn't been fetched\n            if(!this.dataFetched) return;\n            // Show active container\n            this.showActiveContainer();\n            // Create comments\n            this.createComments();\n            // Create attachments if enabled\n            if(this.options.enableAttachments) this.createAttachments(); \n            // Create important comment\n            this.createImportantComments();\n            // Remove spinner\n            this.$el.find('> .spinner').remove();\n            this.options.refresh();\n        },\n\n        showActiveContainer: function() {\n            var activeNavigationEl = this.$el.find('.navigation li[data-container-name].active');\n            var containerName = activeNavigationEl.data('container-name');\n            var containerEl = this.$el.find('[data-container=\"' + containerName + '\"]');\n            containerEl.siblings('[data-container]').hide();\n            containerEl.show();\n        },\n\n        createComments: function() {\n            var self = this;\n            // Create the list element before appending to DOM in order to reach better performance\n            this.$el.find('#comment-list').remove();\n            var commentList = $('<ul/>', {\n                id: 'comment-list',\n                'class': 'main'\n            });\n\n            // Divide commments into main level comments and replies\n            var mainLevelComments = [];\n            var replies = [];\n\n            $(this.getComments()).each(function(index, commentModel) {\n                if(commentModel.parent == null) {\n                    mainLevelComments.push(commentModel);\n                } else {\n                    replies.push(commentModel);\n                }\n            });\n\n            // Append main level comments\n            this.sortComments(mainLevelComments, this.currentSortKey);\n            mainLevelComments.reverse();    // Reverse the order as they are prepended to DOM\n            $(mainLevelComments).each(function(index, commentModel) {\n                self.addComment(commentModel, commentList);\n            });\n\n            // Append replies in chronological order\n            this.sortComments(replies, 'oldest');\n            $(replies).each(function(index, commentModel) {\n                self.addComment(commentModel, commentList);\n            });\n\n            // Appned list to DOM\n            this.$el.find('[data-container=\"comments\"]').prepend(commentList);\n        },\n\n        createAttachments: function() {\n            var self = this;\n            // Create the list element before appending to DOM in order to reach better performance\n            this.$el.find('#attachment-list').remove();\n            var attachmentList = $('<ul/>', {\n                id: 'attachment-list',\n                'class': 'main'\n            });\n\n            var attachments = this.getAttachments();\n            this.sortComments(attachments, 'newest');\n            attachments.reverse();    // Reverse the order as they are prepended to DOM\n            $(attachments).each(function(index, commentModel) {\n                self.addAttachment(commentModel, attachmentList);\n            });\n\n            // Appned list to DOM\n            this.$el.find('[data-container=\"attachments\"]').prepend(attachmentList);\n        },\n        createImportantComments: function() {\n            var self = this;\n            // Create the list element before appending to DOM in order to reach better performance\n            this.$el.find('#importantCmt-list').remove();\n            var importantCmtList = $('<ul/>', {\n                    id: 'importantCmt-list',\n                    'class': 'main'\n            });\n\n            var importantCmt = this.getImportantCmt();\n\n            this.sortComments(importantCmt, 'newest');\n            importantCmt.reverse();    // Reverse the order as they are prepended to DOM\n            $(importantCmt).each(function(index, commentModel) {\n                    self.addImportantCmt(commentModel, importantCmtList);\n            });\n\n            // Appned list to DOM\n            this.$el.find('[data-container=\"importantCmt\"]').prepend(importantCmtList);\n        },\n        addComment: function(commentModel, commentList) {\n            commentList = commentList || this.$el.find('#comment-list');\n            var commentEl = this.createCommentElement(commentModel);\n\n            // Case: reply\n            if(commentModel.parent) {\n                var directParentEl = commentList.find('.comment[data-id=\"'+commentModel.parent+'\"]');\n\n                // Re-render action bar of direct parent element\n                this.reRenderCommentActionBar(commentModel.parent);\n\n                // Force replies into one level only\n                var outerMostParent = directParentEl.parents('.comment').last();\n                if(outerMostParent.length == 0) outerMostParent = directParentEl;\n\n                // Append element to DOM\n                var childCommentsEl = outerMostParent.find('.child-comments');\n                var commentingField = childCommentsEl.find('.commenting-field');\n                if(commentingField.length) {\n                    commentingField.before(commentEl)\n                } else {\n                    childCommentsEl.append(commentEl);\n                }\n\n                // Update toggle all -button\n                this.updateToggleAllButton(outerMostParent);\n\n            // Case: main level comment\n            } else {\n                commentList.prepend(commentEl);\n            }\n        },\n        addAttachment: function(commentModel, commentList) {\n            commentList = commentList || this.$el.find('#attachment-list');\n            var commentEl = this.createCommentElement(commentModel);\n            commentList.prepend(commentEl);\n        },\n        addImportantCmt: function(commentModel, commentList) {\n            commentList = commentList || this.$el.find('#importantCmt-list');\n            var commentEl = this.createCommentElement(commentModel);\n            commentList.prepend(commentEl);\n        },\n        removeComment: function(commentId) {\n            var self = this;\n            var commentModel = this.commentsById[commentId];\n\n            // Remove child comments recursively\n            var childComments = this.getChildComments(commentModel.id);\n            $(childComments).each(function(index, childComment) {\n                self.removeComment(childComment.id);\n            });\n\n            // Update the child array of outermost parent\n            if(commentModel.parent) {\n                var outermostParent = this.getOutermostParent(commentModel.parent);\n                var indexToRemove = outermostParent.childs.indexOf(commentModel.id);\n                outermostParent.childs.splice(indexToRemove, 1);\n            }\n\n            // Remove the comment from data model\n            delete this.commentsById[commentId];\n            var commentElements = this.$el.find('li.comment[data-id=\"'+commentId+'\"]');\n            var parentEl = commentElements.parents('li.comment').last();\n\n            // Remove the element\n            commentElements.remove();\n\n            // Update the toggle all button\n            this.updateToggleAllButton(parentEl);\n        },\n\n        uploadAttachments: function(files, commentingField) {\n            var self = this;\n            if(!commentingField) commentingField = this.$el.find('.commenting-field.main');\n            var isReply = !commentingField.hasClass('main');\n            var fileCount = files.length;\n\n            if(fileCount) {\n                var uploadButton = commentingField.find('.upload');\n                var textarea = commentingField.find('.textarea');\n\n                // Disable upload button and append spinners while request is pending\n                uploadButton.removeClass('enabled');\n                var attachmentListSpinner = this.createSpinner();\n                var commentListSpinner = this.createSpinner();\n                this.$el.find('ul#attachment-list').prepend(attachmentListSpinner);\n                if(isReply) {\n                    commentingField.before(commentListSpinner);\n                } else {\n                    this.$el.find('ul#comment-list').prepend(commentListSpinner);\n                }\n\n                var success = function(commentArray) {\n                    $(commentArray).each(function(index, commentJSON) {\n                        var commentModel = self.createCommentModel(commentJSON);\n                        self.addCommentToDataModel(commentModel);\n                        self.addComment(commentModel);\n                        self.addAttachment(commentModel);\n                    });\n\n                    // Close the commenting field if all the uploads were successfull\n                    // and there's no content besides the attachment\n                    if(commentArray.length == fileCount && self.getTextareaContent(textarea).length == 0) {\n                        commentingField.find('.close').trigger('click');\n                    }\n\n                    // Enable upload button and remove spinners\n                    uploadButton.addClass('enabled');\n                    commentListSpinner.remove();\n                    attachmentListSpinner.remove();\n                };\n\n                var error = function() {\n                    // Enable upload button and remove spinners\n                    uploadButton.addClass('enabled');\n                    commentListSpinner.remove();\n                    attachmentListSpinner.remove();\n                };\n\n                var commentArray = [];\n                $(files).each(function(index, file) {\n                    // Create comment JSON\n                    var commentJSON = self.createCommentJSON(textarea);\n                    commentJSON.id += '-' + index;\n                    commentJSON.content = '';\n                    commentJSON.file = file;\n                    commentJSON.fileURL = 'C:/fakepath/' + file.name;\n                    commentJSON.fileMimeType = file.type;\n                    // Reverse mapping\n                    commentJSON = self.applyExternalMappings(commentJSON);\n                    commentArray.push(commentJSON);\n                });\n\n                self.options.uploadAttachments(commentArray, success, error);\n            }\n\n            // Clear the input field\n            uploadButton.find('input').val('');\n        },\n\n        updateToggleAllButton: function(parentEl) {\n            // Don't hide replies if maxRepliesVisible is null or undefined\n            if (this.options.maxRepliesVisible == null) return;\n\n            var childCommentsEl = parentEl.find('.child-comments');\n            var childComments = childCommentsEl.find('.comment');\n            var toggleAllButton = childCommentsEl.find('li.toggle-all');\n            childComments.removeClass('hidden-reply');\n\n            // Select replies to be hidden\n            if (this.options.maxRepliesVisible === 0) {\n                var hiddenReplies = childComments;\n            } else {\n                var hiddenReplies = childComments.slice(0, -this.options.maxRepliesVisible);\n            }\n\n            // Add identifying class for hidden replies so they can be toggled\n            hiddenReplies.addClass('hidden-reply');\n\n            // Show all replies if replies are expanded\n            if(toggleAllButton.find('span.text').text() == this.options.textFormatter(this.options.hideRepliesText)) {\n                hiddenReplies.addClass('visible');\n            }\n\n            // Make sure that toggle all button is present\n            if(childComments.length > this.options.maxRepliesVisible) {\n\n                // Append button to toggle all replies if necessary\n                if(!toggleAllButton.length) {\n\n                    toggleAllButton = $('<li/>', {\n                        'class': 'toggle-all highlight-font-bold'\n                    });\n                    var toggleAllButtonText = $('<span/>', {\n                        'class': 'text'\n                    });\n                    var caret = $('<span/>', {\n                        'class': 'caret'\n                    });\n\n                    // Append toggle button to DOM\n                    toggleAllButton.append(toggleAllButtonText).append(caret);\n                    childCommentsEl.prepend(toggleAllButton);\n                }\n\n                // Update the text of toggle all -button\n                this.setToggleAllButtonText(toggleAllButton, false);\n            // Make sure that toggle all button is not present\n            } else {\n                toggleAllButton.remove();\n            }\n        },\n\n        sortComments: function (comments, sortKey) {\n            var self = this;\n            // Sort by popularity\n            if(sortKey == 'popularity') {\n                comments.sort(function(commentA, commentB) {\n                    var pointsOfA = commentA.childs.length;\n                    var pointsOfB = commentB.childs.length;\n\n                    if(self.options.enableUpvoting) {\n                        pointsOfA += commentA.upvoteCount;\n                        pointsOfB += commentB.upvoteCount;\n                    }\n\n                    if(pointsOfB != pointsOfA) {\n                        return pointsOfB - pointsOfA;\n\n                    } else {\n                        // Return newer if popularity is the same\n                        var createdA = new Date(commentA.created).getTime();\n                        var createdB = new Date(commentB.created).getTime();\n                        return createdB - createdA;\n                    }\n                });\n            // Sort by date\n            } else {\n                comments.sort(function(commentA, commentB) {\n                    var createdA = (new Date(commentA.created)).getTime();\n                    var createdB = (new Date(commentB.created)).getTime();\n                    if(sortKey == 'oldest') {\n                        return createdA - createdB;\n                    } else {\n                        return createdB - createdA;\n                    }\n                });\n            }\n        },\n\n        sortUsers: function(users) {\n            users.sort(function(a,b) {\n                var nameA = a.fullname.toLowerCase().trim();\n                var nameB = b.fullname.toLowerCase().trim();\n                if(nameA < nameB) return -1;\n                if(nameA > nameB) return 1;\n                return 0;\n            });\n        },\n\n        sortAndReArrangeComments: function(sortKey) {\n            var commentList = this.$el.find('#comment-list');\n\n            // Get main level comments\n            var mainLevelComments = this.getComments().filter(function(commentModel){return !commentModel.parent});\n            this.sortComments(mainLevelComments, sortKey);\n\n            // Rearrange the main level comments\n            $(mainLevelComments).each(function(index, commentModel) {\n                    var commentEl = commentList.find('> li.comment[data-id='+commentModel.id+']');\n                    commentList.append(commentEl);\n            });\n        },\n\n        showActiveSort: function() {\n            var activeElements = this.$el.find('.navigation li[data-sort-key=\"' + this.currentSortKey + '\"]');\n\n            // Indicate active sort\n            this.$el.find('.navigation li').removeClass('active');\n            activeElements.addClass('active');\n\n            // Update title for dropdown\n            var titleEl = this.$el.find('.navigation .title');\n            if(this.currentSortKey != 'attachments') {\n                titleEl.addClass('active');\n                titleEl.find('header').html(activeElements.first().html());\n            } else {\n                var defaultDropdownEl = this.$el.find('.navigation ul.dropdown').children().first();\n                titleEl.find('header').html(defaultDropdownEl.html());\n            } \n\n            // Show active container\n            this.showActiveContainer();\n        },\n\n        forceResponsive: function() {\n            this.$el.addClass('responsive');\n        },\n\n        // Event handlers\n\n        closeDropdowns: function() {\n            this.$el.find('.dropdown').hide();\n        },\n\n        saveOnKeydown: function(ev) {\n            // Save comment on cmd/ctrl + enter\n            if(ev.keyCode == 13) {\n                var metaKey = ev.metaKey || ev.ctrlKey;\n                if(this.options.postCommentOnEnter || metaKey) {                \n                    var el = $(ev.currentTarget);\n                    el.siblings('.control-row').find('.save').trigger('click');\n                    ev.stopPropagation();\n                    ev.preventDefault();\n                }\n            }\n        },\n\n        saveEditableContent: function(ev) {\n            var el = $(ev.currentTarget);\n            el.data('before', el.html());\n        },\n\n        checkEditableContentForChange: function(ev) {\n            var el = $(ev.currentTarget);\n            if (el.data('before') != el.html()) {\n                el.data('before', el.html());\n                el.trigger('change');\n            }\n        },\n\n        navigationElementClicked: function(ev) {\n            var navigationEl = $(ev.currentTarget);\n            var sortKey = navigationEl.data().sortKey;\n\n            // Sort the comments if necessary\n            if(sortKey != 'attachments') {\n                    this.sortAndReArrangeComments(sortKey);\n            }\n            // Save the current sort key\n            this.currentSortKey = sortKey;\n            this.showActiveSort();\n        },\n\n        toggleNavigationDropdown: function(ev) {\n            // Prevent closing immediately\n            ev.stopPropagation();\n\n            var dropdown = $(ev.currentTarget).find('~ .dropdown');\n            dropdown.toggle();\n        },\n\n        showMainCommentingField: function(ev) {\n            var mainTextarea = $(ev.currentTarget);\n            mainTextarea.siblings('.control-row').show();\n            mainTextarea.parent().find('.close').show();\n            mainTextarea.focus();\n        },\n\n        hideMainCommentingField: function(ev) {\n            var closeButton = $(ev.currentTarget);\n            var mainTextarea = this.$el.find('.commenting-field.main .textarea');\n            var mainControlRow = this.$el.find('.commenting-field.main .control-row');\n\n            this.clearTextarea(mainTextarea);\n            this.adjustTextareaHeight(mainTextarea, false);\n\n            mainControlRow.hide();\n            closeButton.hide();\n            mainTextarea.blur();\n        },\n\n        increaseTextareaHeight: function(ev) {\n            var textarea = $(ev.currentTarget);\n            this.adjustTextareaHeight(textarea, true);\n        },\n\n        textareaContentChanged: function(ev) {\n            var textarea = $(ev.currentTarget);\n            var saveButton = textarea.siblings('.control-row').find('.save');\n\n            // Update parent id if reply-to tag was removed\n            if(!textarea.find('.reply-to.tag').length) {\n                var commentId = textarea.attr('data-comment');\n\n                // Case: editing comment\n                if(commentId) {\n                    var parentComments = textarea.parents('li.comment');\n                    if(parentComments.length > 1) {\n                        var parentId = parentComments.last().data('id');\n                        textarea.attr('data-parent', parentId);\n                    }\n\n                // Case: new comment\n                } else {\n                    var parentId = textarea.parents('li.comment').last().data('id');\n                    textarea.attr('data-parent', parentId);\n                }\n            }\n\n            // Move close button if scrollbar is visible\n            var commentingField = textarea.parents('.commenting-field').first();\n            if(textarea[0].scrollHeight > textarea.outerHeight()) {\n                commentingField.addClass('scrollable');\n            } else {\n                commentingField.removeClass('scrollable');\n            }\n\n            // Check if content or parent has changed if editing\n            var contentOrParentChangedIfEditing = true;\n            var content = this.getTextareaContent(textarea, true);\n            if(commentId = textarea.attr('data-comment')) {\n                var contentChanged = content != this.commentsById[commentId].content;\n                var parentFromModel;\n                if(this.commentsById[commentId].parent) {\n                    parentFromModel = this.commentsById[commentId].parent.toString();\n                }\n                var parentChanged = textarea.attr('data-parent') != parentFromModel;\n                contentOrParentChangedIfEditing = contentChanged || parentChanged;\n            }\n\n            // Check whether save button needs to be enabled\n            if(content.length && contentOrParentChangedIfEditing) {\n                saveButton.addClass('enabled');\n            } else {\n                saveButton.removeClass('enabled');\n            }\n        },\n\n        removeCommentingField: function(ev) {\n            var closeButton = $(ev.currentTarget);\n\n            // Remove edit class from comment if user was editing the comment\n            var textarea = closeButton.siblings('.textarea');\n            if(textarea.attr('data-comment')) {\n                closeButton.parents('li.comment').first().removeClass('edit');\n            }\n\n            // Remove the field\n            var commentingField = closeButton.parents('.commenting-field').first();\n            commentingField.remove();\n        },\n\n        appendNewComments: function() {\n            var self = this;\n            console.log($(self.$el.context), $(self.$el.context).length);\n            if ($(self.$el.context).length == 0) {\n                clearTimeout(myVar);\n                return;\n            }\n            var commentJSONs = this.getComments();\n\n            var success = function(commentsNew, commentsEdit) {\n                for (var c in commentsNew) {\n                    self.createComment(commentsNew[c]);\n                }\n                \n                for (var cmt in commentsEdit) {\n                    var commentModel = self.createCommentModel(commentsEdit[cmt]);\n                    self.updateCommentModel(commentModel);\n                    self.reRenderComment(commentModel.id);\n                }\n            };\n\n            var error = function() {\n                console.log('jquery comment append new error');\n            };\n            var myVar = setTimeout(function(){self.appendNewComments()},30000);\n            this.options.appendNewComments(commentJSONs, success, error);\n        },\n            \n        postComment: function(ev) {\n            var self = this;\n            var sendButton = $(ev.currentTarget);\n            var commentingField = sendButton.parents('.commenting-field').first();\n            var textarea = commentingField.find('.textarea');\n\n            // Disable send button while request is pending\n            sendButton.removeClass('enabled');\n\n            // Create comment JSON\n            var commentJSON = this.createCommentJSON(textarea);\n\n            // Reverse mapping\n            commentJSON = this.applyExternalMappings(commentJSON);\n\n            var success = function(commentJSON) {\n                self.currentSortKey = 'newest'\n                self.showActiveSort()\n                self.createComment(commentJSON);\n                commentingField.find('.close').trigger('click');\n            };\n\n            var error = function() {\n                sendButton.addClass('enabled');\n            };\n\n            this.options.postComment(commentJSON, success, error);\n        },\n\n        createComment: function(commentJSON) {\n            var commentModel = this.createCommentModel(commentJSON);\n            this.addCommentToDataModel(commentModel);\n            this.addComment(commentModel);\n            if (commentModel.opinion == true) {\n                this.addImportantCmt(commentModel);\n            }\n        },\n\n        putComment: function(ev) {\n            var self = this;\n            var saveButton = $(ev.currentTarget);\n            var commentingField = saveButton.parents('.commenting-field').first();\n            var textarea = commentingField.find('.textarea');\n\n            // Disable send button while request is pending\n            saveButton.removeClass('enabled');\n\n            // Use a clone of the existing model and update the model after succesfull update\n            var commentJSON =  $.extend({}, this.commentsById[textarea.attr('data-comment')]);\n            $.extend(commentJSON, {\n                parent: textarea.attr('data-parent') || null,\n                content: this.getTextareaContent(textarea),\n                pings: this.getPings(textarea),\n                modified: new Date().getTime()\n            });\n\n            // Reverse mapping\n            commentJSON = this.applyExternalMappings(commentJSON);\n            \n            var success = function(commentJSON) {\n                // The outermost parent can not be changed by editing the comment so the childs array\n                // of parent does not require an update\n\n                var commentModel = self.createCommentModel(commentJSON);\n            \n                // Delete childs array from new comment model since it doesn't need an update\n                delete commentModel['childs'];\n                self.updateCommentModel(commentModel);\n                // Close the editing field\n                commentingField.find('.close').trigger('click');\n\n                // Re-render the comment\n                self.reRenderComment(commentModel.id);\n            };\n\n            var error = function() {\n                saveButton.addClass('enabled');\n            };\n\n            this.options.putComment(commentJSON, success, error);\n        },\n\n        deleteComment: function(ev) {\n            var self = this;\n            var deleteButton = $(ev.currentTarget);\n            var commentEl = deleteButton.parents('.comment').first();\n            var commentJSON =  $.extend({}, this.commentsById[commentEl.attr('data-id')]);\n            var commentId = commentJSON.id;\n            var parentId = commentJSON.parent;\n\n            // Disable send button while request is pending\n            deleteButton.removeClass('enabled');\n\n            // Reverse mapping\n            commentJSON = this.applyExternalMappings(commentJSON);\n\n            var success = function() {\n                self.removeComment(commentId);\n                if(parentId) self.reRenderCommentActionBar(parentId);\n                // \n                if (commentJSON.opinion==true) {\n                    // $('[data-sort-key=${self.currentSortKey}]').trigger('click')\n                }\n                // \n            };\n\n            var error = function() {\n                deleteButton.addClass('enabled');\n            };\n\n            this.options.deleteComment(commentJSON, success, error);\n        },\n\n        hashtagClicked: function(ev) {\n            var el = $(ev.currentTarget);\n            var value = el.attr('data-value');\n            this.options.hashtagClicked(value);\n        },\n\n        pingClicked: function(ev) {\n            var el = $(ev.currentTarget);\n            var value = el.attr('data-value');\n            this.options.pingClicked(value);\n        },\n\n        fileInputChanged: function(ev, files) {\n            var files = ev.currentTarget.files;\n            var commentingField = $(ev.currentTarget).parents('.commenting-field').first();\n            this.uploadAttachments(files, commentingField);\n        },\n\n        upvoteComment: function(ev) {\n            var self = this;\n            var commentEl = $(ev.currentTarget).parents('li.comment').first();\n            var commentModel = commentEl.data().model;\n\n            // Check whether user upvoted the comment or revoked the upvote\n            var previousUpvoteCount = commentModel.upvoteCount;\n            var newUpvoteCount;\n            if(commentModel.userHasUpvoted) {\n                newUpvoteCount = previousUpvoteCount - 1;\n            } else {\n                newUpvoteCount = previousUpvoteCount + 1;\n            }\n\n            // Show changes immediatelly\n            commentModel.userHasUpvoted = !commentModel.userHasUpvoted;\n            commentModel.upvoteCount = newUpvoteCount;\n            this.reRenderUpvotes(commentModel.id);\n\n            // Reverse mapping\n            var commentJSON = $.extend({}, commentModel);\n            commentJSON = this.applyExternalMappings(commentJSON);\n\n            var success = function(commentJSON) {\n                var commentModel = self.createCommentModel(commentJSON);\n                self.updateCommentModel(commentModel);\n                self.reRenderUpvotes(commentModel.id);\n            };\n\n            var error = function() {\n                // Revert changes\n                commentModel.userHasUpvoted = !commentModel.userHasUpvoted;\n                commentModel.upvoteCount = previousUpvoteCount;\n                self.reRenderUpvotes(commentModel.id);\n            };\n\n            this.options.upvoteComment(commentJSON, success, error);\n        },\n\n        toggleReplies: function(ev) {\n            var el = $(ev.currentTarget);\n            el.siblings('.hidden-reply').toggleClass('visible');\n            this.setToggleAllButtonText(el, true);\n        },\n\n        replyButtonClicked: function(ev) {\n            var replyButton = $(ev.currentTarget);\n            var outermostParent = replyButton.parents('li.comment').last();\n            var parentId = replyButton.parents('.comment').first().data().id;\n\n            // Remove existing field\n            var replyField = outermostParent.find('.child-comments > .commenting-field');\n            if(replyField.length) replyField.remove();\n            var previousParentId = replyField.find('.textarea').attr('data-parent');\n\n            // Create the reply field (do not re-create)\n            if(previousParentId != parentId) {\n                replyField = this.createCommentingFieldElement(parentId, null, false);\n                outermostParent.find('.child-comments').append(replyField);\n\n                // Move cursor to end\n                var textarea = replyField.find('.textarea');\n                this.moveCursorToEnd(textarea)\n\n                // Make sure the reply field will be displayed\n                var scrollTop = this.options.scrollContainer.scrollTop();\n                var endOfReply = scrollTop + replyField.position().top + replyField.outerHeight();\n                var endOfScrollable = scrollTop + this.options.scrollContainer.outerHeight();\n                if(endOfReply > endOfScrollable) {\n                    var newScrollTop = scrollTop + (endOfReply - endOfScrollable);\n                    this.options.scrollContainer.scrollTop(newScrollTop);\n                }\n            }\n        },\n\n        editButtonClicked: function(ev) {\n            var editButton = $(ev.currentTarget);\n            var commentEl = editButton.parents('li.comment').first();\n            var commentModel = commentEl.data().model;\n            \n            commentModel = this.commentsById[commentModel.id];\n            commentEl.addClass('edit');\n\n            // Create the editing field\n            var editField = this.createCommentingFieldElement(commentModel.parent, commentModel.id, false);\n            commentEl.find('.comment-wrapper').first().append(editField);\n\n            // Append original content\n            var textarea = editField.find('.textarea');\n            textarea.attr('data-comment', commentModel.id);\n\n            // Escaping HTML\n            textarea.append(this.getFormattedCommentContent(commentModel, true));\n\n            // Move cursor to end\n            this.moveCursorToEnd(textarea);\n        },\n\n        showDroppableOverlay: function(ev) {\n            if(this.options.enableAttachments) {\n                this.$el.find('.droppable-overlay').css('top', this.$el[0].scrollTop);\n                this.$el.find('.droppable-overlay').show();\n                this.$el.addClass('drag-ongoing');\n            }\n        },\n\n        handleDragEnter: function(ev) {\n            var count = $(ev.currentTarget).data('dnd-count') || 0;\n            count++;\n            $(ev.currentTarget).data('dnd-count', count);\n            $(ev.currentTarget).addClass('drag-over');\n        },\n\n        handleDragLeave: function(ev, callback) {\n            var count = $(ev.currentTarget).data('dnd-count');\n            count--;\n            $(ev.currentTarget).data('dnd-count', count);\n\n            if(count == 0) {            \n                $(ev.currentTarget).removeClass('drag-over');\n                if(callback) callback();\n            }\n        },\n\n        handleDragLeaveForOverlay: function(ev) {\n            var self = this;\n            this.handleDragLeave(ev, function() {\n                self.hideDroppableOverlay();\n            });\n        },\n\n        handleDragLeaveForDroppable: function(ev) {\n            this.handleDragLeave(ev);\n        },\n\n        handleDragOverForOverlay: function(ev) {\n            ev.stopPropagation();\n            ev.preventDefault();\n            ev.originalEvent.dataTransfer.dropEffect = 'copy';\n        },\n\n        hideDroppableOverlay: function() {\n            this.$el.find('.droppable-overlay').hide();\n            this.$el.removeClass('drag-ongoing');\n        },\n\n        handleDrop: function(ev) {\n            ev.preventDefault();\n\n            // Reset DND counts\n            $(ev.target).trigger('dragleave');\n\n            // Hide the overlay and upload the files\n            this.hideDroppableOverlay();\n            this.uploadAttachments(ev.originalEvent.dataTransfer.files);\n        },\n\n        stopPropagation: function(ev) {\n            ev.stopPropagation();\n        },\n\n\n        // HTML elements\n\n        createHTML: function() {\n            var self = this;\n            // Commenting field\n            var mainCommentingField = this.createCommentingFieldElement(null, null, true);\n            mainCommentingField.addClass('main');\n            this.$el.append(mainCommentingField);\n\n            // Hide control row and close button\n            var mainControlRow = mainCommentingField.find('.control-row');\n            mainControlRow.hide();\n            mainCommentingField.find('.close').hide();\n\n            // Navigation bar\n            if (this.options.enableNavigation) {\n                this.$el.append(this.createNavigationElement());\n                this.showActiveSort();\n            }\n\n            // Loading spinner\n            var spinner = this.createSpinner();\n            this.$el.append(spinner);\n\n            // Comments container\n            var commentsContainer = $('<div/>', {\n                'class': 'data-container overflowComment',\n                'data-container': 'comments'\n            });\n            this.$el.append(commentsContainer);\n                \n            // \"No comments\" placeholder\n            var noComments = $('<div/>', {\n                'class': 'no-comments no-data',\n                text: this.options.textFormatter(this.options.noCommentsText)\n            });\n            var noCommentsIcon = $('<i/>', {\n                'class': 'fa fa-comments fa-2x'\n            });\n            if(this.options.noCommentsIconURL.length) {\n                noCommentsIcon.css('background-image', 'url(\"'+this.options.noCommentsIconURL+'\")');\n                noCommentsIcon.addClass('image');\n            }\n            noComments.prepend($('<br/>')).prepend(noCommentsIcon);            \n            commentsContainer.append(noComments);\n\n            // important Comment Container\n            var importantCmtContainer = $('<div/>', {\n                'class': 'data-container overflowComment',\n                'data-container': 'importantCmt'\n            });\n            this.$el.append(importantCmtContainer);\n                // \"No comments Important\" placeholder\n            var noCommentsImpt = $('<div/>', {\n                'class': 'no-comments no-data',\n                text: this.options.textFormatter(this.options.noCommentsImportantText)\n            });\n            var noCommentsImptIcon = $('<i/>', {\n                'class': 'fa fa-comments fa-2x'\n            });\n            if(this.options.noCommentsImptIconURL.length) {\n                noCommentsImptIcon.css('background-image', 'url(\"'+this.options.noCommentsImptIconURL+'\")');\n                noCommentsImptIcon.addClass('image');\n            }\n            noCommentsImpt.prepend($('<br/>')).prepend(noCommentsImptIcon);            \n            importantCmtContainer.append(noCommentsImpt);\n\n            // Attachments\n            if(this.options.enableAttachments) {\n                // Attachments container\n                var attachmentsContainer = $('<div/>', {\n                    'class': 'data-container overflowComment',\n                    'data-container': 'attachments'\n                });\n                this.$el.append(attachmentsContainer);\n                \n                // \"No attachments\" placeholder\n                var noAttachments = $('<div/>', {\n                    'class': 'no-attachments no-data',\n                    text: this.options.textFormatter(this.options.noAttachmentsText)\n                });\n                var noAttachmentsIcon = $('<i/>', {\n                    'class': 'fa fa-paperclip fa-2x'\n                });\n                if(this.options.attachmentIconURL.length) {\n                    noAttachmentsIcon.css('background-image', 'url(\"'+this.options.attachmentIconURL+'\")');\n                    noAttachmentsIcon.addClass('image');\n                }\n                noAttachments.prepend($('<br/>')).prepend(noAttachmentsIcon);\n                attachmentsContainer.append(noAttachments);\n\n\n                // Drag & dropping attachments\n                var droppableOverlay = $('<div/>', {\n                    'class': 'droppable-overlay'\n                });\n\n                var droppableContainer = $('<div/>', {\n                    'class': 'droppable-container'\n                });\n\n                var droppable = $('<div/>', {\n                    'class': 'droppable'\n                });\n\n                var uploadIcon = $('<i/>', {\n                    'class': 'fa fa-upload fa-4x'\n                });\n                if(this.options.uploadIconURL.length) {\n                    uploadIcon.css('background-image', 'url(\"'+this.options.uploadIconURL+'\")');\n                    uploadIcon.addClass('image');\n                }\n\n                var dropAttachmentText = $('<div/>', {\n                    text: this.options.textFormatter(this.options.attachmentDropText)\n                });\n                droppable.append(uploadIcon);\n                droppable.append(dropAttachmentText);\n\n                droppableOverlay.html(droppableContainer.html(droppable)).hide();\n                this.$el.append(droppableOverlay);\n            }\n        },\n\n        createProfilePictureElement: function(src) {\n            if(src) {\n                var profilePicture = $('<img/>', {\n                    src: src\n                });\n            } else {\n                var profilePicture = $('<i/>', {\n                    'class': 'fa fa-user'\n                });\n            }\n            profilePicture.addClass('profile-picture');\n            if(this.options.roundProfilePictures) profilePicture.addClass('round');\n            return profilePicture;\n        },\n\n        createCommentingFieldElement: function(parentId, existingCommentId, enableOpinion) {\n            var self = this;\n            // Commenting field\n            var commentingField = $('<div/>', {\n                'class': 'commenting-field'\n            });\n\n            // Profile picture\n            if(existingCommentId) {\n                var profilePictureURL = this.commentsById[existingCommentId].profilePictureURL;\n            } else {\n                var profilePictureURL = this.options.profilePictureURL;\n            }\n            var profilePicture = this.createProfilePictureElement(profilePictureURL);\n\n            // New comment\n            var textareaWrapper = $('<div/>', {\n                'class': 'textarea-wrapper'\n            });\n\n            // Control row\n            var controlRow = $('<div/>', {\n                'class': 'control-row'\n            });\n\n            // Textarea\n            var textarea = $('<div/>', {\n                'class': 'textarea',\n                'data-placeholder': this.options.textFormatter(this.options.textareaPlaceholderText),\n                contenteditable: true\n            });\n\n            // Setting the initial height for the textarea\n            this.adjustTextareaHeight(textarea, false);\n\n            // Close button\n            var closeButton = $('<span/>', {\n                'class': 'close'\n            }).append($('<span class=\"left\"/>')).append($('<span class=\"right\"/>'));\n\n            // Save button text\n            if(existingCommentId) {\n                var saveButtonText = this.options.textFormatter(this.options.saveText);\n                var opinionCmtId = existingCommentId\n                // Delete button Edit Comment\n                // var deleteButton = $('<span/>', {\n                //      'class': 'delete',\n                //      text: this.options.textFormatter(this.options.deleteText)\n                // }).css('background-color', this.options.deleteButtonColor);\n                // controlRow.append(deleteButton);\n\n                // // Enable the delete button only if the user is allowed to delete\n                // if(this.isAllowedToDelete(existingCommentId)) deleteButton.addClass('enabled')\n\n            } else {\n                var saveButtonText = this.options.textFormatter(this.options.sendText);\n                var opinionCmtId =''\n                // Add upload button if attachments are enabled\n                if(this.options.enableAttachments) {\n                    var uploadButton = $('<span/>', {\n                        'class': 'enabled upload'\n                    });\n                    var uploadIcon = $('<i/>', {\n                        'class': 'md-icon',\n                        text: 'Tải lên'\n                    });\n                    var fileInput = $('<input/>', {\n                        type: 'file',\n                        'data-role': 'none' // Prevent jquery-mobile for adding classes\n                    });\n                    // Multi file upload might not work with backend as the the file names\n                    // may be the same causing duplicates\n                    if(!$.browser.mobile) fileInput.attr('multiple', 'multiple');\n\n                    if(this.options.uploadIconURL.length) {\n                        uploadIcon.css('background-image', 'url(\"'+this.options.uploadIconURL+'\")');\n                        uploadIcon.addClass('image');\n                    }\n                    uploadButton.append(uploadIcon).append(fileInput);\n                    controlRow.append(uploadButton);\n                }\n            }\n\n            // Save button\n            var saveButtonClass = existingCommentId ? 'update' : 'send';\n            var saveButton = $('<span/>', {\n                'class': saveButtonClass + ' save highlight-background',\n                text: saveButtonText\n            });\n            // Check opinion\n\n            if (enableOpinion) {\n                var checkOpinion = $('<input/>', {\n                    'class': 'opinion checkOpinion mt-1 mr-1',\n                    'id': 'opinion' + opinionCmtId,\n                    'name': 'opinion' + opinionCmtId,\n                    'type': 'checkbox'\n                });\n                var labelCheckOpinion = $('<label/>', {\n                    'class': 'opinion label-opinion',\n                    'for': 'opinion'+opinionCmtId,\n                    text: 'Ý kiến chính thức'\n                });\n                controlRow.append(checkOpinion).append(labelCheckOpinion);\n            }\n            \n            // Populate the element\n            controlRow.prepend(saveButton);\n            textareaWrapper.append(closeButton).append(textarea).append(controlRow);\n            commentingField.append(profilePicture).append(textareaWrapper);\n\n\n            if(parentId) {\n\n                    // Set the parent id to the field if necessary\n                textarea.attr('data-parent', parentId);\n\n                // Append reply-to tag if necessary\n                var parentModel = this.commentsById[parentId];\n                if(parentModel.parent) {\n                    textarea.html('&nbsp;');    // Needed to set the cursor to correct place\n\n                    // Creating the reply-to tag\n                    var replyToName = '@' + parentModel.fullname;\n                    var replyToTag = this.createTagElement(replyToName, 'reply-to', parentModel.creator);\n                    textarea.prepend(replyToTag);\n                }\n            }\n\n            // Pinging users\n            if(this.options.enablePinging) {\n                    textarea.textcomplete([{\n                            /**match: /(^|\\s)@(([a-zäöüß]|\\s)*)$/im,*/\n                        match: /(^|\\s)@(([0-9]|[^\\u0000-\\u007F]|[a-zäöüß]|\\s)*)$/im,\n                            search: function (term, callback) {\n                                // console.log(term);\n                                    term = self.normalizeSpaces(term);\n\n                                    // Users excluding self and already pinged users\n                                    var pings = self.getPings(textarea);\n                                    var users = self.getUsers().filter(function(user) {\n                                            var isSelf = user.id == self.options.currentUserId;\n                                            var alreadyPinged = pings.indexOf(user.id) != -1;\n                                            return !isSelf && !alreadyPinged;\n                                    });\n\n                                    // Sort users\n                                    self.sortUsers(users);\n\n                                    callback($.map(users, function (user) {\n                                            var lowercaseTerm = term.toLowerCase();\n                                            var nameMatch = user.fullname.toLowerCase().indexOf(lowercaseTerm) != -1;\n                                            var emailMatch = user.email.toLowerCase().indexOf(lowercaseTerm) != -1;\n                                            return nameMatch || emailMatch ? user : null;\n                                    }));\n                            },\n                            template: function(user) {\n                                    var wrapper = $('<div/>');\n\n                                    var profilePictureEl = $('<img/>', {\n                                            src: user.pictureUrl,\n                                            'class': 'profile-picture round'\n                                    });\n                                    var detailsEl = $('<div/>', {\n                                            'class': 'details',\n                                    });\n                                    var nameEl = $('<div/>', {\n                                            'class': 'name',\n                                    }).html(user.fullname);\n\n                                    var emailEl = $('<div/>', {\n                                            'class': 'email',\n                                    }).html(user.email);\n                                            \n                                    if (user.email) {\n                                            detailsEl.append(nameEl).append(emailEl);\n                                    } else {\n                                            detailsEl.addClass('no-email')\n                                            detailsEl.append(nameEl)\n                                    }\n\n                                    wrapper.append(profilePictureEl).append(detailsEl);\n                                    return wrapper.html();\n                            },\n                            replace: function (user) {\n                                    var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);\n                                    return ' ' + tag[0].outerHTML + ' ';\n                            },\n                    }], {\n                            appendTo: '.jquery-comments',\n                            dropdownClassName: 'dropdown autocomplete',\n                            maxCount: 5,\n                            rightEdgeOffset: 0,\n                    });\n\n\n                    // OVERIDE TEXTCOMPLETE DROPDOWN POSITIONING\n\n                    $.fn.textcomplete.Dropdown.prototype.render = function(zippedData) {\n                        var contentsHtml = this._buildContents(zippedData);\n                        var unzippedData = $.map(zippedData, function (d) { return d.value; });\n                        if (zippedData.length) {\n                            var strategy = zippedData[0].strategy;\n                            if (strategy.id) {\n                                this.$el.attr('data-strategy', strategy.id);\n                            } else {\n                                this.$el.removeAttr('data-strategy');\n                            }\n                            this._renderHeader(unzippedData);\n                            this._renderFooter(unzippedData);\n                            if (contentsHtml) {\n                                this._renderContents(contentsHtml);\n                                this._fitToBottom();\n                                this._fitToRight();\n                                this._activateIndexedItem();\n                            }\n                            this._setScroll();\n                        } else if (this.noResultsMessage) {\n                            this._renderNoResultsMessage(unzippedData);\n                        } else if (this.shown) {\n                            this.deactivate();\n                        }\n\n                        // CUSTOM CODE\n                        // ===========\n\n                        // Adjust vertical position\n                        var top = parseInt(this.$el.css('top')) + self.options.scrollContainer.scrollTop();\n                        this.$el.css('top', top);\n\n                        // Adjust horizontal position\n                        var originalLeft = this.$el.css('left');\n                        this.$el.css('left', 0);    // Left must be set to 0 in order to get the real width of the el\n                        var maxLeft = self.$el.width() - this.$el.outerWidth();\n                        var left = Math.min(maxLeft, parseInt(originalLeft));\n                        this.$el.css('left', left);\n\n                        // ===========\n                    }\n            }\n\n            return commentingField;\n    },\n\n    createNavigationElement: function() {\n        var navigationEl = $('<ul/>', {\n            'class': 'navigation'\n        });\n        var navigationWrapper = $('<div/>', {\n            'class': 'navigation-wrapper'\n        });\n        navigationEl.append(navigationWrapper);\n\n        // Newest\n        var newest = $('<li/>', {\n            text: this.options.textFormatter(this.options.newestText),\n            'data-sort-key': 'newest',\n            'data-container-name': 'comments'\n        });\n\n        // Oldest\n        var oldest = $('<li/>', {\n            text: this.options.textFormatter(this.options.oldestText),\n            'data-sort-key': 'oldest',\n            'data-container-name': 'comments'\n        });\n        // Important\n        var important = $('<li/>', {\n            text: this.options.textFormatter(this.options.importantCmtText),\n            'data-sort-key': 'important',\n            'data-container-name': 'importantCmt'\n        });\n        // Popular\n        var popular = $('<li/>', {\n            text: this.options.textFormatter(this.options.popularText),\n            'data-sort-key': 'popularity',\n            'data-container-name': 'comments'\n        });\n\n        // Attachments\n        var attachments = $('<li/>', {\n            text: this.options.textFormatter(this.options.attachmentsText),\n            'data-sort-key': 'attachments',\n            'data-container-name': 'attachments'\n        });\n\n        // Attachments icon\n        var attachmentsIcon = $('<i/>', {\n            'class': 'fa fa-paperclip'\n        });\n        if(this.options.attachmentIconURL.length) {\n            attachmentsIcon.css('background-image', 'url(\"'+this.options.attachmentIconURL+'\")');\n            attachmentsIcon.addClass('image');\n        }\n        attachments.prepend(attachmentsIcon);\n\n        // Responsive navigation\n        var dropdownNavigationWrapper = $('<div/>', {\n            'class': 'navigation-wrapper responsive'\n        });\n        var dropdownNavigation = $('<ul/>', {\n            'class': 'dropdown'\n        });\n        var dropdownTitle = $('<li/>', {\n            'class': 'title'\n        });\n        var dropdownTitleHeader = $('<header/>');\n\n        dropdownTitle.append(dropdownTitleHeader);\n        dropdownNavigationWrapper.append(dropdownTitle);\n        dropdownNavigationWrapper.append(dropdownNavigation);\n        navigationEl.append(dropdownNavigationWrapper);\n\n        // Populate elements\n        navigationWrapper.append(newest).append(oldest).append(important);\n        dropdownNavigation.append(newest.clone()).append(oldest.clone()).append(important.clone());\n\n        if(this.options.enableReplying || this.options.enableUpvoting) {\n            navigationWrapper.append(popular);\n            dropdownNavigation.append(popular.clone());\n        }\n        if(this.options.enableAttachments) {\n            navigationWrapper.append(attachments);\n            dropdownNavigationWrapper.append(attachments.clone());\n        }\n\n        if(this.options.forceResponsive) this.forceResponsive();\n        return navigationEl;\n    },\n\n    createSpinner: function() {\n        var spinner = $('<div/>', {\n            'class': 'spinner'\n        });\n        var spinnerIcon = $('<i/>', {\n            'class': 'fa fa-spinner fa-spin'\n        });\n        if(this.options.spinnerIconURL.length) {\n            spinnerIcon.css('background-image', 'url(\"'+this.options.spinnerIconURL+'\")');\n            spinnerIcon.addClass('image');\n        }\n        spinner.html(spinnerIcon);\n        return spinner;\n    },\n\n    createCommentElement: function(commentModel) {\n\n        // Comment container element\n        var commentEl = $('<li/>', {\n            'data-id': commentModel.id,\n            'class': 'comment'\n        }).data('model', commentModel);\n\n        if(commentModel.createdByCurrentUser) commentEl.addClass('by-current-user');\n        if(commentModel.createdByAdmin) commentEl.addClass('by-admin');\n\n        // Child comments\n        var childComments = $('<ul/>', {\n            'class': 'child-comments'\n        });\n\n        // Comment wrapper\n        var commentWrapper = this.createCommentWrapperElement(commentModel);\n\n        commentEl.append(commentWrapper);\n        if(commentModel.parent == null) commentEl.append(childComments);\n        return commentEl;\n    },\n\n    createCommentWrapperElement: function(commentModel) {\n        var commentWrapper = $('<div/>', {\n            'class': 'comment-wrapper'\n        });\n\n        // Profile picture\n        var profilePicture = this.createProfilePictureElement(commentModel.profilePictureURL);\n\n        // Time\n        var time = $('<time/>', {\n            text: this.options.timeFormatter(commentModel.created),\n            'data-original': commentModel.created\n        });\n\n        // Name\n        var nameText = commentModel.createdByCurrentUser ? this.options.textFormatter(this.options.youText) : commentModel.fullname;\n        var name = $('<div/>', {\n            'class': 'name'\n        });\n        if(commentModel.profileURL) {\n            var link = $('<a/>', {\n                href: commentModel.profileURL,\n                text: nameText\n            });\n            name.html(link);\n        } else {\n            name.text(nameText);\n        }\n\n        // Highlight name for own comments and admin\n        if(commentModel.createdByCurrentUser || commentModel.createdByAdmin) name.addClass('highlight-font-bold');\n\n        // Show reply-to name if parent of parent exists\n        if(commentModel.parent) {\n            var parent = this.commentsById[commentModel.parent];\n            if(parent.parent) {\n                var replyTo = $('<span/>', {\n                    'class': 'reply-to',\n                    text: parent.fullname\n                });\n\n                // reply icon\n                var replyIcon = $('<i/>', {\n                    'class': 'fa fa-share'\n                });\n                if(this.options.replyIconURL.length) {\n                    replyIcon.css('background-image', 'url(\"'+this.options.replyIconURL+'\")');\n                    replyIcon.addClass('image');\n                }\n\n                replyTo.prepend(replyIcon);\n                name.append(replyTo);\n            }\n        }\n\n        // New tag\n        if(commentModel.isNew) {\n            var newTag = $('<span/>', {\n                'class': 'new highlight-background',\n                text: this.options.newText\n            });\n            name.append(newTag);\n        }\n\n        // Wrapper\n        var wrapper = $('<div/>', {\n            'class': 'wrapper'\n        });\n        // Note Ý kiến chính thức\n        var noteOpinion = $('<div/>', {\n            'class': 'note-opinion',\n            text: '(Ý kiến chính thức)'\n        });\n        // Content\n        var content = $('<div/>', {\n            'class': 'content'\n        });\n\n        // Case: attachment\n        var isAttachment = commentModel.fileURL != undefined;\n        if(isAttachment) {\n            var format = null;\n            var type = null;\n\n            // Type and format\n            if(commentModel.fileMimeType) {\n                var mimeTypeParts = commentModel.fileMimeType.split('/');\n                if(mimeTypeParts.length == 2) {\n                    format = mimeTypeParts[1];\n                    type = mimeTypeParts[0];\n                }\n            }\n\n            // Attachment link\n            var link = $('<a/>', {\n                'class': 'attachment',\n                href: commentModel.fileURL,\n                target: '_blank'\n            });\n            \n            // var link = $('<a/>', {\n            //      'class': 'attachment',\n            //      href: 'javascript:viewCommentFileAttach(\"' + commentModel.fileURL + '\",\"' + commentModel.fileMimeType + '\");'\n            // });\n            \n            // Case: image preview\n            if(type == 'image') {\n                var image = $('<img/>', {\n                    src: commentModel.fileURL\n                });\n                link.html(image);\n            // Case: video preview\n            } else if(type == 'video') {\n                var video = $('<video/>', {\n                    src: commentModel.fileURL,\n                    type: commentModel.fileMimeType,\n                    controls: 'controls'\n                });\n                link.html(video);\n\n            // Case: icon and text\n            } else {\n\n                // Icon\n                var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo',\n                    'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'];\n                \n                var iconClass = 'fa fa-file-o';\n                if(availableIcons.indexOf(format) > 0) {\n                    iconClass = 'fa fa-file-' + format + '-o';\n                } else if(availableIcons.indexOf(type) > 0) {\n                    iconClass = 'fa fa-file-' + type + '-o';\n                }\n\n                var fileIcon = $('<i/>', {\n                    'class': iconClass\n                });\n                if(this.options.fileIconURL.length) {\n                    fileIcon.css('background-image', 'url(\"'+this.options.fileIconURL+'\")');\n                    fileIcon.addClass('image');\n                }\n                // File name\n                /**\n                var parts = commentModel.fileURL.split('/');\n                var fileName = parts[parts.length - 1];\n                fileName = fileName.split('?')[0];\n                fileName = decodeURIComponent(fileName);\n                */\n                var fileName = commentModel.fileName;\n                link.text(fileName);\n                link.prepend(fileIcon);\n            }\n            content.html(link);\n        // Case: regular comment\n        } else {\n            content.html(this.getFormattedCommentContent(commentModel));\n        }\n\n        // Edited timestamp\n        if(commentModel.modified && commentModel.modified != commentModel.created) {\n            var editedTime = this.options.timeFormatter(commentModel.modified);\n            var edited = $('<time/>', {\n                'class': 'edited',\n                text: this.options.textFormatter(this.options.editedText) + ' ' + editedTime,\n                'data-original': commentModel.modified\n            });\n            content.append(edited);\n        }\n\n        // Actions\n        var actions = $('<span/>', {\n            'class': 'actions'\n        });\n\n        // Reply\n        var reply = $('<button/>', {\n            'class': 'action reply',\n            'type': 'button',\n            text: this.options.textFormatter(this.options.replyText)\n        });\n\n        // Upvote icon\n        var upvoteIcon = $('<i/>', {\n            'class': 'fa fa-thumbs-up'\n        });\n        if(this.options.upvoteIconURL.length) {\n            upvoteIcon.css('background-image', 'url(\"'+this.options.upvoteIconURL+'\")');\n            upvoteIcon.addClass('image');\n        }\n\n        // Upvotes\n        var upvotes = this.createUpvoteElement(commentModel);\n\n        // Append buttons for actions that are enabled\n        if(this.options.enableReplying) actions.append(reply);\n        if(this.options.enableUpvoting) actions.append(upvotes);\n\n        if(commentModel.createdByCurrentUser || this.options.currentUserIsAdmin) {\n            // Case: delete button for attachment and currentUser\n            if(isAttachment && this.isAllowedToDelete(commentModel.id)) {\n                var deleteButton = $('<button/>', {\n                    'class': 'action delete enabled',\n                    text: this.options.textFormatter(this.options.deleteText)\n                });\n                actions.append(deleteButton);\n\n            // Case: edit button for regular comment\n            } else if(!isAttachment && this.options.enableEditing) {\n                var editButton = $('<button/>', {\n                    'class': 'action edit',\n                    text: this.options.textFormatter(this.options.editText)\n                });\n                actions.append(editButton);\n                var deleteButton = $('<button/>', {\n                    'class': 'action delete enabled',\n                    text: this.options.textFormatter(this.options.deleteText)\n                });\n                actions.append(deleteButton);\n            }\n        }\n\n        wrapper.append(content);\n        if(commentModel.opinion == true) {\n            wrapper.append(noteOpinion);\n        }\n        wrapper.append(actions);\n        commentWrapper.append(profilePicture).append(time).append(name).append(wrapper);\n        return commentWrapper;\n    },\n\n    createUpvoteElement: function(commentModel) {\n        // Upvote icon\n        var upvoteIcon = $('<i/>', {\n            'class': 'fa fa-thumbs-up'\n        });\n        if(this.options.upvoteIconURL.length) {\n            upvoteIcon.css('background-image', 'url(\"'+this.options.upvoteIconURL+'\")');\n            upvoteIcon.addClass('image');\n        }\n\n        // Upvotes\n        var upvoteEl = $('<button/>', {\n            'class': 'action upvote' + (commentModel.userHasUpvoted ? ' highlight-font' : '')\n        }).append($('<span/>', {\n            text: commentModel.upvoteCount,\n            'class': 'upvote-count'\n        })).append(upvoteIcon);\n\n        return upvoteEl;\n    },\n\n    createTagElement: function(text, extraClasses, value) {\n        var tagEl = $('<input/>', {\n            'class': 'tag',\n            'type': 'button',\n            'data-role': 'none',\n        });\n        if(extraClasses) tagEl.addClass(extraClasses);\n        tagEl.val(text);\n        tagEl.attr('data-value', value);\n        return tagEl;\n    },\n\n    reRenderComment: function(id) {\n        var commentModel = this.commentsById[id];\n        var commentElements = this.$el.find('li.comment[data-id=\"'+commentModel.id+'\"]');\n\n        var self = this;\n        commentElements.each(function(index, commentEl) {\n            var commentWrapper = self.createCommentWrapperElement(commentModel);\n            $(commentEl).find('.comment-wrapper').first().replaceWith(commentWrapper);\n        });\n    },\n\n    reRenderCommentActionBar: function(id) {\n        var commentModel = this.commentsById[id];\n        var commentElements = this.$el.find('li.comment[data-id=\"'+commentModel.id+'\"]');\n\n        var self = this;\n        commentElements.each(function(index, commentEl) {\n            var commentWrapper = self.createCommentWrapperElement(commentModel);\n            $(commentEl).find('.actions').first().replaceWith(commentWrapper.find('.actions'));\n        });\n    },\n\n    reRenderUpvotes: function(id) {\n        var commentModel = this.commentsById[id];\n        var commentElements = this.$el.find('li.comment[data-id=\"'+commentModel.id+'\"]');\n\n        var self = this;\n        commentElements.each(function(index, commentEl) {\n            var upvotes = self.createUpvoteElement(commentModel);\n            $(commentEl).find('.upvote').first().replaceWith(upvotes);\n        });\n    },\n\n\n    // Styling\n    createCssDeclarations: function() {\n\n        // Remove previous css-declarations\n        $('head style.jquery-comments-css').remove();\n\n        // Navigation underline\n        this.createCss('.jquery-comments ul.navigation li.active:after {background: '\n            + this.options.highlightColor  + ' !important;',\n            +'}');\n\n        // Dropdown active element\n        this.createCss('.jquery-comments ul.navigation ul.dropdown li.active {background: '\n            + this.options.highlightColor  + ' !important;',\n            +'}');\n\n        // Background highlight\n        this.createCss('.jquery-comments .highlight-background {background: '\n            + this.options.highlightColor  + ' !important;',\n            +'}');\n\n        // Font highlight\n        this.createCss('.jquery-comments .highlight-font {color: '\n            + this.options.highlightColor + ' !important;'\n            +'}');\n        this.createCss('.jquery-comments .highlight-font-bold {color: '\n            + this.options.highlightColor + ' !important;'\n            + 'font-weight: bold;'\n            +'}');\n    },\n\n    createCss: function(css) {\n        var styleEl = $('<style/>', {\n            type: 'text/css',\n            'class': 'jquery-comments-css',\n            text: css\n        });\n        $('head').append(styleEl);\n    },\n\n    //\n    getComments: function() {\n        var self = this;\n        var commentArr = Object.keys(this.commentsById).map(function(id){return self.commentsById[id]})\n        var importantCmtArr = commentArr.filter(function(comment){return comment.opinion})\n        var importantCmtUser = commentArr.filter(function(comment){return comment.opinion&&comment.createdByCurrentUser})\n        var attachCmtArr = commentArr.filter(function(comment){return comment.fileURL != undefined})\n        if (commentArr.length > 3) {\n            $('.data-container[data-container=comments]').addClass('lessEl')\n        } else {\n            $('.data-container[data-container=comments]').addClass('fullEl')\n        }\n        // \n        if (importantCmtArr.length > 3) {\n            $('.data-container[data-container=importantCmt]').addClass('lessEl')\n        } else {\n            $('.data-container[data-container=importantCmt]').addClass('fullEl')\n        }\n        if (importantCmtUser.length > 0) {\n            $('.opinion').hide()\n        } else {\n            $('.opinion').show()\n        }\n        // \n        if (attachCmtArr.length > 3) {\n            $('.data-container[data-container=attachments]').addClass('lessEl')\n        } else {\n            $('.data-container[data-container=attachments]').addClass('fullEl')\n        }\n\n        return Object.keys(this.commentsById).map(function(id){return self.commentsById[id]});\n    },\n\n    getUsers: function() {\n        var self = this;\n        return Object.keys(this.usersById).map(function(id){return self.usersById[id]});\n    },\n\n    getChildComments: function(parentId) {\n        return this.getComments().filter(function(comment){return comment.parent == parentId});\n    },\n\n    getAttachments: function() {\n        var self = this;\n        return this.getComments().filter(function(comment){return comment.fileURL != undefined});\n    },\n    getImportantCmt: function() {\n        var self = this;\n        return this.getComments().filter(function(comment){return comment.opinion == true});\n    },\n    getOutermostParent: function(directParentId) {\n        var parentId = directParentId;\n        do {\n            var parentComment = this.commentsById[parentId];\n            parentId = parentComment.parent;\n        } while(parentComment.parent != null);\n        return parentComment;\n    },\n\n    createCommentJSON: function(textarea) {\n        var time = new Date().toISOString();\n        var commentJSON = {\n            id: 'c' +  (this.getComments().length + 1),   // Temporary id\n            parent: textarea.attr('data-parent') || null,\n            created: time,\n            modified: time,\n            content: this.getTextareaContent(textarea),\n            pings: this.getPings(textarea),\n            fullname: this.options.textFormatter(this.options.youText),\n            profilePictureURL: this.options.profilePictureURL,\n            createdByCurrentUser: true,\n            upvoteCount: 0,\n            userHasUpvoted: false\n        };\n        return commentJSON;\n    },\n\n    isAllowedToDelete: function(commentId) {\n        if(this.options.enableDeleting) {\n            var isAllowedToDelete = true;\n            if(!this.options.enableDeletingCommentWithReplies) {\n                $(this.getComments()).each(function(index, comment) {\n                    if(comment.parent == commentId) isAllowedToDelete = false;\n                });\n            }\n            return isAllowedToDelete;\n        }\n        return false;\n    },\n\n    setToggleAllButtonText: function(toggleAllButton, toggle) {\n        var self = this;\n        var textContainer = toggleAllButton.find('span.text');\n        var caret = toggleAllButton.find('.caret');\n\n        var showExpandingText = function() {\n                var text = self.options.textFormatter(self.options.viewAllRepliesText);\n                var replyCount = toggleAllButton.siblings('.comment').length;\n                text = text.replace('__replyCount__', replyCount);\n                textContainer.text(text);\n        };\n\n        var hideRepliesText = this.options.textFormatter(this.options.hideRepliesText);\n\n        if(toggle) {\n            // Toggle text\n            if(textContainer.text() == hideRepliesText) {\n                showExpandingText();\n            } else {\n                textContainer.text(hideRepliesText);\n            }\n            // Toggle direction of the caret\n            caret.toggleClass('up');\n        } else {\n            // Update text if necessary\n            if(textContainer.text() != hideRepliesText) {\n                showExpandingText();\n            }\n        }\n    },\n\n    adjustTextareaHeight: function(textarea, focus) {\n        var textareaBaseHeight = 2.2;\n        var lineHeight = 1.45;\n\n        var setRows = function(rows) {\n            var height = textareaBaseHeight + (rows - 1) * lineHeight;\n            textarea.css('height', height + 'em');\n        };\n\n        textarea = $(textarea);\n        var rowCount = focus == true ? this.options.textareaRowsOnFocus : this.options.textareaRows;\n        do {\n            setRows(rowCount);\n            rowCount++;\n            var isAreaScrollable = textarea[0].scrollHeight > textarea.outerHeight();\n            var maxRowsUsed = this.options.textareaMaxRows == false ?\n                false : rowCount > this.options.textareaMaxRows;\n        } while(isAreaScrollable && !maxRowsUsed);\n    },\n\n    clearTextarea: function(textarea) {\n        textarea.empty().trigger('input');\n    },\n\n    getTextareaContent: function(textarea, humanReadable) {\n        var textareaClone = textarea.clone();\n\n        // Remove reply-to tag\n        textareaClone.find('.reply-to.tag').remove();\n\n        // Replace tags with text values\n        textareaClone.find('.tag.hashtag').replaceWith(function(){\n            return humanReadable ? $(this).val() : '#' + $(this).attr('data-value');\n        });\n        textareaClone.find('.tag.ping').replaceWith(function(){\n            return humanReadable ? $(this).val() : '@' + $(this).attr('data-value');\n        });\n\n        var ce = $('<pre/>').html(textareaClone.html());\n        ce.find('div, p, br').replaceWith(function() { return '\\n' + this.innerHTML; });\n\n        // Trim leading spaces\n        var text = ce.text().replace(/^\\s+/g, '');\n\n        // Normalize spaces\n        var text = this.normalizeSpaces(text);\n        return text;\n    },\n\n    getFormattedCommentContent: function(commentModel, replaceNewLines) {\n        var html = this.escape(commentModel.content);\n        html = this.linkify(html);\n        html = this.highlightTags(commentModel, html);\n        if(replaceNewLines) html = html.replace(/(?:\\n)/g, '<br>');\n        return html;\n    },\n\n    getPings: function(textarea) {\n        return $.map(textarea.find('.ping'), function(el){return parseInt($(el).attr('data-value'))});\n    },\n\n    moveCursorToEnd: function(el) {\n        el = $(el)[0];\n\n        // Trigger input to adjust size\n        $(el).trigger('input');\n\n        // Scroll to bottom\n        $(el).scrollTop(el.scrollHeight);\n\n        // Move cursor to end\n        if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {\n            var range = document.createRange();\n            range.selectNodeContents(el);\n            range.collapse(false);\n            var sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n        } else if (typeof document.body.createTextRange != 'undefined') {\n            var textRange = document.body.createTextRange();\n            textRange.moveToElementText(el);\n            textRange.collapse(false);\n            textRange.select();\n        }\n\n        // Focus\n        el.focus();\n    },\n\n    escape: function(inputText) {\n        return $('<pre/>').text(this.normalizeSpaces(inputText)).html();\n    },\n\n    normalizeSpaces: function(inputText) {\n        return inputText.replace(new RegExp('\\u00a0', 'g'), ' ');   // Convert non-breaking spaces to reguar spaces\n    },\n\n    after: function(times, func) {\n        var self = this;\n        return function() {\n            times--;\n            if (times == 0) {\n                return func.apply(self, arguments);\n            }\n        }\n    },\n\n    highlightTags: function(commentModel, html) {\n        if(this.options.enableHashtags) html = this.highlightHashtags(commentModel, html);\n        if(this.options.enablePinging) html = this.highlightPings(commentModel, html);\n        return html;\n    },\n\n    highlightHashtags: function(commentModel, html) {\n        var self = this;\n\n        if(html.indexOf('#') != -1) {\n            var __createTag = function(tag) {\n                var tag = self.createTagElement('#' + tag, 'hashtag', tag);\n                return tag[0].outerHTML;\n            }\n\n            var regex = /(^|\\s)#([a-zäöüß\\d-_]+)/gim;\n            html = html.replace(regex, function($0, $1, $2){\n                return $1 + __createTag($2);\n            });\n        }\n        return html;\n    },\n\n    highlightPings: function(commentModel, html) {\n        var self = this;\n\n        if(html.indexOf('@') != -1) {\n\n            var __createTag = function(user) {\n                var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);\n                return tag[0].outerHTML;\n            }\n\n            var highlightedHtml = '';\n            $(commentModel.pings).each(function(index, id) {\n                if(id in self.usersById) {\n                    var user = self.usersById[id];\n                    var pingText = '@' + user.id;\n\n                    var endIndex = html.indexOf(pingText) + pingText.length;\n                    var current = html.slice(0, endIndex);\n                    highlightedHtml += current.replace(pingText, __createTag(user));\n\n                    html = html.slice(endIndex);\n                }\n            });\n            highlightedHtml += html;\n            return highlightedHtml;\n        }\n        return html;\n    },\n\n    linkify: function(inputText) {\n        var replacedText, replacePattern1, replacePattern2, replacePattern3;\n\n        // URLs starting with http://, https://, file:// or ftp://\n        replacePattern1 = /(^|\\s)((https?|ftp|file):\\/\\/[-A-Z0-9+&@#\\/%?=~_|!:,.;]*[-A-Z0-9+&@#\\/%=~_|])/gim;\n        replacedText = inputText.replace(replacePattern1, '$1<a href=\"$2\" target=\"_blank\">$2</a>');\n\n        // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\n        replacePattern2 = /(^|\\s)(www\\.[\\S]+(\\b|$))/gim;\n        replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\n\n        // Change email addresses to mailto:: links.\n        replacePattern3 = /(^|\\s)(([a-zA-Z0-9\\-\\_\\.]+)@[a-zA-Z\\_]+?(\\.[a-zA-Z]{2,6})+)/gim;\n        replacedText = replacedText.replace(replacePattern3, '$1<a href=\"mailto:$2\">$2</a>');\n\n        // If there are hrefs in the original text, let's split\n        // the text up and only work on the parts that don't have urls yet.\n        var count = inputText.match(/<a href/g) || [];\n\n        if(count.length > 0){\n            // Keep delimiter when splitting\n            var splitInput = inputText.split(/(<\\/a>)/g);\n            for (var i = 0 ; i < splitInput.length ; i++){\n                if(splitInput[i].match(/<a href/g) == null){\n                    splitInput[i] = splitInput[i].replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>').replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>').replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\n                }\n            }\n            var combinedReplacedText = splitInput.join('');\n            return combinedReplacedText;\n        } else {\n            return replacedText;\n        }\n    },\n\n    waitUntil: function(condition, callback) {\n        var self = this;\n\n        if(condition()) {\n            callback();\n        } else {\n            setTimeout(function() {\n                self.waitUntil(condition, callback);\n            }, 100);\n        }\n    },\n\n    applyInternalMappings: function(commentJSON) {\n        // Inverting field mappings\n        var invertedMappings = {};\n        var mappings = this.options.fieldMappings;\n        for (var prop in mappings) {\n            if(mappings.hasOwnProperty(prop)) {\n                invertedMappings[mappings[prop]] = prop;\n            }\n        }\n\n        return this.applyMappings(invertedMappings, commentJSON);\n    },\n\n    applyExternalMappings: function(commentJSON) {\n        var mappings = this.options.fieldMappings;\n        return this.applyMappings(mappings, commentJSON);\n    },\n\n    applyMappings: function(mappings, commentJSON) {\n        var result = {};\n\n        for(var key1 in commentJSON) {\n            if(key1 in mappings) {\n                var key2 = mappings[key1];\n                result[key2] = commentJSON[key1];\n            }\n        }\n        return result;\n    }\n\n    };\n\n    $.fn.comments = function(options) {\n        return this.each(function() {\n            var comments = Object.create(Comments);\n            $.data(this, 'comments', comments);\n            comments.init(options || {}, this);\n        });\n    };\n}));\n\n\n/* eslint-disable */\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jquery-comments/js/jquery-comments.js\n// module id = 703\n// module chunks = 0 1 6 11","(function (factory) {\n  if (typeof define === 'function' && define.amd) {\n    // AMD. Register as an anonymous module.\n    define(['jquery'], factory);\n  } else if (typeof module === \"object\" && module.exports) {\n    var $ = require('jquery');\n    module.exports = factory($);\n  } else {\n    // Browser globals\n    factory(jQuery);\n  }\n}(function (jQuery) {\n\n/*!\n * jQuery.textcomplete\n *\n * Repository: https://github.com/yuku-t/jquery-textcomplete\n * License:    MIT (https://github.com/yuku-t/jquery-textcomplete/blob/master/LICENSE)\n * Author:     Yuku Takahashi\n */\n\nif (typeof jQuery === 'undefined') {\n  throw new Error('jQuery.textcomplete requires jQuery');\n}\n\n+function ($) {\n  'use strict';\n\n  var warn = function (message) {\n    if (console.warn) { console.warn(message); }\n  };\n\n  var id = 1;\n\n  $.fn.textcomplete = function (strategies, option) {\n    var args = Array.prototype.slice.call(arguments);\n    return this.each(function () {\n      var self = this;\n      var $this = $(this);\n      var completer = $this.data('textComplete');\n      if (!completer) {\n        option || (option = {});\n        option._oid = id++;  // unique object id\n        completer = new $.fn.textcomplete.Completer(this, option);\n        $this.data('textComplete', completer);\n      }\n      if (typeof strategies === 'string') {\n        if (!completer) return;\n        args.shift()\n        completer[strategies].apply(completer, args);\n        if (strategies === 'destroy') {\n          $this.removeData('textComplete');\n        }\n      } else {\n        // For backward compatibility.\n        // TODO: Remove at v0.4\n        $.each(strategies, function (obj) {\n          $.each(['header', 'footer', 'placement', 'maxCount'], function (name) {\n            if (obj[name]) {\n              completer.option[name] = obj[name];\n              warn(name + 'as a strategy param is deprecated. Use option.');\n              delete obj[name];\n            }\n          });\n        });\n        completer.register($.fn.textcomplete.Strategy.parse(strategies, {\n          el: self,\n          $el: $this\n        }));\n      }\n    });\n  };\n\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  // Exclusive execution control utility.\n  //\n  // func - The function to be locked. It is executed with a function named\n  //        `free` as the first argument. Once it is called, additional\n  //        execution are ignored until the free is invoked. Then the last\n  //        ignored execution will be replayed immediately.\n  //\n  // Examples\n  //\n  //   var lockedFunc = lock(function (free) {\n  //     setTimeout(function { free(); }, 1000); // It will be free in 1 sec.\n  //     console.log('Hello, world');\n  //   });\n  //   lockedFunc();  // => 'Hello, world'\n  //   lockedFunc();  // none\n  //   lockedFunc();  // none\n  //   // 1 sec past then\n  //   // => 'Hello, world'\n  //   lockedFunc();  // => 'Hello, world'\n  //   lockedFunc();  // none\n  //\n  // Returns a wrapped function.\n  var lock = function (func) {\n    var locked, queuedArgsToReplay;\n\n    return function () {\n      // Convert arguments into a real array.\n      var args = Array.prototype.slice.call(arguments);\n      if (locked) {\n        // Keep a copy of this argument list to replay later.\n        // OK to overwrite a previous value because we only replay\n        // the last one.\n        queuedArgsToReplay = args;\n        return;\n      }\n      locked = true;\n      var self = this;\n      args.unshift(function replayOrFree() {\n        if (queuedArgsToReplay) {\n          // Other request(s) arrived while we were locked.\n          // Now that the lock is becoming available, replay\n          // the latest such request, then call back here to\n          // unlock (or replay another request that arrived\n          // while this one was in flight).\n          var replayArgs = queuedArgsToReplay;\n          queuedArgsToReplay = undefined;\n          replayArgs.unshift(replayOrFree);\n          func.apply(self, replayArgs);\n        } else {\n          locked = false;\n        }\n      });\n      func.apply(this, args);\n    };\n  };\n\n  var isString = function (obj) {\n    return Object.prototype.toString.call(obj) === '[object String]';\n  };\n\n  var uniqueId = 0;\n  var initializedEditors = [];\n\n  function Completer(element, option) {\n    this.$el        = $(element);\n    this.id         = 'textcomplete' + uniqueId++;\n    this.strategies = [];\n    this.views      = [];\n    this.option     = $.extend({}, Completer.defaults, option);\n\n    if (!this.$el.is('input[type=text]') && !this.$el.is('input[type=search]') && !this.$el.is('textarea') && !element.isContentEditable && element.contentEditable != 'true') {\n      throw new Error('textcomplete must be called on a Textarea or a ContentEditable.');\n    }\n\n    // use ownerDocument to fix iframe / IE issues\n    if (element === element.ownerDocument.activeElement) {\n      // element has already been focused. Initialize view objects immediately.\n      this.initialize()\n    } else {\n      // Initialize view objects lazily.\n      var self = this;\n      this.$el.one('focus.' + this.id, function () { self.initialize(); });\n\n      // Special handling for CKEditor: lazy init on instance load\n      if ((!this.option.adapter || this.option.adapter == 'CKEditor') && typeof CKEDITOR != 'undefined' && (this.$el.is('textarea'))) {\n        CKEDITOR.on(\"instanceReady\", function(event) { //For multiple ckeditors on one page: this needs to be executed each time a ckeditor-instance is ready.\n\n          if($.inArray(event.editor.id, initializedEditors) == -1) { //For multiple ckeditors on one page: focus-eventhandler should only be added once for every editor.\n            initializedEditors.push(event.editor.id);\n\t\t\t\n            event.editor.on(\"focus\", function(event2) {\n\t\t\t\t//replace the element with the Iframe element and flag it as CKEditor\n\t\t\t\tself.$el = $(event.editor.editable().$);\n\t\t\t\tif (!self.option.adapter) {\n\t\t\t\t\tself.option.adapter = $.fn.textcomplete['CKEditor'];\n\t\t\t\t}\n\t\t\t\tself.option.ckeditor_instance = event.editor; //For multiple ckeditors on one page: in the old code this was not executed when adapter was alread set. So we were ALWAYS working with the FIRST instance.\n              \tself.initialize();\n            });\n          }\n        });\n      }\n    }\n  }\n\n  Completer.defaults = {\n    appendTo: 'body',\n    className: '',  // deprecated option\n    dropdownClassName: 'dropdown-menu textcomplete-dropdown',\n    maxCount: 10,\n    zIndex: '100',\n    rightEdgeOffset: 30\n  };\n\n  $.extend(Completer.prototype, {\n    // Public properties\n    // -----------------\n\n    id:         null,\n    option:     null,\n    strategies: null,\n    adapter:    null,\n    dropdown:   null,\n    $el:        null,\n    $iframe:    null,\n\n    // Public methods\n    // --------------\n\n    initialize: function () {\n      var element = this.$el.get(0);\n      \n      // check if we are in an iframe\n      // we need to alter positioning logic if using an iframe\n      if (this.$el.prop('ownerDocument') !== document && window.frames.length) {\n        for (var iframeIndex = 0; iframeIndex < window.frames.length; iframeIndex++) {\n          if (this.$el.prop('ownerDocument') === window.frames[iframeIndex].document) {\n            this.$iframe = $(window.frames[iframeIndex].frameElement);\n            break;\n          }\n        }\n      }\n      \n      \n      // Initialize view objects.\n      this.dropdown = new $.fn.textcomplete.Dropdown(element, this, this.option);\n      var Adapter, viewName;\n      if (this.option.adapter) {\n        Adapter = this.option.adapter;\n      } else {\n        if (this.$el.is('textarea') || this.$el.is('input[type=text]') || this.$el.is('input[type=search]')) {\n          viewName = typeof element.selectionEnd === 'number' ? 'Textarea' : 'IETextarea';\n        } else {\n          viewName = 'ContentEditable';\n        }\n        Adapter = $.fn.textcomplete[viewName];\n      }\n      this.adapter = new Adapter(element, this, this.option);\n    },\n\n    destroy: function () {\n      this.$el.off('.' + this.id);\n      if (this.adapter) {\n        this.adapter.destroy();\n      }\n      if (this.dropdown) {\n        this.dropdown.destroy();\n      }\n      this.$el = this.adapter = this.dropdown = null;\n    },\n\n    deactivate: function () {\n      if (this.dropdown) {\n        this.dropdown.deactivate();\n      }\n    },\n\n    // Invoke textcomplete.\n    trigger: function (text, skipUnchangedTerm) {\n      if (!this.dropdown) { this.initialize(); }\n      text != null || (text = this.adapter.getTextFromHeadToCaret());\n      var searchQuery = this._extractSearchQuery(text);\n      if (searchQuery.length) {\n        var term = searchQuery[1];\n        // Ignore shift-key, ctrl-key and so on.\n        if (skipUnchangedTerm && this._term === term && term !== \"\") { return; }\n        this._term = term;\n        this._search.apply(this, searchQuery);\n      } else {\n        this._term = null;\n        this.dropdown.deactivate();\n      }\n    },\n\n    fire: function (eventName) {\n      var args = Array.prototype.slice.call(arguments, 1);\n      this.$el.trigger(eventName, args);\n      return this;\n    },\n\n    register: function (strategies) {\n      Array.prototype.push.apply(this.strategies, strategies);\n    },\n\n    // Insert the value into adapter view. It is called when the dropdown is clicked\n    // or selected.\n    //\n    // value    - The selected element of the array callbacked from search func.\n    // strategy - The Strategy object.\n    // e        - Click or keydown event object.\n    select: function (value, strategy, e) {\n      this._term = null;\n      this.adapter.select(value, strategy, e);\n      this.fire('change').fire('textComplete:select', value, strategy);\n      this.adapter.focus();\n    },\n\n    // Private properties\n    // ------------------\n\n    _clearAtNext: true,\n    _term:        null,\n\n    // Private methods\n    // ---------------\n\n    // Parse the given text and extract the first matching strategy.\n    //\n    // Returns an array including the strategy, the query term and the match\n    // object if the text matches an strategy; otherwise returns an empty array.\n    _extractSearchQuery: function (text) {\n      for (var i = 0; i < this.strategies.length; i++) {\n        var strategy = this.strategies[i];\n        var context = strategy.context(text);\n        if (context || context === '') {\n          var matchRegexp = $.isFunction(strategy.match) ? strategy.match(text) : strategy.match;\n          if (isString(context)) { text = context; }\n          var match = text.match(matchRegexp);\n          if (match) { return [strategy, match[strategy.index], match]; }\n        }\n      }\n      return []\n    },\n\n    // Call the search method of selected strategy..\n    _search: lock(function (free, strategy, term, match) {\n      var self = this;\n      strategy.search(term, function (data, stillSearching) {\n        if (!self.dropdown.shown) {\n          self.dropdown.activate();\n        }\n        if (self._clearAtNext) {\n          // The first callback in the current lock.\n          self.dropdown.clear();\n          self._clearAtNext = false;\n        }\n        self.dropdown.setPosition(self.adapter.getCaretPosition());\n        self.dropdown.render(self._zip(data, strategy, term));\n        if (!stillSearching) {\n          // The last callback in the current lock.\n          free();\n          self._clearAtNext = true; // Call dropdown.clear at the next time.\n        }\n      }, match);\n    }),\n\n    // Build a parameter for Dropdown#render.\n    //\n    // Examples\n    //\n    //  this._zip(['a', 'b'], 's');\n    //  //=> [{ value: 'a', strategy: 's' }, { value: 'b', strategy: 's' }]\n    _zip: function (data, strategy, term) {\n      return $.map(data, function (value) {\n        return { value: value, strategy: strategy, term: term };\n      });\n    }\n  });\n\n  $.fn.textcomplete.Completer = Completer;\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  var $window = $(window);\n\n  var include = function (zippedData, datum) {\n    var i, elem;\n    var idProperty = datum.strategy.idProperty\n    for (i = 0; i < zippedData.length; i++) {\n      elem = zippedData[i];\n      if (elem.strategy !== datum.strategy) continue;\n      if (idProperty) {\n        if (elem.value[idProperty] === datum.value[idProperty]) return true;\n      } else {\n        if (elem.value === datum.value) return true;\n      }\n    }\n    return false;\n  };\n\n  var dropdownViews = {};\n  $(document).on('click', function (e) {\n    var id = e.originalEvent && e.originalEvent.keepTextCompleteDropdown;\n    $.each(dropdownViews, function (key, view) {\n      if (key !== id) { view.deactivate(); }\n    });\n  });\n\n  var commands = {\n    SKIP_DEFAULT: 0,\n    KEY_UP: 1,\n    KEY_DOWN: 2,\n    KEY_ENTER: 3,\n    KEY_PAGEUP: 4,\n    KEY_PAGEDOWN: 5,\n    KEY_ESCAPE: 6\n  };\n\n  // Dropdown view\n  // =============\n\n  // Construct Dropdown object.\n  //\n  // element - Textarea or contenteditable element.\n  function Dropdown(element, completer, option) {\n    this.$el       = Dropdown.createElement(option);\n    this.completer = completer;\n    this.id        = completer.id + 'dropdown';\n    this._data     = []; // zipped data.\n    this.$inputEl  = $(element);\n    this.option    = option;\n\n    // Override setPosition method.\n    if (option.listPosition) { this.setPosition = option.listPosition; }\n    if (option.height) { this.$el.height(option.height); }\n    var self = this;\n    $.each(['maxCount', 'placement', 'footer', 'header', 'noResultsMessage', 'className'], function (_i, name) {\n      if (option[name] != null) { self[name] = option[name]; }\n    });\n    this._bindEvents(element);\n    dropdownViews[this.id] = this;\n  }\n\n  $.extend(Dropdown, {\n    // Class methods\n    // -------------\n\n    createElement: function (option) {\n      var $parent = option.appendTo;\n      if (!($parent instanceof $)) { $parent = $($parent); }\n      var $el = $('<ul></ul>')\n        .addClass(option.dropdownClassName)\n        .attr('id', 'textcomplete-dropdown-' + option._oid)\n        .css({\n          display: 'none',\n          left: 0,\n          position: 'absolute',\n          zIndex: option.zIndex\n        })\n        .appendTo($parent);\n      return $el;\n    }\n  });\n\n  $.extend(Dropdown.prototype, {\n    // Public properties\n    // -----------------\n\n    $el:       null,  // jQuery object of ul.dropdown-menu element.\n    $inputEl:  null,  // jQuery object of target textarea.\n    completer: null,\n    footer:    null,\n    header:    null,\n    id:        null,\n    maxCount:  null,\n    placement: '',\n    shown:     false,\n    data:      [],     // Shown zipped data.\n    className: '',\n\n    // Public methods\n    // --------------\n\n    destroy: function () {\n      // Don't remove $el because it may be shared by several textcompletes.\n      this.deactivate();\n\n      this.$el.off('.' + this.id);\n      this.$inputEl.off('.' + this.id);\n      this.clear();\n      this.$el.remove();\n      this.$el = this.$inputEl = this.completer = null;\n      delete dropdownViews[this.id]\n    },\n\n    render: function (zippedData) {\n      var contentsHtml = this._buildContents(zippedData);\n      var unzippedData = $.map(zippedData, function (d) { return d.value; });\n      if (zippedData.length) {\n        var strategy = zippedData[0].strategy;\n        if (strategy.id) {\n          this.$el.attr('data-strategy', strategy.id);\n        } else {\n          this.$el.removeAttr('data-strategy');\n        }\n        this._renderHeader(unzippedData);\n        this._renderFooter(unzippedData);\n        if (contentsHtml) {\n          this._renderContents(contentsHtml);\n          this._fitToBottom();\n          this._fitToRight();\n          this._activateIndexedItem();\n        }\n        this._setScroll();\n      } else if (this.noResultsMessage) {\n        this._renderNoResultsMessage(unzippedData);\n      } else if (this.shown) {\n        this.deactivate();\n      }\n    },\n\n    setPosition: function (pos) {\n      // Make the dropdown fixed if the input is also fixed\n      // This can't be done during init, as textcomplete may be used on multiple elements on the same page\n      // Because the same dropdown is reused behind the scenes, we need to recheck every time the dropdown is showed\n      var position = 'absolute';\n      // Check if input or one of its parents has positioning we need to care about\n      this.$inputEl.add(this.$inputEl.parents()).each(function() {\n        if($(this).css('position') === 'absolute') // The element has absolute positioning, so it's all OK\n          return false;\n        if($(this).css('position') === 'fixed') {\n          pos.top -= $window.scrollTop();\n          pos.left -= $window.scrollLeft();\n          position = 'fixed';\n          return false;\n        }\n      });\n      this.$el.css(this._applyPlacement(pos));\n      this.$el.css({ position: position }); // Update positioning\n\n      return this;\n    },\n\n    clear: function () {\n      this.$el.html('');\n      this.data = [];\n      this._index = 0;\n      this._$header = this._$footer = this._$noResultsMessage = null;\n    },\n\n    activate: function () {\n      if (!this.shown) {\n        this.clear();\n        this.$el.show();\n        if (this.className) { this.$el.addClass(this.className); }\n        this.completer.fire('textComplete:show');\n        this.shown = true;\n      }\n      return this;\n    },\n\n    deactivate: function () {\n      if (this.shown) {\n        this.$el.hide();\n        if (this.className) { this.$el.removeClass(this.className); }\n        this.completer.fire('textComplete:hide');\n        this.shown = false;\n      }\n      return this;\n    },\n\n    isUp: function (e) {\n      return e.keyCode === 38 || (e.ctrlKey && e.keyCode === 80);  // UP, Ctrl-P\n    },\n\n    isDown: function (e) {\n      return e.keyCode === 40 || (e.ctrlKey && e.keyCode === 78);  // DOWN, Ctrl-N\n    },\n\n    isEnter: function (e) {\n      var modifiers = e.ctrlKey || e.altKey || e.metaKey || e.shiftKey;\n      return !modifiers && (e.keyCode === 13 || e.keyCode === 9 || (this.option.completeOnSpace === true && e.keyCode === 32))  // ENTER, TAB\n    },\n\n    isPageup: function (e) {\n      return e.keyCode === 33;  // PAGEUP\n    },\n\n    isPagedown: function (e) {\n      return e.keyCode === 34;  // PAGEDOWN\n    },\n\n    isEscape: function (e) {\n      return e.keyCode === 27;  // ESCAPE\n    },\n\n    // Private properties\n    // ------------------\n\n    _data:    null,  // Currently shown zipped data.\n    _index:   null,\n    _$header: null,\n    _$noResultsMessage: null,\n    _$footer: null,\n\n    // Private methods\n    // ---------------\n\n    _bindEvents: function () {\n      this.$el.on('mousedown.' + this.id, '.textcomplete-item', $.proxy(this._onClick, this));\n      this.$el.on('touchstart.' + this.id, '.textcomplete-item', $.proxy(this._onClick, this));\n      this.$el.on('mouseover.' + this.id, '.textcomplete-item', $.proxy(this._onMouseover, this));\n      this.$inputEl.on('keydown.' + this.id, $.proxy(this._onKeydown, this));\n    },\n\n    _onClick: function (e) {\n      var $el = $(e.target);\n      e.preventDefault();\n      e.originalEvent.keepTextCompleteDropdown = this.id;\n      if (!$el.hasClass('textcomplete-item')) {\n        $el = $el.closest('.textcomplete-item');\n      }\n      var datum = this.data[parseInt($el.data('index'), 10)];\n      this.completer.select(datum.value, datum.strategy, e);\n      var self = this;\n      // Deactive at next tick to allow other event handlers to know whether\n      // the dropdown has been shown or not.\n      setTimeout(function () {\n        self.deactivate();\n        if (e.type === 'touchstart') {\n          self.$inputEl.focus();\n        }\n      }, 0);\n    },\n\n    // Activate hovered item.\n    _onMouseover: function (e) {\n      var $el = $(e.target);\n      e.preventDefault();\n      if (!$el.hasClass('textcomplete-item')) {\n        $el = $el.closest('.textcomplete-item');\n      }\n      this._index = parseInt($el.data('index'), 10);\n      this._activateIndexedItem();\n    },\n\n    _onKeydown: function (e) {\n      if (!this.shown) { return; }\n\n      var command;\n\n      if ($.isFunction(this.option.onKeydown)) {\n        command = this.option.onKeydown(e, commands);\n      }\n\n      if (command == null) {\n        command = this._defaultKeydown(e);\n      }\n\n      switch (command) {\n        case commands.KEY_UP:\n          e.preventDefault();\n          this._up();\n          break;\n        case commands.KEY_DOWN:\n          e.preventDefault();\n          this._down();\n          break;\n        case commands.KEY_ENTER:\n          e.preventDefault();\n          this._enter(e);\n          break;\n        case commands.KEY_PAGEUP:\n          e.preventDefault();\n          this._pageup();\n          break;\n        case commands.KEY_PAGEDOWN:\n          e.preventDefault();\n          this._pagedown();\n          break;\n        case commands.KEY_ESCAPE:\n          e.preventDefault();\n          this.deactivate();\n          break;\n      }\n    },\n\n    _defaultKeydown: function (e) {\n      if (this.isUp(e)) {\n        return commands.KEY_UP;\n      } else if (this.isDown(e)) {\n        return commands.KEY_DOWN;\n      } else if (this.isEnter(e)) {\n        return commands.KEY_ENTER;\n      } else if (this.isPageup(e)) {\n        return commands.KEY_PAGEUP;\n      } else if (this.isPagedown(e)) {\n        return commands.KEY_PAGEDOWN;\n      } else if (this.isEscape(e)) {\n        return commands.KEY_ESCAPE;\n      }\n    },\n\n    _up: function () {\n      if (this._index === 0) {\n        this._index = this.data.length - 1;\n      } else {\n        this._index -= 1;\n      }\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _down: function () {\n      if (this._index === this.data.length - 1) {\n        this._index = 0;\n      } else {\n        this._index += 1;\n      }\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _enter: function (e) {\n      var datum = this.data[parseInt(this._getActiveElement().data('index'), 10)];\n      this.completer.select(datum.value, datum.strategy, e);\n      this.deactivate();\n    },\n\n    _pageup: function () {\n      var target = 0;\n      var threshold = this._getActiveElement().position().top - this.$el.innerHeight();\n      this.$el.children().each(function (i) {\n        if ($(this).position().top + $(this).outerHeight() > threshold) {\n          target = i;\n          return false;\n        }\n      });\n      this._index = target;\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _pagedown: function () {\n      var target = this.data.length - 1;\n      var threshold = this._getActiveElement().position().top + this.$el.innerHeight();\n      this.$el.children().each(function (i) {\n        if ($(this).position().top > threshold) {\n          target = i;\n          return false\n        }\n      });\n      this._index = target;\n      this._activateIndexedItem();\n      this._setScroll();\n    },\n\n    _activateIndexedItem: function () {\n      this.$el.find('.textcomplete-item.active').removeClass('active');\n      this._getActiveElement().addClass('active');\n    },\n\n    _getActiveElement: function () {\n      return this.$el.children('.textcomplete-item:nth(' + this._index + ')');\n    },\n\n    _setScroll: function () {\n      var $activeEl = this._getActiveElement();\n      var itemTop = $activeEl.position().top;\n      var itemHeight = $activeEl.outerHeight();\n      var visibleHeight = this.$el.innerHeight();\n      var visibleTop = this.$el.scrollTop();\n      if (this._index === 0 || this._index == this.data.length - 1 || itemTop < 0) {\n        this.$el.scrollTop(itemTop + visibleTop);\n      } else if (itemTop + itemHeight > visibleHeight) {\n        this.$el.scrollTop(itemTop + itemHeight + visibleTop - visibleHeight);\n      }\n    },\n\n    _buildContents: function (zippedData) {\n      var datum, i, index;\n      var html = '';\n      for (i = 0; i < zippedData.length; i++) {\n        if (this.data.length === this.maxCount) break;\n        datum = zippedData[i];\n        if (include(this.data, datum)) { continue; }\n        index = this.data.length;\n        this.data.push(datum);\n        html += '<li class=\"textcomplete-item\" data-index=\"' + index + '\"><a>';\n        html +=   datum.strategy.template(datum.value, datum.term);\n        html += '</a></li>';\n      }\n      return html;\n    },\n\n    _renderHeader: function (unzippedData) {\n      if (this.header) {\n        if (!this._$header) {\n          this._$header = $('<li class=\"textcomplete-header\"></li>').prependTo(this.$el);\n        }\n        var html = $.isFunction(this.header) ? this.header(unzippedData) : this.header;\n        this._$header.html(html);\n      }\n    },\n\n    _renderFooter: function (unzippedData) {\n      if (this.footer) {\n        if (!this._$footer) {\n          this._$footer = $('<li class=\"textcomplete-footer\"></li>').appendTo(this.$el);\n        }\n        var html = $.isFunction(this.footer) ? this.footer(unzippedData) : this.footer;\n        this._$footer.html(html);\n      }\n    },\n\n    _renderNoResultsMessage: function (unzippedData) {\n      if (this.noResultsMessage) {\n        if (!this._$noResultsMessage) {\n          this._$noResultsMessage = $('<li class=\"textcomplete-no-results-message\"></li>').appendTo(this.$el);\n        }\n        var html = $.isFunction(this.noResultsMessage) ? this.noResultsMessage(unzippedData) : this.noResultsMessage;\n        this._$noResultsMessage.html(html);\n      }\n    },\n\n    _renderContents: function (html) {\n      if (this._$footer) {\n        this._$footer.before(html);\n      } else {\n        this.$el.append(html);\n      }\n    },\n\n    _fitToBottom: function() {\n      var windowScrollBottom = $window.scrollTop() + $window.height();\n      var height = this.$el.height();\n      if ((this.$el.position().top + height) > windowScrollBottom) {\n        // only do this if we are not in an iframe\n        if (!this.completer.$iframe) {\n          this.$el.offset({top: windowScrollBottom - height});\n        }\n      }\n    },\n\n    _fitToRight: function() {\n      // We don't know how wide our content is until the browser positions us, and at that point it clips us\n      // to the document width so we don't know if we would have overrun it. As a heuristic to avoid that clipping\n      // (which makes our elements wrap onto the next line and corrupt the next item), if we're close to the right\n      // edge, move left. We don't know how far to move left, so just keep nudging a bit.\n      var tolerance = this.option.rightEdgeOffset; // pixels. Make wider than vertical scrollbar because we might not be able to use that space.\n      var lastOffset = this.$el.offset().left, offset;\n      var width = this.$el.width();\n      var maxLeft = $window.width() - tolerance;\n      while (lastOffset + width > maxLeft) {\n        this.$el.offset({left: lastOffset - tolerance});\n        offset = this.$el.offset().left;\n        if (offset >= lastOffset) { break; }\n        lastOffset = offset;\n      }\n    },\n\n    _applyPlacement: function (position) {\n      // If the 'placement' option set to 'top', move the position above the element.\n      if (this.placement.indexOf('top') !== -1) {\n        // Overwrite the position object to set the 'bottom' property instead of the top.\n        position = {\n          top: 'auto',\n          bottom: this.$el.parent().height() - position.top + position.lineHeight,\n          left: position.left\n        };\n      } else {\n        position.bottom = 'auto';\n        delete position.lineHeight;\n      }\n      if (this.placement.indexOf('absleft') !== -1) {\n        position.left = 0;\n      } else if (this.placement.indexOf('absright') !== -1) {\n        position.right = 0;\n        position.left = 'auto';\n      }\n      return position;\n    }\n  });\n\n  $.fn.textcomplete.Dropdown = Dropdown;\n  $.extend($.fn.textcomplete, commands);\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  // Memoize a search function.\n  var memoize = function (func) {\n    var memo = {};\n    return function (term, callback) {\n      if (memo[term]) {\n        callback(memo[term]);\n      } else {\n        func.call(this, term, function (data) {\n          memo[term] = (memo[term] || []).concat(data);\n          callback.apply(null, arguments);\n        });\n      }\n    };\n  };\n\n  function Strategy(options) {\n    $.extend(this, options);\n    if (this.cache) { this.search = memoize(this.search); }\n  }\n\n  Strategy.parse = function (strategiesArray, params) {\n    return $.map(strategiesArray, function (strategy) {\n      var strategyObj = new Strategy(strategy);\n      strategyObj.el = params.el;\n      strategyObj.$el = params.$el;\n      return strategyObj;\n    });\n  };\n\n  $.extend(Strategy.prototype, {\n    // Public properties\n    // -----------------\n\n    // Required\n    match:      null,\n    replace:    null,\n    search:     null,\n\n    // Optional\n    id:         null,\n    cache:      false,\n    context:    function () { return true; },\n    index:      2,\n    template:   function (obj) { return obj; },\n    idProperty: null\n  });\n\n  $.fn.textcomplete.Strategy = Strategy;\n\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  var now = Date.now || function () { return new Date().getTime(); };\n\n  // Returns a function, that, as long as it continues to be invoked, will not\n  // be triggered. The function will be called after it stops being called for\n  // `wait` msec.\n  //\n  // This utility function was originally implemented at Underscore.js.\n  var debounce = function (func, wait) {\n    var timeout, args, context, timestamp, result;\n    var later = function () {\n      var last = now() - timestamp;\n      if (last < wait) {\n        timeout = setTimeout(later, wait - last);\n      } else {\n        timeout = null;\n        result = func.apply(context, args);\n        context = args = null;\n      }\n    };\n\n    return function () {\n      context = this;\n      args = arguments;\n      timestamp = now();\n      if (!timeout) {\n        timeout = setTimeout(later, wait);\n      }\n      return result;\n    };\n  };\n\n  function Adapter () {}\n\n  $.extend(Adapter.prototype, {\n    // Public properties\n    // -----------------\n\n    id:        null, // Identity.\n    completer: null, // Completer object which creates it.\n    el:        null, // Textarea element.\n    $el:       null, // jQuery object of the textarea.\n    option:    null,\n\n    // Public methods\n    // --------------\n\n    initialize: function (element, completer, option) {\n      this.el        = element;\n      this.$el       = $(element);\n      this.id        = completer.id + this.constructor.name;\n      this.completer = completer;\n      this.option    = option;\n\n      if (this.option.debounce) {\n        this._onKeyup = debounce(this._onKeyup, this.option.debounce);\n      }\n\n      this._bindEvents();\n    },\n\n    destroy: function () {\n      this.$el.off('.' + this.id); // Remove all event handlers.\n      this.$el = this.el = this.completer = null;\n    },\n\n    // Update the element with the given value and strategy.\n    //\n    // value    - The selected object. It is one of the item of the array\n    //            which was callbacked from the search function.\n    // strategy - The Strategy associated with the selected value.\n    select: function (/* value, strategy */) {\n      throw new Error('Not implemented');\n    },\n\n    // Returns the caret's relative coordinates from body's left top corner.\n    getCaretPosition: function () {\n      var position = this._getCaretRelativePosition();\n      var offset = this.$el.offset();\n\n      // Calculate the left top corner of `this.option.appendTo` element.\n      var $parent = this.option.appendTo;\n      if ($parent) {\n         if (!($parent instanceof $)) { $parent = $($parent); }\n         var parentOffset = $parent.offsetParent().offset();\n         offset.top -= parentOffset.top;\n         offset.left -= parentOffset.left;\n      }\n\n      position.top += offset.top;\n      position.left += offset.left;\n      return position;\n    },\n\n    // Focus on the element.\n    focus: function () {\n      this.$el.focus();\n    },\n\n    // Private methods\n    // ---------------\n\n    _bindEvents: function () {\n      this.$el.on('keyup.' + this.id, $.proxy(this._onKeyup, this));\n    },\n\n    _onKeyup: function (e) {\n      if (this._skipSearch(e)) { return; }\n      this.completer.trigger(this.getTextFromHeadToCaret(), true);\n    },\n\n    // Suppress searching if it returns true.\n    _skipSearch: function (clickEvent) {\n      switch (clickEvent.keyCode) {\n        case 9:  // TAB\n        case 13: // ENTER\n        case 16: // SHIFT\n        case 17: // CTRL\n        case 18: // ALT\n        case 33: // PAGEUP\n        case 34: // PAGEDOWN\n        case 40: // DOWN\n        case 38: // UP\n        case 27: // ESC\n          return true;\n      }\n      if (clickEvent.ctrlKey) switch (clickEvent.keyCode) {\n        case 78: // Ctrl-N\n        case 80: // Ctrl-P\n          return true;\n      }\n    }\n  });\n\n  $.fn.textcomplete.Adapter = Adapter;\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  // Textarea adapter\n  // ================\n  //\n  // Managing a textarea. It doesn't know a Dropdown.\n  function Textarea(element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(Textarea.prototype, $.fn.textcomplete.Adapter.prototype, {\n    // Public methods\n    // --------------\n\n    // Update the textarea with the given value and strategy.\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      var post = this.el.value.substring(this.el.selectionEnd);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr);\n        this.$el.val(pre + post);\n        this.el.selectionStart = this.el.selectionEnd = pre.length;\n      }\n    },\n\n    getTextFromHeadToCaret: function () {\n      return this.el.value.substring(0, this.el.selectionEnd);\n    },\n\n    // Private methods\n    // ---------------\n\n    _getCaretRelativePosition: function () {\n      var p = $.fn.textcomplete.getCaretCoordinates(this.el, this.el.selectionStart);\n      return {\n        top: p.top + this._calculateLineHeight() - this.$el.scrollTop(),\n        left: p.left - this.$el.scrollLeft(),\n        lineHeight: this._calculateLineHeight()\n      };\n    },\n\n    _calculateLineHeight: function () {\n      var lineHeight = parseInt(this.$el.css('line-height'), 10);\n      if (isNaN(lineHeight)) {\n        // http://stackoverflow.com/a/4515470/1297336\n        var parentNode = this.el.parentNode;\n        var temp = document.createElement(this.el.nodeName);\n        var style = this.el.style;\n        temp.setAttribute(\n          'style',\n          'margin:0px;padding:0px;font-family:' + style.fontFamily + ';font-size:' + style.fontSize\n        );\n        temp.innerHTML = 'test';\n        parentNode.appendChild(temp);\n        lineHeight = temp.clientHeight;\n        parentNode.removeChild(temp);\n      }\n      return lineHeight;\n    }\n  });\n\n  $.fn.textcomplete.Textarea = Textarea;\n}(jQuery);\n\n+function ($) {\n  'use strict';\n\n  var sentinelChar = '吶';\n\n  function IETextarea(element, completer, option) {\n    this.initialize(element, completer, option);\n    $('<span>' + sentinelChar + '</span>').css({\n      position: 'absolute',\n      top: -9999,\n      left: -9999\n    }).insertBefore(element);\n  }\n\n  $.extend(IETextarea.prototype, $.fn.textcomplete.Textarea.prototype, {\n    // Public methods\n    // --------------\n\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      var post = this.el.value.substring(pre.length);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr);\n        this.$el.val(pre + post);\n        this.el.focus();\n        var range = this.el.createTextRange();\n        range.collapse(true);\n        range.moveEnd('character', pre.length);\n        range.moveStart('character', pre.length);\n        range.select();\n      }\n    },\n\n    getTextFromHeadToCaret: function () {\n      this.el.focus();\n      var range = document.selection.createRange();\n      range.moveStart('character', -this.el.value.length);\n      var arr = range.text.split(sentinelChar)\n      return arr.length === 1 ? arr[0] : arr[1];\n    }\n  });\n\n  $.fn.textcomplete.IETextarea = IETextarea;\n}(jQuery);\n\n// NOTE: TextComplete plugin has contenteditable support but it does not work\n//       fine especially on old IEs.\n//       Any pull requests are REALLY welcome.\n\n+function ($) {\n  'use strict';\n\n  // ContentEditable adapter\n  // =======================\n  //\n  // Adapter for contenteditable elements.\n  function ContentEditable (element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(ContentEditable.prototype, $.fn.textcomplete.Adapter.prototype, {\n    // Public methods\n    // --------------\n\n    // Update the content with the given value and strategy.\n    // When an dropdown item is selected, it is executed.\n    select: function (value, strategy, e) {\n      var pre = this.getTextFromHeadToCaret();\n      // use ownerDocument instead of window to support iframes\n      var sel = this.el.ownerDocument.getSelection();\n      \n      var range = sel.getRangeAt(0);\n      var selection = range.cloneRange();\n      selection.selectNodeContents(range.startContainer);\n      var content = selection.toString();\n      var post = content.substring(range.startOffset);\n      var newSubstr = strategy.replace(value, e);\n      var regExp;\n      if (typeof newSubstr !== 'undefined') {\n        if ($.isArray(newSubstr)) {\n          post = newSubstr[1] + post;\n          newSubstr = newSubstr[0];\n        }\n        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;\n        pre = pre.replace(regExp, newSubstr)\n            .replace(/ $/, \"&nbsp\"); // &nbsp necessary at least for CKeditor to not eat spaces\n        range.selectNodeContents(range.startContainer);\n        range.deleteContents();\n        \n        // create temporary elements\n        var preWrapper = this.el.ownerDocument.createElement(\"div\");\n        preWrapper.innerHTML = pre;\n        var postWrapper = this.el.ownerDocument.createElement(\"div\");\n        postWrapper.innerHTML = post;\n        \n        // create the fragment thats inserted\n        var fragment = this.el.ownerDocument.createDocumentFragment();\n        var childNode;\n        var lastOfPre;\n        while (childNode = preWrapper.firstChild) {\n        \tlastOfPre = fragment.appendChild(childNode);\n        }\n        while (childNode = postWrapper.firstChild) {\n        \tfragment.appendChild(childNode);\n        }\n        \n        // insert the fragment & jump behind the last node in \"pre\"\n        range.insertNode(fragment);\n        range.setStartAfter(lastOfPre);\n        \n        range.collapse(true);\n        sel.removeAllRanges();\n        sel.addRange(range);\n      }\n    },\n\n    // Private methods\n    // ---------------\n\n    // Returns the caret's relative position from the contenteditable's\n    // left top corner.\n    //\n    // Examples\n    //\n    //   this._getCaretRelativePosition()\n    //   //=> { top: 18, left: 200, lineHeight: 16 }\n    //\n    // Dropdown's position will be decided using the result.\n    _getCaretRelativePosition: function () {\n      var range = this.el.ownerDocument.getSelection().getRangeAt(0).cloneRange();\n      var wrapperNode = range.endContainer.parentNode;\n      var node = this.el.ownerDocument.createElement('span');\n      range.insertNode(node);\n      range.selectNodeContents(node);\n      range.deleteContents();\n      setTimeout(function() { wrapperNode.normalize(); }, 0);\n      var $node = $(node);\n      var position = $node.offset();\n      position.left -= this.$el.offset().left;\n      position.top += $node.height() - this.$el.offset().top;\n      position.lineHeight = $node.height();\n      \n      // special positioning logic for iframes\n      // this is typically used for contenteditables such as tinymce or ckeditor\n      if (this.completer.$iframe) {\n        var iframePosition = this.completer.$iframe.offset();\n        position.top += iframePosition.top;\n        position.left += iframePosition.left;\n        // We need to get the scrollTop of the html-element inside the iframe and not of the body-element,\n        // because on IE the scrollTop of the body-element (this.$el) is always zero.\n        position.top -= $(this.completer.$iframe[0].contentWindow.document).scrollTop();\n      }\n      \n      $node.remove();\n      return position;\n    },\n\n    // Returns the string between the first character and the caret.\n    // Completer will be triggered with the result for start autocompleting.\n    //\n    // Example\n    //\n    //   // Suppose the html is '<b>hello</b> wor|ld' and | is the caret.\n    //   this.getTextFromHeadToCaret()\n    //   // => ' wor'  // not '<b>hello</b> wor'\n    getTextFromHeadToCaret: function () {\n      var range = this.el.ownerDocument.getSelection().getRangeAt(0);\n      var selection = range.cloneRange();\n      selection.selectNodeContents(range.startContainer);\n      return selection.toString().substring(0, range.startOffset);\n    }\n  });\n\n  $.fn.textcomplete.ContentEditable = ContentEditable;\n}(jQuery);\n\n// NOTE: TextComplete plugin has contenteditable support but it does not work\n//       fine especially on old IEs.\n//       Any pull requests are REALLY welcome.\n\n+function ($) {\n  'use strict';\n\n  // CKEditor adapter\n  // =======================\n  //\n  // Adapter for CKEditor, based on contenteditable elements.\n  function CKEditor (element, completer, option) {\n    this.initialize(element, completer, option);\n  }\n\n  $.extend(CKEditor.prototype, $.fn.textcomplete.ContentEditable.prototype, {\n    _bindEvents: function () {\n      var $this = this;\n      this.option.ckeditor_instance.on('key', function(event) {\n        var domEvent = event.data;\n        $this._onKeyup(domEvent);\n        if ($this.completer.dropdown.shown && $this._skipSearch(domEvent)) {\n          return false;\n        }\n      }, null, null, 1); // 1 = Priority = Important!\n      // we actually also need the native event, as the CKEditor one is happening to late\n      this.$el.on('keyup.' + this.id, $.proxy(this._onKeyup, this));\n    },\n});\n\n  $.fn.textcomplete.CKEditor = CKEditor;\n}(jQuery);\n\n// The MIT License (MIT)\n// \n// Copyright (c) 2015 Jonathan Ong me@jongleberry.com\n// \n// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and\n// associated documentation files (the \"Software\"), to deal in the Software without restriction,\n// including without limitation the rights to use, copy, modify, merge, publish, distribute,\n// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n// \n// The above copyright notice and this permission notice shall be included in all copies or\n// substantial portions of the Software.\n// \n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT\n// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n//\n// https://github.com/component/textarea-caret-position\n\n(function ($) {\n\n// The properties that we copy into a mirrored div.\n// Note that some browsers, such as Firefox,\n// do not concatenate properties, i.e. padding-top, bottom etc. -> padding,\n// so we have to do every single property specifically.\nvar properties = [\n  'direction',  // RTL support\n  'boxSizing',\n  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does\n  'height',\n  'overflowX',\n  'overflowY',  // copy the scrollbar for IE\n\n  'borderTopWidth',\n  'borderRightWidth',\n  'borderBottomWidth',\n  'borderLeftWidth',\n  'borderStyle',\n\n  'paddingTop',\n  'paddingRight',\n  'paddingBottom',\n  'paddingLeft',\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/font\n  'fontStyle',\n  'fontVariant',\n  'fontWeight',\n  'fontStretch',\n  'fontSize',\n  'fontSizeAdjust',\n  'lineHeight',\n  'fontFamily',\n\n  'textAlign',\n  'textTransform',\n  'textIndent',\n  'textDecoration',  // might not make a difference, but better be safe\n\n  'letterSpacing',\n  'wordSpacing',\n\n  'tabSize',\n  'MozTabSize'\n\n];\n\nvar isBrowser = (typeof window !== 'undefined');\nvar isFirefox = (isBrowser && window.mozInnerScreenX != null);\n\nfunction getCaretCoordinates(element, position, options) {\n  if(!isBrowser) {\n    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');\n  }\n\n  var debug = options && options.debug || false;\n  if (debug) {\n    var el = document.querySelector('#input-textarea-caret-position-mirror-div');\n    if ( el ) { el.parentNode.removeChild(el); }\n  }\n\n  // mirrored div\n  var div = document.createElement('div');\n  div.id = 'input-textarea-caret-position-mirror-div';\n  document.body.appendChild(div);\n\n  var style = div.style;\n  var computed = window.getComputedStyle? getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9\n\n  // default textarea styles\n  style.whiteSpace = 'pre-wrap';\n  if (element.nodeName !== 'INPUT')\n    style.wordWrap = 'break-word';  // only for textarea-s\n\n  // position off-screen\n  style.position = 'absolute';  // required to return coordinates properly\n  if (!debug)\n    style.visibility = 'hidden';  // not 'display: none' because we want rendering\n\n  // transfer the element's properties to the div\n  properties.forEach(function (prop) {\n    style[prop] = computed[prop];\n  });\n\n  if (isFirefox) {\n    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275\n    if (element.scrollHeight > parseInt(computed.height))\n      style.overflowY = 'scroll';\n  } else {\n    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'\n  }\n\n  div.textContent = element.value.substring(0, position);\n  // the second special handling for input type=\"text\" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037\n  if (element.nodeName === 'INPUT')\n    div.textContent = div.textContent.replace(/\\s/g, '\\u00a0');\n\n  var span = document.createElement('span');\n  // Wrapping must be replicated *exactly*, including when a long word gets\n  // onto the next line, with whitespace at the end of the line before (#7).\n  // The  *only* reliable way to do that is to copy the *entire* rest of the\n  // textarea's content into the <span> created at the caret position.\n  // for inputs, just '.' would be enough, but why bother?\n  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all\n  div.appendChild(span);\n\n  var coordinates = {\n    top: span.offsetTop + parseInt(computed['borderTopWidth']),\n    left: span.offsetLeft + parseInt(computed['borderLeftWidth'])\n  };\n\n  if (debug) {\n    span.style.backgroundColor = '#aaa';\n  } else {\n    document.body.removeChild(div);\n  }\n\n  return coordinates;\n}\n\n$.fn.textcomplete.getCaretCoordinates = getCaretCoordinates;\n\n}(jQuery));\n\nreturn jQuery;\n}));\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/jquery-textcomplete/dist/jquery.textcomplete.js\n// module id = 704\n// module chunks = 0 1 6 11","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"comment-temp\"\n  }, [_c('div', [_c('v-expansion-panel', {\n    staticClass: \"expansion-pl-transparent\"\n  }, [_c('v-expansion-panel-content', {\n    attrs: {\n      \"hide-actions\": \"\",\n      \"value\": true\n    }\n  }, [_c('v-card', {\n    staticClass: \"comments__container\"\n  }, [_c('v-card-text', {\n    staticClass: \"pl-4\"\n  }, [_c('div', {\n    attrs: {\n      \"id\": \"comments-container-el\"\n    }\n  })])], 1)], 1)], 1)], 1)])\n},staticRenderFns: []}\nmodule.exports.render._withStripped = true\nif (module.hot) {\n  module.hot.accept()\n  if (module.hot.data) {\n     require(\"vue-hot-reload-api\").rerender(\"data-v-c8f36406\", module.exports)\n  }\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler?{\"id\":\"data-v-c8f36406\"}!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Comment.vue\n// module id = 708\n// module chunks = 0 1 6 11"],"sourceRoot":""}