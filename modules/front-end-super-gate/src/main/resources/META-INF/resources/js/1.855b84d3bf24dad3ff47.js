webpackJsonp([1,3,4,8,9,11,16,20,22,23,25,26,27,28],Array(212).concat([
/* 212 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(647),
  /* template */
  __webpack_require__(649),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\TiepNhan\\TiepNhanHoSo_ThanhPhanHoSo.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] TiepNhanHoSo_ThanhPhanHoSo.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-687ee6a0", Component.options)
  } else {
    hotAPI.reload("data-v-687ee6a0", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 213 */,
/* 214 */,
/* 215 */,
/* 216 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(650),
  /* template */
  __webpack_require__(671),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\FeeDetail.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] FeeDetail.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-6830f0e4", Component.options)
  } else {
    hotAPI.reload("data-v-6830f0e4", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 217 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(651),
  /* template */
  __webpack_require__(672),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\toggleButton.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] toggleButton.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7cc31a58", Component.options)
  } else {
    hotAPI.reload("data-v-7cc31a58", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 218 */,
/* 219 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(674),
  /* template */
  __webpack_require__(680),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\PhanCongNguoiThucHien.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] PhanCongNguoiThucHien.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-7cac08a2", Component.options)
  } else {
    hotAPI.reload("data-v-7cac08a2", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 220 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(675),
  /* template */
  __webpack_require__(678),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\ThongTinCoBanHoSo.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ThongTinCoBanHoSo.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-02494d10", Component.options)
  } else {
    hotAPI.reload("data-v-02494d10", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 221 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(676),
  /* template */
  __webpack_require__(679),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\TraKetQua.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] TraKetQua.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5b02061d", Component.options)
  } else {
    hotAPI.reload("data-v-5b02061d", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 222 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(677),
  /* template */
  __webpack_require__(681),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\YkienCanBoThucHien.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] YkienCanBoThucHien.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-ad80357c", Component.options)
  } else {
    hotAPI.reload("data-v-ad80357c", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 223 */,
/* 224 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(682),
  /* template */
  __webpack_require__(699),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\Comment.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] Comment.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-c8f36406", Component.options)
  } else {
    hotAPI.reload("data-v-c8f36406", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 225 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(683),
  /* template */
  __webpack_require__(696),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\FormBoSungThongTinNgan.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] FormBoSungThongTinNgan.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-2df4b7d0", Component.options)
  } else {
    hotAPI.reload("data-v-2df4b7d0", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 226 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(684),
  /* template */
  __webpack_require__(700),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\KyPheDuyetTaiLieu.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] KyPheDuyetTaiLieu.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-f7571a70", Component.options)
  } else {
    hotAPI.reload("data-v-f7571a70", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 227 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(685),
  /* template */
  __webpack_require__(697),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\TaoTaiLieuKetQua.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] TaoTaiLieuKetQua.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-5b77eb43", Component.options)
  } else {
    hotAPI.reload("data-v-5b77eb43", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 228 */,
/* 229 */,
/* 230 */,
/* 231 */,
/* 232 */,
/* 233 */,
/* 234 */,
/* 235 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(705),
  /* template */
  __webpack_require__(715),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\EditDate.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] EditDate.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-21461291", Component.options)
  } else {
    hotAPI.reload("data-v-21461291", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 236 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(706),
  /* template */
  __webpack_require__(718),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\form_xu_ly\\ExtendDateEdit.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] ExtendDateEdit.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-edbb7fea", Component.options)
  } else {
    hotAPI.reload("data-v-edbb7fea", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 237 */,
/* 238 */,
/* 239 */,
/* 240 */,
/* 241 */,
/* 242 */,
/* 243 */
/***/ (function(module, exports, __webpack_require__) {

var Component = __webpack_require__(137)(
  /* script */
  __webpack_require__(724),
  /* template */
  __webpack_require__(730),
  /* scopeId */
  null,
  /* cssModules */
  null
)
Component.options.__file = "d:\\FDS_OPENCPS\\front-end-v2.1\\frontend-opencps-v2.1\\onegate_21_fe\\src\\components\\XemChiTietHoSoDetailCanBo.vue"
if (Component.esModule && Object.keys(Component.esModule).some(function (key) {return key !== "default" && key !== "__esModule"})) {console.error("named exports are not supported in *.vue files.")}
if (Component.options.functional) {console.error("[vue-loader] XemChiTietHoSoDetailCanBo.vue: functional components are not supported with templates, they should use render functions.")}

/* hot reload */
if (false) {(function () {
  var hotAPI = require("vue-hot-reload-api")
  hotAPI.install(require("vue"), false)
  if (!hotAPI.compatible) return
  module.hot.accept()
  if (!module.hot.data) {
    hotAPI.createRecord("data-v-2b6b1f3f", Component.options)
  } else {
    hotAPI.reload("data-v-2b6b1f3f", Component.options)
  }
})()}

module.exports = Component.exports


/***/ }),
/* 244 */,
/* 245 */,
/* 246 */,
/* 247 */,
/* 248 */,
/* 249 */,
/* 250 */,
/* 251 */,
/* 252 */,
/* 253 */,
/* 254 */,
/* 255 */,
/* 256 */,
/* 257 */,
/* 258 */,
/* 259 */,
/* 260 */,
/* 261 */,
/* 262 */,
/* 263 */,
/* 264 */,
/* 265 */,
/* 266 */,
/* 267 */,
/* 268 */,
/* 269 */,
/* 270 */,
/* 271 */,
/* 272 */,
/* 273 */,
/* 274 */,
/* 275 */,
/* 276 */,
/* 277 */,
/* 278 */,
/* 279 */,
/* 280 */,
/* 281 */,
/* 282 */,
/* 283 */,
/* 284 */,
/* 285 */,
/* 286 */,
/* 287 */,
/* 288 */,
/* 289 */,
/* 290 */,
/* 291 */,
/* 292 */,
/* 293 */,
/* 294 */,
/* 295 */,
/* 296 */,
/* 297 */,
/* 298 */,
/* 299 */,
/* 300 */,
/* 301 */,
/* 302 */,
/* 303 */,
/* 304 */,
/* 305 */,
/* 306 */,
/* 307 */,
/* 308 */,
/* 309 */,
/* 310 */,
/* 311 */,
/* 312 */,
/* 313 */,
/* 314 */,
/* 315 */,
/* 316 */,
/* 317 */,
/* 318 */,
/* 319 */,
/* 320 */,
/* 321 */,
/* 322 */,
/* 323 */,
/* 324 */,
/* 325 */,
/* 326 */,
/* 327 */,
/* 328 */,
/* 329 */,
/* 330 */,
/* 331 */,
/* 332 */,
/* 333 */,
/* 334 */,
/* 335 */,
/* 336 */,
/* 337 */,
/* 338 */,
/* 339 */,
/* 340 */,
/* 341 */,
/* 342 */,
/* 343 */,
/* 344 */,
/* 345 */,
/* 346 */,
/* 347 */,
/* 348 */,
/* 349 */,
/* 350 */,
/* 351 */,
/* 352 */,
/* 353 */,
/* 354 */,
/* 355 */,
/* 356 */,
/* 357 */,
/* 358 */,
/* 359 */,
/* 360 */,
/* 361 */,
/* 362 */,
/* 363 */,
/* 364 */,
/* 365 */,
/* 366 */,
/* 367 */,
/* 368 */,
/* 369 */,
/* 370 */,
/* 371 */,
/* 372 */,
/* 373 */,
/* 374 */,
/* 375 */,
/* 376 */,
/* 377 */,
/* 378 */,
/* 379 */,
/* 380 */,
/* 381 */,
/* 382 */,
/* 383 */,
/* 384 */,
/* 385 */,
/* 386 */,
/* 387 */,
/* 388 */,
/* 389 */,
/* 390 */,
/* 391 */,
/* 392 */,
/* 393 */,
/* 394 */,
/* 395 */,
/* 396 */,
/* 397 */,
/* 398 */,
/* 399 */,
/* 400 */,
/* 401 */,
/* 402 */,
/* 403 */,
/* 404 */,
/* 405 */,
/* 406 */,
/* 407 */,
/* 408 */,
/* 409 */,
/* 410 */,
/* 411 */,
/* 412 */,
/* 413 */,
/* 414 */,
/* 415 */,
/* 416 */,
/* 417 */,
/* 418 */,
/* 419 */,
/* 420 */,
/* 421 */,
/* 422 */,
/* 423 */,
/* 424 */,
/* 425 */,
/* 426 */,
/* 427 */,
/* 428 */,
/* 429 */,
/* 430 */,
/* 431 */,
/* 432 */,
/* 433 */,
/* 434 */,
/* 435 */,
/* 436 */,
/* 437 */,
/* 438 */,
/* 439 */,
/* 440 */,
/* 441 */,
/* 442 */,
/* 443 */,
/* 444 */,
/* 445 */,
/* 446 */,
/* 447 */,
/* 448 */,
/* 449 */,
/* 450 */,
/* 451 */,
/* 452 */,
/* 453 */,
/* 454 */,
/* 455 */,
/* 456 */,
/* 457 */,
/* 458 */,
/* 459 */,
/* 460 */,
/* 461 */,
/* 462 */,
/* 463 */,
/* 464 */,
/* 465 */,
/* 466 */,
/* 467 */,
/* 468 */,
/* 469 */,
/* 470 */,
/* 471 */,
/* 472 */,
/* 473 */,
/* 474 */,
/* 475 */,
/* 476 */,
/* 477 */,
/* 478 */,
/* 479 */,
/* 480 */,
/* 481 */,
/* 482 */,
/* 483 */,
/* 484 */,
/* 485 */,
/* 486 */,
/* 487 */,
/* 488 */,
/* 489 */,
/* 490 */,
/* 491 */,
/* 492 */,
/* 493 */,
/* 494 */,
/* 495 */,
/* 496 */,
/* 497 */,
/* 498 */,
/* 499 */,
/* 500 */,
/* 501 */,
/* 502 */,
/* 503 */,
/* 504 */,
/* 505 */,
/* 506 */,
/* 507 */,
/* 508 */,
/* 509 */,
/* 510 */,
/* 511 */,
/* 512 */,
/* 513 */,
/* 514 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(module) {var require;//! moment.js

;(function (global, factory) {
     true ? module.exports = factory() :
    typeof define === 'function' && define.amd ? define(factory) :
    global.moment = factory()
}(this, (function () { 'use strict';

    var hookCallback;

    function hooks () {
        return hookCallback.apply(null, arguments);
    }

    // This is done to register the method called with moment()
    // without creating circular dependencies.
    function setHookCallback (callback) {
        hookCallback = callback;
    }

    function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
    }

    function isObject(input) {
        // IE8 will treat undefined and null as object if it wasn't for
        // input != null
        return input != null && Object.prototype.toString.call(input) === '[object Object]';
    }

    function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
            return (Object.getOwnPropertyNames(obj).length === 0);
        } else {
            var k;
            for (k in obj) {
                if (obj.hasOwnProperty(k)) {
                    return false;
                }
            }
            return true;
        }
    }

    function isUndefined(input) {
        return input === void 0;
    }

    function isNumber(input) {
        return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
    }

    function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
    }

    function map(arr, fn) {
        var res = [], i;
        for (i = 0; i < arr.length; ++i) {
            res.push(fn(arr[i], i));
        }
        return res;
    }

    function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
    }

    function extend(a, b) {
        for (var i in b) {
            if (hasOwnProp(b, i)) {
                a[i] = b[i];
            }
        }

        if (hasOwnProp(b, 'toString')) {
            a.toString = b.toString;
        }

        if (hasOwnProp(b, 'valueOf')) {
            a.valueOf = b.valueOf;
        }

        return a;
    }

    function createUTC (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, true).utc();
    }

    function defaultParsingFlags() {
        // We need to deep clone this object.
        return {
            empty           : false,
            unusedTokens    : [],
            unusedInput     : [],
            overflow        : -2,
            charsLeftOver   : 0,
            nullInput       : false,
            invalidMonth    : null,
            invalidFormat   : false,
            userInvalidated : false,
            iso             : false,
            parsedDateParts : [],
            meridiem        : null,
            rfc2822         : false,
            weekdayMismatch : false
        };
    }

    function getParsingFlags(m) {
        if (m._pf == null) {
            m._pf = defaultParsingFlags();
        }
        return m._pf;
    }

    var some;
    if (Array.prototype.some) {
        some = Array.prototype.some;
    } else {
        some = function (fun) {
            var t = Object(this);
            var len = t.length >>> 0;

            for (var i = 0; i < len; i++) {
                if (i in t && fun.call(this, t[i], i, t)) {
                    return true;
                }
            }

            return false;
        };
    }

    function isValid(m) {
        if (m._isValid == null) {
            var flags = getParsingFlags(m);
            var parsedParts = some.call(flags.parsedDateParts, function (i) {
                return i != null;
            });
            var isNowValid = !isNaN(m._d.getTime()) &&
                flags.overflow < 0 &&
                !flags.empty &&
                !flags.invalidMonth &&
                !flags.invalidWeekday &&
                !flags.weekdayMismatch &&
                !flags.nullInput &&
                !flags.invalidFormat &&
                !flags.userInvalidated &&
                (!flags.meridiem || (flags.meridiem && parsedParts));

            if (m._strict) {
                isNowValid = isNowValid &&
                    flags.charsLeftOver === 0 &&
                    flags.unusedTokens.length === 0 &&
                    flags.bigHour === undefined;
            }

            if (Object.isFrozen == null || !Object.isFrozen(m)) {
                m._isValid = isNowValid;
            }
            else {
                return isNowValid;
            }
        }
        return m._isValid;
    }

    function createInvalid (flags) {
        var m = createUTC(NaN);
        if (flags != null) {
            extend(getParsingFlags(m), flags);
        }
        else {
            getParsingFlags(m).userInvalidated = true;
        }

        return m;
    }

    // Plugins that add properties should also add the key here (null value),
    // so we can properly clone ourselves.
    var momentProperties = hooks.momentProperties = [];

    function copyConfig(to, from) {
        var i, prop, val;

        if (!isUndefined(from._isAMomentObject)) {
            to._isAMomentObject = from._isAMomentObject;
        }
        if (!isUndefined(from._i)) {
            to._i = from._i;
        }
        if (!isUndefined(from._f)) {
            to._f = from._f;
        }
        if (!isUndefined(from._l)) {
            to._l = from._l;
        }
        if (!isUndefined(from._strict)) {
            to._strict = from._strict;
        }
        if (!isUndefined(from._tzm)) {
            to._tzm = from._tzm;
        }
        if (!isUndefined(from._isUTC)) {
            to._isUTC = from._isUTC;
        }
        if (!isUndefined(from._offset)) {
            to._offset = from._offset;
        }
        if (!isUndefined(from._pf)) {
            to._pf = getParsingFlags(from);
        }
        if (!isUndefined(from._locale)) {
            to._locale = from._locale;
        }

        if (momentProperties.length > 0) {
            for (i = 0; i < momentProperties.length; i++) {
                prop = momentProperties[i];
                val = from[prop];
                if (!isUndefined(val)) {
                    to[prop] = val;
                }
            }
        }

        return to;
    }

    var updateInProgress = false;

    // Moment prototype object
    function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
            this._d = new Date(NaN);
        }
        // Prevent infinite loop in case updateOffset creates new moment
        // objects.
        if (updateInProgress === false) {
            updateInProgress = true;
            hooks.updateOffset(this);
            updateInProgress = false;
        }
    }

    function isMoment (obj) {
        return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
    }

    function absFloor (number) {
        if (number < 0) {
            // -0 -> 0
            return Math.ceil(number) || 0;
        } else {
            return Math.floor(number);
        }
    }

    function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion,
            value = 0;

        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
            value = absFloor(coercedNumber);
        }

        return value;
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if ((dontConvert && array1[i] !== array2[i]) ||
                (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false &&
                (typeof console !==  'undefined') && console.warn) {
            console.warn('Deprecation warning: ' + msg);
        }
    }

    function deprecate(msg, fn) {
        var firstTime = true;

        return extend(function () {
            if (hooks.deprecationHandler != null) {
                hooks.deprecationHandler(null, msg);
            }
            if (firstTime) {
                var args = [];
                var arg;
                for (var i = 0; i < arguments.length; i++) {
                    arg = '';
                    if (typeof arguments[i] === 'object') {
                        arg += '\n[' + i + '] ';
                        for (var key in arguments[0]) {
                            arg += key + ': ' + arguments[0][key] + ', ';
                        }
                        arg = arg.slice(0, -2); // Remove trailing comma and space
                    } else {
                        arg = arguments[i];
                    }
                    args.push(arg);
                }
                warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                firstTime = false;
            }
            return fn.apply(this, arguments);
        }, fn);
    }

    var deprecations = {};

    function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
            warn(msg);
            deprecations[name] = true;
        }
    }

    hooks.suppressDeprecationWarnings = false;
    hooks.deprecationHandler = null;

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }

    function set (config) {
        var prop, i;
        for (i in config) {
            prop = config[i];
            if (isFunction(prop)) {
                this[i] = prop;
            } else {
                this['_' + i] = prop;
            }
        }
        this._config = config;
        // Lenient ordinal parsing accepts just a number in addition to
        // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
        // TODO: Remove "ordinalParse" fallback in next major release.
        this._dayOfMonthOrdinalParseLenient = new RegExp(
            (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                '|' + (/\d{1,2}/).source);
    }

    function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
            if (hasOwnProp(childConfig, prop)) {
                if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                    res[prop] = {};
                    extend(res[prop], parentConfig[prop]);
                    extend(res[prop], childConfig[prop]);
                } else if (childConfig[prop] != null) {
                    res[prop] = childConfig[prop];
                } else {
                    delete res[prop];
                }
            }
        }
        for (prop in parentConfig) {
            if (hasOwnProp(parentConfig, prop) &&
                    !hasOwnProp(childConfig, prop) &&
                    isObject(parentConfig[prop])) {
                // make sure changes to properties don't modify parent config
                res[prop] = extend({}, res[prop]);
            }
        }
        return res;
    }

    function Locale(config) {
        if (config != null) {
            this.set(config);
        }
    }

    var keys;

    if (Object.keys) {
        keys = Object.keys;
    } else {
        keys = function (obj) {
            var i, res = [];
            for (i in obj) {
                if (hasOwnProp(obj, i)) {
                    res.push(i);
                }
            }
            return res;
        };
    }

    var defaultCalendar = {
        sameDay : '[Today at] LT',
        nextDay : '[Tomorrow at] LT',
        nextWeek : 'dddd [at] LT',
        lastDay : '[Yesterday at] LT',
        lastWeek : '[Last] dddd [at] LT',
        sameElse : 'L'
    };

    function calendar (key, mom, now) {
        var output = this._calendar[key] || this._calendar['sameElse'];
        return isFunction(output) ? output.call(mom, now) : output;
    }

    var defaultLongDateFormat = {
        LTS  : 'h:mm:ss A',
        LT   : 'h:mm A',
        L    : 'MM/DD/YYYY',
        LL   : 'MMMM D, YYYY',
        LLL  : 'MMMM D, YYYY h:mm A',
        LLLL : 'dddd, MMMM D, YYYY h:mm A'
    };

    function longDateFormat (key) {
        var format = this._longDateFormat[key],
            formatUpper = this._longDateFormat[key.toUpperCase()];

        if (format || !formatUpper) {
            return format;
        }

        this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
            return val.slice(1);
        });

        return this._longDateFormat[key];
    }

    var defaultInvalidDate = 'Invalid date';

    function invalidDate () {
        return this._invalidDate;
    }

    var defaultOrdinal = '%d';
    var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

    function ordinal (number) {
        return this._ordinal.replace('%d', number);
    }

    var defaultRelativeTime = {
        future : 'in %s',
        past   : '%s ago',
        s  : 'a few seconds',
        ss : '%d seconds',
        m  : 'a minute',
        mm : '%d minutes',
        h  : 'an hour',
        hh : '%d hours',
        d  : 'a day',
        dd : '%d days',
        M  : 'a month',
        MM : '%d months',
        y  : 'a year',
        yy : '%d years'
    };

    function relativeTime (number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return (isFunction(output)) ?
            output(number, withoutSuffix, string, isFuture) :
            output.replace(/%d/i, number);
    }

    function pastFuture (diff, output) {
        var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
        return isFunction(format) ? format(output) : format.replace(/%s/i, output);
    }

    var aliases = {};

    function addUnitAlias (unit, shorthand) {
        var lowerCase = unit.toLowerCase();
        aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
    }

    function normalizeUnits(units) {
        return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
    }

    function normalizeObjectUnits(inputObject) {
        var normalizedInput = {},
            normalizedProp,
            prop;

        for (prop in inputObject) {
            if (hasOwnProp(inputObject, prop)) {
                normalizedProp = normalizeUnits(prop);
                if (normalizedProp) {
                    normalizedInput[normalizedProp] = inputObject[prop];
                }
            }
        }

        return normalizedInput;
    }

    var priorities = {};

    function addUnitPriority(unit, priority) {
        priorities[unit] = priority;
    }

    function getPrioritizedUnits(unitsObj) {
        var units = [];
        for (var u in unitsObj) {
            units.push({unit: u, priority: priorities[u]});
        }
        units.sort(function (a, b) {
            return a.priority - b.priority;
        });
        return units;
    }

    function zeroFill(number, targetLength, forceSign) {
        var absNumber = '' + Math.abs(number),
            zerosToFill = targetLength - absNumber.length,
            sign = number >= 0;
        return (sign ? (forceSign ? '+' : '') : '-') +
            Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
    }

    var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

    var formatFunctions = {};

    var formatTokenFunctions = {};

    // token:    'M'
    // padded:   ['MM', 2]
    // ordinal:  'Mo'
    // callback: function () { this.month() + 1 }
    function addFormatToken (token, padded, ordinal, callback) {
        var func = callback;
        if (typeof callback === 'string') {
            func = function () {
                return this[callback]();
            };
        }
        if (token) {
            formatTokenFunctions[token] = func;
        }
        if (padded) {
            formatTokenFunctions[padded[0]] = function () {
                return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
            };
        }
        if (ordinal) {
            formatTokenFunctions[ordinal] = function () {
                return this.localeData().ordinal(func.apply(this, arguments), token);
            };
        }
    }

    function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
            return input.replace(/^\[|\]$/g, '');
        }
        return input.replace(/\\/g, '');
    }

    function makeFormatFunction(format) {
        var array = format.match(formattingTokens), i, length;

        for (i = 0, length = array.length; i < length; i++) {
            if (formatTokenFunctions[array[i]]) {
                array[i] = formatTokenFunctions[array[i]];
            } else {
                array[i] = removeFormattingTokens(array[i]);
            }
        }

        return function (mom) {
            var output = '', i;
            for (i = 0; i < length; i++) {
                output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
            }
            return output;
        };
    }

    // format date using native date object
    function formatMoment(m, format) {
        if (!m.isValid()) {
            return m.localeData().invalidDate();
        }

        format = expandFormat(format, m.localeData());
        formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

        return formatFunctions[format](m);
    }

    function expandFormat(format, locale) {
        var i = 5;

        function replaceLongDateFormatTokens(input) {
            return locale.longDateFormat(input) || input;
        }

        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format)) {
            format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
            localFormattingTokens.lastIndex = 0;
            i -= 1;
        }

        return format;
    }

    var match1         = /\d/;            //       0 - 9
    var match2         = /\d\d/;          //      00 - 99
    var match3         = /\d{3}/;         //     000 - 999
    var match4         = /\d{4}/;         //    0000 - 9999
    var match6         = /[+-]?\d{6}/;    // -999999 - 999999
    var match1to2      = /\d\d?/;         //       0 - 99
    var match3to4      = /\d\d\d\d?/;     //     999 - 9999
    var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
    var match1to3      = /\d{1,3}/;       //       0 - 999
    var match1to4      = /\d{1,4}/;       //       0 - 9999
    var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

    var matchUnsigned  = /\d+/;           //       0 - inf
    var matchSigned    = /[+-]?\d+/;      //    -inf - inf

    var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
    var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

    var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

    // any word (or two) characters or numbers including two/three word month in arabic.
    // includes scottish gaelic two word and hyphenated months
    var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

    var regexes = {};

    function addRegexToken (token, regex, strictRegex) {
        regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
            return (isStrict && strictRegex) ? strictRegex : regex;
        };
    }

    function getParseRegexForToken (token, config) {
        if (!hasOwnProp(regexes, token)) {
            return new RegExp(unescapeFormat(token));
        }

        return regexes[token](config._strict, config._locale);
    }

    // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
    function unescapeFormat(s) {
        return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
            return p1 || p2 || p3 || p4;
        }));
    }

    function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
    }

    var tokens = {};

    function addParseToken (token, callback) {
        var i, func = callback;
        if (typeof token === 'string') {
            token = [token];
        }
        if (isNumber(callback)) {
            func = function (input, array) {
                array[callback] = toInt(input);
            };
        }
        for (i = 0; i < token.length; i++) {
            tokens[token[i]] = func;
        }
    }

    function addWeekParseToken (token, callback) {
        addParseToken(token, function (input, array, config, token) {
            config._w = config._w || {};
            callback(input, config._w, config, token);
        });
    }

    function addTimeToArrayFromToken(token, input, config) {
        if (input != null && hasOwnProp(tokens, token)) {
            tokens[token](input, config._a, config, token);
        }
    }

    var YEAR = 0;
    var MONTH = 1;
    var DATE = 2;
    var HOUR = 3;
    var MINUTE = 4;
    var SECOND = 5;
    var MILLISECOND = 6;
    var WEEK = 7;
    var WEEKDAY = 8;

    // FORMATTING

    addFormatToken('Y', 0, 0, function () {
        var y = this.year();
        return y <= 9999 ? '' + y : '+' + y;
    });

    addFormatToken(0, ['YY', 2], 0, function () {
        return this.year() % 100;
    });

    addFormatToken(0, ['YYYY',   4],       0, 'year');
    addFormatToken(0, ['YYYYY',  5],       0, 'year');
    addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

    // ALIASES

    addUnitAlias('year', 'y');

    // PRIORITIES

    addUnitPriority('year', 1);

    // PARSING

    addRegexToken('Y',      matchSigned);
    addRegexToken('YY',     match1to2, match2);
    addRegexToken('YYYY',   match1to4, match4);
    addRegexToken('YYYYY',  match1to6, match6);
    addRegexToken('YYYYYY', match1to6, match6);

    addParseToken(['YYYYY', 'YYYYYY'], YEAR);
    addParseToken('YYYY', function (input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
    });
    addParseToken('YY', function (input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
    });
    addParseToken('Y', function (input, array) {
        array[YEAR] = parseInt(input, 10);
    });

    // HELPERS

    function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
    }

    function isLeapYear(year) {
        return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
    }

    // HOOKS

    hooks.parseTwoDigitYear = function (input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
    };

    // MOMENTS

    var getSetYear = makeGetSet('FullYear', true);

    function getIsLeapYear () {
        return isLeapYear(this.year());
    }

    function makeGetSet (unit, keepTime) {
        return function (value) {
            if (value != null) {
                set$1(this, unit, value);
                hooks.updateOffset(this, keepTime);
                return this;
            } else {
                return get(this, unit);
            }
        };
    }

    function get (mom, unit) {
        return mom.isValid() ?
            mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
    }

    function set$1 (mom, unit, value) {
        if (mom.isValid() && !isNaN(value)) {
            if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
            }
            else {
                mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
            }
        }
    }

    // MOMENTS

    function stringGet (units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
            return this[units]();
        }
        return this;
    }


    function stringSet (units, value) {
        if (typeof units === 'object') {
            units = normalizeObjectUnits(units);
            var prioritized = getPrioritizedUnits(units);
            for (var i = 0; i < prioritized.length; i++) {
                this[prioritized[i].unit](units[prioritized[i].unit]);
            }
        } else {
            units = normalizeUnits(units);
            if (isFunction(this[units])) {
                return this[units](value);
            }
        }
        return this;
    }

    function mod(n, x) {
        return ((n % x) + x) % x;
    }

    var indexOf;

    if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
    } else {
        indexOf = function (o) {
            // I know
            var i;
            for (i = 0; i < this.length; ++i) {
                if (this[i] === o) {
                    return i;
                }
            }
            return -1;
        };
    }

    function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
            return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
    }

    // FORMATTING

    addFormatToken('M', ['MM', 2], 'Mo', function () {
        return this.month() + 1;
    });

    addFormatToken('MMM', 0, 0, function (format) {
        return this.localeData().monthsShort(this, format);
    });

    addFormatToken('MMMM', 0, 0, function (format) {
        return this.localeData().months(this, format);
    });

    // ALIASES

    addUnitAlias('month', 'M');

    // PRIORITY

    addUnitPriority('month', 8);

    // PARSING

    addRegexToken('M',    match1to2);
    addRegexToken('MM',   match1to2, match2);
    addRegexToken('MMM',  function (isStrict, locale) {
        return locale.monthsShortRegex(isStrict);
    });
    addRegexToken('MMMM', function (isStrict, locale) {
        return locale.monthsRegex(isStrict);
    });

    addParseToken(['M', 'MM'], function (input, array) {
        array[MONTH] = toInt(input) - 1;
    });

    addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
        var month = config._locale.monthsParse(input, token, config._strict);
        // if we didn't find a month name, mark the date as invalid.
        if (month != null) {
            array[MONTH] = month;
        } else {
            getParsingFlags(config).invalidMonth = input;
        }
    });

    // LOCALES

    var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
    var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
    function localeMonths (m, format) {
        if (!m) {
            return isArray(this._months) ? this._months :
                this._months['standalone'];
        }
        return isArray(this._months) ? this._months[m.month()] :
            this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
    }

    var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
    function localeMonthsShort (m, format) {
        if (!m) {
            return isArray(this._monthsShort) ? this._monthsShort :
                this._monthsShort['standalone'];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
            this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
    }

    function handleStrictParse(monthName, format, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
            // this is not used
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
            for (i = 0; i < 12; ++i) {
                mom = createUTC([2000, i]);
                this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'MMM') {
                ii = indexOf.call(this._shortMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._longMonthsParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._longMonthsParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortMonthsParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeMonthsParse (monthName, format, strict) {
        var i, mom, regex;

        if (this._monthsParseExact) {
            return handleStrictParse.call(this, monthName, format, strict);
        }

        if (!this._monthsParse) {
            this._monthsParse = [];
            this._longMonthsParse = [];
            this._shortMonthsParse = [];
        }

        // TODO: add sorting
        // Sorting makes sure if one month (or abbr) is a prefix of another
        // see sorting in computeMonthsParse
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            if (strict && !this._longMonthsParse[i]) {
                this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
            }
            if (!strict && !this._monthsParse[i]) {
                regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                return i;
            } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                return i;
            } else if (!strict && this._monthsParse[i].test(monthName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function setMonth (mom, value) {
        var dayOfMonth;

        if (!mom.isValid()) {
            // No op
            return mom;
        }

        if (typeof value === 'string') {
            if (/^\d+$/.test(value)) {
                value = toInt(value);
            } else {
                value = mom.localeData().monthsParse(value);
                // TODO: Another silent failure?
                if (!isNumber(value)) {
                    return mom;
                }
            }
        }

        dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
        mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
        return mom;
    }

    function getSetMonth (value) {
        if (value != null) {
            setMonth(this, value);
            hooks.updateOffset(this, true);
            return this;
        } else {
            return get(this, 'Month');
        }
    }

    function getDaysInMonth () {
        return daysInMonth(this.year(), this.month());
    }

    var defaultMonthsShortRegex = matchWord;
    function monthsShortRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsShortStrictRegex;
            } else {
                return this._monthsShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsShortRegex')) {
                this._monthsShortRegex = defaultMonthsShortRegex;
            }
            return this._monthsShortStrictRegex && isStrict ?
                this._monthsShortStrictRegex : this._monthsShortRegex;
        }
    }

    var defaultMonthsRegex = matchWord;
    function monthsRegex (isStrict) {
        if (this._monthsParseExact) {
            if (!hasOwnProp(this, '_monthsRegex')) {
                computeMonthsParse.call(this);
            }
            if (isStrict) {
                return this._monthsStrictRegex;
            } else {
                return this._monthsRegex;
            }
        } else {
            if (!hasOwnProp(this, '_monthsRegex')) {
                this._monthsRegex = defaultMonthsRegex;
            }
            return this._monthsStrictRegex && isStrict ?
                this._monthsStrictRegex : this._monthsRegex;
        }
    }

    function computeMonthsParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom;
        for (i = 0; i < 12; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, i]);
            shortPieces.push(this.monthsShort(mom, ''));
            longPieces.push(this.months(mom, ''));
            mixedPieces.push(this.months(mom, ''));
            mixedPieces.push(this.monthsShort(mom, ''));
        }
        // Sorting makes sure if one month (or abbr) is a prefix of another it
        // will match the longer piece.
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 12; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
        }
        for (i = 0; i < 24; i++) {
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
    }

    function createDate (y, m, d, h, M, s, ms) {
        // can't just apply() to create a date:
        // https://stackoverflow.com/q/181348
        var date = new Date(y, m, d, h, M, s, ms);

        // the date constructor remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getFullYear())) {
            date.setFullYear(y);
        }
        return date;
    }

    function createUTCDate (y) {
        var date = new Date(Date.UTC.apply(null, arguments));

        // the Date.UTC function remaps years 0-99 to 1900-1999
        if (y < 100 && y >= 0 && isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
        }
        return date;
    }

    // start-of-first-week - start-of-year
    function firstWeekOffset(year, dow, doy) {
        var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
            fwd = 7 + dow - doy,
            // first-week day local weekday -- which local weekday is fwd
            fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

        return -fwdlw + fwd - 1;
    }

    // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
    function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7,
            weekOffset = firstWeekOffset(year, dow, doy),
            dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
            resYear, resDayOfYear;

        if (dayOfYear <= 0) {
            resYear = year - 1;
            resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
            resYear = year + 1;
            resDayOfYear = dayOfYear - daysInYear(year);
        } else {
            resYear = year;
            resDayOfYear = dayOfYear;
        }

        return {
            year: resYear,
            dayOfYear: resDayOfYear
        };
    }

    function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy),
            week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
            resWeek, resYear;

        if (week < 1) {
            resYear = mom.year() - 1;
            resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
            resWeek = week - weeksInYear(mom.year(), dow, doy);
            resYear = mom.year() + 1;
        } else {
            resYear = mom.year();
            resWeek = week;
        }

        return {
            week: resWeek,
            year: resYear
        };
    }

    function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy),
            weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
    }

    // FORMATTING

    addFormatToken('w', ['ww', 2], 'wo', 'week');
    addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

    // ALIASES

    addUnitAlias('week', 'w');
    addUnitAlias('isoWeek', 'W');

    // PRIORITIES

    addUnitPriority('week', 5);
    addUnitPriority('isoWeek', 5);

    // PARSING

    addRegexToken('w',  match1to2);
    addRegexToken('ww', match1to2, match2);
    addRegexToken('W',  match1to2);
    addRegexToken('WW', match1to2, match2);

    addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
        week[token.substr(0, 1)] = toInt(input);
    });

    // HELPERS

    // LOCALES

    function localeWeek (mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
    }

    var defaultLocaleWeek = {
        dow : 0, // Sunday is the first day of the week.
        doy : 6  // The week that contains Jan 1st is the first week of the year.
    };

    function localeFirstDayOfWeek () {
        return this._week.dow;
    }

    function localeFirstDayOfYear () {
        return this._week.doy;
    }

    // MOMENTS

    function getSetWeek (input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    function getSetISOWeek (input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, 'd');
    }

    // FORMATTING

    addFormatToken('d', 0, 'do', 'day');

    addFormatToken('dd', 0, 0, function (format) {
        return this.localeData().weekdaysMin(this, format);
    });

    addFormatToken('ddd', 0, 0, function (format) {
        return this.localeData().weekdaysShort(this, format);
    });

    addFormatToken('dddd', 0, 0, function (format) {
        return this.localeData().weekdays(this, format);
    });

    addFormatToken('e', 0, 0, 'weekday');
    addFormatToken('E', 0, 0, 'isoWeekday');

    // ALIASES

    addUnitAlias('day', 'd');
    addUnitAlias('weekday', 'e');
    addUnitAlias('isoWeekday', 'E');

    // PRIORITY
    addUnitPriority('day', 11);
    addUnitPriority('weekday', 11);
    addUnitPriority('isoWeekday', 11);

    // PARSING

    addRegexToken('d',    match1to2);
    addRegexToken('e',    match1to2);
    addRegexToken('E',    match1to2);
    addRegexToken('dd',   function (isStrict, locale) {
        return locale.weekdaysMinRegex(isStrict);
    });
    addRegexToken('ddd',   function (isStrict, locale) {
        return locale.weekdaysShortRegex(isStrict);
    });
    addRegexToken('dddd',   function (isStrict, locale) {
        return locale.weekdaysRegex(isStrict);
    });

    addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
        var weekday = config._locale.weekdaysParse(input, token, config._strict);
        // if we didn't get a weekday name, mark the date as invalid
        if (weekday != null) {
            week.d = weekday;
        } else {
            getParsingFlags(config).invalidWeekday = input;
        }
    });

    addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
        week[token] = toInt(input);
    });

    // HELPERS

    function parseWeekday(input, locale) {
        if (typeof input !== 'string') {
            return input;
        }

        if (!isNaN(input)) {
            return parseInt(input, 10);
        }

        input = locale.weekdaysParse(input);
        if (typeof input === 'number') {
            return input;
        }

        return null;
    }

    function parseIsoWeekday(input, locale) {
        if (typeof input === 'string') {
            return locale.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
    }

    // LOCALES

    var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
    function localeWeekdays (m, format) {
        if (!m) {
            return isArray(this._weekdays) ? this._weekdays :
                this._weekdays['standalone'];
        }
        return isArray(this._weekdays) ? this._weekdays[m.day()] :
            this._weekdays[this._weekdays.isFormat.test(format) ? 'format' : 'standalone'][m.day()];
    }

    var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
    function localeWeekdaysShort (m) {
        return (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
    }

    var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
    function localeWeekdaysMin (m) {
        return (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
    }

    function handleStrictParse$1(weekdayName, format, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._minWeekdaysParse = [];

            for (i = 0; i < 7; ++i) {
                mom = createUTC([2000, 1]).day(i);
                this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
            }
        }

        if (strict) {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        } else {
            if (format === 'dddd') {
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else if (format === 'ddd') {
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._minWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            } else {
                ii = indexOf.call(this._minWeekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._weekdaysParse, llc);
                if (ii !== -1) {
                    return ii;
                }
                ii = indexOf.call(this._shortWeekdaysParse, llc);
                return ii !== -1 ? ii : null;
            }
        }
    }

    function localeWeekdaysParse (weekdayName, format, strict) {
        var i, mom, regex;

        if (this._weekdaysParseExact) {
            return handleStrictParse$1.call(this, weekdayName, format, strict);
        }

        if (!this._weekdaysParse) {
            this._weekdaysParse = [];
            this._minWeekdaysParse = [];
            this._shortWeekdaysParse = [];
            this._fullWeekdaysParse = [];
        }

        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already

            mom = createUTC([2000, 1]).day(i);
            if (strict && !this._fullWeekdaysParse[i]) {
                this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
            }
            if (!this._weekdaysParse[i]) {
                regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
            }
            // test the regex
            if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                return i;
            } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                return i;
            }
        }
    }

    // MOMENTS

    function getSetDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
        if (input != null) {
            input = parseWeekday(input, this.localeData());
            return this.add(input - day, 'd');
        } else {
            return day;
        }
    }

    function getSetLocaleDayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, 'd');
    }

    function getSetISODayOfWeek (input) {
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }

        // behaves the same as moment#day except
        // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
        // as a setter, sunday should belong to the previous week.

        if (input != null) {
            var weekday = parseIsoWeekday(input, this.localeData());
            return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
            return this.day() || 7;
        }
    }

    var defaultWeekdaysRegex = matchWord;
    function weekdaysRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysStrictRegex;
            } else {
                return this._weekdaysRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                this._weekdaysRegex = defaultWeekdaysRegex;
            }
            return this._weekdaysStrictRegex && isStrict ?
                this._weekdaysStrictRegex : this._weekdaysRegex;
        }
    }

    var defaultWeekdaysShortRegex = matchWord;
    function weekdaysShortRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysShortStrictRegex;
            } else {
                return this._weekdaysShortRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                this._weekdaysShortRegex = defaultWeekdaysShortRegex;
            }
            return this._weekdaysShortStrictRegex && isStrict ?
                this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
    }

    var defaultWeekdaysMinRegex = matchWord;
    function weekdaysMinRegex (isStrict) {
        if (this._weekdaysParseExact) {
            if (!hasOwnProp(this, '_weekdaysRegex')) {
                computeWeekdaysParse.call(this);
            }
            if (isStrict) {
                return this._weekdaysMinStrictRegex;
            } else {
                return this._weekdaysMinRegex;
            }
        } else {
            if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                this._weekdaysMinRegex = defaultWeekdaysMinRegex;
            }
            return this._weekdaysMinStrictRegex && isStrict ?
                this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
    }


    function computeWeekdaysParse () {
        function cmpLenRev(a, b) {
            return b.length - a.length;
        }

        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
            i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
            // make the regex if we don't have it already
            mom = createUTC([2000, 1]).day(i);
            minp = this.weekdaysMin(mom, '');
            shortp = this.weekdaysShort(mom, '');
            longp = this.weekdays(mom, '');
            minPieces.push(minp);
            shortPieces.push(shortp);
            longPieces.push(longp);
            mixedPieces.push(minp);
            mixedPieces.push(shortp);
            mixedPieces.push(longp);
        }
        // Sorting makes sure if one weekday (or abbr) is a prefix of another it
        // will match the longer piece.
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        for (i = 0; i < 7; i++) {
            shortPieces[i] = regexEscape(shortPieces[i]);
            longPieces[i] = regexEscape(longPieces[i]);
            mixedPieces[i] = regexEscape(mixedPieces[i]);
        }

        this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;

        this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
        this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
        this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
    }

    // FORMATTING

    function hFormat() {
        return this.hours() % 12 || 12;
    }

    function kFormat() {
        return this.hours() || 24;
    }

    addFormatToken('H', ['HH', 2], 0, 'hour');
    addFormatToken('h', ['hh', 2], 0, hFormat);
    addFormatToken('k', ['kk', 2], 0, kFormat);

    addFormatToken('hmm', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
    });

    addFormatToken('hmmss', 0, 0, function () {
        return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    addFormatToken('Hmm', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2);
    });

    addFormatToken('Hmmss', 0, 0, function () {
        return '' + this.hours() + zeroFill(this.minutes(), 2) +
            zeroFill(this.seconds(), 2);
    });

    function meridiem (token, lowercase) {
        addFormatToken(token, 0, 0, function () {
            return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
        });
    }

    meridiem('a', true);
    meridiem('A', false);

    // ALIASES

    addUnitAlias('hour', 'h');

    // PRIORITY
    addUnitPriority('hour', 13);

    // PARSING

    function matchMeridiem (isStrict, locale) {
        return locale._meridiemParse;
    }

    addRegexToken('a',  matchMeridiem);
    addRegexToken('A',  matchMeridiem);
    addRegexToken('H',  match1to2);
    addRegexToken('h',  match1to2);
    addRegexToken('k',  match1to2);
    addRegexToken('HH', match1to2, match2);
    addRegexToken('hh', match1to2, match2);
    addRegexToken('kk', match1to2, match2);

    addRegexToken('hmm', match3to4);
    addRegexToken('hmmss', match5to6);
    addRegexToken('Hmm', match3to4);
    addRegexToken('Hmmss', match5to6);

    addParseToken(['H', 'HH'], HOUR);
    addParseToken(['k', 'kk'], function (input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
    });
    addParseToken(['a', 'A'], function (input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
    });
    addParseToken(['h', 'hh'], function (input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
    });
    addParseToken('Hmm', function (input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
    });
    addParseToken('Hmmss', function (input, array, config) {
        var pos1 = input.length - 4;
        var pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
    });

    // LOCALES

    function localeIsPM (input) {
        // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
        // Using charAt should be more compatible.
        return ((input + '').toLowerCase().charAt(0) === 'p');
    }

    var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
    function localeMeridiem (hours, minutes, isLower) {
        if (hours > 11) {
            return isLower ? 'pm' : 'PM';
        } else {
            return isLower ? 'am' : 'AM';
        }
    }


    // MOMENTS

    // Setting the hour should keep the time, because the user explicitly
    // specified which hour they want. So trying to maintain the same hour (in
    // a new timezone) makes sense. Adding/subtracting hours does not follow
    // this rule.
    var getSetHour = makeGetSet('Hours', true);

    var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,

        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,

        week: defaultLocaleWeek,

        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,

        meridiemParse: defaultLocaleMeridiemParse
    };

    // internal storage for locale config files
    var locales = {};
    var localeFamilies = {};
    var globalLocale;

    function normalizeLocale(key) {
        return key ? key.toLowerCase().replace('_', '-') : key;
    }

    // pick the locale from the array
    // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
    // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
    function chooseLocale(names) {
        var i = 0, j, next, locale, split;

        while (i < names.length) {
            split = normalizeLocale(names[i]).split('-');
            j = split.length;
            next = normalizeLocale(names[i + 1]);
            next = next ? next.split('-') : null;
            while (j > 0) {
                locale = loadLocale(split.slice(0, j).join('-'));
                if (locale) {
                    return locale;
                }
                if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                    //the next array item is better than a shallower substring of this one
                    break;
                }
                j--;
            }
            i++;
        }
        return globalLocale;
    }

    function loadLocale(name) {
        var oldLocale = null;
        // TODO: Find a better way to register and load all the locales in Node
        if (!locales[name] && (typeof module !== 'undefined') &&
                module && module.exports) {
            try {
                oldLocale = globalLocale._abbr;
                var aliasedRequire = require;
                __webpack_require__(670)("./" + name);
                getSetGlobalLocale(oldLocale);
            } catch (e) {}
        }
        return locales[name];
    }

    // This function will load locale and then set the global locale.  If
    // no arguments are passed in, it will simply return the current global
    // locale key.
    function getSetGlobalLocale (key, values) {
        var data;
        if (key) {
            if (isUndefined(values)) {
                data = getLocale(key);
            }
            else {
                data = defineLocale(key, values);
            }

            if (data) {
                // moment.duration._locale = moment._locale = data;
                globalLocale = data;
            }
            else {
                if ((typeof console !==  'undefined') && console.warn) {
                    //warn user if arguments are passed but the locale could not be set
                    console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                }
            }
        }

        return globalLocale._abbr;
    }

    function defineLocale (name, config) {
        if (config !== null) {
            var locale, parentConfig = baseConfig;
            config.abbr = name;
            if (locales[name] != null) {
                deprecateSimple('defineLocaleOverride',
                        'use moment.updateLocale(localeName, config) to change ' +
                        'an existing locale. moment.defineLocale(localeName, ' +
                        'config) should only be used for creating a new locale ' +
                        'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                parentConfig = locales[name]._config;
            } else if (config.parentLocale != null) {
                if (locales[config.parentLocale] != null) {
                    parentConfig = locales[config.parentLocale]._config;
                } else {
                    locale = loadLocale(config.parentLocale);
                    if (locale != null) {
                        parentConfig = locale._config;
                    } else {
                        if (!localeFamilies[config.parentLocale]) {
                            localeFamilies[config.parentLocale] = [];
                        }
                        localeFamilies[config.parentLocale].push({
                            name: name,
                            config: config
                        });
                        return null;
                    }
                }
            }
            locales[name] = new Locale(mergeConfigs(parentConfig, config));

            if (localeFamilies[name]) {
                localeFamilies[name].forEach(function (x) {
                    defineLocale(x.name, x.config);
                });
            }

            // backwards compat for now: also set the locale
            // make sure we set the locale AFTER all child locales have been
            // created, so we won't end up with the child locale set.
            getSetGlobalLocale(name);


            return locales[name];
        } else {
            // useful for testing
            delete locales[name];
            return null;
        }
    }

    function updateLocale(name, config) {
        if (config != null) {
            var locale, tmpLocale, parentConfig = baseConfig;
            // MERGE
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
                parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            locale = new Locale(config);
            locale.parentLocale = locales[name];
            locales[name] = locale;

            // backwards compat for now: also set the locale
            getSetGlobalLocale(name);
        } else {
            // pass null for config to unupdate, useful for tests
            if (locales[name] != null) {
                if (locales[name].parentLocale != null) {
                    locales[name] = locales[name].parentLocale;
                } else if (locales[name] != null) {
                    delete locales[name];
                }
            }
        }
        return locales[name];
    }

    // returns locale data
    function getLocale (key) {
        var locale;

        if (key && key._locale && key._locale._abbr) {
            key = key._locale._abbr;
        }

        if (!key) {
            return globalLocale;
        }

        if (!isArray(key)) {
            //short-circuit everything else
            locale = loadLocale(key);
            if (locale) {
                return locale;
            }
            key = [key];
        }

        return chooseLocale(key);
    }

    function listLocales() {
        return keys(locales);
    }

    function checkOverflow (m) {
        var overflow;
        var a = m._a;

        if (a && getParsingFlags(m).overflow === -2) {
            overflow =
                a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                -1;

            if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                overflow = DATE;
            }
            if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                overflow = WEEK;
            }
            if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                overflow = WEEKDAY;
            }

            getParsingFlags(m).overflow = overflow;
        }

        return m;
    }

    // Pick the first defined of two or three arguments.
    function defaults(a, b, c) {
        if (a != null) {
            return a;
        }
        if (b != null) {
            return b;
        }
        return c;
    }

    function currentDateArray(config) {
        // hooks is actually the exported moment object
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
            return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function configFromArray (config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;

        if (config._d) {
            return;
        }

        currentDate = currentDateArray(config);

        //compute day of the year from weeks and weekdays
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
            dayOfYearFromWeekInfo(config);
        }

        //if the day of the year is set, figure out what it is
        if (config._dayOfYear != null) {
            yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

            if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                getParsingFlags(config)._overflowDayOfYear = true;
            }

            date = createUTCDate(yearToUse, 0, config._dayOfYear);
            config._a[MONTH] = date.getUTCMonth();
            config._a[DATE] = date.getUTCDate();
        }

        // Default to current date.
        // * if no year, month, day of month are given, default to today
        // * if day of month is given, default month and year
        // * if month is given, default only year
        // * if year is given, don't default anything
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
            config._a[i] = input[i] = currentDate[i];
        }

        // Zero out whatever was not defaulted, including time
        for (; i < 7; i++) {
            config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
        }

        // Check for 24:00:00.000
        if (config._a[HOUR] === 24 &&
                config._a[MINUTE] === 0 &&
                config._a[SECOND] === 0 &&
                config._a[MILLISECOND] === 0) {
            config._nextDay = true;
            config._a[HOUR] = 0;
        }

        config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

        // Apply timezone offset from input. The actual utcOffset can be changed
        // with parseZone.
        if (config._tzm != null) {
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }

        if (config._nextDay) {
            config._a[HOUR] = 24;
        }

        // check for mismatching day of week
        if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
            getParsingFlags(config).weekdayMismatch = true;
        }
    }

    function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
            dow = 1;
            doy = 4;

            // TODO: We need to take the current isoWeekYear, but that depends on
            // how we interpret now (local, utc, fixed offset). So create
            // a now version of current config (take local/utc/offset flags, and
            // create now).
            weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
            week = defaults(w.W, 1);
            weekday = defaults(w.E, 1);
            if (weekday < 1 || weekday > 7) {
                weekdayOverflow = true;
            }
        } else {
            dow = config._locale._week.dow;
            doy = config._locale._week.doy;

            var curWeek = weekOfYear(createLocal(), dow, doy);

            weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

            // Default to current week.
            week = defaults(w.w, curWeek.week);

            if (w.d != null) {
                // weekday -- low day numbers are considered next week
                weekday = w.d;
                if (weekday < 0 || weekday > 6) {
                    weekdayOverflow = true;
                }
            } else if (w.e != null) {
                // local weekday -- counting starts from begining of week
                weekday = w.e + dow;
                if (w.e < 0 || w.e > 6) {
                    weekdayOverflow = true;
                }
            } else {
                // default to begining of week
                weekday = dow;
            }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
            getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
            getParsingFlags(config)._overflowWeekday = true;
        } else {
            temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
            config._a[YEAR] = temp.year;
            config._dayOfYear = temp.dayOfYear;
        }
    }

    // iso 8601 regex
    // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
    var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
    var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

    var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

    var isoDates = [
        ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
        ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
        ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
        ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
        ['YYYY-DDD', /\d{4}-\d{3}/],
        ['YYYY-MM', /\d{4}-\d\d/, false],
        ['YYYYYYMMDD', /[+-]\d{10}/],
        ['YYYYMMDD', /\d{8}/],
        // YYYYMM is NOT allowed by the standard
        ['GGGG[W]WWE', /\d{4}W\d{3}/],
        ['GGGG[W]WW', /\d{4}W\d{2}/, false],
        ['YYYYDDD', /\d{7}/]
    ];

    // iso time formats and regexes
    var isoTimes = [
        ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
        ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
        ['HH:mm:ss', /\d\d:\d\d:\d\d/],
        ['HH:mm', /\d\d:\d\d/],
        ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
        ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
        ['HHmmss', /\d\d\d\d\d\d/],
        ['HHmm', /\d\d\d\d/],
        ['HH', /\d\d/]
    ];

    var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

    // date from iso format
    function configFromISO(config) {
        var i, l,
            string = config._i,
            match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
            allowTime, dateFormat, timeFormat, tzFormat;

        if (match) {
            getParsingFlags(config).iso = true;

            for (i = 0, l = isoDates.length; i < l; i++) {
                if (isoDates[i][1].exec(match[1])) {
                    dateFormat = isoDates[i][0];
                    allowTime = isoDates[i][2] !== false;
                    break;
                }
            }
            if (dateFormat == null) {
                config._isValid = false;
                return;
            }
            if (match[3]) {
                for (i = 0, l = isoTimes.length; i < l; i++) {
                    if (isoTimes[i][1].exec(match[3])) {
                        // match[2] should be 'T' or space
                        timeFormat = (match[2] || ' ') + isoTimes[i][0];
                        break;
                    }
                }
                if (timeFormat == null) {
                    config._isValid = false;
                    return;
                }
            }
            if (!allowTime && timeFormat != null) {
                config._isValid = false;
                return;
            }
            if (match[4]) {
                if (tzRegex.exec(match[4])) {
                    tzFormat = 'Z';
                } else {
                    config._isValid = false;
                    return;
                }
            }
            config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
            configFromStringAndFormat(config);
        } else {
            config._isValid = false;
        }
    }

    // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
    var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

    function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
            untruncateYear(yearStr),
            defaultLocaleMonthsShort.indexOf(monthStr),
            parseInt(dayStr, 10),
            parseInt(hourStr, 10),
            parseInt(minuteStr, 10)
        ];

        if (secondStr) {
            result.push(parseInt(secondStr, 10));
        }

        return result;
    }

    function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
            return 2000 + year;
        } else if (year <= 999) {
            return 1900 + year;
        }
        return year;
    }

    function preprocessRFC2822(s) {
        // Remove comments and folding whitespace and replace multiple-spaces with a single space
        return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
    }

    function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
            // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
            var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
            if (weekdayProvided !== weekdayActual) {
                getParsingFlags(config).weekdayMismatch = true;
                config._isValid = false;
                return false;
            }
        }
        return true;
    }

    var obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
    };

    function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
            return obsOffsets[obsOffset];
        } else if (militaryOffset) {
            // the only allowed military tz is Z
            return 0;
        } else {
            var hm = parseInt(numOffset, 10);
            var m = hm % 100, h = (hm - m) / 100;
            return h * 60 + m;
        }
    }

    // date and time from ref 2822 format
    function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i));
        if (match) {
            var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
            if (!checkWeekday(match[1], parsedArray, config)) {
                return;
            }

            config._a = parsedArray;
            config._tzm = calculateOffset(match[8], match[9], match[10]);

            config._d = createUTCDate.apply(null, config._a);
            config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

            getParsingFlags(config).rfc2822 = true;
        } else {
            config._isValid = false;
        }
    }

    // date from iso format or fallback
    function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);

        if (matched !== null) {
            config._d = new Date(+matched[1]);
            return;
        }

        configFromISO(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        configFromRFC2822(config);
        if (config._isValid === false) {
            delete config._isValid;
        } else {
            return;
        }

        // Final attempt, use Input Fallback
        hooks.createFromInputFallback(config);
    }

    hooks.createFromInputFallback = deprecate(
        'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
        'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
        'discouraged and will be removed in an upcoming major release. Please refer to ' +
        'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
        function (config) {
            config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
        }
    );

    // constant that refers to the ISO standard
    hooks.ISO_8601 = function () {};

    // constant that refers to the RFC 2822 form
    hooks.RFC_2822 = function () {};

    // date from string and format string
    function configFromStringAndFormat(config) {
        // TODO: Move this to another part of the creation flow to prevent circular deps
        if (config._f === hooks.ISO_8601) {
            configFromISO(config);
            return;
        }
        if (config._f === hooks.RFC_2822) {
            configFromRFC2822(config);
            return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;

        // This array is used to make a Date, either with `new Date` or `Date.UTC`
        var string = '' + config._i,
            i, parsedInput, tokens, token, skipped,
            stringLength = string.length,
            totalParsedInputLength = 0;

        tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

        for (i = 0; i < tokens.length; i++) {
            token = tokens[i];
            parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
            // console.log('token', token, 'parsedInput', parsedInput,
            //         'regex', getParseRegexForToken(token, config));
            if (parsedInput) {
                skipped = string.substr(0, string.indexOf(parsedInput));
                if (skipped.length > 0) {
                    getParsingFlags(config).unusedInput.push(skipped);
                }
                string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                totalParsedInputLength += parsedInput.length;
            }
            // don't parse if it's not a known token
            if (formatTokenFunctions[token]) {
                if (parsedInput) {
                    getParsingFlags(config).empty = false;
                }
                else {
                    getParsingFlags(config).unusedTokens.push(token);
                }
                addTimeToArrayFromToken(token, parsedInput, config);
            }
            else if (config._strict && !parsedInput) {
                getParsingFlags(config).unusedTokens.push(token);
            }
        }

        // add remaining unparsed input length to the string
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
            getParsingFlags(config).unusedInput.push(string);
        }

        // clear _12h flag if hour is <= 12
        if (config._a[HOUR] <= 12 &&
            getParsingFlags(config).bigHour === true &&
            config._a[HOUR] > 0) {
            getParsingFlags(config).bigHour = undefined;
        }

        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        // handle meridiem
        config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

        configFromArray(config);
        checkOverflow(config);
    }


    function meridiemFixWrap (locale, hour, meridiem) {
        var isPm;

        if (meridiem == null) {
            // nothing to do
            return hour;
        }
        if (locale.meridiemHour != null) {
            return locale.meridiemHour(hour, meridiem);
        } else if (locale.isPM != null) {
            // Fallback
            isPm = locale.isPM(meridiem);
            if (isPm && hour < 12) {
                hour += 12;
            }
            if (!isPm && hour === 12) {
                hour = 0;
            }
            return hour;
        } else {
            // this is not supposed to happen
            return hour;
        }
    }

    // date from string and array of format strings
    function configFromStringAndArray(config) {
        var tempConfig,
            bestMoment,

            scoreToBeat,
            i,
            currentScore;

        if (config._f.length === 0) {
            getParsingFlags(config).invalidFormat = true;
            config._d = new Date(NaN);
            return;
        }

        for (i = 0; i < config._f.length; i++) {
            currentScore = 0;
            tempConfig = copyConfig({}, config);
            if (config._useUTC != null) {
                tempConfig._useUTC = config._useUTC;
            }
            tempConfig._f = config._f[i];
            configFromStringAndFormat(tempConfig);

            if (!isValid(tempConfig)) {
                continue;
            }

            // if there is any input that was not parsed add a penalty for that format
            currentScore += getParsingFlags(tempConfig).charsLeftOver;

            //or tokens
            currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

            getParsingFlags(tempConfig).score = currentScore;

            if (scoreToBeat == null || currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                bestMoment = tempConfig;
            }
        }

        extend(config, bestMoment || tempConfig);
    }

    function configFromObject(config) {
        if (config._d) {
            return;
        }

        var i = normalizeObjectUnits(config._i);
        config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
            return obj && parseInt(obj, 10);
        });

        configFromArray(config);
    }

    function createFromConfig (config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
            // Adding is smart enough around DST
            res.add(1, 'd');
            res._nextDay = undefined;
        }

        return res;
    }

    function prepareConfig (config) {
        var input = config._i,
            format = config._f;

        config._locale = config._locale || getLocale(config._l);

        if (input === null || (format === undefined && input === '')) {
            return createInvalid({nullInput: true});
        }

        if (typeof input === 'string') {
            config._i = input = config._locale.preparse(input);
        }

        if (isMoment(input)) {
            return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
            config._d = input;
        } else if (isArray(format)) {
            configFromStringAndArray(config);
        } else if (format) {
            configFromStringAndFormat(config);
        }  else {
            configFromInput(config);
        }

        if (!isValid(config)) {
            config._d = null;
        }

        return config;
    }

    function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
            config._d = new Date(hooks.now());
        } else if (isDate(input)) {
            config._d = new Date(input.valueOf());
        } else if (typeof input === 'string') {
            configFromString(config);
        } else if (isArray(input)) {
            config._a = map(input.slice(0), function (obj) {
                return parseInt(obj, 10);
            });
            configFromArray(config);
        } else if (isObject(input)) {
            configFromObject(config);
        } else if (isNumber(input)) {
            // from milliseconds
            config._d = new Date(input);
        } else {
            hooks.createFromInputFallback(config);
        }
    }

    function createLocalOrUTC (input, format, locale, strict, isUTC) {
        var c = {};

        if (locale === true || locale === false) {
            strict = locale;
            locale = undefined;
        }

        if ((isObject(input) && isObjectEmpty(input)) ||
                (isArray(input) && input.length === 0)) {
            input = undefined;
        }
        // object construction must be done this way.
        // https://github.com/moment/moment/issues/1423
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale;
        c._i = input;
        c._f = format;
        c._strict = strict;

        return createFromConfig(c);
    }

    function createLocal (input, format, locale, strict) {
        return createLocalOrUTC(input, format, locale, strict, false);
    }

    var prototypeMin = deprecate(
        'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other < this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    var prototypeMax = deprecate(
        'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
        function () {
            var other = createLocal.apply(null, arguments);
            if (this.isValid() && other.isValid()) {
                return other > this ? this : other;
            } else {
                return createInvalid();
            }
        }
    );

    // Pick a moment m from moments so that m[fn](other) is true for all
    // other. This relies on the function fn to be transitive.
    //
    // moments should either be an array of moment objects or an array, whose
    // first element is an array of moment objects.
    function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
            moments = moments[0];
        }
        if (!moments.length) {
            return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
            if (!moments[i].isValid() || moments[i][fn](res)) {
                res = moments[i];
            }
        }
        return res;
    }

    // TODO: Use [].sort instead?
    function min () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isBefore', args);
    }

    function max () {
        var args = [].slice.call(arguments, 0);

        return pickBy('isAfter', args);
    }

    var now = function () {
        return Date.now ? Date.now() : +(new Date());
    };

    var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

    function isDurationValid(m) {
        for (var key in m) {
            if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                return false;
            }
        }

        var unitHasDecimal = false;
        for (var i = 0; i < ordering.length; ++i) {
            if (m[ordering[i]]) {
                if (unitHasDecimal) {
                    return false; // only allow non-integers for smallest unit
                }
                if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                    unitHasDecimal = true;
                }
            }
        }

        return true;
    }

    function isValid$1() {
        return this._isValid;
    }

    function createInvalid$1() {
        return createDuration(NaN);
    }

    function Duration (duration) {
        var normalizedInput = normalizeObjectUnits(duration),
            years = normalizedInput.year || 0,
            quarters = normalizedInput.quarter || 0,
            months = normalizedInput.month || 0,
            weeks = normalizedInput.week || 0,
            days = normalizedInput.day || 0,
            hours = normalizedInput.hour || 0,
            minutes = normalizedInput.minute || 0,
            seconds = normalizedInput.second || 0,
            milliseconds = normalizedInput.millisecond || 0;

        this._isValid = isDurationValid(normalizedInput);

        // representation for dateAddRemove
        this._milliseconds = +milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = +days +
            weeks * 7;
        // It is impossible to translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = +months +
            quarters * 3 +
            years * 12;

        this._data = {};

        this._locale = getLocale();

        this._bubble();
    }

    function isDuration (obj) {
        return obj instanceof Duration;
    }

    function absRound (number) {
        if (number < 0) {
            return Math.round(-1 * number) * -1;
        } else {
            return Math.round(number);
        }
    }

    // FORMATTING

    function offset (token, separator) {
        addFormatToken(token, 0, 0, function () {
            var offset = this.utcOffset();
            var sign = '+';
            if (offset < 0) {
                offset = -offset;
                sign = '-';
            }
            return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
        });
    }

    offset('Z', ':');
    offset('ZZ', '');

    // PARSING

    addRegexToken('Z',  matchShortOffset);
    addRegexToken('ZZ', matchShortOffset);
    addParseToken(['Z', 'ZZ'], function (input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
    });

    // HELPERS

    // timezone chunker
    // '+10:00' > ['10',  '00']
    // '-1530'  > ['-15', '30']
    var chunkOffset = /([\+\-]|\d\d)/gi;

    function offsetFromString(matcher, string) {
        var matches = (string || '').match(matcher);

        if (matches === null) {
            return null;
        }

        var chunk   = matches[matches.length - 1] || [];
        var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
        var minutes = +(parts[1] * 60) + toInt(parts[2]);

        return minutes === 0 ?
          0 :
          parts[0] === '+' ? minutes : -minutes;
    }

    // Return a moment from input, that is local/utc/zone equivalent to model.
    function cloneWithOffset(input, model) {
        var res, diff;
        if (model._isUTC) {
            res = model.clone();
            diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
            // Use low-level api, because this fn is low-level api.
            res._d.setTime(res._d.valueOf() + diff);
            hooks.updateOffset(res, false);
            return res;
        } else {
            return createLocal(input).local();
        }
    }

    function getDateOffset (m) {
        // On Firefox.24 Date#getTimezoneOffset returns a floating point.
        // https://github.com/moment/moment/pull/1871
        return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
    }

    // HOOKS

    // This function will be called whenever a moment is mutated.
    // It is intended to keep the offset in sync with the timezone.
    hooks.updateOffset = function () {};

    // MOMENTS

    // keepLocalTime = true means only change the timezone, without
    // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
    // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
    // +0200, so we adjust the time as needed, to be valid.
    //
    // Keeping the time actually adds/subtracts (one hour)
    // from the actual represented time. That is why we call updateOffset
    // a second time. In case it wants us to change the offset again
    // _changeInProgress == true case, then we have to adjust, because
    // there is no such time in the given timezone.
    function getSetOffset (input, keepLocalTime, keepMinutes) {
        var offset = this._offset || 0,
            localAdjust;
        if (!this.isValid()) {
            return input != null ? this : NaN;
        }
        if (input != null) {
            if (typeof input === 'string') {
                input = offsetFromString(matchShortOffset, input);
                if (input === null) {
                    return this;
                }
            } else if (Math.abs(input) < 16 && !keepMinutes) {
                input = input * 60;
            }
            if (!this._isUTC && keepLocalTime) {
                localAdjust = getDateOffset(this);
            }
            this._offset = input;
            this._isUTC = true;
            if (localAdjust != null) {
                this.add(localAdjust, 'm');
            }
            if (offset !== input) {
                if (!keepLocalTime || this._changeInProgress) {
                    addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                } else if (!this._changeInProgress) {
                    this._changeInProgress = true;
                    hooks.updateOffset(this, true);
                    this._changeInProgress = null;
                }
            }
            return this;
        } else {
            return this._isUTC ? offset : getDateOffset(this);
        }
    }

    function getSetZone (input, keepLocalTime) {
        if (input != null) {
            if (typeof input !== 'string') {
                input = -input;
            }

            this.utcOffset(input, keepLocalTime);

            return this;
        } else {
            return -this.utcOffset();
        }
    }

    function setOffsetToUTC (keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
    }

    function setOffsetToLocal (keepLocalTime) {
        if (this._isUTC) {
            this.utcOffset(0, keepLocalTime);
            this._isUTC = false;

            if (keepLocalTime) {
                this.subtract(getDateOffset(this), 'm');
            }
        }
        return this;
    }

    function setOffsetToParsedOffset () {
        if (this._tzm != null) {
            this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === 'string') {
            var tZone = offsetFromString(matchOffset, this._i);
            if (tZone != null) {
                this.utcOffset(tZone);
            }
            else {
                this.utcOffset(0, true);
            }
        }
        return this;
    }

    function hasAlignedHourOffset (input) {
        if (!this.isValid()) {
            return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;

        return (this.utcOffset() - input) % 60 === 0;
    }

    function isDaylightSavingTime () {
        return (
            this.utcOffset() > this.clone().month(0).utcOffset() ||
            this.utcOffset() > this.clone().month(5).utcOffset()
        );
    }

    function isDaylightSavingTimeShifted () {
        if (!isUndefined(this._isDSTShifted)) {
            return this._isDSTShifted;
        }

        var c = {};

        copyConfig(c, this);
        c = prepareConfig(c);

        if (c._a) {
            var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
            this._isDSTShifted = this.isValid() &&
                compareArrays(c._a, other.toArray()) > 0;
        } else {
            this._isDSTShifted = false;
        }

        return this._isDSTShifted;
    }

    function isLocal () {
        return this.isValid() ? !this._isUTC : false;
    }

    function isUtcOffset () {
        return this.isValid() ? this._isUTC : false;
    }

    function isUtc () {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
    }

    // ASP.NET json date format regex
    var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

    // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
    // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
    // and further modified to allow for strings containing both week and day
    var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

    function createDuration (input, key) {
        var duration = input,
            // matching against regexp is expensive, do it on demand
            match = null,
            sign,
            ret,
            diffRes;

        if (isDuration(input)) {
            duration = {
                ms : input._milliseconds,
                d  : input._days,
                M  : input._months
            };
        } else if (isNumber(input)) {
            duration = {};
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        } else if (!!(match = aspNetRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : 1;
            duration = {
                y  : 0,
                d  : toInt(match[DATE])                         * sign,
                h  : toInt(match[HOUR])                         * sign,
                m  : toInt(match[MINUTE])                       * sign,
                s  : toInt(match[SECOND])                       * sign,
                ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
            };
        } else if (!!(match = isoRegex.exec(input))) {
            sign = (match[1] === '-') ? -1 : (match[1] === '+') ? 1 : 1;
            duration = {
                y : parseIso(match[2], sign),
                M : parseIso(match[3], sign),
                w : parseIso(match[4], sign),
                d : parseIso(match[5], sign),
                h : parseIso(match[6], sign),
                m : parseIso(match[7], sign),
                s : parseIso(match[8], sign)
            };
        } else if (duration == null) {// checks for null or undefined
            duration = {};
        } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
            diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

            duration = {};
            duration.ms = diffRes.milliseconds;
            duration.M = diffRes.months;
        }

        ret = new Duration(duration);

        if (isDuration(input) && hasOwnProp(input, '_locale')) {
            ret._locale = input._locale;
        }

        return ret;
    }

    createDuration.fn = Duration.prototype;
    createDuration.invalid = createInvalid$1;

    function parseIso (inp, sign) {
        // We'd normally use ~~inp for this, but unfortunately it also
        // converts floats to ints.
        // inp may be undefined, so careful calling replace on it.
        var res = inp && parseFloat(inp.replace(',', '.'));
        // apply sign while we're at it
        return (isNaN(res) ? 0 : res) * sign;
    }

    function positiveMomentsDifference(base, other) {
        var res = {milliseconds: 0, months: 0};

        res.months = other.month() - base.month() +
            (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, 'M').isAfter(other)) {
            --res.months;
        }

        res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

        return res;
    }

    function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
            return {milliseconds: 0, months: 0};
        }

        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
            res = positiveMomentsDifference(base, other);
        } else {
            res = positiveMomentsDifference(other, base);
            res.milliseconds = -res.milliseconds;
            res.months = -res.months;
        }

        return res;
    }

    // TODO: remove 'name' arg after deprecation is removed
    function createAdder(direction, name) {
        return function (val, period) {
            var dur, tmp;
            //invert the arguments, but complain about it
            if (period !== null && !isNaN(+period)) {
                deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                tmp = val; val = period; period = tmp;
            }

            val = typeof val === 'string' ? +val : val;
            dur = createDuration(val, period);
            addSubtract(this, dur, direction);
            return this;
        };
    }

    function addSubtract (mom, duration, isAdding, updateOffset) {
        var milliseconds = duration._milliseconds,
            days = absRound(duration._days),
            months = absRound(duration._months);

        if (!mom.isValid()) {
            // No op
            return;
        }

        updateOffset = updateOffset == null ? true : updateOffset;

        if (months) {
            setMonth(mom, get(mom, 'Month') + months * isAdding);
        }
        if (days) {
            set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
        }
        if (milliseconds) {
            mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
        }
        if (updateOffset) {
            hooks.updateOffset(mom, days || months);
        }
    }

    var add      = createAdder(1, 'add');
    var subtract = createAdder(-1, 'subtract');

    function getCalendarFormat(myMoment, now) {
        var diff = myMoment.diff(now, 'days', true);
        return diff < -6 ? 'sameElse' :
                diff < -1 ? 'lastWeek' :
                diff < 0 ? 'lastDay' :
                diff < 1 ? 'sameDay' :
                diff < 2 ? 'nextDay' :
                diff < 7 ? 'nextWeek' : 'sameElse';
    }

    function calendar$1 (time, formats) {
        // We want to compare the start of today, vs this.
        // Getting start-of-today depends on whether we're local/utc/offset or not.
        var now = time || createLocal(),
            sod = cloneWithOffset(now, this).startOf('day'),
            format = hooks.calendarFormat(this, sod) || 'sameElse';

        var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

        return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
    }

    function clone () {
        return new Moment(this);
    }

    function isAfter (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() > localInput.valueOf();
        } else {
            return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
    }

    function isBefore (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(!isUndefined(units) ? units : 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() < localInput.valueOf();
        } else {
            return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
    }

    function isBetween (from, to, units, inclusivity) {
        inclusivity = inclusivity || '()';
        return (inclusivity[0] === '(' ? this.isAfter(from, units) : !this.isBefore(from, units)) &&
            (inclusivity[1] === ')' ? this.isBefore(to, units) : !this.isAfter(to, units));
    }

    function isSame (input, units) {
        var localInput = isMoment(input) ? input : createLocal(input),
            inputMs;
        if (!(this.isValid() && localInput.isValid())) {
            return false;
        }
        units = normalizeUnits(units || 'millisecond');
        if (units === 'millisecond') {
            return this.valueOf() === localInput.valueOf();
        } else {
            inputMs = localInput.valueOf();
            return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
    }

    function isSameOrAfter (input, units) {
        return this.isSame(input, units) || this.isAfter(input,units);
    }

    function isSameOrBefore (input, units) {
        return this.isSame(input, units) || this.isBefore(input,units);
    }

    function diff (input, units, asFloat) {
        var that,
            zoneDelta,
            output;

        if (!this.isValid()) {
            return NaN;
        }

        that = cloneWithOffset(input, this);

        if (!that.isValid()) {
            return NaN;
        }

        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

        units = normalizeUnits(units);

        switch (units) {
            case 'year': output = monthDiff(this, that) / 12; break;
            case 'month': output = monthDiff(this, that); break;
            case 'quarter': output = monthDiff(this, that) / 3; break;
            case 'second': output = (this - that) / 1e3; break; // 1000
            case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
            case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
            case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
            case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
            default: output = this - that;
        }

        return asFloat ? output : absFloor(output);
    }

    function monthDiff (a, b) {
        // difference in months
        var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
            // b is in (anchor - 1 month, anchor + 1 month)
            anchor = a.clone().add(wholeMonthDiff, 'months'),
            anchor2, adjust;

        if (b - anchor < 0) {
            anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor - anchor2);
        } else {
            anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
            // linear across the month
            adjust = (b - anchor) / (anchor2 - anchor);
        }

        //check for negative zero, return zero if negative zero
        return -(wholeMonthDiff + adjust) || 0;
    }

    hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
    hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

    function toString () {
        return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
    }

    function toISOString(keepOffset) {
        if (!this.isValid()) {
            return null;
        }
        var utc = keepOffset !== true;
        var m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
            return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
        }
        if (isFunction(Date.prototype.toISOString)) {
            // native implementation is ~50x faster, use it when we can
            if (utc) {
                return this.toDate().toISOString();
            } else {
                return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
            }
        }
        return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
    }

    /**
     * Return a human readable representation of a moment that can
     * also be evaluated to get a new moment which is the same
     *
     * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
     */
    function inspect () {
        if (!this.isValid()) {
            return 'moment.invalid(/* ' + this._i + ' */)';
        }
        var func = 'moment';
        var zone = '';
        if (!this.isLocal()) {
            func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
            zone = 'Z';
        }
        var prefix = '[' + func + '("]';
        var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
        var datetime = '-MM-DD[T]HH:mm:ss.SSS';
        var suffix = zone + '[")]';

        return this.format(prefix + year + datetime + suffix);
    }

    function format (inputString) {
        if (!inputString) {
            inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
    }

    function from (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function fromNow (withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
    }

    function to (time, withoutSuffix) {
        if (this.isValid() &&
                ((isMoment(time) && time.isValid()) ||
                 createLocal(time).isValid())) {
            return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
        } else {
            return this.localeData().invalidDate();
        }
    }

    function toNow (withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
    }

    // If passed a locale key, it will set the locale for this
    // instance.  Otherwise, it will return the locale configuration
    // variables for this instance.
    function locale (key) {
        var newLocaleData;

        if (key === undefined) {
            return this._locale._abbr;
        } else {
            newLocaleData = getLocale(key);
            if (newLocaleData != null) {
                this._locale = newLocaleData;
            }
            return this;
        }
    }

    var lang = deprecate(
        'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
        function (key) {
            if (key === undefined) {
                return this.localeData();
            } else {
                return this.locale(key);
            }
        }
    );

    function localeData () {
        return this._locale;
    }

    function startOf (units) {
        units = normalizeUnits(units);
        // the following switch intentionally omits break keywords
        // to utilize falling through the cases.
        switch (units) {
            case 'year':
                this.month(0);
                /* falls through */
            case 'quarter':
            case 'month':
                this.date(1);
                /* falls through */
            case 'week':
            case 'isoWeek':
            case 'day':
            case 'date':
                this.hours(0);
                /* falls through */
            case 'hour':
                this.minutes(0);
                /* falls through */
            case 'minute':
                this.seconds(0);
                /* falls through */
            case 'second':
                this.milliseconds(0);
        }

        // weeks are a special case
        if (units === 'week') {
            this.weekday(0);
        }
        if (units === 'isoWeek') {
            this.isoWeekday(1);
        }

        // quarters are also special
        if (units === 'quarter') {
            this.month(Math.floor(this.month() / 3) * 3);
        }

        return this;
    }

    function endOf (units) {
        units = normalizeUnits(units);
        if (units === undefined || units === 'millisecond') {
            return this;
        }

        // 'date' is an alias for 'day', so it should be considered as such.
        if (units === 'date') {
            units = 'day';
        }

        return this.startOf(units).add(1, (units === 'isoWeek' ? 'week' : units)).subtract(1, 'ms');
    }

    function valueOf () {
        return this._d.valueOf() - ((this._offset || 0) * 60000);
    }

    function unix () {
        return Math.floor(this.valueOf() / 1000);
    }

    function toDate () {
        return new Date(this.valueOf());
    }

    function toArray () {
        var m = this;
        return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
    }

    function toObject () {
        var m = this;
        return {
            years: m.year(),
            months: m.month(),
            date: m.date(),
            hours: m.hours(),
            minutes: m.minutes(),
            seconds: m.seconds(),
            milliseconds: m.milliseconds()
        };
    }

    function toJSON () {
        // new Date(NaN).toJSON() === null
        return this.isValid() ? this.toISOString() : null;
    }

    function isValid$2 () {
        return isValid(this);
    }

    function parsingFlags () {
        return extend({}, getParsingFlags(this));
    }

    function invalidAt () {
        return getParsingFlags(this).overflow;
    }

    function creationData() {
        return {
            input: this._i,
            format: this._f,
            locale: this._locale,
            isUTC: this._isUTC,
            strict: this._strict
        };
    }

    // FORMATTING

    addFormatToken(0, ['gg', 2], 0, function () {
        return this.weekYear() % 100;
    });

    addFormatToken(0, ['GG', 2], 0, function () {
        return this.isoWeekYear() % 100;
    });

    function addWeekYearFormatToken (token, getter) {
        addFormatToken(0, [token, token.length], 0, getter);
    }

    addWeekYearFormatToken('gggg',     'weekYear');
    addWeekYearFormatToken('ggggg',    'weekYear');
    addWeekYearFormatToken('GGGG',  'isoWeekYear');
    addWeekYearFormatToken('GGGGG', 'isoWeekYear');

    // ALIASES

    addUnitAlias('weekYear', 'gg');
    addUnitAlias('isoWeekYear', 'GG');

    // PRIORITY

    addUnitPriority('weekYear', 1);
    addUnitPriority('isoWeekYear', 1);


    // PARSING

    addRegexToken('G',      matchSigned);
    addRegexToken('g',      matchSigned);
    addRegexToken('GG',     match1to2, match2);
    addRegexToken('gg',     match1to2, match2);
    addRegexToken('GGGG',   match1to4, match4);
    addRegexToken('gggg',   match1to4, match4);
    addRegexToken('GGGGG',  match1to6, match6);
    addRegexToken('ggggg',  match1to6, match6);

    addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
        week[token.substr(0, 2)] = toInt(input);
    });

    addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
        week[token] = hooks.parseTwoDigitYear(input);
    });

    // MOMENTS

    function getSetWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input,
                this.week(),
                this.weekday(),
                this.localeData()._week.dow,
                this.localeData()._week.doy);
    }

    function getSetISOWeekYear (input) {
        return getSetWeekYearHelper.call(this,
                input, this.isoWeek(), this.isoWeekday(), 1, 4);
    }

    function getISOWeeksInYear () {
        return weeksInYear(this.year(), 1, 4);
    }

    function getWeeksInYear () {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
    }

    function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
            return weekOfYear(this, dow, doy).year;
        } else {
            weeksTarget = weeksInYear(input, dow, doy);
            if (week > weeksTarget) {
                week = weeksTarget;
            }
            return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
    }

    function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
            date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
    }

    // FORMATTING

    addFormatToken('Q', 0, 'Qo', 'quarter');

    // ALIASES

    addUnitAlias('quarter', 'Q');

    // PRIORITY

    addUnitPriority('quarter', 7);

    // PARSING

    addRegexToken('Q', match1);
    addParseToken('Q', function (input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
    });

    // MOMENTS

    function getSetQuarter (input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
    }

    // FORMATTING

    addFormatToken('D', ['DD', 2], 'Do', 'date');

    // ALIASES

    addUnitAlias('date', 'D');

    // PRIORITY
    addUnitPriority('date', 9);

    // PARSING

    addRegexToken('D',  match1to2);
    addRegexToken('DD', match1to2, match2);
    addRegexToken('Do', function (isStrict, locale) {
        // TODO: Remove "ordinalParse" fallback in next major release.
        return isStrict ?
          (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
          locale._dayOfMonthOrdinalParseLenient;
    });

    addParseToken(['D', 'DD'], DATE);
    addParseToken('Do', function (input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
    });

    // MOMENTS

    var getSetDayOfMonth = makeGetSet('Date', true);

    // FORMATTING

    addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

    // ALIASES

    addUnitAlias('dayOfYear', 'DDD');

    // PRIORITY
    addUnitPriority('dayOfYear', 4);

    // PARSING

    addRegexToken('DDD',  match1to3);
    addRegexToken('DDDD', match3);
    addParseToken(['DDD', 'DDDD'], function (input, array, config) {
        config._dayOfYear = toInt(input);
    });

    // HELPERS

    // MOMENTS

    function getSetDayOfYear (input) {
        var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
        return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
    }

    // FORMATTING

    addFormatToken('m', ['mm', 2], 0, 'minute');

    // ALIASES

    addUnitAlias('minute', 'm');

    // PRIORITY

    addUnitPriority('minute', 14);

    // PARSING

    addRegexToken('m',  match1to2);
    addRegexToken('mm', match1to2, match2);
    addParseToken(['m', 'mm'], MINUTE);

    // MOMENTS

    var getSetMinute = makeGetSet('Minutes', false);

    // FORMATTING

    addFormatToken('s', ['ss', 2], 0, 'second');

    // ALIASES

    addUnitAlias('second', 's');

    // PRIORITY

    addUnitPriority('second', 15);

    // PARSING

    addRegexToken('s',  match1to2);
    addRegexToken('ss', match1to2, match2);
    addParseToken(['s', 'ss'], SECOND);

    // MOMENTS

    var getSetSecond = makeGetSet('Seconds', false);

    // FORMATTING

    addFormatToken('S', 0, 0, function () {
        return ~~(this.millisecond() / 100);
    });

    addFormatToken(0, ['SS', 2], 0, function () {
        return ~~(this.millisecond() / 10);
    });

    addFormatToken(0, ['SSS', 3], 0, 'millisecond');
    addFormatToken(0, ['SSSS', 4], 0, function () {
        return this.millisecond() * 10;
    });
    addFormatToken(0, ['SSSSS', 5], 0, function () {
        return this.millisecond() * 100;
    });
    addFormatToken(0, ['SSSSSS', 6], 0, function () {
        return this.millisecond() * 1000;
    });
    addFormatToken(0, ['SSSSSSS', 7], 0, function () {
        return this.millisecond() * 10000;
    });
    addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
        return this.millisecond() * 100000;
    });
    addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
        return this.millisecond() * 1000000;
    });


    // ALIASES

    addUnitAlias('millisecond', 'ms');

    // PRIORITY

    addUnitPriority('millisecond', 16);

    // PARSING

    addRegexToken('S',    match1to3, match1);
    addRegexToken('SS',   match1to3, match2);
    addRegexToken('SSS',  match1to3, match3);

    var token;
    for (token = 'SSSS'; token.length <= 9; token += 'S') {
        addRegexToken(token, matchUnsigned);
    }

    function parseMs(input, array) {
        array[MILLISECOND] = toInt(('0.' + input) * 1000);
    }

    for (token = 'S'; token.length <= 9; token += 'S') {
        addParseToken(token, parseMs);
    }
    // MOMENTS

    var getSetMillisecond = makeGetSet('Milliseconds', false);

    // FORMATTING

    addFormatToken('z',  0, 0, 'zoneAbbr');
    addFormatToken('zz', 0, 0, 'zoneName');

    // MOMENTS

    function getZoneAbbr () {
        return this._isUTC ? 'UTC' : '';
    }

    function getZoneName () {
        return this._isUTC ? 'Coordinated Universal Time' : '';
    }

    var proto = Moment.prototype;

    proto.add               = add;
    proto.calendar          = calendar$1;
    proto.clone             = clone;
    proto.diff              = diff;
    proto.endOf             = endOf;
    proto.format            = format;
    proto.from              = from;
    proto.fromNow           = fromNow;
    proto.to                = to;
    proto.toNow             = toNow;
    proto.get               = stringGet;
    proto.invalidAt         = invalidAt;
    proto.isAfter           = isAfter;
    proto.isBefore          = isBefore;
    proto.isBetween         = isBetween;
    proto.isSame            = isSame;
    proto.isSameOrAfter     = isSameOrAfter;
    proto.isSameOrBefore    = isSameOrBefore;
    proto.isValid           = isValid$2;
    proto.lang              = lang;
    proto.locale            = locale;
    proto.localeData        = localeData;
    proto.max               = prototypeMax;
    proto.min               = prototypeMin;
    proto.parsingFlags      = parsingFlags;
    proto.set               = stringSet;
    proto.startOf           = startOf;
    proto.subtract          = subtract;
    proto.toArray           = toArray;
    proto.toObject          = toObject;
    proto.toDate            = toDate;
    proto.toISOString       = toISOString;
    proto.inspect           = inspect;
    proto.toJSON            = toJSON;
    proto.toString          = toString;
    proto.unix              = unix;
    proto.valueOf           = valueOf;
    proto.creationData      = creationData;
    proto.year       = getSetYear;
    proto.isLeapYear = getIsLeapYear;
    proto.weekYear    = getSetWeekYear;
    proto.isoWeekYear = getSetISOWeekYear;
    proto.quarter = proto.quarters = getSetQuarter;
    proto.month       = getSetMonth;
    proto.daysInMonth = getDaysInMonth;
    proto.week           = proto.weeks        = getSetWeek;
    proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
    proto.weeksInYear    = getWeeksInYear;
    proto.isoWeeksInYear = getISOWeeksInYear;
    proto.date       = getSetDayOfMonth;
    proto.day        = proto.days             = getSetDayOfWeek;
    proto.weekday    = getSetLocaleDayOfWeek;
    proto.isoWeekday = getSetISODayOfWeek;
    proto.dayOfYear  = getSetDayOfYear;
    proto.hour = proto.hours = getSetHour;
    proto.minute = proto.minutes = getSetMinute;
    proto.second = proto.seconds = getSetSecond;
    proto.millisecond = proto.milliseconds = getSetMillisecond;
    proto.utcOffset            = getSetOffset;
    proto.utc                  = setOffsetToUTC;
    proto.local                = setOffsetToLocal;
    proto.parseZone            = setOffsetToParsedOffset;
    proto.hasAlignedHourOffset = hasAlignedHourOffset;
    proto.isDST                = isDaylightSavingTime;
    proto.isLocal              = isLocal;
    proto.isUtcOffset          = isUtcOffset;
    proto.isUtc                = isUtc;
    proto.isUTC                = isUtc;
    proto.zoneAbbr = getZoneAbbr;
    proto.zoneName = getZoneName;
    proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
    proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
    proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
    proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
    proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

    function createUnix (input) {
        return createLocal(input * 1000);
    }

    function createInZone () {
        return createLocal.apply(null, arguments).parseZone();
    }

    function preParsePostFormat (string) {
        return string;
    }

    var proto$1 = Locale.prototype;

    proto$1.calendar        = calendar;
    proto$1.longDateFormat  = longDateFormat;
    proto$1.invalidDate     = invalidDate;
    proto$1.ordinal         = ordinal;
    proto$1.preparse        = preParsePostFormat;
    proto$1.postformat      = preParsePostFormat;
    proto$1.relativeTime    = relativeTime;
    proto$1.pastFuture      = pastFuture;
    proto$1.set             = set;

    proto$1.months            =        localeMonths;
    proto$1.monthsShort       =        localeMonthsShort;
    proto$1.monthsParse       =        localeMonthsParse;
    proto$1.monthsRegex       = monthsRegex;
    proto$1.monthsShortRegex  = monthsShortRegex;
    proto$1.week = localeWeek;
    proto$1.firstDayOfYear = localeFirstDayOfYear;
    proto$1.firstDayOfWeek = localeFirstDayOfWeek;

    proto$1.weekdays       =        localeWeekdays;
    proto$1.weekdaysMin    =        localeWeekdaysMin;
    proto$1.weekdaysShort  =        localeWeekdaysShort;
    proto$1.weekdaysParse  =        localeWeekdaysParse;

    proto$1.weekdaysRegex       =        weekdaysRegex;
    proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
    proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

    proto$1.isPM = localeIsPM;
    proto$1.meridiem = localeMeridiem;

    function get$1 (format, index, field, setter) {
        var locale = getLocale();
        var utc = createUTC().set(setter, index);
        return locale[field](utc, format);
    }

    function listMonthsImpl (format, index, field) {
        if (isNumber(format)) {
            index = format;
            format = undefined;
        }

        format = format || '';

        if (index != null) {
            return get$1(format, index, field, 'month');
        }

        var i;
        var out = [];
        for (i = 0; i < 12; i++) {
            out[i] = get$1(format, i, field, 'month');
        }
        return out;
    }

    // ()
    // (5)
    // (fmt, 5)
    // (fmt)
    // (true)
    // (true, 5)
    // (true, fmt, 5)
    // (true, fmt)
    function listWeekdaysImpl (localeSorted, format, index, field) {
        if (typeof localeSorted === 'boolean') {
            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        } else {
            format = localeSorted;
            index = format;
            localeSorted = false;

            if (isNumber(format)) {
                index = format;
                format = undefined;
            }

            format = format || '';
        }

        var locale = getLocale(),
            shift = localeSorted ? locale._week.dow : 0;

        if (index != null) {
            return get$1(format, (index + shift) % 7, field, 'day');
        }

        var i;
        var out = [];
        for (i = 0; i < 7; i++) {
            out[i] = get$1(format, (i + shift) % 7, field, 'day');
        }
        return out;
    }

    function listMonths (format, index) {
        return listMonthsImpl(format, index, 'months');
    }

    function listMonthsShort (format, index) {
        return listMonthsImpl(format, index, 'monthsShort');
    }

    function listWeekdays (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
    }

    function listWeekdaysShort (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
    }

    function listWeekdaysMin (localeSorted, format, index) {
        return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
    }

    getSetGlobalLocale('en', {
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (toInt(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    // Side effect imports

    hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
    hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

    var mathAbs = Math.abs;

    function abs () {
        var data           = this._data;

        this._milliseconds = mathAbs(this._milliseconds);
        this._days         = mathAbs(this._days);
        this._months       = mathAbs(this._months);

        data.milliseconds  = mathAbs(data.milliseconds);
        data.seconds       = mathAbs(data.seconds);
        data.minutes       = mathAbs(data.minutes);
        data.hours         = mathAbs(data.hours);
        data.months        = mathAbs(data.months);
        data.years         = mathAbs(data.years);

        return this;
    }

    function addSubtract$1 (duration, input, value, direction) {
        var other = createDuration(input, value);

        duration._milliseconds += direction * other._milliseconds;
        duration._days         += direction * other._days;
        duration._months       += direction * other._months;

        return duration._bubble();
    }

    // supports only 2.0-style add(1, 's') or add(duration)
    function add$1 (input, value) {
        return addSubtract$1(this, input, value, 1);
    }

    // supports only 2.0-style subtract(1, 's') or subtract(duration)
    function subtract$1 (input, value) {
        return addSubtract$1(this, input, value, -1);
    }

    function absCeil (number) {
        if (number < 0) {
            return Math.floor(number);
        } else {
            return Math.ceil(number);
        }
    }

    function bubble () {
        var milliseconds = this._milliseconds;
        var days         = this._days;
        var months       = this._months;
        var data         = this._data;
        var seconds, minutes, hours, years, monthsFromDays;

        // if we have a mix of positive and negative values, bubble down first
        // check: https://github.com/moment/moment/issues/2166
        if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                (milliseconds <= 0 && days <= 0 && months <= 0))) {
            milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
            days = 0;
            months = 0;
        }

        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;

        seconds           = absFloor(milliseconds / 1000);
        data.seconds      = seconds % 60;

        minutes           = absFloor(seconds / 60);
        data.minutes      = minutes % 60;

        hours             = absFloor(minutes / 60);
        data.hours        = hours % 24;

        days += absFloor(hours / 24);

        // convert days to months
        monthsFromDays = absFloor(daysToMonths(days));
        months += monthsFromDays;
        days -= absCeil(monthsToDays(monthsFromDays));

        // 12 months -> 1 year
        years = absFloor(months / 12);
        months %= 12;

        data.days   = days;
        data.months = months;
        data.years  = years;

        return this;
    }

    function daysToMonths (days) {
        // 400 years have 146097 days (taking into account leap year rules)
        // 400 years have 12 months === 4800
        return days * 4800 / 146097;
    }

    function monthsToDays (months) {
        // the reverse of daysToMonths
        return months * 146097 / 4800;
    }

    function as (units) {
        if (!this.isValid()) {
            return NaN;
        }
        var days;
        var months;
        var milliseconds = this._milliseconds;

        units = normalizeUnits(units);

        if (units === 'month' || units === 'year') {
            days   = this._days   + milliseconds / 864e5;
            months = this._months + daysToMonths(days);
            return units === 'month' ? months : months / 12;
        } else {
            // handle milliseconds separately because of floating point math errors (issue #1867)
            days = this._days + Math.round(monthsToDays(this._months));
            switch (units) {
                case 'week'   : return days / 7     + milliseconds / 6048e5;
                case 'day'    : return days         + milliseconds / 864e5;
                case 'hour'   : return days * 24    + milliseconds / 36e5;
                case 'minute' : return days * 1440  + milliseconds / 6e4;
                case 'second' : return days * 86400 + milliseconds / 1000;
                // Math.floor prevents floating point math errors here
                case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                default: throw new Error('Unknown unit ' + units);
            }
        }
    }

    // TODO: Use this.as('ms')?
    function valueOf$1 () {
        if (!this.isValid()) {
            return NaN;
        }
        return (
            this._milliseconds +
            this._days * 864e5 +
            (this._months % 12) * 2592e6 +
            toInt(this._months / 12) * 31536e6
        );
    }

    function makeAs (alias) {
        return function () {
            return this.as(alias);
        };
    }

    var asMilliseconds = makeAs('ms');
    var asSeconds      = makeAs('s');
    var asMinutes      = makeAs('m');
    var asHours        = makeAs('h');
    var asDays         = makeAs('d');
    var asWeeks        = makeAs('w');
    var asMonths       = makeAs('M');
    var asYears        = makeAs('y');

    function clone$1 () {
        return createDuration(this);
    }

    function get$2 (units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + 's']() : NaN;
    }

    function makeGetter(name) {
        return function () {
            return this.isValid() ? this._data[name] : NaN;
        };
    }

    var milliseconds = makeGetter('milliseconds');
    var seconds      = makeGetter('seconds');
    var minutes      = makeGetter('minutes');
    var hours        = makeGetter('hours');
    var days         = makeGetter('days');
    var months       = makeGetter('months');
    var years        = makeGetter('years');

    function weeks () {
        return absFloor(this.days() / 7);
    }

    var round = Math.round;
    var thresholds = {
        ss: 44,         // a few seconds to seconds
        s : 45,         // seconds to minute
        m : 45,         // minutes to hour
        h : 22,         // hours to day
        d : 26,         // days to month
        M : 11          // months to year
    };

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
        return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
    }

    function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
        var duration = createDuration(posNegDuration).abs();
        var seconds  = round(duration.as('s'));
        var minutes  = round(duration.as('m'));
        var hours    = round(duration.as('h'));
        var days     = round(duration.as('d'));
        var months   = round(duration.as('M'));
        var years    = round(duration.as('y'));

        var a = seconds <= thresholds.ss && ['s', seconds]  ||
                seconds < thresholds.s   && ['ss', seconds] ||
                minutes <= 1             && ['m']           ||
                minutes < thresholds.m   && ['mm', minutes] ||
                hours   <= 1             && ['h']           ||
                hours   < thresholds.h   && ['hh', hours]   ||
                days    <= 1             && ['d']           ||
                days    < thresholds.d   && ['dd', days]    ||
                months  <= 1             && ['M']           ||
                months  < thresholds.M   && ['MM', months]  ||
                years   <= 1             && ['y']           || ['yy', years];

        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale;
        return substituteTimeAgo.apply(null, a);
    }

    // This function allows you to set the rounding function for relative time strings
    function getSetRelativeTimeRounding (roundingFunction) {
        if (roundingFunction === undefined) {
            return round;
        }
        if (typeof(roundingFunction) === 'function') {
            round = roundingFunction;
            return true;
        }
        return false;
    }

    // This function allows you to set a threshold for relative time strings
    function getSetRelativeTimeThreshold (threshold, limit) {
        if (thresholds[threshold] === undefined) {
            return false;
        }
        if (limit === undefined) {
            return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === 's') {
            thresholds.ss = limit - 1;
        }
        return true;
    }

    function humanize (withSuffix) {
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var locale = this.localeData();
        var output = relativeTime$1(this, !withSuffix, locale);

        if (withSuffix) {
            output = locale.pastFuture(+this, output);
        }

        return locale.postformat(output);
    }

    var abs$1 = Math.abs;

    function sign(x) {
        return ((x > 0) - (x < 0)) || +x;
    }

    function toISOString$1() {
        // for ISO strings we do not use the normal bubbling rules:
        //  * milliseconds bubble up until they become hours
        //  * days do not bubble at all
        //  * months bubble up until they become years
        // This is because there is no context-free conversion between hours and days
        // (think of clock changes)
        // and also not between days and months (28-31 days per month)
        if (!this.isValid()) {
            return this.localeData().invalidDate();
        }

        var seconds = abs$1(this._milliseconds) / 1000;
        var days         = abs$1(this._days);
        var months       = abs$1(this._months);
        var minutes, hours, years;

        // 3600 seconds -> 60 minutes -> 1 hour
        minutes           = absFloor(seconds / 60);
        hours             = absFloor(minutes / 60);
        seconds %= 60;
        minutes %= 60;

        // 12 months -> 1 year
        years  = absFloor(months / 12);
        months %= 12;


        // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
        var Y = years;
        var M = months;
        var D = days;
        var h = hours;
        var m = minutes;
        var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
        var total = this.asSeconds();

        if (!total) {
            // this is the same as C#'s (Noda) and python (isodate)...
            // but not other JS (goog.date)
            return 'P0D';
        }

        var totalSign = total < 0 ? '-' : '';
        var ymSign = sign(this._months) !== sign(total) ? '-' : '';
        var daysSign = sign(this._days) !== sign(total) ? '-' : '';
        var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

        return totalSign + 'P' +
            (Y ? ymSign + Y + 'Y' : '') +
            (M ? ymSign + M + 'M' : '') +
            (D ? daysSign + D + 'D' : '') +
            ((h || m || s) ? 'T' : '') +
            (h ? hmsSign + h + 'H' : '') +
            (m ? hmsSign + m + 'M' : '') +
            (s ? hmsSign + s + 'S' : '');
    }

    var proto$2 = Duration.prototype;

    proto$2.isValid        = isValid$1;
    proto$2.abs            = abs;
    proto$2.add            = add$1;
    proto$2.subtract       = subtract$1;
    proto$2.as             = as;
    proto$2.asMilliseconds = asMilliseconds;
    proto$2.asSeconds      = asSeconds;
    proto$2.asMinutes      = asMinutes;
    proto$2.asHours        = asHours;
    proto$2.asDays         = asDays;
    proto$2.asWeeks        = asWeeks;
    proto$2.asMonths       = asMonths;
    proto$2.asYears        = asYears;
    proto$2.valueOf        = valueOf$1;
    proto$2._bubble        = bubble;
    proto$2.clone          = clone$1;
    proto$2.get            = get$2;
    proto$2.milliseconds   = milliseconds;
    proto$2.seconds        = seconds;
    proto$2.minutes        = minutes;
    proto$2.hours          = hours;
    proto$2.days           = days;
    proto$2.weeks          = weeks;
    proto$2.months         = months;
    proto$2.years          = years;
    proto$2.humanize       = humanize;
    proto$2.toISOString    = toISOString$1;
    proto$2.toString       = toISOString$1;
    proto$2.toJSON         = toISOString$1;
    proto$2.locale         = locale;
    proto$2.localeData     = localeData;

    proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
    proto$2.lang = lang;

    // Side effect imports

    // FORMATTING

    addFormatToken('X', 0, 0, 'unix');
    addFormatToken('x', 0, 0, 'valueOf');

    // PARSING

    addRegexToken('x', matchSigned);
    addRegexToken('X', matchTimestamp);
    addParseToken('X', function (input, array, config) {
        config._d = new Date(parseFloat(input, 10) * 1000);
    });
    addParseToken('x', function (input, array, config) {
        config._d = new Date(toInt(input));
    });

    // Side effect imports


    hooks.version = '2.22.2';

    setHookCallback(createLocal);

    hooks.fn                    = proto;
    hooks.min                   = min;
    hooks.max                   = max;
    hooks.now                   = now;
    hooks.utc                   = createUTC;
    hooks.unix                  = createUnix;
    hooks.months                = listMonths;
    hooks.isDate                = isDate;
    hooks.locale                = getSetGlobalLocale;
    hooks.invalid               = createInvalid;
    hooks.duration              = createDuration;
    hooks.isMoment              = isMoment;
    hooks.weekdays              = listWeekdays;
    hooks.parseZone             = createInZone;
    hooks.localeData            = getLocale;
    hooks.isDuration            = isDuration;
    hooks.monthsShort           = listMonthsShort;
    hooks.weekdaysMin           = listWeekdaysMin;
    hooks.defineLocale          = defineLocale;
    hooks.updateLocale          = updateLocale;
    hooks.locales               = listLocales;
    hooks.weekdaysShort         = listWeekdaysShort;
    hooks.normalizeUnits        = normalizeUnits;
    hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
    hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
    hooks.calendarFormat        = getCalendarFormat;
    hooks.prototype             = proto;

    // currently HTML5 input type only supports 24-hour formats
    hooks.HTML5_FMT = {
        DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
        DATE: 'YYYY-MM-DD',                             // <input type="date" />
        TIME: 'HH:mm',                                  // <input type="time" />
        TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
        TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
        WEEK: 'YYYY-[W]WW',                             // <input type="week" />
        MONTH: 'YYYY-MM'                                // <input type="month" />
    };

    return hooks;

})));

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(673)(module)))

/***/ }),
/* 515 */
/***/ (function(module, exports, __webpack_require__) {

var global = __webpack_require__(20);
var core = __webpack_require__(30);
var LIBRARY = __webpack_require__(142);
var wksExt = __webpack_require__(516);
var defineProperty = __webpack_require__(57).f;
module.exports = function (name) {
  var $Symbol = core.Symbol || (core.Symbol = LIBRARY ? {} : global.Symbol || {});
  if (name.charAt(0) != '_' && !(name in $Symbol)) defineProperty($Symbol, name, { value: wksExt.f(name) });
};


/***/ }),
/* 516 */
/***/ (function(module, exports, __webpack_require__) {

exports.f = __webpack_require__(19);


/***/ }),
/* 517 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(642), __esModule: true };

/***/ }),
/* 518 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.7 / 15.2.3.4 Object.getOwnPropertyNames(O)
var $keys = __webpack_require__(229);
var hiddenKeys = __webpack_require__(146).concat('length', 'prototype');

exports.f = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
  return $keys(O, hiddenKeys);
};


/***/ }),
/* 519 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var af = moment.defineLocale('af', {
        months : 'Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag'.split('_'),
        weekdaysShort : 'Son_Maa_Din_Woe_Don_Vry_Sat'.split('_'),
        weekdaysMin : 'So_Ma_Di_Wo_Do_Vr_Sa'.split('_'),
        meridiemParse: /vm|nm/i,
        isPM : function (input) {
            return /^nm$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'vm' : 'VM';
            } else {
                return isLower ? 'nm' : 'NM';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Vandag om] LT',
            nextDay : '[Môre om] LT',
            nextWeek : 'dddd [om] LT',
            lastDay : '[Gister om] LT',
            lastWeek : '[Laas] dddd [om] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'oor %s',
            past : '%s gelede',
            s : '\'n paar sekondes',
            ss : '%d sekondes',
            m : '\'n minuut',
            mm : '%d minute',
            h : '\'n uur',
            hh : '%d ure',
            d : '\'n dag',
            dd : '%d dae',
            M : '\'n maand',
            MM : '%d maande',
            y : '\'n jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de'); // Thanks to Joris Röling : https://github.com/jjupiter
        },
        week : {
            dow : 1, // Maandag is die eerste dag van die week.
            doy : 4  // Die week wat die 4de Januarie bevat is die eerste week van die jaar.
        }
    });

    return af;

})));


/***/ }),
/* 520 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arDz = moment.defineLocale('ar-dz', {
        months : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'أح_إث_ثلا_أر_خم_جم_سب'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 4  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arDz;

})));


/***/ }),
/* 521 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arKw = moment.defineLocale('ar-kw', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arKw;

})));


/***/ }),
/* 522 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '1',
        '2': '2',
        '3': '3',
        '4': '4',
        '5': '5',
        '6': '6',
        '7': '7',
        '8': '8',
        '9': '9',
        '0': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, months = [
        'يناير',
        'فبراير',
        'مارس',
        'أبريل',
        'مايو',
        'يونيو',
        'يوليو',
        'أغسطس',
        'سبتمبر',
        'أكتوبر',
        'نوفمبر',
        'ديسمبر'
    ];

    var arLy = moment.defineLocale('ar-ly', {
        months : months,
        monthsShort : months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            ss : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arLy;

})));


/***/ }),
/* 523 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arMa = moment.defineLocale('ar-ma', {
        months : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر'.split('_'),
        weekdays : 'الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arMa;

})));


/***/ }),
/* 524 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    };

    var arSa = moment.defineLocale('ar-sa', {
        months : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort : 'يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'في %s',
            past : 'منذ %s',
            s : 'ثوان',
            ss : '%d ثانية',
            m : 'دقيقة',
            mm : '%d دقائق',
            h : 'ساعة',
            hh : '%d ساعات',
            d : 'يوم',
            dd : '%d أيام',
            M : 'شهر',
            MM : '%d أشهر',
            y : 'سنة',
            yy : '%d سنوات'
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return arSa;

})));


/***/ }),
/* 525 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var arTn = moment.defineLocale('ar-tn', {
        months: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        monthsShort: 'جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر'.split('_'),
        weekdays: 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort: 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin: 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[اليوم على الساعة] LT',
            nextDay: '[غدا على الساعة] LT',
            nextWeek: 'dddd [على الساعة] LT',
            lastDay: '[أمس على الساعة] LT',
            lastWeek: 'dddd [على الساعة] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'في %s',
            past: 'منذ %s',
            s: 'ثوان',
            ss : '%d ثانية',
            m: 'دقيقة',
            mm: '%d دقائق',
            h: 'ساعة',
            hh: '%d ساعات',
            d: 'يوم',
            dd: '%d أيام',
            M: 'شهر',
            MM: '%d أشهر',
            y: 'سنة',
            yy: '%d سنوات'
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return arTn;

})));


/***/ }),
/* 526 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '١',
        '2': '٢',
        '3': '٣',
        '4': '٤',
        '5': '٥',
        '6': '٦',
        '7': '٧',
        '8': '٨',
        '9': '٩',
        '0': '٠'
    }, numberMap = {
        '١': '1',
        '٢': '2',
        '٣': '3',
        '٤': '4',
        '٥': '5',
        '٦': '6',
        '٧': '7',
        '٨': '8',
        '٩': '9',
        '٠': '0'
    }, pluralForm = function (n) {
        return n === 0 ? 0 : n === 1 ? 1 : n === 2 ? 2 : n % 100 >= 3 && n % 100 <= 10 ? 3 : n % 100 >= 11 ? 4 : 5;
    }, plurals = {
        s : ['أقل من ثانية', 'ثانية واحدة', ['ثانيتان', 'ثانيتين'], '%d ثوان', '%d ثانية', '%d ثانية'],
        m : ['أقل من دقيقة', 'دقيقة واحدة', ['دقيقتان', 'دقيقتين'], '%d دقائق', '%d دقيقة', '%d دقيقة'],
        h : ['أقل من ساعة', 'ساعة واحدة', ['ساعتان', 'ساعتين'], '%d ساعات', '%d ساعة', '%d ساعة'],
        d : ['أقل من يوم', 'يوم واحد', ['يومان', 'يومين'], '%d أيام', '%d يومًا', '%d يوم'],
        M : ['أقل من شهر', 'شهر واحد', ['شهران', 'شهرين'], '%d أشهر', '%d شهرا', '%d شهر'],
        y : ['أقل من عام', 'عام واحد', ['عامان', 'عامين'], '%d أعوام', '%d عامًا', '%d عام']
    }, pluralize = function (u) {
        return function (number, withoutSuffix, string, isFuture) {
            var f = pluralForm(number),
                str = plurals[u][pluralForm(number)];
            if (f === 2) {
                str = str[withoutSuffix ? 0 : 1];
            }
            return str.replace(/%d/i, number);
        };
    }, months = [
        'يناير',
        'فبراير',
        'مارس',
        'أبريل',
        'مايو',
        'يونيو',
        'يوليو',
        'أغسطس',
        'سبتمبر',
        'أكتوبر',
        'نوفمبر',
        'ديسمبر'
    ];

    var ar = moment.defineLocale('ar', {
        months : months,
        monthsShort : months,
        weekdays : 'الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت'.split('_'),
        weekdaysShort : 'أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت'.split('_'),
        weekdaysMin : 'ح_ن_ث_ر_خ_ج_س'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/\u200FM/\u200FYYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ص|م/,
        isPM : function (input) {
            return 'م' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ص';
            } else {
                return 'م';
            }
        },
        calendar : {
            sameDay: '[اليوم عند الساعة] LT',
            nextDay: '[غدًا عند الساعة] LT',
            nextWeek: 'dddd [عند الساعة] LT',
            lastDay: '[أمس عند الساعة] LT',
            lastWeek: 'dddd [عند الساعة] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'بعد %s',
            past : 'منذ %s',
            s : pluralize('s'),
            ss : pluralize('s'),
            m : pluralize('m'),
            mm : pluralize('m'),
            h : pluralize('h'),
            hh : pluralize('h'),
            d : pluralize('d'),
            dd : pluralize('d'),
            M : pluralize('M'),
            MM : pluralize('M'),
            y : pluralize('y'),
            yy : pluralize('y')
        },
        preparse: function (string) {
            return string.replace(/[١٢٣٤٥٦٧٨٩٠]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ar;

})));


/***/ }),
/* 527 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        1: '-inci',
        5: '-inci',
        8: '-inci',
        70: '-inci',
        80: '-inci',
        2: '-nci',
        7: '-nci',
        20: '-nci',
        50: '-nci',
        3: '-üncü',
        4: '-üncü',
        100: '-üncü',
        6: '-ncı',
        9: '-uncu',
        10: '-uncu',
        30: '-uncu',
        60: '-ıncı',
        90: '-ıncı'
    };

    var az = moment.defineLocale('az', {
        months : 'yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr'.split('_'),
        monthsShort : 'yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek'.split('_'),
        weekdays : 'Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə'.split('_'),
        weekdaysShort : 'Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən'.split('_'),
        weekdaysMin : 'Bz_BE_ÇA_Çə_CA_Cü_Şə'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[sabah saat] LT',
            nextWeek : '[gələn həftə] dddd [saat] LT',
            lastDay : '[dünən] LT',
            lastWeek : '[keçən həftə] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s əvvəl',
            s : 'birneçə saniyə',
            ss : '%d saniyə',
            m : 'bir dəqiqə',
            mm : '%d dəqiqə',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir il',
            yy : '%d il'
        },
        meridiemParse: /gecə|səhər|gündüz|axşam/,
        isPM : function (input) {
            return /^(gündüz|axşam)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'gecə';
            } else if (hour < 12) {
                return 'səhər';
            } else if (hour < 17) {
                return 'gündüz';
            } else {
                return 'axşam';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,
        ordinal : function (number) {
            if (number === 0) {  // special case for zero
                return number + '-ıncı';
            }
            var a = number % 10,
                b = number % 100 - a,
                c = number >= 100 ? 100 : null;
            return number + (suffixes[a] || suffixes[b] || suffixes[c]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return az;

})));


/***/ }),
/* 528 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            'mm': withoutSuffix ? 'хвіліна_хвіліны_хвілін' : 'хвіліну_хвіліны_хвілін',
            'hh': withoutSuffix ? 'гадзіна_гадзіны_гадзін' : 'гадзіну_гадзіны_гадзін',
            'dd': 'дзень_дні_дзён',
            'MM': 'месяц_месяцы_месяцаў',
            'yy': 'год_гады_гадоў'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвіліна' : 'хвіліну';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'гадзіна' : 'гадзіну';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }

    var be = moment.defineLocale('be', {
        months : {
            format: 'студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня'.split('_'),
            standalone: 'студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань'.split('_')
        },
        monthsShort : 'студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж'.split('_'),
        weekdays : {
            format: 'нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу'.split('_'),
            standalone: 'нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота'.split('_'),
            isFormat: /\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/
        },
        weekdaysShort : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_ат_ср_чц_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., HH:mm',
            LLLL : 'dddd, D MMMM YYYY г., HH:mm'
        },
        calendar : {
            sameDay: '[Сёння ў] LT',
            nextDay: '[Заўтра ў] LT',
            lastDay: '[Учора ў] LT',
            nextWeek: function () {
                return '[У] dddd [ў] LT';
            },
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return '[У мінулую] dddd [ў] LT';
                    case 1:
                    case 2:
                    case 4:
                        return '[У мінулы] dddd [ў] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'праз %s',
            past : '%s таму',
            s : 'некалькі секунд',
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithPlural,
            hh : relativeTimeWithPlural,
            d : 'дзень',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночы|раніцы|дня|вечара/,
        isPM : function (input) {
            return /^(дня|вечара)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночы';
            } else if (hour < 12) {
                return 'раніцы';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечара';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(і|ы|га)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return (number % 10 === 2 || number % 10 === 3) && (number % 100 !== 12 && number % 100 !== 13) ? number + '-і' : number + '-ы';
                case 'D':
                    return number + '-га';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return be;

})));


/***/ }),
/* 529 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var bg = moment.defineLocale('bg', {
        months : 'януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'янр_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'неделя_понеделник_вторник_сряда_четвъртък_петък_събота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сря_чет_пет_съб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Днес в] LT',
            nextDay : '[Утре в] LT',
            nextWeek : 'dddd [в] LT',
            lastDay : '[Вчера в] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[В изминалата] dddd [в] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[В изминалия] dddd [в] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'след %s',
            past : 'преди %s',
            s : 'няколко секунди',
            ss : '%d секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дни',
            M : 'месец',
            MM : '%d месеца',
            y : 'година',
            yy : '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bg;

})));


/***/ }),
/* 530 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var bm = moment.defineLocale('bm', {
        months : 'Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo'.split('_'),
        monthsShort : 'Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des'.split('_'),
        weekdays : 'Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri'.split('_'),
        weekdaysShort : 'Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib'.split('_'),
        weekdaysMin : 'Ka_Nt_Ta_Ar_Al_Ju_Si'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'MMMM [tile] D [san] YYYY',
            LLL : 'MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm',
            LLLL : 'dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm'
        },
        calendar : {
            sameDay : '[Bi lɛrɛ] LT',
            nextDay : '[Sini lɛrɛ] LT',
            nextWeek : 'dddd [don lɛrɛ] LT',
            lastDay : '[Kunu lɛrɛ] LT',
            lastWeek : 'dddd [tɛmɛnen lɛrɛ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s kɔnɔ',
            past : 'a bɛ %s bɔ',
            s : 'sanga dama dama',
            ss : 'sekondi %d',
            m : 'miniti kelen',
            mm : 'miniti %d',
            h : 'lɛrɛ kelen',
            hh : 'lɛrɛ %d',
            d : 'tile kelen',
            dd : 'tile %d',
            M : 'kalo kelen',
            MM : 'kalo %d',
            y : 'san kelen',
            yy : 'san %d'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return bm;

})));


/***/ }),
/* 531 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '১',
        '2': '২',
        '3': '৩',
        '4': '৪',
        '5': '৫',
        '6': '৬',
        '7': '৭',
        '8': '৮',
        '9': '৯',
        '0': '০'
    },
    numberMap = {
        '১': '1',
        '২': '2',
        '৩': '3',
        '৪': '4',
        '৫': '5',
        '৬': '6',
        '৭': '7',
        '৮': '8',
        '৯': '9',
        '০': '0'
    };

    var bn = moment.defineLocale('bn', {
        months : 'জানুয়ারী_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর'.split('_'),
        monthsShort : 'জানু_ফেব_মার্চ_এপ্র_মে_জুন_জুল_আগ_সেপ্ট_অক্টো_নভে_ডিসে'.split('_'),
        weekdays : 'রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার'.split('_'),
        weekdaysShort : 'রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি'.split('_'),
        weekdaysMin : 'রবি_সোম_মঙ্গ_বুধ_বৃহঃ_শুক্র_শনি'.split('_'),
        longDateFormat : {
            LT : 'A h:mm সময়',
            LTS : 'A h:mm:ss সময়',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm সময়',
            LLLL : 'dddd, D MMMM YYYY, A h:mm সময়'
        },
        calendar : {
            sameDay : '[আজ] LT',
            nextDay : '[আগামীকাল] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[গতকাল] LT',
            lastWeek : '[গত] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s পরে',
            past : '%s আগে',
            s : 'কয়েক সেকেন্ড',
            ss : '%d সেকেন্ড',
            m : 'এক মিনিট',
            mm : '%d মিনিট',
            h : 'এক ঘন্টা',
            hh : '%d ঘন্টা',
            d : 'এক দিন',
            dd : '%d দিন',
            M : 'এক মাস',
            MM : '%d মাস',
            y : 'এক বছর',
            yy : '%d বছর'
        },
        preparse: function (string) {
            return string.replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /রাত|সকাল|দুপুর|বিকাল|রাত/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'রাত' && hour >= 4) ||
                    (meridiem === 'দুপুর' && hour < 5) ||
                    meridiem === 'বিকাল') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'রাত';
            } else if (hour < 10) {
                return 'সকাল';
            } else if (hour < 17) {
                return 'দুপুর';
            } else if (hour < 20) {
                return 'বিকাল';
            } else {
                return 'রাত';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bn;

})));


/***/ }),
/* 532 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '༡',
        '2': '༢',
        '3': '༣',
        '4': '༤',
        '5': '༥',
        '6': '༦',
        '7': '༧',
        '8': '༨',
        '9': '༩',
        '0': '༠'
    },
    numberMap = {
        '༡': '1',
        '༢': '2',
        '༣': '3',
        '༤': '4',
        '༥': '5',
        '༦': '6',
        '༧': '7',
        '༨': '8',
        '༩': '9',
        '༠': '0'
    };

    var bo = moment.defineLocale('bo', {
        months : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        monthsShort : 'ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ'.split('_'),
        weekdays : 'གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་'.split('_'),
        weekdaysShort : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        weekdaysMin : 'ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[དི་རིང] LT',
            nextDay : '[སང་ཉིན] LT',
            nextWeek : '[བདུན་ཕྲག་རྗེས་མ], LT',
            lastDay : '[ཁ་སང] LT',
            lastWeek : '[བདུན་ཕྲག་མཐའ་མ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ལ་',
            past : '%s སྔན་ལ',
            s : 'ལམ་སང',
            ss : '%d སྐར་ཆ།',
            m : 'སྐར་མ་གཅིག',
            mm : '%d སྐར་མ',
            h : 'ཆུ་ཚོད་གཅིག',
            hh : '%d ཆུ་ཚོད',
            d : 'ཉིན་གཅིག',
            dd : '%d ཉིན་',
            M : 'ཟླ་བ་གཅིག',
            MM : '%d ཟླ་བ',
            y : 'ལོ་གཅིག',
            yy : '%d ལོ'
        },
        preparse: function (string) {
            return string.replace(/[༡༢༣༤༥༦༧༨༩༠]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'མཚན་མོ' && hour >= 4) ||
                    (meridiem === 'ཉིན་གུང' && hour < 5) ||
                    meridiem === 'དགོང་དག') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'མཚན་མོ';
            } else if (hour < 10) {
                return 'ཞོགས་ཀས';
            } else if (hour < 17) {
                return 'ཉིན་གུང';
            } else if (hour < 20) {
                return 'དགོང་དག';
            } else {
                return 'མཚན་མོ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bo;

})));


/***/ }),
/* 533 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function relativeTimeWithMutation(number, withoutSuffix, key) {
        var format = {
            'mm': 'munutenn',
            'MM': 'miz',
            'dd': 'devezh'
        };
        return number + ' ' + mutation(format[key], number);
    }
    function specialMutationForYears(number) {
        switch (lastNumber(number)) {
            case 1:
            case 3:
            case 4:
            case 5:
            case 9:
                return number + ' bloaz';
            default:
                return number + ' vloaz';
        }
    }
    function lastNumber(number) {
        if (number > 9) {
            return lastNumber(number % 10);
        }
        return number;
    }
    function mutation(text, number) {
        if (number === 2) {
            return softMutation(text);
        }
        return text;
    }
    function softMutation(text) {
        var mutationTable = {
            'm': 'v',
            'b': 'v',
            'd': 'z'
        };
        if (mutationTable[text.charAt(0)] === undefined) {
            return text;
        }
        return mutationTable[text.charAt(0)] + text.substring(1);
    }

    var br = moment.defineLocale('br', {
        months : 'Genver_C\'hwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu'.split('_'),
        monthsShort : 'Gen_C\'hwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker'.split('_'),
        weekdays : 'Sul_Lun_Meurzh_Merc\'her_Yaou_Gwener_Sadorn'.split('_'),
        weekdaysShort : 'Sul_Lun_Meu_Mer_Yao_Gwe_Sad'.split('_'),
        weekdaysMin : 'Su_Lu_Me_Mer_Ya_Gw_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h[e]mm A',
            LTS : 'h[e]mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [a viz] MMMM YYYY',
            LLL : 'D [a viz] MMMM YYYY h[e]mm A',
            LLLL : 'dddd, D [a viz] MMMM YYYY h[e]mm A'
        },
        calendar : {
            sameDay : '[Hiziv da] LT',
            nextDay : '[Warc\'hoazh da] LT',
            nextWeek : 'dddd [da] LT',
            lastDay : '[Dec\'h da] LT',
            lastWeek : 'dddd [paset da] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'a-benn %s',
            past : '%s \'zo',
            s : 'un nebeud segondennoù',
            ss : '%d eilenn',
            m : 'ur vunutenn',
            mm : relativeTimeWithMutation,
            h : 'un eur',
            hh : '%d eur',
            d : 'un devezh',
            dd : relativeTimeWithMutation,
            M : 'ur miz',
            MM : relativeTimeWithMutation,
            y : 'ur bloaz',
            yy : specialMutationForYears
        },
        dayOfMonthOrdinalParse: /\d{1,2}(añ|vet)/,
        ordinal : function (number) {
            var output = (number === 1) ? 'añ' : 'vet';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return br;

})));


/***/ }),
/* 534 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var bs = moment.defineLocale('bs', {
        months : 'januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            ss     : translate,
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : 'dan',
            dd     : translate,
            M      : 'mjesec',
            MM     : translate,
            y      : 'godinu',
            yy     : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return bs;

})));


/***/ }),
/* 535 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ca = moment.defineLocale('ca', {
        months : {
            standalone: 'gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre'.split('_'),
            format: 'de gener_de febrer_de març_d\'abril_de maig_de juny_de juliol_d\'agost_de setembre_d\'octubre_de novembre_de desembre'.split('_'),
            isFormat: /D[oD]?(\s)+MMMM/
        },
        monthsShort : 'gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.'.split('_'),
        monthsParseExact : true,
        weekdays : 'diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte'.split('_'),
        weekdaysShort : 'dg._dl._dt._dc._dj._dv._ds.'.split('_'),
        weekdaysMin : 'dg_dl_dt_dc_dj_dv_ds'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [de] YYYY',
            ll : 'D MMM YYYY',
            LLL : 'D MMMM [de] YYYY [a les] H:mm',
            lll : 'D MMM YYYY, H:mm',
            LLLL : 'dddd D MMMM [de] YYYY [a les] H:mm',
            llll : 'ddd D MMM YYYY, H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[avui a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextDay : function () {
                return '[demà a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastDay : function () {
                return '[ahir a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [passat a ' + ((this.hours() !== 1) ? 'les' : 'la') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'd\'aquí %s',
            past : 'fa %s',
            s : 'uns segons',
            ss : '%d segons',
            m : 'un minut',
            mm : '%d minuts',
            h : 'una hora',
            hh : '%d hores',
            d : 'un dia',
            dd : '%d dies',
            M : 'un mes',
            MM : '%d mesos',
            y : 'un any',
            yy : '%d anys'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(r|n|t|è|a)/,
        ordinal : function (number, period) {
            var output = (number === 1) ? 'r' :
                (number === 2) ? 'n' :
                (number === 3) ? 'r' :
                (number === 4) ? 't' : 'è';
            if (period === 'w' || period === 'W') {
                output = 'a';
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ca;

})));


/***/ }),
/* 536 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = 'leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec'.split('_'),
        monthsShort = 'led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro'.split('_');
    function plural(n) {
        return (n > 1) && (n < 5) && (~~(n / 10) !== 1);
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':  // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekund' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekund');
                } else {
                    return result + 'sekundami';
                }
                break;
            case 'm':  // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minuta' : (isFuture ? 'minutu' : 'minutou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minuty' : 'minut');
                } else {
                    return result + 'minutami';
                }
                break;
            case 'h':  // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodin');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':  // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'den' : 'dnem';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dny' : 'dní');
                } else {
                    return result + 'dny';
                }
                break;
            case 'M':  // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'měsíc' : 'měsícem';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'měsíce' : 'měsíců');
                } else {
                    return result + 'měsíci';
                }
                break;
            case 'y':  // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokem';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'let');
                } else {
                    return result + 'lety';
                }
                break;
        }
    }

    var cs = moment.defineLocale('cs', {
        months : months,
        monthsShort : monthsShort,
        monthsParse : (function (months, monthsShort) {
            var i, _monthsParse = [];
            for (i = 0; i < 12; i++) {
                // use custom parser to solve problem with July (červenec)
                _monthsParse[i] = new RegExp('^' + months[i] + '$|^' + monthsShort[i] + '$', 'i');
            }
            return _monthsParse;
        }(months, monthsShort)),
        shortMonthsParse : (function (monthsShort) {
            var i, _shortMonthsParse = [];
            for (i = 0; i < 12; i++) {
                _shortMonthsParse[i] = new RegExp('^' + monthsShort[i] + '$', 'i');
            }
            return _shortMonthsParse;
        }(monthsShort)),
        longMonthsParse : (function (months) {
            var i, _longMonthsParse = [];
            for (i = 0; i < 12; i++) {
                _longMonthsParse[i] = new RegExp('^' + months[i] + '$', 'i');
            }
            return _longMonthsParse;
        }(months)),
        weekdays : 'neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota'.split('_'),
        weekdaysShort : 'ne_po_út_st_čt_pá_so'.split('_'),
        weekdaysMin : 'ne_po_út_st_čt_pá_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm',
            l : 'D. M. YYYY'
        },
        calendar : {
            sameDay: '[dnes v] LT',
            nextDay: '[zítra v] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v neděli v] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [v] LT';
                    case 3:
                        return '[ve středu v] LT';
                    case 4:
                        return '[ve čtvrtek v] LT';
                    case 5:
                        return '[v pátek v] LT';
                    case 6:
                        return '[v sobotu v] LT';
                }
            },
            lastDay: '[včera v] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulou neděli v] LT';
                    case 1:
                    case 2:
                        return '[minulé] dddd [v] LT';
                    case 3:
                        return '[minulou středu v] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [v] LT';
                    case 6:
                        return '[minulou sobotu v] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'před %s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse : /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cs;

})));


/***/ }),
/* 537 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var cv = moment.defineLocale('cv', {
        months : 'кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав'.split('_'),
        monthsShort : 'кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш'.split('_'),
        weekdays : 'вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун'.split('_'),
        weekdaysShort : 'выр_тун_ытл_юн_кӗҫ_эрн_шӑм'.split('_'),
        weekdaysMin : 'вр_тн_ыт_юн_кҫ_эр_шм'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]',
            LLL : 'YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm',
            LLLL : 'dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm'
        },
        calendar : {
            sameDay: '[Паян] LT [сехетре]',
            nextDay: '[Ыран] LT [сехетре]',
            lastDay: '[Ӗнер] LT [сехетре]',
            nextWeek: '[Ҫитес] dddd LT [сехетре]',
            lastWeek: '[Иртнӗ] dddd LT [сехетре]',
            sameElse: 'L'
        },
        relativeTime : {
            future : function (output) {
                var affix = /сехет$/i.exec(output) ? 'рен' : /ҫул$/i.exec(output) ? 'тан' : 'ран';
                return output + affix;
            },
            past : '%s каялла',
            s : 'пӗр-ик ҫеккунт',
            ss : '%d ҫеккунт',
            m : 'пӗр минут',
            mm : '%d минут',
            h : 'пӗр сехет',
            hh : '%d сехет',
            d : 'пӗр кун',
            dd : '%d кун',
            M : 'пӗр уйӑх',
            MM : '%d уйӑх',
            y : 'пӗр ҫул',
            yy : '%d ҫул'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-мӗш/,
        ordinal : '%d-мӗш',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return cv;

})));


/***/ }),
/* 538 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var cy = moment.defineLocale('cy', {
        months: 'Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr'.split('_'),
        monthsShort: 'Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag'.split('_'),
        weekdays: 'Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn'.split('_'),
        weekdaysShort: 'Sul_Llun_Maw_Mer_Iau_Gwe_Sad'.split('_'),
        weekdaysMin: 'Su_Ll_Ma_Me_Ia_Gw_Sa'.split('_'),
        weekdaysParseExact : true,
        // time formats are the same as en-gb
        longDateFormat: {
            LT: 'HH:mm',
            LTS : 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[Heddiw am] LT',
            nextDay: '[Yfory am] LT',
            nextWeek: 'dddd [am] LT',
            lastDay: '[Ddoe am] LT',
            lastWeek: 'dddd [diwethaf am] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'mewn %s',
            past: '%s yn ôl',
            s: 'ychydig eiliadau',
            ss: '%d eiliad',
            m: 'munud',
            mm: '%d munud',
            h: 'awr',
            hh: '%d awr',
            d: 'diwrnod',
            dd: '%d diwrnod',
            M: 'mis',
            MM: '%d mis',
            y: 'blwyddyn',
            yy: '%d flynedd'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,
        // traditional ordinal numbers above 31 are not commonly used in colloquial Welsh
        ordinal: function (number) {
            var b = number,
                output = '',
                lookup = [
                    '', 'af', 'il', 'ydd', 'ydd', 'ed', 'ed', 'ed', 'fed', 'fed', 'fed', // 1af to 10fed
                    'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'eg', 'fed', 'eg', 'fed' // 11eg to 20fed
                ];
            if (b > 20) {
                if (b === 40 || b === 50 || b === 60 || b === 80 || b === 100) {
                    output = 'fed'; // not 30ain, 70ain or 90ain
                } else {
                    output = 'ain';
                }
            } else if (b > 0) {
                output = lookup[b];
            }
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return cy;

})));


/***/ }),
/* 539 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var da = moment.defineLocale('da', {
        months : 'januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'søn_man_tir_ons_tor_fre_lør'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd [d.] D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay : '[i dag kl.] LT',
            nextDay : '[i morgen kl.] LT',
            nextWeek : 'på dddd [kl.] LT',
            lastDay : '[i går kl.] LT',
            lastWeek : '[i] dddd[s kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'få sekunder',
            ss : '%d sekunder',
            m : 'et minut',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dage',
            M : 'en måned',
            MM : '%d måneder',
            y : 'et år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return da;

})));


/***/ }),
/* 540 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deAt = moment.defineLocale('de-at', {
        months : 'Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deAt;

})));


/***/ }),
/* 541 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var deCh = moment.defineLocale('de-ch', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return deCh;

})));


/***/ }),
/* 542 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eine Minute', 'einer Minute'],
            'h': ['eine Stunde', 'einer Stunde'],
            'd': ['ein Tag', 'einem Tag'],
            'dd': [number + ' Tage', number + ' Tagen'],
            'M': ['ein Monat', 'einem Monat'],
            'MM': [number + ' Monate', number + ' Monaten'],
            'y': ['ein Jahr', 'einem Jahr'],
            'yy': [number + ' Jahre', number + ' Jahren']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var de = moment.defineLocale('de', {
        months : 'Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort : 'Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag'.split('_'),
        weekdaysShort : 'So._Mo._Di._Mi._Do._Fr._Sa.'.split('_'),
        weekdaysMin : 'So_Mo_Di_Mi_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY HH:mm',
            LLLL : 'dddd, D. MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[heute um] LT [Uhr]',
            sameElse: 'L',
            nextDay: '[morgen um] LT [Uhr]',
            nextWeek: 'dddd [um] LT [Uhr]',
            lastDay: '[gestern um] LT [Uhr]',
            lastWeek: '[letzten] dddd [um] LT [Uhr]'
        },
        relativeTime : {
            future : 'in %s',
            past : 'vor %s',
            s : 'ein paar Sekunden',
            ss : '%d Sekunden',
            m : processRelativeTime,
            mm : '%d Minuten',
            h : processRelativeTime,
            hh : '%d Stunden',
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return de;

})));


/***/ }),
/* 543 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'ޖެނުއަރީ',
        'ފެބްރުއަރީ',
        'މާރިޗު',
        'އޭޕްރީލު',
        'މޭ',
        'ޖޫން',
        'ޖުލައި',
        'އޯގަސްޓު',
        'ސެޕްޓެމްބަރު',
        'އޮކްޓޯބަރު',
        'ނޮވެމްބަރު',
        'ޑިސެމްބަރު'
    ], weekdays = [
        'އާދިއްތަ',
        'ހޯމަ',
        'އަންގާރަ',
        'ބުދަ',
        'ބުރާސްފަތި',
        'ހުކުރު',
        'ހޮނިހިރު'
    ];

    var dv = moment.defineLocale('dv', {
        months : months,
        monthsShort : months,
        weekdays : weekdays,
        weekdaysShort : weekdays,
        weekdaysMin : 'އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި'.split('_'),
        longDateFormat : {

            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'D/M/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /މކ|މފ/,
        isPM : function (input) {
            return 'މފ' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'މކ';
            } else {
                return 'މފ';
            }
        },
        calendar : {
            sameDay : '[މިއަދު] LT',
            nextDay : '[މާދަމާ] LT',
            nextWeek : 'dddd LT',
            lastDay : '[އިއްޔެ] LT',
            lastWeek : '[ފާއިތުވި] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ތެރޭގައި %s',
            past : 'ކުރިން %s',
            s : 'ސިކުންތުކޮޅެއް',
            ss : 'd% ސިކުންތު',
            m : 'މިނިޓެއް',
            mm : 'މިނިޓު %d',
            h : 'ގަޑިއިރެއް',
            hh : 'ގަޑިއިރު %d',
            d : 'ދުވަހެއް',
            dd : 'ދުވަސް %d',
            M : 'މަހެއް',
            MM : 'މަސް %d',
            y : 'އަހަރެއް',
            yy : 'އަހަރު %d'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 7,  // Sunday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return dv;

})));


/***/ }),
/* 544 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

    function isFunction(input) {
        return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
    }


    var el = moment.defineLocale('el', {
        monthsNominativeEl : 'Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος'.split('_'),
        monthsGenitiveEl : 'Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου'.split('_'),
        months : function (momentToFormat, format) {
            if (!momentToFormat) {
                return this._monthsNominativeEl;
            } else if (typeof format === 'string' && /D/.test(format.substring(0, format.indexOf('MMMM')))) { // if there is a day number before 'MMMM'
                return this._monthsGenitiveEl[momentToFormat.month()];
            } else {
                return this._monthsNominativeEl[momentToFormat.month()];
            }
        },
        monthsShort : 'Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ'.split('_'),
        weekdays : 'Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο'.split('_'),
        weekdaysShort : 'Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ'.split('_'),
        weekdaysMin : 'Κυ_Δε_Τρ_Τε_Πε_Πα_Σα'.split('_'),
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'μμ' : 'ΜΜ';
            } else {
                return isLower ? 'πμ' : 'ΠΜ';
            }
        },
        isPM : function (input) {
            return ((input + '').toLowerCase()[0] === 'μ');
        },
        meridiemParse : /[ΠΜ]\.?Μ?\.?/i,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendarEl : {
            sameDay : '[Σήμερα {}] LT',
            nextDay : '[Αύριο {}] LT',
            nextWeek : 'dddd [{}] LT',
            lastDay : '[Χθες {}] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 6:
                        return '[το προηγούμενο] dddd [{}] LT';
                    default:
                        return '[την προηγούμενη] dddd [{}] LT';
                }
            },
            sameElse : 'L'
        },
        calendar : function (key, mom) {
            var output = this._calendarEl[key],
                hours = mom && mom.hours();
            if (isFunction(output)) {
                output = output.apply(mom);
            }
            return output.replace('{}', (hours % 12 === 1 ? 'στη' : 'στις'));
        },
        relativeTime : {
            future : 'σε %s',
            past : '%s πριν',
            s : 'λίγα δευτερόλεπτα',
            ss : '%d δευτερόλεπτα',
            m : 'ένα λεπτό',
            mm : '%d λεπτά',
            h : 'μία ώρα',
            hh : '%d ώρες',
            d : 'μία μέρα',
            dd : '%d μέρες',
            M : 'ένας μήνας',
            MM : '%d μήνες',
            y : 'ένας χρόνος',
            yy : '%d χρόνια'
        },
        dayOfMonthOrdinalParse: /\d{1,2}η/,
        ordinal: '%dη',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4st is the first week of the year.
        }
    });

    return el;

})));


/***/ }),
/* 545 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enAu = moment.defineLocale('en-au', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enAu;

})));


/***/ }),
/* 546 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enCa = moment.defineLocale('en-ca', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'YYYY-MM-DD',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY h:mm A',
            LLLL : 'dddd, MMMM D, YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    return enCa;

})));


/***/ }),
/* 547 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enGb = moment.defineLocale('en-gb', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enGb;

})));


/***/ }),
/* 548 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enIe = moment.defineLocale('en-ie', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enIe;

})));


/***/ }),
/* 549 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enIl = moment.defineLocale('en-il', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        }
    });

    return enIl;

})));


/***/ }),
/* 550 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var enNz = moment.defineLocale('en-nz', {
        months : 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_'),
        weekdays : 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_'),
        weekdaysShort : 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_'),
        weekdaysMin : 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[Last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'in %s',
            past : '%s ago',
            s : 'a few seconds',
            ss : '%d seconds',
            m : 'a minute',
            mm : '%d minutes',
            h : 'an hour',
            hh : '%d hours',
            d : 'a day',
            dd : '%d days',
            M : 'a month',
            MM : '%d months',
            y : 'a year',
            yy : '%d years'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return enNz;

})));


/***/ }),
/* 551 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var eo = moment.defineLocale('eo', {
        months : 'januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aŭg_sep_okt_nov_dec'.split('_'),
        weekdays : 'dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato'.split('_'),
        weekdaysShort : 'dim_lun_mard_merk_ĵaŭ_ven_sab'.split('_'),
        weekdaysMin : 'di_lu_ma_me_ĵa_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D[-a de] MMMM, YYYY',
            LLL : 'D[-a de] MMMM, YYYY HH:mm',
            LLLL : 'dddd, [la] D[-a de] MMMM, YYYY HH:mm'
        },
        meridiemParse: /[ap]\.t\.m/i,
        isPM: function (input) {
            return input.charAt(0).toLowerCase() === 'p';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'p.t.m.' : 'P.T.M.';
            } else {
                return isLower ? 'a.t.m.' : 'A.T.M.';
            }
        },
        calendar : {
            sameDay : '[Hodiaŭ je] LT',
            nextDay : '[Morgaŭ je] LT',
            nextWeek : 'dddd [je] LT',
            lastDay : '[Hieraŭ je] LT',
            lastWeek : '[pasinta] dddd [je] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'post %s',
            past : 'antaŭ %s',
            s : 'sekundoj',
            ss : '%d sekundoj',
            m : 'minuto',
            mm : '%d minutoj',
            h : 'horo',
            hh : '%d horoj',
            d : 'tago',//ne 'diurno', ĉar estas uzita por proksimumo
            dd : '%d tagoj',
            M : 'monato',
            MM : '%d monatoj',
            y : 'jaro',
            yy : '%d jaroj'
        },
        dayOfMonthOrdinalParse: /\d{1,2}a/,
        ordinal : '%da',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return eo;

})));


/***/ }),
/* 552 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var esDo = moment.defineLocale('es-do', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex: /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse: monthsParse,
        longMonthsParse: monthsParse,
        shortMonthsParse: monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY h:mm A',
            LLLL : 'dddd, D [de] MMMM [de] YYYY h:mm A'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return esDo;

})));


/***/ }),
/* 553 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var esUs = moment.defineLocale('es-us', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsParseExact : true,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'MM/DD/YYYY',
            LL : 'MMMM [de] D [de] YYYY',
            LLL : 'MMMM [de] D [de] YYYY h:mm A',
            LLLL : 'dddd, MMMM [de] D [de] YYYY h:mm A'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return esUs;

})));


/***/ }),
/* 554 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortDot = 'ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.'.split('_'),
        monthsShort = 'ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic'.split('_');

    var monthsParse = [/^ene/i, /^feb/i, /^mar/i, /^abr/i, /^may/i, /^jun/i, /^jul/i, /^ago/i, /^sep/i, /^oct/i, /^nov/i, /^dic/i];
    var monthsRegex = /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;

    var es = moment.defineLocale('es', {
        months : 'enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortDot;
            } else if (/-MMM-/.test(format)) {
                return monthsShort[m.month()];
            } else {
                return monthsShortDot[m.month()];
            }
        },
        monthsRegex : monthsRegex,
        monthsShortRegex : monthsRegex,
        monthsStrictRegex : /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,
        monthsShortStrictRegex : /^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,
        weekdays : 'domingo_lunes_martes_miércoles_jueves_viernes_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mié._jue._vie._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mi_ju_vi_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoy a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextDay : function () {
                return '[mañana a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastDay : function () {
                return '[ayer a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            lastWeek : function () {
                return '[el] dddd [pasado a la' + ((this.hours() !== 1) ? 's' : '') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'en %s',
            past : 'hace %s',
            s : 'unos segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'una hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un año',
            yy : '%d años'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return es;

})));


/***/ }),
/* 555 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's' : ['mõne sekundi', 'mõni sekund', 'paar sekundit'],
            'ss': [number + 'sekundi', number + 'sekundit'],
            'm' : ['ühe minuti', 'üks minut'],
            'mm': [number + ' minuti', number + ' minutit'],
            'h' : ['ühe tunni', 'tund aega', 'üks tund'],
            'hh': [number + ' tunni', number + ' tundi'],
            'd' : ['ühe päeva', 'üks päev'],
            'M' : ['kuu aja', 'kuu aega', 'üks kuu'],
            'MM': [number + ' kuu', number + ' kuud'],
            'y' : ['ühe aasta', 'aasta', 'üks aasta'],
            'yy': [number + ' aasta', number + ' aastat']
        };
        if (withoutSuffix) {
            return format[key][2] ? format[key][2] : format[key][1];
        }
        return isFuture ? format[key][0] : format[key][1];
    }

    var et = moment.defineLocale('et', {
        months        : 'jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember'.split('_'),
        monthsShort   : 'jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets'.split('_'),
        weekdays      : 'pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev'.split('_'),
        weekdaysShort : 'P_E_T_K_N_R_L'.split('_'),
        weekdaysMin   : 'P_E_T_K_N_R_L'.split('_'),
        longDateFormat : {
            LT   : 'H:mm',
            LTS : 'H:mm:ss',
            L    : 'DD.MM.YYYY',
            LL   : 'D. MMMM YYYY',
            LLL  : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[Täna,] LT',
            nextDay  : '[Homme,] LT',
            nextWeek : '[Järgmine] dddd LT',
            lastDay  : '[Eile,] LT',
            lastWeek : '[Eelmine] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s pärast',
            past   : '%s tagasi',
            s      : processRelativeTime,
            ss     : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : '%d päeva',
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return et;

})));


/***/ }),
/* 556 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var eu = moment.defineLocale('eu', {
        months : 'urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua'.split('_'),
        monthsShort : 'urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.'.split('_'),
        monthsParseExact : true,
        weekdays : 'igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata'.split('_'),
        weekdaysShort : 'ig._al._ar._az._og._ol._lr.'.split('_'),
        weekdaysMin : 'ig_al_ar_az_og_ol_lr'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY[ko] MMMM[ren] D[a]',
            LLL : 'YYYY[ko] MMMM[ren] D[a] HH:mm',
            LLLL : 'dddd, YYYY[ko] MMMM[ren] D[a] HH:mm',
            l : 'YYYY-M-D',
            ll : 'YYYY[ko] MMM D[a]',
            lll : 'YYYY[ko] MMM D[a] HH:mm',
            llll : 'ddd, YYYY[ko] MMM D[a] HH:mm'
        },
        calendar : {
            sameDay : '[gaur] LT[etan]',
            nextDay : '[bihar] LT[etan]',
            nextWeek : 'dddd LT[etan]',
            lastDay : '[atzo] LT[etan]',
            lastWeek : '[aurreko] dddd LT[etan]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s barru',
            past : 'duela %s',
            s : 'segundo batzuk',
            ss : '%d segundo',
            m : 'minutu bat',
            mm : '%d minutu',
            h : 'ordu bat',
            hh : '%d ordu',
            d : 'egun bat',
            dd : '%d egun',
            M : 'hilabete bat',
            MM : '%d hilabete',
            y : 'urte bat',
            yy : '%d urte'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return eu;

})));


/***/ }),
/* 557 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '۱',
        '2': '۲',
        '3': '۳',
        '4': '۴',
        '5': '۵',
        '6': '۶',
        '7': '۷',
        '8': '۸',
        '9': '۹',
        '0': '۰'
    }, numberMap = {
        '۱': '1',
        '۲': '2',
        '۳': '3',
        '۴': '4',
        '۵': '5',
        '۶': '6',
        '۷': '7',
        '۸': '8',
        '۹': '9',
        '۰': '0'
    };

    var fa = moment.defineLocale('fa', {
        months : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        monthsShort : 'ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر'.split('_'),
        weekdays : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysShort : 'یک\u200cشنبه_دوشنبه_سه\u200cشنبه_چهارشنبه_پنج\u200cشنبه_جمعه_شنبه'.split('_'),
        weekdaysMin : 'ی_د_س_چ_پ_ج_ش'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /قبل از ظهر|بعد از ظهر/,
        isPM: function (input) {
            return /بعد از ظهر/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'قبل از ظهر';
            } else {
                return 'بعد از ظهر';
            }
        },
        calendar : {
            sameDay : '[امروز ساعت] LT',
            nextDay : '[فردا ساعت] LT',
            nextWeek : 'dddd [ساعت] LT',
            lastDay : '[دیروز ساعت] LT',
            lastWeek : 'dddd [پیش] [ساعت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'در %s',
            past : '%s پیش',
            s : 'چند ثانیه',
            ss : 'ثانیه d%',
            m : 'یک دقیقه',
            mm : '%d دقیقه',
            h : 'یک ساعت',
            hh : '%d ساعت',
            d : 'یک روز',
            dd : '%d روز',
            M : 'یک ماه',
            MM : '%d ماه',
            y : 'یک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/[۰-۹]/g, function (match) {
                return numberMap[match];
            }).replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            }).replace(/,/g, '،');
        },
        dayOfMonthOrdinalParse: /\d{1,2}م/,
        ordinal : '%dم',
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return fa;

})));


/***/ }),
/* 558 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var numbersPast = 'nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän'.split(' '),
        numbersFuture = [
            'nolla', 'yhden', 'kahden', 'kolmen', 'neljän', 'viiden', 'kuuden',
            numbersPast[7], numbersPast[8], numbersPast[9]
        ];
    function translate(number, withoutSuffix, key, isFuture) {
        var result = '';
        switch (key) {
            case 's':
                return isFuture ? 'muutaman sekunnin' : 'muutama sekunti';
            case 'ss':
                return isFuture ? 'sekunnin' : 'sekuntia';
            case 'm':
                return isFuture ? 'minuutin' : 'minuutti';
            case 'mm':
                result = isFuture ? 'minuutin' : 'minuuttia';
                break;
            case 'h':
                return isFuture ? 'tunnin' : 'tunti';
            case 'hh':
                result = isFuture ? 'tunnin' : 'tuntia';
                break;
            case 'd':
                return isFuture ? 'päivän' : 'päivä';
            case 'dd':
                result = isFuture ? 'päivän' : 'päivää';
                break;
            case 'M':
                return isFuture ? 'kuukauden' : 'kuukausi';
            case 'MM':
                result = isFuture ? 'kuukauden' : 'kuukautta';
                break;
            case 'y':
                return isFuture ? 'vuoden' : 'vuosi';
            case 'yy':
                result = isFuture ? 'vuoden' : 'vuotta';
                break;
        }
        result = verbalNumber(number, isFuture) + ' ' + result;
        return result;
    }
    function verbalNumber(number, isFuture) {
        return number < 10 ? (isFuture ? numbersFuture[number] : numbersPast[number]) : number;
    }

    var fi = moment.defineLocale('fi', {
        months : 'tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu'.split('_'),
        monthsShort : 'tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu'.split('_'),
        weekdays : 'sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai'.split('_'),
        weekdaysShort : 'su_ma_ti_ke_to_pe_la'.split('_'),
        weekdaysMin : 'su_ma_ti_ke_to_pe_la'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'Do MMMM[ta] YYYY',
            LLL : 'Do MMMM[ta] YYYY, [klo] HH.mm',
            LLLL : 'dddd, Do MMMM[ta] YYYY, [klo] HH.mm',
            l : 'D.M.YYYY',
            ll : 'Do MMM YYYY',
            lll : 'Do MMM YYYY, [klo] HH.mm',
            llll : 'ddd, Do MMM YYYY, [klo] HH.mm'
        },
        calendar : {
            sameDay : '[tänään] [klo] LT',
            nextDay : '[huomenna] [klo] LT',
            nextWeek : 'dddd [klo] LT',
            lastDay : '[eilen] [klo] LT',
            lastWeek : '[viime] dddd[na] [klo] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s päästä',
            past : '%s sitten',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fi;

})));


/***/ }),
/* 559 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var fo = moment.defineLocale('fo', {
        months : 'januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur'.split('_'),
        weekdaysShort : 'sun_mán_týs_mik_hós_frí_ley'.split('_'),
        weekdaysMin : 'su_má_tý_mi_hó_fr_le'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D. MMMM, YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Í dag kl.] LT',
            nextDay : '[Í morgin kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[Í gjár kl.] LT',
            lastWeek : '[síðstu] dddd [kl] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'um %s',
            past : '%s síðani',
            s : 'fá sekund',
            ss : '%d sekundir',
            m : 'ein minutt',
            mm : '%d minuttir',
            h : 'ein tími',
            hh : '%d tímar',
            d : 'ein dagur',
            dd : '%d dagar',
            M : 'ein mánaði',
            MM : '%d mánaðir',
            y : 'eitt ár',
            yy : '%d ár'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fo;

})));


/***/ }),
/* 560 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var frCa = moment.defineLocale('fr-ca', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        }
    });

    return frCa;

})));


/***/ }),
/* 561 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var frCh = moment.defineLocale('fr-ch', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|e)/,
        ordinal : function (number, period) {
            switch (period) {
                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'D':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return frCh;

})));


/***/ }),
/* 562 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var fr = moment.defineLocale('fr', {
        months : 'janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre'.split('_'),
        monthsShort : 'janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.'.split('_'),
        monthsParseExact : true,
        weekdays : 'dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi'.split('_'),
        weekdaysShort : 'dim._lun._mar._mer._jeu._ven._sam.'.split('_'),
        weekdaysMin : 'di_lu_ma_me_je_ve_sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Aujourd’hui à] LT',
            nextDay : '[Demain à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[Hier à] LT',
            lastWeek : 'dddd [dernier à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dans %s',
            past : 'il y a %s',
            s : 'quelques secondes',
            ss : '%d secondes',
            m : 'une minute',
            mm : '%d minutes',
            h : 'une heure',
            hh : '%d heures',
            d : 'un jour',
            dd : '%d jours',
            M : 'un mois',
            MM : '%d mois',
            y : 'un an',
            yy : '%d ans'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(er|)/,
        ordinal : function (number, period) {
            switch (period) {
                // TODO: Return 'e' when day of month > 1. Move this case inside
                // block for masculine words below.
                // See https://github.com/moment/moment/issues/3375
                case 'D':
                    return number + (number === 1 ? 'er' : '');

                // Words with masculine grammatical gender: mois, trimestre, jour
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                    return number + (number === 1 ? 'er' : 'e');

                // Words with feminine grammatical gender: semaine
                case 'w':
                case 'W':
                    return number + (number === 1 ? 're' : 'e');
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fr;

})));


/***/ }),
/* 563 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_');

    var fy = moment.defineLocale('fy', {
        months : 'jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },
        monthsParseExact : true,
        weekdays : 'snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon'.split('_'),
        weekdaysShort : 'si._mo._ti._wo._to._fr._so.'.split('_'),
        weekdaysMin : 'Si_Mo_Ti_Wo_To_Fr_So'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[hjoed om] LT',
            nextDay: '[moarn om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[juster om] LT',
            lastWeek: '[ôfrûne] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'oer %s',
            past : '%s lyn',
            s : 'in pear sekonden',
            ss : '%d sekonden',
            m : 'ien minút',
            mm : '%d minuten',
            h : 'ien oere',
            hh : '%d oeren',
            d : 'ien dei',
            dd : '%d dagen',
            M : 'ien moanne',
            MM : '%d moannen',
            y : 'ien jier',
            yy : '%d jierren'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return fy;

})));


/***/ }),
/* 564 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'Am Faoilleach', 'An Gearran', 'Am Màrt', 'An Giblean', 'An Cèitean', 'An t-Ògmhios', 'An t-Iuchar', 'An Lùnastal', 'An t-Sultain', 'An Dàmhair', 'An t-Samhain', 'An Dùbhlachd'
    ];

    var monthsShort = ['Faoi', 'Gear', 'Màrt', 'Gibl', 'Cèit', 'Ògmh', 'Iuch', 'Lùn', 'Sult', 'Dàmh', 'Samh', 'Dùbh'];

    var weekdays = ['Didòmhnaich', 'Diluain', 'Dimàirt', 'Diciadain', 'Diardaoin', 'Dihaoine', 'Disathairne'];

    var weekdaysShort = ['Did', 'Dil', 'Dim', 'Dic', 'Dia', 'Dih', 'Dis'];

    var weekdaysMin = ['Dò', 'Lu', 'Mà', 'Ci', 'Ar', 'Ha', 'Sa'];

    var gd = moment.defineLocale('gd', {
        months : months,
        monthsShort : monthsShort,
        monthsParseExact : true,
        weekdays : weekdays,
        weekdaysShort : weekdaysShort,
        weekdaysMin : weekdaysMin,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[An-diugh aig] LT',
            nextDay : '[A-màireach aig] LT',
            nextWeek : 'dddd [aig] LT',
            lastDay : '[An-dè aig] LT',
            lastWeek : 'dddd [seo chaidh] [aig] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ann an %s',
            past : 'bho chionn %s',
            s : 'beagan diogan',
            ss : '%d diogan',
            m : 'mionaid',
            mm : '%d mionaidean',
            h : 'uair',
            hh : '%d uairean',
            d : 'latha',
            dd : '%d latha',
            M : 'mìos',
            MM : '%d mìosan',
            y : 'bliadhna',
            yy : '%d bliadhna'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(d|na|mh)/,
        ordinal : function (number) {
            var output = number === 1 ? 'd' : number % 10 === 2 ? 'na' : 'mh';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gd;

})));


/***/ }),
/* 565 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var gl = moment.defineLocale('gl', {
        months : 'xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro'.split('_'),
        monthsShort : 'xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'domingo_luns_martes_mércores_xoves_venres_sábado'.split('_'),
        weekdaysShort : 'dom._lun._mar._mér._xov._ven._sáb.'.split('_'),
        weekdaysMin : 'do_lu_ma_mé_xo_ve_sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY H:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY H:mm'
        },
        calendar : {
            sameDay : function () {
                return '[hoxe ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextDay : function () {
                return '[mañá ' + ((this.hours() !== 1) ? 'ás' : 'á') + '] LT';
            },
            nextWeek : function () {
                return 'dddd [' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            lastDay : function () {
                return '[onte ' + ((this.hours() !== 1) ? 'á' : 'a') + '] LT';
            },
            lastWeek : function () {
                return '[o] dddd [pasado ' + ((this.hours() !== 1) ? 'ás' : 'a') + '] LT';
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : function (str) {
                if (str.indexOf('un') === 0) {
                    return 'n' + str;
                }
                return 'en ' + str;
            },
            past : 'hai %s',
            s : 'uns segundos',
            ss : '%d segundos',
            m : 'un minuto',
            mm : '%d minutos',
            h : 'unha hora',
            hh : '%d horas',
            d : 'un día',
            dd : '%d días',
            M : 'un mes',
            MM : '%d meses',
            y : 'un ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return gl;

})));


/***/ }),
/* 566 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['thodde secondanim', 'thodde second'],
            'ss': [number + ' secondanim', number + ' second'],
            'm': ['eka mintan', 'ek minute'],
            'mm': [number + ' mintanim', number + ' mintam'],
            'h': ['eka horan', 'ek hor'],
            'hh': [number + ' horanim', number + ' horam'],
            'd': ['eka disan', 'ek dis'],
            'dd': [number + ' disanim', number + ' dis'],
            'M': ['eka mhoinean', 'ek mhoino'],
            'MM': [number + ' mhoineanim', number + ' mhoine'],
            'y': ['eka vorsan', 'ek voros'],
            'yy': [number + ' vorsanim', number + ' vorsam']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }

    var gomLatn = moment.defineLocale('gom-latn', {
        months : 'Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr'.split('_'),
        monthsShort : 'Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays : 'Aitar_Somar_Mongllar_Budvar_Brestar_Sukrar_Son\'var'.split('_'),
        weekdaysShort : 'Ait._Som._Mon._Bud._Bre._Suk._Son.'.split('_'),
        weekdaysMin : 'Ai_Sm_Mo_Bu_Br_Su_Sn'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'A h:mm [vazta]',
            LTS : 'A h:mm:ss [vazta]',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY A h:mm [vazta]',
            LLLL : 'dddd, MMMM[achea] Do, YYYY, A h:mm [vazta]',
            llll: 'ddd, D MMM YYYY, A h:mm [vazta]'
        },
        calendar : {
            sameDay: '[Aiz] LT',
            nextDay: '[Faleam] LT',
            nextWeek: '[Ieta to] dddd[,] LT',
            lastDay: '[Kal] LT',
            lastWeek: '[Fatlo] dddd[,] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s',
            past : '%s adim',
            s : processRelativeTime,
            ss : processRelativeTime,
            m : processRelativeTime,
            mm : processRelativeTime,
            h : processRelativeTime,
            hh : processRelativeTime,
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse : /\d{1,2}(er)/,
        ordinal : function (number, period) {
            switch (period) {
                // the ordinal 'er' only applies to day of the month
                case 'D':
                    return number + 'er';
                default:
                case 'M':
                case 'Q':
                case 'DDD':
                case 'd':
                case 'w':
                case 'W':
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        },
        meridiemParse: /rati|sokalli|donparam|sanje/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'rati') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'sokalli') {
                return hour;
            } else if (meridiem === 'donparam') {
                return hour > 12 ? hour : hour + 12;
            } else if (meridiem === 'sanje') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'rati';
            } else if (hour < 12) {
                return 'sokalli';
            } else if (hour < 16) {
                return 'donparam';
            } else if (hour < 20) {
                return 'sanje';
            } else {
                return 'rati';
            }
        }
    });

    return gomLatn;

})));


/***/ }),
/* 567 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
            '1': '૧',
            '2': '૨',
            '3': '૩',
            '4': '૪',
            '5': '૫',
            '6': '૬',
            '7': '૭',
            '8': '૮',
            '9': '૯',
            '0': '૦'
        },
        numberMap = {
            '૧': '1',
            '૨': '2',
            '૩': '3',
            '૪': '4',
            '૫': '5',
            '૬': '6',
            '૭': '7',
            '૮': '8',
            '૯': '9',
            '૦': '0'
        };

    var gu = moment.defineLocale('gu', {
        months: 'જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર'.split('_'),
        monthsShort: 'જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.'.split('_'),
        monthsParseExact: true,
        weekdays: 'રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર'.split('_'),
        weekdaysShort: 'રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ'.split('_'),
        weekdaysMin: 'ર_સો_મં_બુ_ગુ_શુ_શ'.split('_'),
        longDateFormat: {
            LT: 'A h:mm વાગ્યે',
            LTS: 'A h:mm:ss વાગ્યે',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY, A h:mm વાગ્યે',
            LLLL: 'dddd, D MMMM YYYY, A h:mm વાગ્યે'
        },
        calendar: {
            sameDay: '[આજ] LT',
            nextDay: '[કાલે] LT',
            nextWeek: 'dddd, LT',
            lastDay: '[ગઇકાલે] LT',
            lastWeek: '[પાછલા] dddd, LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s મા',
            past: '%s પેહલા',
            s: 'અમુક પળો',
            ss: '%d સેકંડ',
            m: 'એક મિનિટ',
            mm: '%d મિનિટ',
            h: 'એક કલાક',
            hh: '%d કલાક',
            d: 'એક દિવસ',
            dd: '%d દિવસ',
            M: 'એક મહિનો',
            MM: '%d મહિનો',
            y: 'એક વર્ષ',
            yy: '%d વર્ષ'
        },
        preparse: function (string) {
            return string.replace(/[૧૨૩૪૫૬૭૮૯૦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Gujarati notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Gujarati.
        meridiemParse: /રાત|બપોર|સવાર|સાંજ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'રાત') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'સવાર') {
                return hour;
            } else if (meridiem === 'બપોર') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'સાંજ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'રાત';
            } else if (hour < 10) {
                return 'સવાર';
            } else if (hour < 17) {
                return 'બપોર';
            } else if (hour < 20) {
                return 'સાંજ';
            } else {
                return 'રાત';
            }
        },
        week: {
            dow: 0, // Sunday is the first day of the week.
            doy: 6 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return gu;

})));


/***/ }),
/* 568 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var he = moment.defineLocale('he', {
        months : 'ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר'.split('_'),
        monthsShort : 'ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳'.split('_'),
        weekdays : 'ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת'.split('_'),
        weekdaysShort : 'א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳'.split('_'),
        weekdaysMin : 'א_ב_ג_ד_ה_ו_ש'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [ב]MMMM YYYY',
            LLL : 'D [ב]MMMM YYYY HH:mm',
            LLLL : 'dddd, D [ב]MMMM YYYY HH:mm',
            l : 'D/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[היום ב־]LT',
            nextDay : '[מחר ב־]LT',
            nextWeek : 'dddd [בשעה] LT',
            lastDay : '[אתמול ב־]LT',
            lastWeek : '[ביום] dddd [האחרון בשעה] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'בעוד %s',
            past : 'לפני %s',
            s : 'מספר שניות',
            ss : '%d שניות',
            m : 'דקה',
            mm : '%d דקות',
            h : 'שעה',
            hh : function (number) {
                if (number === 2) {
                    return 'שעתיים';
                }
                return number + ' שעות';
            },
            d : 'יום',
            dd : function (number) {
                if (number === 2) {
                    return 'יומיים';
                }
                return number + ' ימים';
            },
            M : 'חודש',
            MM : function (number) {
                if (number === 2) {
                    return 'חודשיים';
                }
                return number + ' חודשים';
            },
            y : 'שנה',
            yy : function (number) {
                if (number === 2) {
                    return 'שנתיים';
                } else if (number % 10 === 0 && number !== 10) {
                    return number + ' שנה';
                }
                return number + ' שנים';
            }
        },
        meridiemParse: /אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,
        isPM : function (input) {
            return /^(אחה"צ|אחרי הצהריים|בערב)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 5) {
                return 'לפנות בוקר';
            } else if (hour < 10) {
                return 'בבוקר';
            } else if (hour < 12) {
                return isLower ? 'לפנה"צ' : 'לפני הצהריים';
            } else if (hour < 18) {
                return isLower ? 'אחה"צ' : 'אחרי הצהריים';
            } else {
                return 'בערב';
            }
        }
    });

    return he;

})));


/***/ }),
/* 569 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var hi = moment.defineLocale('hi', {
        months : 'जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर'.split('_'),
        monthsShort : 'जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.'.split('_'),
        monthsParseExact: true,
        weekdays : 'रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm बजे',
            LTS : 'A h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, A h:mm बजे'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[कल] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[कल] LT',
            lastWeek : '[पिछले] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s में',
            past : '%s पहले',
            s : 'कुछ ही क्षण',
            ss : '%d सेकंड',
            m : 'एक मिनट',
            mm : '%d मिनट',
            h : 'एक घंटा',
            hh : '%d घंटे',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महीने',
            MM : '%d महीने',
            y : 'एक वर्ष',
            yy : '%d वर्ष'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Hindi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Hindi.
        meridiemParse: /रात|सुबह|दोपहर|शाम/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सुबह') {
                return hour;
            } else if (meridiem === 'दोपहर') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'शाम') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात';
            } else if (hour < 10) {
                return 'सुबह';
            } else if (hour < 17) {
                return 'दोपहर';
            } else if (hour < 20) {
                return 'शाम';
            } else {
                return 'रात';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return hi;

})));


/***/ }),
/* 570 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                if (number === 1) {
                    result += 'sekunda';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sekunde';
                } else {
                    result += 'sekundi';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'jedna minuta' : 'jedne minute';
            case 'mm':
                if (number === 1) {
                    result += 'minuta';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'minute';
                } else {
                    result += 'minuta';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'jedan sat' : 'jednog sata';
            case 'hh':
                if (number === 1) {
                    result += 'sat';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'sata';
                } else {
                    result += 'sati';
                }
                return result;
            case 'dd':
                if (number === 1) {
                    result += 'dan';
                } else {
                    result += 'dana';
                }
                return result;
            case 'MM':
                if (number === 1) {
                    result += 'mjesec';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'mjeseca';
                } else {
                    result += 'mjeseci';
                }
                return result;
            case 'yy':
                if (number === 1) {
                    result += 'godina';
                } else if (number === 2 || number === 3 || number === 4) {
                    result += 'godine';
                } else {
                    result += 'godina';
                }
                return result;
        }
    }

    var hr = moment.defineLocale('hr', {
        months : {
            format: 'siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca'.split('_'),
            standalone: 'siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac'.split('_')
        },
        monthsShort : 'sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort : 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin : 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danas u] LT',
            nextDay  : '[sutra u] LT',
            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[jučer u] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                        return '[prošlu] dddd [u] LT';
                    case 6:
                        return '[prošle] [subote] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prošli] dddd [u] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'par sekundi',
            ss     : translate,
            m      : translate,
            mm     : translate,
            h      : translate,
            hh     : translate,
            d      : 'dan',
            dd     : translate,
            M      : 'mjesec',
            MM     : translate,
            y      : 'godinu',
            yy     : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return hr;

})));


/***/ }),
/* 571 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var weekEndings = 'vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton'.split(' ');
    function translate(number, withoutSuffix, key, isFuture) {
        var num = number;
        switch (key) {
            case 's':
                return (isFuture || withoutSuffix) ? 'néhány másodperc' : 'néhány másodperce';
            case 'ss':
                return num + (isFuture || withoutSuffix) ? ' másodperc' : ' másodperce';
            case 'm':
                return 'egy' + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'mm':
                return num + (isFuture || withoutSuffix ? ' perc' : ' perce');
            case 'h':
                return 'egy' + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'hh':
                return num + (isFuture || withoutSuffix ? ' óra' : ' órája');
            case 'd':
                return 'egy' + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'dd':
                return num + (isFuture || withoutSuffix ? ' nap' : ' napja');
            case 'M':
                return 'egy' + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'MM':
                return num + (isFuture || withoutSuffix ? ' hónap' : ' hónapja');
            case 'y':
                return 'egy' + (isFuture || withoutSuffix ? ' év' : ' éve');
            case 'yy':
                return num + (isFuture || withoutSuffix ? ' év' : ' éve');
        }
        return '';
    }
    function week(isFuture) {
        return (isFuture ? '' : '[múlt] ') + '[' + weekEndings[this.day()] + '] LT[-kor]';
    }

    var hu = moment.defineLocale('hu', {
        months : 'január_február_március_április_május_június_július_augusztus_szeptember_október_november_december'.split('_'),
        monthsShort : 'jan_feb_márc_ápr_máj_jún_júl_aug_szept_okt_nov_dec'.split('_'),
        weekdays : 'vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat'.split('_'),
        weekdaysShort : 'vas_hét_kedd_sze_csüt_pén_szo'.split('_'),
        weekdaysMin : 'v_h_k_sze_cs_p_szo'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY. MMMM D.',
            LLL : 'YYYY. MMMM D. H:mm',
            LLLL : 'YYYY. MMMM D., dddd H:mm'
        },
        meridiemParse: /de|du/i,
        isPM: function (input) {
            return input.charAt(1).toLowerCase() === 'u';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower === true ? 'de' : 'DE';
            } else {
                return isLower === true ? 'du' : 'DU';
            }
        },
        calendar : {
            sameDay : '[ma] LT[-kor]',
            nextDay : '[holnap] LT[-kor]',
            nextWeek : function () {
                return week.call(this, true);
            },
            lastDay : '[tegnap] LT[-kor]',
            lastWeek : function () {
                return week.call(this, false);
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s múlva',
            past : '%s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return hu;

})));


/***/ }),
/* 572 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var hyAm = moment.defineLocale('hy-am', {
        months : {
            format: 'հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի'.split('_'),
            standalone: 'հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր'.split('_')
        },
        monthsShort : 'հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ'.split('_'),
        weekdays : 'կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ'.split('_'),
        weekdaysShort : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        weekdaysMin : 'կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY թ.',
            LLL : 'D MMMM YYYY թ., HH:mm',
            LLLL : 'dddd, D MMMM YYYY թ., HH:mm'
        },
        calendar : {
            sameDay: '[այսօր] LT',
            nextDay: '[վաղը] LT',
            lastDay: '[երեկ] LT',
            nextWeek: function () {
                return 'dddd [օրը ժամը] LT';
            },
            lastWeek: function () {
                return '[անցած] dddd [օրը ժամը] LT';
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s հետո',
            past : '%s առաջ',
            s : 'մի քանի վայրկյան',
            ss : '%d վայրկյան',
            m : 'րոպե',
            mm : '%d րոպե',
            h : 'ժամ',
            hh : '%d ժամ',
            d : 'օր',
            dd : '%d օր',
            M : 'ամիս',
            MM : '%d ամիս',
            y : 'տարի',
            yy : '%d տարի'
        },
        meridiemParse: /գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,
        isPM: function (input) {
            return /^(ցերեկվա|երեկոյան)$/.test(input);
        },
        meridiem : function (hour) {
            if (hour < 4) {
                return 'գիշերվա';
            } else if (hour < 12) {
                return 'առավոտվա';
            } else if (hour < 17) {
                return 'ցերեկվա';
            } else {
                return 'երեկոյան';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}|\d{1,2}-(ին|րդ)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'DDD':
                case 'w':
                case 'W':
                case 'DDDo':
                    if (number === 1) {
                        return number + '-ին';
                    }
                    return number + '-րդ';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return hyAm;

})));


/***/ }),
/* 573 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var id = moment.defineLocale('id', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Rab_Kam_Jum_Sab'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|siang|sore|malam/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'siang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sore' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'siang';
            } else if (hours < 19) {
                return 'sore';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Besok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kemarin pukul] LT',
            lastWeek : 'dddd [lalu pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lalu',
            s : 'beberapa detik',
            ss : '%d detik',
            m : 'semenit',
            mm : '%d menit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return id;

})));


/***/ }),
/* 574 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(n) {
        if (n % 100 === 11) {
            return true;
        } else if (n % 10 === 1) {
            return false;
        }
        return true;
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nokkrar sekúndur' : 'nokkrum sekúndum';
            case 'ss':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'sekúndur' : 'sekúndum');
                }
                return result + 'sekúnda';
            case 'm':
                return withoutSuffix ? 'mínúta' : 'mínútu';
            case 'mm':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'mínútur' : 'mínútum');
                } else if (withoutSuffix) {
                    return result + 'mínúta';
                }
                return result + 'mínútu';
            case 'hh':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'klukkustundir' : 'klukkustundum');
                }
                return result + 'klukkustund';
            case 'd':
                if (withoutSuffix) {
                    return 'dagur';
                }
                return isFuture ? 'dag' : 'degi';
            case 'dd':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'dagar';
                    }
                    return result + (isFuture ? 'daga' : 'dögum');
                } else if (withoutSuffix) {
                    return result + 'dagur';
                }
                return result + (isFuture ? 'dag' : 'degi');
            case 'M':
                if (withoutSuffix) {
                    return 'mánuður';
                }
                return isFuture ? 'mánuð' : 'mánuði';
            case 'MM':
                if (plural(number)) {
                    if (withoutSuffix) {
                        return result + 'mánuðir';
                    }
                    return result + (isFuture ? 'mánuði' : 'mánuðum');
                } else if (withoutSuffix) {
                    return result + 'mánuður';
                }
                return result + (isFuture ? 'mánuð' : 'mánuði');
            case 'y':
                return withoutSuffix || isFuture ? 'ár' : 'ári';
            case 'yy':
                if (plural(number)) {
                    return result + (withoutSuffix || isFuture ? 'ár' : 'árum');
                }
                return result + (withoutSuffix || isFuture ? 'ár' : 'ári');
        }
    }

    var is = moment.defineLocale('is', {
        months : 'janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des'.split('_'),
        weekdays : 'sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur'.split('_'),
        weekdaysShort : 'sun_mán_þri_mið_fim_fös_lau'.split('_'),
        weekdaysMin : 'Su_Má_Þr_Mi_Fi_Fö_La'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd, D. MMMM YYYY [kl.] H:mm'
        },
        calendar : {
            sameDay : '[í dag kl.] LT',
            nextDay : '[á morgun kl.] LT',
            nextWeek : 'dddd [kl.] LT',
            lastDay : '[í gær kl.] LT',
            lastWeek : '[síðasta] dddd [kl.] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'eftir %s',
            past : 'fyrir %s síðan',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : 'klukkustund',
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return is;

})));


/***/ }),
/* 575 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var it = moment.defineLocale('it', {
        months : 'gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre'.split('_'),
        monthsShort : 'gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic'.split('_'),
        weekdays : 'domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato'.split('_'),
        weekdaysShort : 'dom_lun_mar_mer_gio_ven_sab'.split('_'),
        weekdaysMin : 'do_lu_ma_me_gi_ve_sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Oggi alle] LT',
            nextDay: '[Domani alle] LT',
            nextWeek: 'dddd [alle] LT',
            lastDay: '[Ieri alle] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[la scorsa] dddd [alle] LT';
                    default:
                        return '[lo scorso] dddd [alle] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : function (s) {
                return ((/^[0-9].+$/).test(s) ? 'tra' : 'in') + ' ' + s;
            },
            past : '%s fa',
            s : 'alcuni secondi',
            ss : '%d secondi',
            m : 'un minuto',
            mm : '%d minuti',
            h : 'un\'ora',
            hh : '%d ore',
            d : 'un giorno',
            dd : '%d giorni',
            M : 'un mese',
            MM : '%d mesi',
            y : 'un anno',
            yy : '%d anni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return it;

})));


/***/ }),
/* 576 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ja = moment.defineLocale('ja', {
        months : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日'.split('_'),
        weekdaysShort : '日_月_火_水_木_金_土'.split('_'),
        weekdaysMin : '日_月_火_水_木_金_土'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日 dddd HH:mm',
            l : 'YYYY/MM/DD',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日(ddd) HH:mm'
        },
        meridiemParse: /午前|午後/i,
        isPM : function (input) {
            return input === '午後';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return '午前';
            } else {
                return '午後';
            }
        },
        calendar : {
            sameDay : '[今日] LT',
            nextDay : '[明日] LT',
            nextWeek : function (now) {
                if (now.week() < this.week()) {
                    return '[来週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            lastDay : '[昨日] LT',
            lastWeek : function (now) {
                if (this.week() < now.week()) {
                    return '[先週]dddd LT';
                } else {
                    return 'dddd LT';
                }
            },
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse : /\d{1,2}日/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s後',
            past : '%s前',
            s : '数秒',
            ss : '%d秒',
            m : '1分',
            mm : '%d分',
            h : '1時間',
            hh : '%d時間',
            d : '1日',
            dd : '%d日',
            M : '1ヶ月',
            MM : '%dヶ月',
            y : '1年',
            yy : '%d年'
        }
    });

    return ja;

})));


/***/ }),
/* 577 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var jv = moment.defineLocale('jv', {
        months : 'Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember'.split('_'),
        monthsShort : 'Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des'.split('_'),
        weekdays : 'Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu'.split('_'),
        weekdaysShort : 'Min_Sen_Sel_Reb_Kem_Jem_Sep'.split('_'),
        weekdaysMin : 'Mg_Sn_Sl_Rb_Km_Jm_Sp'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /enjing|siyang|sonten|ndalu/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'enjing') {
                return hour;
            } else if (meridiem === 'siyang') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'sonten' || meridiem === 'ndalu') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'enjing';
            } else if (hours < 15) {
                return 'siyang';
            } else if (hours < 19) {
                return 'sonten';
            } else {
                return 'ndalu';
            }
        },
        calendar : {
            sameDay : '[Dinten puniko pukul] LT',
            nextDay : '[Mbenjang pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kala wingi pukul] LT',
            lastWeek : 'dddd [kepengker pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'wonten ing %s',
            past : '%s ingkang kepengker',
            s : 'sawetawis detik',
            ss : '%d detik',
            m : 'setunggal menit',
            mm : '%d menit',
            h : 'setunggal jam',
            hh : '%d jam',
            d : 'sedinten',
            dd : '%d dinten',
            M : 'sewulan',
            MM : '%d wulan',
            y : 'setaun',
            yy : '%d taun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return jv;

})));


/***/ }),
/* 578 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ka = moment.defineLocale('ka', {
        months : {
            standalone: 'იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი'.split('_'),
            format: 'იანვარს_თებერვალს_მარტს_აპრილის_მაისს_ივნისს_ივლისს_აგვისტს_სექტემბერს_ოქტომბერს_ნოემბერს_დეკემბერს'.split('_')
        },
        monthsShort : 'იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ'.split('_'),
        weekdays : {
            standalone: 'კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი'.split('_'),
            format: 'კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს'.split('_'),
            isFormat: /(წინა|შემდეგ)/
        },
        weekdaysShort : 'კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ'.split('_'),
        weekdaysMin : 'კვ_ორ_სა_ოთ_ხუ_პა_შა'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[დღეს] LT[-ზე]',
            nextDay : '[ხვალ] LT[-ზე]',
            lastDay : '[გუშინ] LT[-ზე]',
            nextWeek : '[შემდეგ] dddd LT[-ზე]',
            lastWeek : '[წინა] dddd LT-ზე',
            sameElse : 'L'
        },
        relativeTime : {
            future : function (s) {
                return (/(წამი|წუთი|საათი|წელი)/).test(s) ?
                    s.replace(/ი$/, 'ში') :
                    s + 'ში';
            },
            past : function (s) {
                if ((/(წამი|წუთი|საათი|დღე|თვე)/).test(s)) {
                    return s.replace(/(ი|ე)$/, 'ის წინ');
                }
                if ((/წელი/).test(s)) {
                    return s.replace(/წელი$/, 'წლის წინ');
                }
            },
            s : 'რამდენიმე წამი',
            ss : '%d წამი',
            m : 'წუთი',
            mm : '%d წუთი',
            h : 'საათი',
            hh : '%d საათი',
            d : 'დღე',
            dd : '%d დღე',
            M : 'თვე',
            MM : '%d თვე',
            y : 'წელი',
            yy : '%d წელი'
        },
        dayOfMonthOrdinalParse: /0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,
        ordinal : function (number) {
            if (number === 0) {
                return number;
            }
            if (number === 1) {
                return number + '-ლი';
            }
            if ((number < 20) || (number <= 100 && (number % 20 === 0)) || (number % 100 === 0)) {
                return 'მე-' + number;
            }
            return number + '-ე';
        },
        week : {
            dow : 1,
            doy : 7
        }
    });

    return ka;

})));


/***/ }),
/* 579 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-ші',
        1: '-ші',
        2: '-ші',
        3: '-ші',
        4: '-ші',
        5: '-ші',
        6: '-шы',
        7: '-ші',
        8: '-ші',
        9: '-шы',
        10: '-шы',
        20: '-шы',
        30: '-шы',
        40: '-шы',
        50: '-ші',
        60: '-шы',
        70: '-ші',
        80: '-ші',
        90: '-шы',
        100: '-ші'
    };

    var kk = moment.defineLocale('kk', {
        months : 'қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан'.split('_'),
        monthsShort : 'қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел'.split('_'),
        weekdays : 'жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі'.split('_'),
        weekdaysShort : 'жек_дүй_сей_сәр_бей_жұм_сен'.split('_'),
        weekdaysMin : 'жк_дй_сй_ср_бй_жм_сн'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Бүгін сағат] LT',
            nextDay : '[Ертең сағат] LT',
            nextWeek : 'dddd [сағат] LT',
            lastDay : '[Кеше сағат] LT',
            lastWeek : '[Өткен аптаның] dddd [сағат] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ішінде',
            past : '%s бұрын',
            s : 'бірнеше секунд',
            ss : '%d секунд',
            m : 'бір минут',
            mm : '%d минут',
            h : 'бір сағат',
            hh : '%d сағат',
            d : 'бір күн',
            dd : '%d күн',
            M : 'бір ай',
            MM : '%d ай',
            y : 'бір жыл',
            yy : '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ші|шы)/,
        ordinal : function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return kk;

})));


/***/ }),
/* 580 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '១',
        '2': '២',
        '3': '៣',
        '4': '៤',
        '5': '៥',
        '6': '៦',
        '7': '៧',
        '8': '៨',
        '9': '៩',
        '0': '០'
    }, numberMap = {
        '១': '1',
        '២': '2',
        '៣': '3',
        '៤': '4',
        '៥': '5',
        '៦': '6',
        '៧': '7',
        '៨': '8',
        '៩': '9',
        '០': '0'
    };

    var km = moment.defineLocale('km', {
        months: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        monthsShort: 'មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ'.split(
            '_'
        ),
        weekdays: 'អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍'.split('_'),
        weekdaysShort: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysMin: 'អា_ច_អ_ព_ព្រ_សុ_ស'.split('_'),
        weekdaysParseExact: true,
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd, D MMMM YYYY HH:mm'
        },
        meridiemParse: /ព្រឹក|ល្ងាច/,
        isPM: function (input) {
            return input === 'ល្ងាច';
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ព្រឹក';
            } else {
                return 'ល្ងាច';
            }
        },
        calendar: {
            sameDay: '[ថ្ងៃនេះ ម៉ោង] LT',
            nextDay: '[ស្អែក ម៉ោង] LT',
            nextWeek: 'dddd [ម៉ោង] LT',
            lastDay: '[ម្សិលមិញ ម៉ោង] LT',
            lastWeek: 'dddd [សប្តាហ៍មុន] [ម៉ោង] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%sទៀត',
            past: '%sមុន',
            s: 'ប៉ុន្មានវិនាទី',
            ss: '%d វិនាទី',
            m: 'មួយនាទី',
            mm: '%d នាទី',
            h: 'មួយម៉ោង',
            hh: '%d ម៉ោង',
            d: 'មួយថ្ងៃ',
            dd: '%d ថ្ងៃ',
            M: 'មួយខែ',
            MM: '%d ខែ',
            y: 'មួយឆ្នាំ',
            yy: '%d ឆ្នាំ'
        },
        dayOfMonthOrdinalParse : /ទី\d{1,2}/,
        ordinal : 'ទី%d',
        preparse: function (string) {
            return string.replace(/[១២៣៤៥៦៧៨៩០]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return km;

})));


/***/ }),
/* 581 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '೧',
        '2': '೨',
        '3': '೩',
        '4': '೪',
        '5': '೫',
        '6': '೬',
        '7': '೭',
        '8': '೮',
        '9': '೯',
        '0': '೦'
    },
    numberMap = {
        '೧': '1',
        '೨': '2',
        '೩': '3',
        '೪': '4',
        '೫': '5',
        '೬': '6',
        '೭': '7',
        '೮': '8',
        '೯': '9',
        '೦': '0'
    };

    var kn = moment.defineLocale('kn', {
        months : 'ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್'.split('_'),
        monthsShort : 'ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ'.split('_'),
        monthsParseExact: true,
        weekdays : 'ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ'.split('_'),
        weekdaysShort : 'ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ'.split('_'),
        weekdaysMin : 'ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[ಇಂದು] LT',
            nextDay : '[ನಾಳೆ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ನಿನ್ನೆ] LT',
            lastWeek : '[ಕೊನೆಯ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ನಂತರ',
            past : '%s ಹಿಂದೆ',
            s : 'ಕೆಲವು ಕ್ಷಣಗಳು',
            ss : '%d ಸೆಕೆಂಡುಗಳು',
            m : 'ಒಂದು ನಿಮಿಷ',
            mm : '%d ನಿಮಿಷ',
            h : 'ಒಂದು ಗಂಟೆ',
            hh : '%d ಗಂಟೆ',
            d : 'ಒಂದು ದಿನ',
            dd : '%d ದಿನ',
            M : 'ಒಂದು ತಿಂಗಳು',
            MM : '%d ತಿಂಗಳು',
            y : 'ಒಂದು ವರ್ಷ',
            yy : '%d ವರ್ಷ'
        },
        preparse: function (string) {
            return string.replace(/[೧೨೩೪೫೬೭೮೯೦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ರಾತ್ರಿ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ಬೆಳಿಗ್ಗೆ') {
                return hour;
            } else if (meridiem === 'ಮಧ್ಯಾಹ್ನ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ಸಂಜೆ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ರಾತ್ರಿ';
            } else if (hour < 10) {
                return 'ಬೆಳಿಗ್ಗೆ';
            } else if (hour < 17) {
                return 'ಮಧ್ಯಾಹ್ನ';
            } else if (hour < 20) {
                return 'ಸಂಜೆ';
            } else {
                return 'ರಾತ್ರಿ';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ನೇ)/,
        ordinal : function (number) {
            return number + 'ನೇ';
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return kn;

})));


/***/ }),
/* 582 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ko = moment.defineLocale('ko', {
        months : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        monthsShort : '1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월'.split('_'),
        weekdays : '일요일_월요일_화요일_수요일_목요일_금요일_토요일'.split('_'),
        weekdaysShort : '일_월_화_수_목_금_토'.split('_'),
        weekdaysMin : '일_월_화_수_목_금_토'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'YYYY.MM.DD.',
            LL : 'YYYY년 MMMM D일',
            LLL : 'YYYY년 MMMM D일 A h:mm',
            LLLL : 'YYYY년 MMMM D일 dddd A h:mm',
            l : 'YYYY.MM.DD.',
            ll : 'YYYY년 MMMM D일',
            lll : 'YYYY년 MMMM D일 A h:mm',
            llll : 'YYYY년 MMMM D일 dddd A h:mm'
        },
        calendar : {
            sameDay : '오늘 LT',
            nextDay : '내일 LT',
            nextWeek : 'dddd LT',
            lastDay : '어제 LT',
            lastWeek : '지난주 dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s 후',
            past : '%s 전',
            s : '몇 초',
            ss : '%d초',
            m : '1분',
            mm : '%d분',
            h : '한 시간',
            hh : '%d시간',
            d : '하루',
            dd : '%d일',
            M : '한 달',
            MM : '%d달',
            y : '일 년',
            yy : '%d년'
        },
        dayOfMonthOrdinalParse : /\d{1,2}(일|월|주)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '일';
                case 'M':
                    return number + '월';
                case 'w':
                case 'W':
                    return number + '주';
                default:
                    return number;
            }
        },
        meridiemParse : /오전|오후/,
        isPM : function (token) {
            return token === '오후';
        },
        meridiem : function (hour, minute, isUpper) {
            return hour < 12 ? '오전' : '오후';
        }
    });

    return ko;

})));


/***/ }),
/* 583 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-чү',
        1: '-чи',
        2: '-чи',
        3: '-чү',
        4: '-чү',
        5: '-чи',
        6: '-чы',
        7: '-чи',
        8: '-чи',
        9: '-чу',
        10: '-чу',
        20: '-чы',
        30: '-чу',
        40: '-чы',
        50: '-чү',
        60: '-чы',
        70: '-чи',
        80: '-чи',
        90: '-чу',
        100: '-чү'
    };

    var ky = moment.defineLocale('ky', {
        months : 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_'),
        monthsShort : 'янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби'.split('_'),
        weekdaysShort : 'Жек_Дүй_Шей_Шар_Бей_Жум_Ише'.split('_'),
        weekdaysMin : 'Жк_Дй_Шй_Шр_Бй_Жм_Иш'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Бүгүн саат] LT',
            nextDay : '[Эртең саат] LT',
            nextWeek : 'dddd [саат] LT',
            lastDay : '[Кече саат] LT',
            lastWeek : '[Өткен аптанын] dddd [күнү] [саат] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ичинде',
            past : '%s мурун',
            s : 'бирнече секунд',
            ss : '%d секунд',
            m : 'бир мүнөт',
            mm : '%d мүнөт',
            h : 'бир саат',
            hh : '%d саат',
            d : 'бир күн',
            dd : '%d күн',
            M : 'бир ай',
            MM : '%d ай',
            y : 'бир жыл',
            yy : '%d жыл'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(чи|чы|чү|чу)/,
        ordinal : function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ky;

})));


/***/ }),
/* 584 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            'm': ['eng Minutt', 'enger Minutt'],
            'h': ['eng Stonn', 'enger Stonn'],
            'd': ['een Dag', 'engem Dag'],
            'M': ['ee Mount', 'engem Mount'],
            'y': ['ee Joer', 'engem Joer']
        };
        return withoutSuffix ? format[key][0] : format[key][1];
    }
    function processFutureTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'a ' + string;
        }
        return 'an ' + string;
    }
    function processPastTime(string) {
        var number = string.substr(0, string.indexOf(' '));
        if (eifelerRegelAppliesToNumber(number)) {
            return 'viru ' + string;
        }
        return 'virun ' + string;
    }
    /**
     * Returns true if the word before the given number loses the '-n' ending.
     * e.g. 'an 10 Deeg' but 'a 5 Deeg'
     *
     * @param number {integer}
     * @returns {boolean}
     */
    function eifelerRegelAppliesToNumber(number) {
        number = parseInt(number, 10);
        if (isNaN(number)) {
            return false;
        }
        if (number < 0) {
            // Negative Number --> always true
            return true;
        } else if (number < 10) {
            // Only 1 digit
            if (4 <= number && number <= 7) {
                return true;
            }
            return false;
        } else if (number < 100) {
            // 2 digits
            var lastDigit = number % 10, firstDigit = number / 10;
            if (lastDigit === 0) {
                return eifelerRegelAppliesToNumber(firstDigit);
            }
            return eifelerRegelAppliesToNumber(lastDigit);
        } else if (number < 10000) {
            // 3 or 4 digits --> recursively check first digit
            while (number >= 10) {
                number = number / 10;
            }
            return eifelerRegelAppliesToNumber(number);
        } else {
            // Anything larger than 4 digits: recursively check first n-3 digits
            number = number / 1000;
            return eifelerRegelAppliesToNumber(number);
        }
    }

    var lb = moment.defineLocale('lb', {
        months: 'Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember'.split('_'),
        monthsShort: 'Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.'.split('_'),
        monthsParseExact : true,
        weekdays: 'Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg'.split('_'),
        weekdaysShort: 'So._Mé._Dë._Më._Do._Fr._Sa.'.split('_'),
        weekdaysMin: 'So_Mé_Dë_Më_Do_Fr_Sa'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm [Auer]',
            LTS: 'H:mm:ss [Auer]',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm [Auer]',
            LLLL: 'dddd, D. MMMM YYYY H:mm [Auer]'
        },
        calendar: {
            sameDay: '[Haut um] LT',
            sameElse: 'L',
            nextDay: '[Muer um] LT',
            nextWeek: 'dddd [um] LT',
            lastDay: '[Gëschter um] LT',
            lastWeek: function () {
                // Different date string for 'Dënschdeg' (Tuesday) and 'Donneschdeg' (Thursday) due to phonological rule
                switch (this.day()) {
                    case 2:
                    case 4:
                        return '[Leschten] dddd [um] LT';
                    default:
                        return '[Leschte] dddd [um] LT';
                }
            }
        },
        relativeTime : {
            future : processFutureTime,
            past : processPastTime,
            s : 'e puer Sekonnen',
            ss : '%d Sekonnen',
            m : processRelativeTime,
            mm : '%d Minutten',
            h : processRelativeTime,
            hh : '%d Stonnen',
            d : processRelativeTime,
            dd : '%d Deeg',
            M : processRelativeTime,
            MM : '%d Méint',
            y : processRelativeTime,
            yy : '%d Joer'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal: '%d.',
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lb;

})));


/***/ }),
/* 585 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var lo = moment.defineLocale('lo', {
        months : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        monthsShort : 'ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ'.split('_'),
        weekdays : 'ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysShort : 'ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ'.split('_'),
        weekdaysMin : 'ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'ວັນdddd D MMMM YYYY HH:mm'
        },
        meridiemParse: /ຕອນເຊົ້າ|ຕອນແລງ/,
        isPM: function (input) {
            return input === 'ຕອນແລງ';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ຕອນເຊົ້າ';
            } else {
                return 'ຕອນແລງ';
            }
        },
        calendar : {
            sameDay : '[ມື້ນີ້ເວລາ] LT',
            nextDay : '[ມື້ອື່ນເວລາ] LT',
            nextWeek : '[ວັນ]dddd[ໜ້າເວລາ] LT',
            lastDay : '[ມື້ວານນີ້ເວລາ] LT',
            lastWeek : '[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ອີກ %s',
            past : '%sຜ່ານມາ',
            s : 'ບໍ່ເທົ່າໃດວິນາທີ',
            ss : '%d ວິນາທີ' ,
            m : '1 ນາທີ',
            mm : '%d ນາທີ',
            h : '1 ຊົ່ວໂມງ',
            hh : '%d ຊົ່ວໂມງ',
            d : '1 ມື້',
            dd : '%d ມື້',
            M : '1 ເດືອນ',
            MM : '%d ເດືອນ',
            y : '1 ປີ',
            yy : '%d ປີ'
        },
        dayOfMonthOrdinalParse: /(ທີ່)\d{1,2}/,
        ordinal : function (number) {
            return 'ທີ່' + number;
        }
    });

    return lo;

})));


/***/ }),
/* 586 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var units = {
        'ss' : 'sekundė_sekundžių_sekundes',
        'm' : 'minutė_minutės_minutę',
        'mm': 'minutės_minučių_minutes',
        'h' : 'valanda_valandos_valandą',
        'hh': 'valandos_valandų_valandas',
        'd' : 'diena_dienos_dieną',
        'dd': 'dienos_dienų_dienas',
        'M' : 'mėnuo_mėnesio_mėnesį',
        'MM': 'mėnesiai_mėnesių_mėnesius',
        'y' : 'metai_metų_metus',
        'yy': 'metai_metų_metus'
    };
    function translateSeconds(number, withoutSuffix, key, isFuture) {
        if (withoutSuffix) {
            return 'kelios sekundės';
        } else {
            return isFuture ? 'kelių sekundžių' : 'kelias sekundes';
        }
    }
    function translateSingular(number, withoutSuffix, key, isFuture) {
        return withoutSuffix ? forms(key)[0] : (isFuture ? forms(key)[1] : forms(key)[2]);
    }
    function special(number) {
        return number % 10 === 0 || (number > 10 && number < 20);
    }
    function forms(key) {
        return units[key].split('_');
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        if (number === 1) {
            return result + translateSingular(number, withoutSuffix, key[0], isFuture);
        } else if (withoutSuffix) {
            return result + (special(number) ? forms(key)[1] : forms(key)[0]);
        } else {
            if (isFuture) {
                return result + forms(key)[1];
            } else {
                return result + (special(number) ? forms(key)[1] : forms(key)[2]);
            }
        }
    }
    var lt = moment.defineLocale('lt', {
        months : {
            format: 'sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio'.split('_'),
            standalone: 'sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis'.split('_'),
            isFormat: /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/
        },
        monthsShort : 'sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd'.split('_'),
        weekdays : {
            format: 'sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį'.split('_'),
            standalone: 'sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis'.split('_'),
            isFormat: /dddd HH:mm/
        },
        weekdaysShort : 'Sek_Pir_Ant_Tre_Ket_Pen_Šeš'.split('_'),
        weekdaysMin : 'S_P_A_T_K_Pn_Š'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY [m.] MMMM D [d.]',
            LLL : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            LLLL : 'YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]',
            l : 'YYYY-MM-DD',
            ll : 'YYYY [m.] MMMM D [d.]',
            lll : 'YYYY [m.] MMMM D [d.], HH:mm [val.]',
            llll : 'YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]'
        },
        calendar : {
            sameDay : '[Šiandien] LT',
            nextDay : '[Rytoj] LT',
            nextWeek : 'dddd LT',
            lastDay : '[Vakar] LT',
            lastWeek : '[Praėjusį] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'po %s',
            past : 'prieš %s',
            s : translateSeconds,
            ss : translate,
            m : translateSingular,
            mm : translate,
            h : translateSingular,
            hh : translate,
            d : translateSingular,
            dd : translate,
            M : translateSingular,
            MM : translate,
            y : translateSingular,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}-oji/,
        ordinal : function (number) {
            return number + '-oji';
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lt;

})));


/***/ }),
/* 587 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var units = {
        'ss': 'sekundes_sekundēm_sekunde_sekundes'.split('_'),
        'm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'mm': 'minūtes_minūtēm_minūte_minūtes'.split('_'),
        'h': 'stundas_stundām_stunda_stundas'.split('_'),
        'hh': 'stundas_stundām_stunda_stundas'.split('_'),
        'd': 'dienas_dienām_diena_dienas'.split('_'),
        'dd': 'dienas_dienām_diena_dienas'.split('_'),
        'M': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'MM': 'mēneša_mēnešiem_mēnesis_mēneši'.split('_'),
        'y': 'gada_gadiem_gads_gadi'.split('_'),
        'yy': 'gada_gadiem_gads_gadi'.split('_')
    };
    /**
     * @param withoutSuffix boolean true = a length of time; false = before/after a period of time.
     */
    function format(forms, number, withoutSuffix) {
        if (withoutSuffix) {
            // E.g. "21 minūte", "3 minūtes".
            return number % 10 === 1 && number % 100 !== 11 ? forms[2] : forms[3];
        } else {
            // E.g. "21 minūtes" as in "pēc 21 minūtes".
            // E.g. "3 minūtēm" as in "pēc 3 minūtēm".
            return number % 10 === 1 && number % 100 !== 11 ? forms[0] : forms[1];
        }
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        return number + ' ' + format(units[key], number, withoutSuffix);
    }
    function relativeTimeWithSingular(number, withoutSuffix, key) {
        return format(units[key], number, withoutSuffix);
    }
    function relativeSeconds(number, withoutSuffix) {
        return withoutSuffix ? 'dažas sekundes' : 'dažām sekundēm';
    }

    var lv = moment.defineLocale('lv', {
        months : 'janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena'.split('_'),
        weekdaysShort : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysMin : 'Sv_P_O_T_C_Pk_S'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY.',
            LL : 'YYYY. [gada] D. MMMM',
            LLL : 'YYYY. [gada] D. MMMM, HH:mm',
            LLLL : 'YYYY. [gada] D. MMMM, dddd, HH:mm'
        },
        calendar : {
            sameDay : '[Šodien pulksten] LT',
            nextDay : '[Rīt pulksten] LT',
            nextWeek : 'dddd [pulksten] LT',
            lastDay : '[Vakar pulksten] LT',
            lastWeek : '[Pagājušā] dddd [pulksten] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'pēc %s',
            past : 'pirms %s',
            s : relativeSeconds,
            ss : relativeTimeWithPlural,
            m : relativeTimeWithSingular,
            mm : relativeTimeWithPlural,
            h : relativeTimeWithSingular,
            hh : relativeTimeWithPlural,
            d : relativeTimeWithSingular,
            dd : relativeTimeWithPlural,
            M : relativeTimeWithSingular,
            MM : relativeTimeWithPlural,
            y : relativeTimeWithSingular,
            yy : relativeTimeWithPlural
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return lv;

})));


/***/ }),
/* 588 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['sekund', 'sekunda', 'sekundi'],
            m: ['jedan minut', 'jednog minuta'],
            mm: ['minut', 'minuta', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mjesec', 'mjeseca', 'mjeseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var me = moment.defineLocale('me', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact : true,
        weekdays: 'nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sri._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sjutra u] LT',

            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedjelju] [u] LT';
                    case 3:
                        return '[u] [srijedu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedjelje] [u] LT',
                    '[prošlog] [ponedjeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srijede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'prije %s',
            s      : 'nekoliko sekundi',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'dan',
            dd     : translator.translate,
            M      : 'mjesec',
            MM     : translator.translate,
            y      : 'godinu',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return me;

})));


/***/ }),
/* 589 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var mi = moment.defineLocale('mi', {
        months: 'Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea'.split('_'),
        monthsShort: 'Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki'.split('_'),
        monthsRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,
        monthsShortStrictRegex: /(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,
        weekdays: 'Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei'.split('_'),
        weekdaysShort: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        weekdaysMin: 'Ta_Ma_Tū_We_Tāi_Pa_Hā'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY [i] HH:mm',
            LLLL: 'dddd, D MMMM YYYY [i] HH:mm'
        },
        calendar: {
            sameDay: '[i teie mahana, i] LT',
            nextDay: '[apopo i] LT',
            nextWeek: 'dddd [i] LT',
            lastDay: '[inanahi i] LT',
            lastWeek: 'dddd [whakamutunga i] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'i roto i %s',
            past: '%s i mua',
            s: 'te hēkona ruarua',
            ss: '%d hēkona',
            m: 'he meneti',
            mm: '%d meneti',
            h: 'te haora',
            hh: '%d haora',
            d: 'he ra',
            dd: '%d ra',
            M: 'he marama',
            MM: '%d marama',
            y: 'he tau',
            yy: '%d tau'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mi;

})));


/***/ }),
/* 590 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var mk = moment.defineLocale('mk', {
        months : 'јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември'.split('_'),
        monthsShort : 'јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек'.split('_'),
        weekdays : 'недела_понеделник_вторник_среда_четврток_петок_сабота'.split('_'),
        weekdaysShort : 'нед_пон_вто_сре_чет_пет_саб'.split('_'),
        weekdaysMin : 'нe_пo_вт_ср_че_пе_сa'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'D.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay : '[Денес во] LT',
            nextDay : '[Утре во] LT',
            nextWeek : '[Во] dddd [во] LT',
            lastDay : '[Вчера во] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 6:
                        return '[Изминатата] dddd [во] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[Изминатиот] dddd [во] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'после %s',
            past : 'пред %s',
            s : 'неколку секунди',
            ss : '%d секунди',
            m : 'минута',
            mm : '%d минути',
            h : 'час',
            hh : '%d часа',
            d : 'ден',
            dd : '%d дена',
            M : 'месец',
            MM : '%d месеци',
            y : 'година',
            yy : '%d години'
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ев|ен|ти|ви|ри|ми)/,
        ordinal : function (number) {
            var lastDigit = number % 10,
                last2Digits = number % 100;
            if (number === 0) {
                return number + '-ев';
            } else if (last2Digits === 0) {
                return number + '-ен';
            } else if (last2Digits > 10 && last2Digits < 20) {
                return number + '-ти';
            } else if (lastDigit === 1) {
                return number + '-ви';
            } else if (lastDigit === 2) {
                return number + '-ри';
            } else if (lastDigit === 7 || lastDigit === 8) {
                return number + '-ми';
            } else {
                return number + '-ти';
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return mk;

})));


/***/ }),
/* 591 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ml = moment.defineLocale('ml', {
        months : 'ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ'.split('_'),
        monthsShort : 'ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.'.split('_'),
        monthsParseExact : true,
        weekdays : 'ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച'.split('_'),
        weekdaysShort : 'ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി'.split('_'),
        weekdaysMin : 'ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm -നു',
            LTS : 'A h:mm:ss -നു',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm -നു',
            LLLL : 'dddd, D MMMM YYYY, A h:mm -നു'
        },
        calendar : {
            sameDay : '[ഇന്ന്] LT',
            nextDay : '[നാളെ] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[ഇന്നലെ] LT',
            lastWeek : '[കഴിഞ്ഞ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s കഴിഞ്ഞ്',
            past : '%s മുൻപ്',
            s : 'അൽപ നിമിഷങ്ങൾ',
            ss : '%d സെക്കൻഡ്',
            m : 'ഒരു മിനിറ്റ്',
            mm : '%d മിനിറ്റ്',
            h : 'ഒരു മണിക്കൂർ',
            hh : '%d മണിക്കൂർ',
            d : 'ഒരു ദിവസം',
            dd : '%d ദിവസം',
            M : 'ഒരു മാസം',
            MM : '%d മാസം',
            y : 'ഒരു വർഷം',
            yy : '%d വർഷം'
        },
        meridiemParse: /രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if ((meridiem === 'രാത്രി' && hour >= 4) ||
                    meridiem === 'ഉച്ച കഴിഞ്ഞ്' ||
                    meridiem === 'വൈകുന്നേരം') {
                return hour + 12;
            } else {
                return hour;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'രാത്രി';
            } else if (hour < 12) {
                return 'രാവിലെ';
            } else if (hour < 17) {
                return 'ഉച്ച കഴിഞ്ഞ്';
            } else if (hour < 20) {
                return 'വൈകുന്നേരം';
            } else {
                return 'രാത്രി';
            }
        }
    });

    return ml;

})));


/***/ }),
/* 592 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function translate(number, withoutSuffix, key, isFuture) {
        switch (key) {
            case 's':
                return withoutSuffix ? 'хэдхэн секунд' : 'хэдхэн секундын';
            case 'ss':
                return number + (withoutSuffix ? ' секунд' : ' секундын');
            case 'm':
            case 'mm':
                return number + (withoutSuffix ? ' минут' : ' минутын');
            case 'h':
            case 'hh':
                return number + (withoutSuffix ? ' цаг' : ' цагийн');
            case 'd':
            case 'dd':
                return number + (withoutSuffix ? ' өдөр' : ' өдрийн');
            case 'M':
            case 'MM':
                return number + (withoutSuffix ? ' сар' : ' сарын');
            case 'y':
            case 'yy':
                return number + (withoutSuffix ? ' жил' : ' жилийн');
            default:
                return number;
        }
    }

    var mn = moment.defineLocale('mn', {
        months : 'Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар'.split('_'),
        monthsShort : '1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар'.split('_'),
        monthsParseExact : true,
        weekdays : 'Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба'.split('_'),
        weekdaysShort : 'Ням_Дав_Мяг_Лха_Пүр_Баа_Бям'.split('_'),
        weekdaysMin : 'Ня_Да_Мя_Лх_Пү_Ба_Бя'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'YYYY оны MMMMын D',
            LLL : 'YYYY оны MMMMын D HH:mm',
            LLLL : 'dddd, YYYY оны MMMMын D HH:mm'
        },
        meridiemParse: /ҮӨ|ҮХ/i,
        isPM : function (input) {
            return input === 'ҮХ';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ҮӨ';
            } else {
                return 'ҮХ';
            }
        },
        calendar : {
            sameDay : '[Өнөөдөр] LT',
            nextDay : '[Маргааш] LT',
            nextWeek : '[Ирэх] dddd LT',
            lastDay : '[Өчигдөр] LT',
            lastWeek : '[Өнгөрсөн] dddd LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s дараа',
            past : '%s өмнө',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2} өдөр/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + ' өдөр';
                default:
                    return number;
            }
        }
    });

    return mn;

})));


/***/ }),
/* 593 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    function relativeTimeMr(number, withoutSuffix, string, isFuture)
    {
        var output = '';
        if (withoutSuffix) {
            switch (string) {
                case 's': output = 'काही सेकंद'; break;
                case 'ss': output = '%d सेकंद'; break;
                case 'm': output = 'एक मिनिट'; break;
                case 'mm': output = '%d मिनिटे'; break;
                case 'h': output = 'एक तास'; break;
                case 'hh': output = '%d तास'; break;
                case 'd': output = 'एक दिवस'; break;
                case 'dd': output = '%d दिवस'; break;
                case 'M': output = 'एक महिना'; break;
                case 'MM': output = '%d महिने'; break;
                case 'y': output = 'एक वर्ष'; break;
                case 'yy': output = '%d वर्षे'; break;
            }
        }
        else {
            switch (string) {
                case 's': output = 'काही सेकंदां'; break;
                case 'ss': output = '%d सेकंदां'; break;
                case 'm': output = 'एका मिनिटा'; break;
                case 'mm': output = '%d मिनिटां'; break;
                case 'h': output = 'एका तासा'; break;
                case 'hh': output = '%d तासां'; break;
                case 'd': output = 'एका दिवसा'; break;
                case 'dd': output = '%d दिवसां'; break;
                case 'M': output = 'एका महिन्या'; break;
                case 'MM': output = '%d महिन्यां'; break;
                case 'y': output = 'एका वर्षा'; break;
                case 'yy': output = '%d वर्षां'; break;
            }
        }
        return output.replace(/%d/i, number);
    }

    var mr = moment.defineLocale('mr', {
        months : 'जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर'.split('_'),
        monthsShort: 'जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.'.split('_'),
        monthsParseExact : true,
        weekdays : 'रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार'.split('_'),
        weekdaysShort : 'रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि'.split('_'),
        weekdaysMin : 'र_सो_मं_बु_गु_शु_श'.split('_'),
        longDateFormat : {
            LT : 'A h:mm वाजता',
            LTS : 'A h:mm:ss वाजता',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm वाजता',
            LLLL : 'dddd, D MMMM YYYY, A h:mm वाजता'
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[उद्या] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[काल] LT',
            lastWeek: '[मागील] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future: '%sमध्ये',
            past: '%sपूर्वी',
            s: relativeTimeMr,
            ss: relativeTimeMr,
            m: relativeTimeMr,
            mm: relativeTimeMr,
            h: relativeTimeMr,
            hh: relativeTimeMr,
            d: relativeTimeMr,
            dd: relativeTimeMr,
            M: relativeTimeMr,
            MM: relativeTimeMr,
            y: relativeTimeMr,
            yy: relativeTimeMr
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /रात्री|सकाळी|दुपारी|सायंकाळी/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'रात्री') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'सकाळी') {
                return hour;
            } else if (meridiem === 'दुपारी') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'सायंकाळी') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'रात्री';
            } else if (hour < 10) {
                return 'सकाळी';
            } else if (hour < 17) {
                return 'दुपारी';
            } else if (hour < 20) {
                return 'सायंकाळी';
            } else {
                return 'रात्री';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return mr;

})));


/***/ }),
/* 594 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var msMy = moment.defineLocale('ms-my', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            ss : '%d saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return msMy;

})));


/***/ }),
/* 595 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ms = moment.defineLocale('ms', {
        months : 'Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis'.split('_'),
        weekdays : 'Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu'.split('_'),
        weekdaysShort : 'Ahd_Isn_Sel_Rab_Kha_Jum_Sab'.split('_'),
        weekdaysMin : 'Ah_Is_Sl_Rb_Km_Jm_Sb'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [pukul] HH.mm',
            LLLL : 'dddd, D MMMM YYYY [pukul] HH.mm'
        },
        meridiemParse: /pagi|tengahari|petang|malam/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'pagi') {
                return hour;
            } else if (meridiem === 'tengahari') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'petang' || meridiem === 'malam') {
                return hour + 12;
            }
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'pagi';
            } else if (hours < 15) {
                return 'tengahari';
            } else if (hours < 19) {
                return 'petang';
            } else {
                return 'malam';
            }
        },
        calendar : {
            sameDay : '[Hari ini pukul] LT',
            nextDay : '[Esok pukul] LT',
            nextWeek : 'dddd [pukul] LT',
            lastDay : '[Kelmarin pukul] LT',
            lastWeek : 'dddd [lepas pukul] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'dalam %s',
            past : '%s yang lepas',
            s : 'beberapa saat',
            ss : '%d saat',
            m : 'seminit',
            mm : '%d minit',
            h : 'sejam',
            hh : '%d jam',
            d : 'sehari',
            dd : '%d hari',
            M : 'sebulan',
            MM : '%d bulan',
            y : 'setahun',
            yy : '%d tahun'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ms;

})));


/***/ }),
/* 596 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var mt = moment.defineLocale('mt', {
        months : 'Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru'.split('_'),
        monthsShort : 'Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ'.split('_'),
        weekdays : 'Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt'.split('_'),
        weekdaysShort : 'Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib'.split('_'),
        weekdaysMin : 'Ħa_Tn_Tl_Er_Ħa_Ġi_Si'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Illum fil-]LT',
            nextDay : '[Għada fil-]LT',
            nextWeek : 'dddd [fil-]LT',
            lastDay : '[Il-bieraħ fil-]LT',
            lastWeek : 'dddd [li għadda] [fil-]LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'f’ %s',
            past : '%s ilu',
            s : 'ftit sekondi',
            ss : '%d sekondi',
            m : 'minuta',
            mm : '%d minuti',
            h : 'siegħa',
            hh : '%d siegħat',
            d : 'ġurnata',
            dd : '%d ġranet',
            M : 'xahar',
            MM : '%d xhur',
            y : 'sena',
            yy : '%d sni'
        },
        dayOfMonthOrdinalParse : /\d{1,2}º/,
        ordinal: '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return mt;

})));


/***/ }),
/* 597 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '၁',
        '2': '၂',
        '3': '၃',
        '4': '၄',
        '5': '၅',
        '6': '၆',
        '7': '၇',
        '8': '၈',
        '9': '၉',
        '0': '၀'
    }, numberMap = {
        '၁': '1',
        '၂': '2',
        '၃': '3',
        '၄': '4',
        '၅': '5',
        '၆': '6',
        '၇': '7',
        '၈': '8',
        '၉': '9',
        '၀': '0'
    };

    var my = moment.defineLocale('my', {
        months: 'ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ'.split('_'),
        monthsShort: 'ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ'.split('_'),
        weekdays: 'တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ'.split('_'),
        weekdaysShort: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),
        weekdaysMin: 'နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ'.split('_'),

        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'DD/MM/YYYY',
            LL: 'D MMMM YYYY',
            LLL: 'D MMMM YYYY HH:mm',
            LLLL: 'dddd D MMMM YYYY HH:mm'
        },
        calendar: {
            sameDay: '[ယနေ.] LT [မှာ]',
            nextDay: '[မနက်ဖြန်] LT [မှာ]',
            nextWeek: 'dddd LT [မှာ]',
            lastDay: '[မနေ.က] LT [မှာ]',
            lastWeek: '[ပြီးခဲ့သော] dddd LT [မှာ]',
            sameElse: 'L'
        },
        relativeTime: {
            future: 'လာမည့် %s မှာ',
            past: 'လွန်ခဲ့သော %s က',
            s: 'စက္ကန်.အနည်းငယ်',
            ss : '%d စက္ကန့်',
            m: 'တစ်မိနစ်',
            mm: '%d မိနစ်',
            h: 'တစ်နာရီ',
            hh: '%d နာရီ',
            d: 'တစ်ရက်',
            dd: '%d ရက်',
            M: 'တစ်လ',
            MM: '%d လ',
            y: 'တစ်နှစ်',
            yy: '%d နှစ်'
        },
        preparse: function (string) {
            return string.replace(/[၁၂၃၄၅၆၇၈၉၀]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        week: {
            dow: 1, // Monday is the first day of the week.
            doy: 4 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return my;

})));


/***/ }),
/* 598 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var nb = moment.defineLocale('nb', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan._feb._mars_april_mai_juni_juli_aug._sep._okt._nov._des.'.split('_'),
        monthsParseExact : true,
        weekdays : 'søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag'.split('_'),
        weekdaysShort : 'sø._ma._ti._on._to._fr._lø.'.split('_'),
        weekdaysMin : 'sø_ma_ti_on_to_fr_lø'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] HH:mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay: '[i dag kl.] LT',
            nextDay: '[i morgen kl.] LT',
            nextWeek: 'dddd [kl.] LT',
            lastDay: '[i går kl.] LT',
            lastWeek: '[forrige] dddd [kl.] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s siden',
            s : 'noen sekunder',
            ss : '%d sekunder',
            m : 'ett minutt',
            mm : '%d minutter',
            h : 'en time',
            hh : '%d timer',
            d : 'en dag',
            dd : '%d dager',
            M : 'en måned',
            MM : '%d måneder',
            y : 'ett år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nb;

})));


/***/ }),
/* 599 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '१',
        '2': '२',
        '3': '३',
        '4': '४',
        '5': '५',
        '6': '६',
        '7': '७',
        '8': '८',
        '9': '९',
        '0': '०'
    },
    numberMap = {
        '१': '1',
        '२': '2',
        '३': '3',
        '४': '4',
        '५': '5',
        '६': '6',
        '७': '7',
        '८': '8',
        '९': '9',
        '०': '0'
    };

    var ne = moment.defineLocale('ne', {
        months : 'जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर'.split('_'),
        monthsShort : 'जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.'.split('_'),
        monthsParseExact : true,
        weekdays : 'आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार'.split('_'),
        weekdaysShort : 'आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.'.split('_'),
        weekdaysMin : 'आ._सो._मं._बु._बि._शु._श.'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'Aको h:mm बजे',
            LTS : 'Aको h:mm:ss बजे',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, Aको h:mm बजे',
            LLLL : 'dddd, D MMMM YYYY, Aको h:mm बजे'
        },
        preparse: function (string) {
            return string.replace(/[१२३४५६७८९०]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        meridiemParse: /राति|बिहान|दिउँसो|साँझ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'राति') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'बिहान') {
                return hour;
            } else if (meridiem === 'दिउँसो') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'साँझ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 3) {
                return 'राति';
            } else if (hour < 12) {
                return 'बिहान';
            } else if (hour < 16) {
                return 'दिउँसो';
            } else if (hour < 20) {
                return 'साँझ';
            } else {
                return 'राति';
            }
        },
        calendar : {
            sameDay : '[आज] LT',
            nextDay : '[भोलि] LT',
            nextWeek : '[आउँदो] dddd[,] LT',
            lastDay : '[हिजो] LT',
            lastWeek : '[गएको] dddd[,] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sमा',
            past : '%s अगाडि',
            s : 'केही क्षण',
            ss : '%d सेकेण्ड',
            m : 'एक मिनेट',
            mm : '%d मिनेट',
            h : 'एक घण्टा',
            hh : '%d घण्टा',
            d : 'एक दिन',
            dd : '%d दिन',
            M : 'एक महिना',
            MM : '%d महिना',
            y : 'एक बर्ष',
            yy : '%d बर्ष'
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ne;

})));


/***/ }),
/* 600 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nlBe = moment.defineLocale('nl-be', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            ss : '%d seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nlBe;

})));


/***/ }),
/* 601 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsShortWithDots = 'jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.'.split('_'),
        monthsShortWithoutDots = 'jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec'.split('_');

    var monthsParse = [/^jan/i, /^feb/i, /^maart|mrt.?$/i, /^apr/i, /^mei$/i, /^jun[i.]?$/i, /^jul[i.]?$/i, /^aug/i, /^sep/i, /^okt/i, /^nov/i, /^dec/i];
    var monthsRegex = /^(januari|februari|maart|april|mei|april|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;

    var nl = moment.defineLocale('nl', {
        months : 'januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december'.split('_'),
        monthsShort : function (m, format) {
            if (!m) {
                return monthsShortWithDots;
            } else if (/-MMM-/.test(format)) {
                return monthsShortWithoutDots[m.month()];
            } else {
                return monthsShortWithDots[m.month()];
            }
        },

        monthsRegex: monthsRegex,
        monthsShortRegex: monthsRegex,
        monthsStrictRegex: /^(januari|februari|maart|mei|ju[nl]i|april|augustus|september|oktober|november|december)/i,
        monthsShortStrictRegex: /^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,

        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        weekdays : 'zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag'.split('_'),
        weekdaysShort : 'zo._ma._di._wo._do._vr._za.'.split('_'),
        weekdaysMin : 'zo_ma_di_wo_do_vr_za'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD-MM-YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[vandaag om] LT',
            nextDay: '[morgen om] LT',
            nextWeek: 'dddd [om] LT',
            lastDay: '[gisteren om] LT',
            lastWeek: '[afgelopen] dddd [om] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'over %s',
            past : '%s geleden',
            s : 'een paar seconden',
            ss : '%d seconden',
            m : 'één minuut',
            mm : '%d minuten',
            h : 'één uur',
            hh : '%d uur',
            d : 'één dag',
            dd : '%d dagen',
            M : 'één maand',
            MM : '%d maanden',
            y : 'één jaar',
            yy : '%d jaar'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(ste|de)/,
        ordinal : function (number) {
            return number + ((number === 1 || number === 8 || number >= 20) ? 'ste' : 'de');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nl;

})));


/***/ }),
/* 602 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var nn = moment.defineLocale('nn', {
        months : 'januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember'.split('_'),
        monthsShort : 'jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des'.split('_'),
        weekdays : 'sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag'.split('_'),
        weekdaysShort : 'sun_mån_tys_ons_tor_fre_lau'.split('_'),
        weekdaysMin : 'su_må_ty_on_to_fr_lø'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY [kl.] H:mm',
            LLLL : 'dddd D. MMMM YYYY [kl.] HH:mm'
        },
        calendar : {
            sameDay: '[I dag klokka] LT',
            nextDay: '[I morgon klokka] LT',
            nextWeek: 'dddd [klokka] LT',
            lastDay: '[I går klokka] LT',
            lastWeek: '[Føregåande] dddd [klokka] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : '%s sidan',
            s : 'nokre sekund',
            ss : '%d sekund',
            m : 'eit minutt',
            mm : '%d minutt',
            h : 'ein time',
            hh : '%d timar',
            d : 'ein dag',
            dd : '%d dagar',
            M : 'ein månad',
            MM : '%d månader',
            y : 'eit år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return nn;

})));


/***/ }),
/* 603 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '੧',
        '2': '੨',
        '3': '੩',
        '4': '੪',
        '5': '੫',
        '6': '੬',
        '7': '੭',
        '8': '੮',
        '9': '੯',
        '0': '੦'
    },
    numberMap = {
        '੧': '1',
        '੨': '2',
        '੩': '3',
        '੪': '4',
        '੫': '5',
        '੬': '6',
        '੭': '7',
        '੮': '8',
        '੯': '9',
        '੦': '0'
    };

    var paIn = moment.defineLocale('pa-in', {
        // There are months name as per Nanakshahi Calender but they are not used as rigidly in modern Punjabi.
        months : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        monthsShort : 'ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ'.split('_'),
        weekdays : 'ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ'.split('_'),
        weekdaysShort : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        weekdaysMin : 'ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm ਵਜੇ',
            LTS : 'A h:mm:ss ਵਜੇ',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm ਵਜੇ',
            LLLL : 'dddd, D MMMM YYYY, A h:mm ਵਜੇ'
        },
        calendar : {
            sameDay : '[ਅਜ] LT',
            nextDay : '[ਕਲ] LT',
            nextWeek : '[ਅਗਲਾ] dddd, LT',
            lastDay : '[ਕਲ] LT',
            lastWeek : '[ਪਿਛਲੇ] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s ਵਿੱਚ',
            past : '%s ਪਿਛਲੇ',
            s : 'ਕੁਝ ਸਕਿੰਟ',
            ss : '%d ਸਕਿੰਟ',
            m : 'ਇਕ ਮਿੰਟ',
            mm : '%d ਮਿੰਟ',
            h : 'ਇੱਕ ਘੰਟਾ',
            hh : '%d ਘੰਟੇ',
            d : 'ਇੱਕ ਦਿਨ',
            dd : '%d ਦਿਨ',
            M : 'ਇੱਕ ਮਹੀਨਾ',
            MM : '%d ਮਹੀਨੇ',
            y : 'ਇੱਕ ਸਾਲ',
            yy : '%d ਸਾਲ'
        },
        preparse: function (string) {
            return string.replace(/[੧੨੩੪੫੬੭੮੯੦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // Punjabi notation for meridiems are quite fuzzy in practice. While there exists
        // a rigid notion of a 'Pahar' it is not used as rigidly in modern Punjabi.
        meridiemParse: /ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ਰਾਤ') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ਸਵੇਰ') {
                return hour;
            } else if (meridiem === 'ਦੁਪਹਿਰ') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'ਸ਼ਾਮ') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ਰਾਤ';
            } else if (hour < 10) {
                return 'ਸਵੇਰ';
            } else if (hour < 17) {
                return 'ਦੁਪਹਿਰ';
            } else if (hour < 20) {
                return 'ਸ਼ਾਮ';
            } else {
                return 'ਰਾਤ';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return paIn;

})));


/***/ }),
/* 604 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var monthsNominative = 'styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień'.split('_'),
        monthsSubjective = 'stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia'.split('_');
    function plural(n) {
        return (n % 10 < 5) && (n % 10 > 1) && ((~~(n / 10) % 10) !== 1);
    }
    function translate(number, withoutSuffix, key) {
        var result = number + ' ';
        switch (key) {
            case 'ss':
                return result + (plural(number) ? 'sekundy' : 'sekund');
            case 'm':
                return withoutSuffix ? 'minuta' : 'minutę';
            case 'mm':
                return result + (plural(number) ? 'minuty' : 'minut');
            case 'h':
                return withoutSuffix  ? 'godzina'  : 'godzinę';
            case 'hh':
                return result + (plural(number) ? 'godziny' : 'godzin');
            case 'MM':
                return result + (plural(number) ? 'miesiące' : 'miesięcy');
            case 'yy':
                return result + (plural(number) ? 'lata' : 'lat');
        }
    }

    var pl = moment.defineLocale('pl', {
        months : function (momentToFormat, format) {
            if (!momentToFormat) {
                return monthsNominative;
            } else if (format === '') {
                // Hack: if format empty we know this is used to generate
                // RegExp by moment. Give then back both valid forms of months
                // in RegExp ready format.
                return '(' + monthsSubjective[momentToFormat.month()] + '|' + monthsNominative[momentToFormat.month()] + ')';
            } else if (/D MMMM/.test(format)) {
                return monthsSubjective[momentToFormat.month()];
            } else {
                return monthsNominative[momentToFormat.month()];
            }
        },
        monthsShort : 'sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru'.split('_'),
        weekdays : 'niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota'.split('_'),
        weekdaysShort : 'ndz_pon_wt_śr_czw_pt_sob'.split('_'),
        weekdaysMin : 'Nd_Pn_Wt_Śr_Cz_Pt_So'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Dziś o] LT',
            nextDay: '[Jutro o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W niedzielę o] LT';

                    case 2:
                        return '[We wtorek o] LT';

                    case 3:
                        return '[W środę o] LT';

                    case 6:
                        return '[W sobotę o] LT';

                    default:
                        return '[W] dddd [o] LT';
                }
            },
            lastDay: '[Wczoraj o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[W zeszłą niedzielę o] LT';
                    case 3:
                        return '[W zeszłą środę o] LT';
                    case 6:
                        return '[W zeszłą sobotę o] LT';
                    default:
                        return '[W zeszły] dddd [o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : '%s temu',
            s : 'kilka sekund',
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : '1 dzień',
            dd : '%d dni',
            M : 'miesiąc',
            MM : translate,
            y : 'rok',
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pl;

})));


/***/ }),
/* 605 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ptBr = moment.defineLocale('pt-br', {
        months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY [às] HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY [às] HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'poucos segundos',
            ss : '%d segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal : '%dº'
    });

    return ptBr;

})));


/***/ }),
/* 606 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var pt = moment.defineLocale('pt', {
        months : 'janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro'.split('_'),
        monthsShort : 'jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez'.split('_'),
        weekdays : 'Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado'.split('_'),
        weekdaysShort : 'Dom_Seg_Ter_Qua_Qui_Sex_Sáb'.split('_'),
        weekdaysMin : 'Do_2ª_3ª_4ª_5ª_6ª_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D [de] MMMM [de] YYYY',
            LLL : 'D [de] MMMM [de] YYYY HH:mm',
            LLLL : 'dddd, D [de] MMMM [de] YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hoje às] LT',
            nextDay: '[Amanhã às] LT',
            nextWeek: 'dddd [às] LT',
            lastDay: '[Ontem às] LT',
            lastWeek: function () {
                return (this.day() === 0 || this.day() === 6) ?
                    '[Último] dddd [às] LT' : // Saturday + Sunday
                    '[Última] dddd [às] LT'; // Monday - Friday
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'em %s',
            past : 'há %s',
            s : 'segundos',
            ss : '%d segundos',
            m : 'um minuto',
            mm : '%d minutos',
            h : 'uma hora',
            hh : '%d horas',
            d : 'um dia',
            dd : '%d dias',
            M : 'um mês',
            MM : '%d meses',
            y : 'um ano',
            yy : '%d anos'
        },
        dayOfMonthOrdinalParse: /\d{1,2}º/,
        ordinal : '%dº',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return pt;

})));


/***/ }),
/* 607 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
                'ss': 'secunde',
                'mm': 'minute',
                'hh': 'ore',
                'dd': 'zile',
                'MM': 'luni',
                'yy': 'ani'
            },
            separator = ' ';
        if (number % 100 >= 20 || (number >= 100 && number % 100 === 0)) {
            separator = ' de ';
        }
        return number + separator + format[key];
    }

    var ro = moment.defineLocale('ro', {
        months : 'ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie'.split('_'),
        monthsShort : 'ian._febr._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'duminică_luni_marți_miercuri_joi_vineri_sâmbătă'.split('_'),
        weekdaysShort : 'Dum_Lun_Mar_Mie_Joi_Vin_Sâm'.split('_'),
        weekdaysMin : 'Du_Lu_Ma_Mi_Jo_Vi_Sâ'.split('_'),
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY H:mm',
            LLLL : 'dddd, D MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[azi la] LT',
            nextDay: '[mâine la] LT',
            nextWeek: 'dddd [la] LT',
            lastDay: '[ieri la] LT',
            lastWeek: '[fosta] dddd [la] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'peste %s',
            past : '%s în urmă',
            s : 'câteva secunde',
            ss : relativeTimeWithPlural,
            m : 'un minut',
            mm : relativeTimeWithPlural,
            h : 'o oră',
            hh : relativeTimeWithPlural,
            d : 'o zi',
            dd : relativeTimeWithPlural,
            M : 'o lună',
            MM : relativeTimeWithPlural,
            y : 'un an',
            yy : relativeTimeWithPlural
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ro;

})));


/***/ }),
/* 608 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунды_секунд' : 'секунду_секунды_секунд',
            'mm': withoutSuffix ? 'минута_минуты_минут' : 'минуту_минуты_минут',
            'hh': 'час_часа_часов',
            'dd': 'день_дня_дней',
            'MM': 'месяц_месяца_месяцев',
            'yy': 'год_года_лет'
        };
        if (key === 'm') {
            return withoutSuffix ? 'минута' : 'минуту';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    var monthsParse = [/^янв/i, /^фев/i, /^мар/i, /^апр/i, /^ма[йя]/i, /^июн/i, /^июл/i, /^авг/i, /^сен/i, /^окт/i, /^ноя/i, /^дек/i];

    // http://new.gramota.ru/spravka/rules/139-prop : § 103
    // Сокращения месяцев: http://new.gramota.ru/spravka/buro/search-answer?s=242637
    // CLDR data:          http://www.unicode.org/cldr/charts/28/summary/ru.html#1753
    var ru = moment.defineLocale('ru', {
        months : {
            format: 'января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря'.split('_'),
            standalone: 'январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь'.split('_')
        },
        monthsShort : {
            // по CLDR именно "июл." и "июн.", но какой смысл менять букву на точку ?
            format: 'янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.'.split('_'),
            standalone: 'янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.'.split('_')
        },
        weekdays : {
            standalone: 'воскресенье_понедельник_вторник_среда_четверг_пятница_суббота'.split('_'),
            format: 'воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу'.split('_'),
            isFormat: /\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?\] ?dddd/
        },
        weekdaysShort : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'вс_пн_вт_ср_чт_пт_сб'.split('_'),
        monthsParse : monthsParse,
        longMonthsParse : monthsParse,
        shortMonthsParse : monthsParse,

        // полные названия с падежами, по три буквы, для некоторых, по 4 буквы, сокращения с точкой и без точки
        monthsRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // копия предыдущего
        monthsShortRegex: /^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,

        // полные названия с падежами
        monthsStrictRegex: /^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,

        // Выражение, которое соотвествует только сокращённым формам
        monthsShortStrictRegex: /^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY г.',
            LLL : 'D MMMM YYYY г., H:mm',
            LLLL : 'dddd, D MMMM YYYY г., H:mm'
        },
        calendar : {
            sameDay: '[Сегодня, в] LT',
            nextDay: '[Завтра, в] LT',
            lastDay: '[Вчера, в] LT',
            nextWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В следующее] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В следующий] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В следующую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            lastWeek: function (now) {
                if (now.week() !== this.week()) {
                    switch (this.day()) {
                        case 0:
                            return '[В прошлое] dddd, [в] LT';
                        case 1:
                        case 2:
                        case 4:
                            return '[В прошлый] dddd, [в] LT';
                        case 3:
                        case 5:
                        case 6:
                            return '[В прошлую] dddd, [в] LT';
                    }
                } else {
                    if (this.day() === 2) {
                        return '[Во] dddd, [в] LT';
                    } else {
                        return '[В] dddd, [в] LT';
                    }
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'через %s',
            past : '%s назад',
            s : 'несколько секунд',
            ss : relativeTimeWithPlural,
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'час',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'месяц',
            MM : relativeTimeWithPlural,
            y : 'год',
            yy : relativeTimeWithPlural
        },
        meridiemParse: /ночи|утра|дня|вечера/i,
        isPM : function (input) {
            return /^(дня|вечера)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночи';
            } else if (hour < 12) {
                return 'утра';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечера';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го|я)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                case 'w':
                case 'W':
                    return number + '-я';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ru;

})));


/***/ }),
/* 609 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'جنوري',
        'فيبروري',
        'مارچ',
        'اپريل',
        'مئي',
        'جون',
        'جولاءِ',
        'آگسٽ',
        'سيپٽمبر',
        'آڪٽوبر',
        'نومبر',
        'ڊسمبر'
    ];
    var days = [
        'آچر',
        'سومر',
        'اڱارو',
        'اربع',
        'خميس',
        'جمع',
        'ڇنڇر'
    ];

    var sd = moment.defineLocale('sd', {
        months : months,
        monthsShort : months,
        weekdays : days,
        weekdaysShort : days,
        weekdaysMin : days,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM : function (input) {
            return 'شام' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar : {
            sameDay : '[اڄ] LT',
            nextDay : '[سڀاڻي] LT',
            nextWeek : 'dddd [اڳين هفتي تي] LT',
            lastDay : '[ڪالهه] LT',
            lastWeek : '[گزريل هفتي] dddd [تي] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s پوء',
            past : '%s اڳ',
            s : 'چند سيڪنڊ',
            ss : '%d سيڪنڊ',
            m : 'هڪ منٽ',
            mm : '%d منٽ',
            h : 'هڪ ڪلاڪ',
            hh : '%d ڪلاڪ',
            d : 'هڪ ڏينهن',
            dd : '%d ڏينهن',
            M : 'هڪ مهينو',
            MM : '%d مهينا',
            y : 'هڪ سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sd;

})));


/***/ }),
/* 610 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var se = moment.defineLocale('se', {
        months : 'ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu'.split('_'),
        monthsShort : 'ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov'.split('_'),
        weekdays : 'sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat'.split('_'),
        weekdaysShort : 'sotn_vuos_maŋ_gask_duor_bear_láv'.split('_'),
        weekdaysMin : 's_v_m_g_d_b_L'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'MMMM D. [b.] YYYY',
            LLL : 'MMMM D. [b.] YYYY [ti.] HH:mm',
            LLLL : 'dddd, MMMM D. [b.] YYYY [ti.] HH:mm'
        },
        calendar : {
            sameDay: '[otne ti] LT',
            nextDay: '[ihttin ti] LT',
            nextWeek: 'dddd [ti] LT',
            lastDay: '[ikte ti] LT',
            lastWeek: '[ovddit] dddd [ti] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s geažes',
            past : 'maŋit %s',
            s : 'moadde sekunddat',
            ss: '%d sekunddat',
            m : 'okta minuhta',
            mm : '%d minuhtat',
            h : 'okta diimmu',
            hh : '%d diimmut',
            d : 'okta beaivi',
            dd : '%d beaivvit',
            M : 'okta mánnu',
            MM : '%d mánut',
            y : 'okta jahki',
            yy : '%d jagit'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return se;

})));


/***/ }),
/* 611 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    /*jshint -W100*/
    var si = moment.defineLocale('si', {
        months : 'ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්'.split('_'),
        monthsShort : 'ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ'.split('_'),
        weekdays : 'ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා'.split('_'),
        weekdaysShort : 'ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන'.split('_'),
        weekdaysMin : 'ඉ_ස_අ_බ_බ්‍ර_සි_සෙ'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'a h:mm',
            LTS : 'a h:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY MMMM D',
            LLL : 'YYYY MMMM D, a h:mm',
            LLLL : 'YYYY MMMM D [වැනි] dddd, a h:mm:ss'
        },
        calendar : {
            sameDay : '[අද] LT[ට]',
            nextDay : '[හෙට] LT[ට]',
            nextWeek : 'dddd LT[ට]',
            lastDay : '[ඊයේ] LT[ට]',
            lastWeek : '[පසුගිය] dddd LT[ට]',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%sකින්',
            past : '%sකට පෙර',
            s : 'තත්පර කිහිපය',
            ss : 'තත්පර %d',
            m : 'මිනිත්තුව',
            mm : 'මිනිත්තු %d',
            h : 'පැය',
            hh : 'පැය %d',
            d : 'දිනය',
            dd : 'දින %d',
            M : 'මාසය',
            MM : 'මාස %d',
            y : 'වසර',
            yy : 'වසර %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2} වැනි/,
        ordinal : function (number) {
            return number + ' වැනි';
        },
        meridiemParse : /පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,
        isPM : function (input) {
            return input === 'ප.ව.' || input === 'පස් වරු';
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'ප.ව.' : 'පස් වරු';
            } else {
                return isLower ? 'පෙ.ව.' : 'පෙර වරු';
            }
        }
    });

    return si;

})));


/***/ }),
/* 612 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = 'január_február_marec_apríl_máj_jún_júl_august_september_október_november_december'.split('_'),
        monthsShort = 'jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec'.split('_');
    function plural(n) {
        return (n > 1) && (n < 5);
    }
    function translate(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':  // a few seconds / in a few seconds / a few seconds ago
                return (withoutSuffix || isFuture) ? 'pár sekúnd' : 'pár sekundami';
            case 'ss': // 9 seconds / in 9 seconds / 9 seconds ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'sekundy' : 'sekúnd');
                } else {
                    return result + 'sekundami';
                }
                break;
            case 'm':  // a minute / in a minute / a minute ago
                return withoutSuffix ? 'minúta' : (isFuture ? 'minútu' : 'minútou');
            case 'mm': // 9 minutes / in 9 minutes / 9 minutes ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'minúty' : 'minút');
                } else {
                    return result + 'minútami';
                }
                break;
            case 'h':  // an hour / in an hour / an hour ago
                return withoutSuffix ? 'hodina' : (isFuture ? 'hodinu' : 'hodinou');
            case 'hh': // 9 hours / in 9 hours / 9 hours ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'hodiny' : 'hodín');
                } else {
                    return result + 'hodinami';
                }
                break;
            case 'd':  // a day / in a day / a day ago
                return (withoutSuffix || isFuture) ? 'deň' : 'dňom';
            case 'dd': // 9 days / in 9 days / 9 days ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'dni' : 'dní');
                } else {
                    return result + 'dňami';
                }
                break;
            case 'M':  // a month / in a month / a month ago
                return (withoutSuffix || isFuture) ? 'mesiac' : 'mesiacom';
            case 'MM': // 9 months / in 9 months / 9 months ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'mesiace' : 'mesiacov');
                } else {
                    return result + 'mesiacmi';
                }
                break;
            case 'y':  // a year / in a year / a year ago
                return (withoutSuffix || isFuture) ? 'rok' : 'rokom';
            case 'yy': // 9 years / in 9 years / 9 years ago
                if (withoutSuffix || isFuture) {
                    return result + (plural(number) ? 'roky' : 'rokov');
                } else {
                    return result + 'rokmi';
                }
                break;
        }
    }

    var sk = moment.defineLocale('sk', {
        months : months,
        monthsShort : monthsShort,
        weekdays : 'nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota'.split('_'),
        weekdaysShort : 'ne_po_ut_st_št_pi_so'.split('_'),
        weekdaysMin : 'ne_po_ut_st_št_pi_so'.split('_'),
        longDateFormat : {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay: '[dnes o] LT',
            nextDay: '[zajtra o] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[v nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[v] dddd [o] LT';
                    case 3:
                        return '[v stredu o] LT';
                    case 4:
                        return '[vo štvrtok o] LT';
                    case 5:
                        return '[v piatok o] LT';
                    case 6:
                        return '[v sobotu o] LT';
                }
            },
            lastDay: '[včera o] LT',
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[minulú nedeľu o] LT';
                    case 1:
                    case 2:
                        return '[minulý] dddd [o] LT';
                    case 3:
                        return '[minulú stredu o] LT';
                    case 4:
                    case 5:
                        return '[minulý] dddd [o] LT';
                    case 6:
                        return '[minulú sobotu o] LT';
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'za %s',
            past : 'pred %s',
            s : translate,
            ss : translate,
            m : translate,
            mm : translate,
            h : translate,
            hh : translate,
            d : translate,
            dd : translate,
            M : translate,
            MM : translate,
            y : translate,
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sk;

})));


/***/ }),
/* 613 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var result = number + ' ';
        switch (key) {
            case 's':
                return withoutSuffix || isFuture ? 'nekaj sekund' : 'nekaj sekundami';
            case 'ss':
                if (number === 1) {
                    result += withoutSuffix ? 'sekundo' : 'sekundi';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'sekundi' : 'sekundah';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'sekunde' : 'sekundah';
                } else {
                    result += withoutSuffix || isFuture ? 'sekund' : 'sekund';
                }
                return result;
            case 'm':
                return withoutSuffix ? 'ena minuta' : 'eno minuto';
            case 'mm':
                if (number === 1) {
                    result += withoutSuffix ? 'minuta' : 'minuto';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'minuti' : 'minutama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'minute' : 'minutami';
                } else {
                    result += withoutSuffix || isFuture ? 'minut' : 'minutami';
                }
                return result;
            case 'h':
                return withoutSuffix ? 'ena ura' : 'eno uro';
            case 'hh':
                if (number === 1) {
                    result += withoutSuffix ? 'ura' : 'uro';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'uri' : 'urama';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'ure' : 'urami';
                } else {
                    result += withoutSuffix || isFuture ? 'ur' : 'urami';
                }
                return result;
            case 'd':
                return withoutSuffix || isFuture ? 'en dan' : 'enim dnem';
            case 'dd':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'dan' : 'dnem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevoma';
                } else {
                    result += withoutSuffix || isFuture ? 'dni' : 'dnevi';
                }
                return result;
            case 'M':
                return withoutSuffix || isFuture ? 'en mesec' : 'enim mesecem';
            case 'MM':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'mesec' : 'mesecem';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'meseca' : 'mesecema';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'mesece' : 'meseci';
                } else {
                    result += withoutSuffix || isFuture ? 'mesecev' : 'meseci';
                }
                return result;
            case 'y':
                return withoutSuffix || isFuture ? 'eno leto' : 'enim letom';
            case 'yy':
                if (number === 1) {
                    result += withoutSuffix || isFuture ? 'leto' : 'letom';
                } else if (number === 2) {
                    result += withoutSuffix || isFuture ? 'leti' : 'letoma';
                } else if (number < 5) {
                    result += withoutSuffix || isFuture ? 'leta' : 'leti';
                } else {
                    result += withoutSuffix || isFuture ? 'let' : 'leti';
                }
                return result;
        }
    }

    var sl = moment.defineLocale('sl', {
        months : 'januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december'.split('_'),
        monthsShort : 'jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays : 'nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota'.split('_'),
        weekdaysShort : 'ned._pon._tor._sre._čet._pet._sob.'.split('_'),
        weekdaysMin : 'ne_po_to_sr_če_pe_so'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM YYYY',
            LLL : 'D. MMMM YYYY H:mm',
            LLLL : 'dddd, D. MMMM YYYY H:mm'
        },
        calendar : {
            sameDay  : '[danes ob] LT',
            nextDay  : '[jutri ob] LT',

            nextWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[v] [nedeljo] [ob] LT';
                    case 3:
                        return '[v] [sredo] [ob] LT';
                    case 6:
                        return '[v] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[v] dddd [ob] LT';
                }
            },
            lastDay  : '[včeraj ob] LT',
            lastWeek : function () {
                switch (this.day()) {
                    case 0:
                        return '[prejšnjo] [nedeljo] [ob] LT';
                    case 3:
                        return '[prejšnjo] [sredo] [ob] LT';
                    case 6:
                        return '[prejšnjo] [soboto] [ob] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[prejšnji] dddd [ob] LT';
                }
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'čez %s',
            past   : 'pred %s',
            s      : processRelativeTime,
            ss     : processRelativeTime,
            m      : processRelativeTime,
            mm     : processRelativeTime,
            h      : processRelativeTime,
            hh     : processRelativeTime,
            d      : processRelativeTime,
            dd     : processRelativeTime,
            M      : processRelativeTime,
            MM     : processRelativeTime,
            y      : processRelativeTime,
            yy     : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return sl;

})));


/***/ }),
/* 614 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var sq = moment.defineLocale('sq', {
        months : 'Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor'.split('_'),
        monthsShort : 'Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj'.split('_'),
        weekdays : 'E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë'.split('_'),
        weekdaysShort : 'Die_Hën_Mar_Mër_Enj_Pre_Sht'.split('_'),
        weekdaysMin : 'D_H_Ma_Më_E_P_Sh'.split('_'),
        weekdaysParseExact : true,
        meridiemParse: /PD|MD/,
        isPM: function (input) {
            return input.charAt(0) === 'M';
        },
        meridiem : function (hours, minutes, isLower) {
            return hours < 12 ? 'PD' : 'MD';
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Sot në] LT',
            nextDay : '[Nesër në] LT',
            nextWeek : 'dddd [në] LT',
            lastDay : '[Dje në] LT',
            lastWeek : 'dddd [e kaluar në] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'në %s',
            past : '%s më parë',
            s : 'disa sekonda',
            ss : '%d sekonda',
            m : 'një minutë',
            mm : '%d minuta',
            h : 'një orë',
            hh : '%d orë',
            d : 'një ditë',
            dd : '%d ditë',
            M : 'një muaj',
            MM : '%d muaj',
            y : 'një vit',
            yy : '%d vite'
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sq;

})));


/***/ }),
/* 615 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['секунда', 'секунде', 'секунди'],
            m: ['један минут', 'једне минуте'],
            mm: ['минут', 'минуте', 'минута'],
            h: ['један сат', 'једног сата'],
            hh: ['сат', 'сата', 'сати'],
            dd: ['дан', 'дана', 'дана'],
            MM: ['месец', 'месеца', 'месеци'],
            yy: ['година', 'године', 'година']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var srCyrl = moment.defineLocale('sr-cyrl', {
        months: 'јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар'.split('_'),
        monthsShort: 'јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.'.split('_'),
        monthsParseExact: true,
        weekdays: 'недеља_понедељак_уторак_среда_четвртак_петак_субота'.split('_'),
        weekdaysShort: 'нед._пон._уто._сре._чет._пет._суб.'.split('_'),
        weekdaysMin: 'не_по_ут_ср_че_пе_су'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[данас у] LT',
            nextDay: '[сутра у] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[у] [недељу] [у] LT';
                    case 3:
                        return '[у] [среду] [у] LT';
                    case 6:
                        return '[у] [суботу] [у] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[у] dddd [у] LT';
                }
            },
            lastDay  : '[јуче у] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[прошле] [недеље] [у] LT',
                    '[прошлог] [понедељка] [у] LT',
                    '[прошлог] [уторка] [у] LT',
                    '[прошле] [среде] [у] LT',
                    '[прошлог] [четвртка] [у] LT',
                    '[прошлог] [петка] [у] LT',
                    '[прошле] [суботе] [у] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'за %s',
            past   : 'пре %s',
            s      : 'неколико секунди',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'дан',
            dd     : translator.translate,
            M      : 'месец',
            MM     : translator.translate,
            y      : 'годину',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return srCyrl;

})));


/***/ }),
/* 616 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var translator = {
        words: { //Different grammatical cases
            ss: ['sekunda', 'sekunde', 'sekundi'],
            m: ['jedan minut', 'jedne minute'],
            mm: ['minut', 'minute', 'minuta'],
            h: ['jedan sat', 'jednog sata'],
            hh: ['sat', 'sata', 'sati'],
            dd: ['dan', 'dana', 'dana'],
            MM: ['mesec', 'meseca', 'meseci'],
            yy: ['godina', 'godine', 'godina']
        },
        correctGrammaticalCase: function (number, wordKey) {
            return number === 1 ? wordKey[0] : (number >= 2 && number <= 4 ? wordKey[1] : wordKey[2]);
        },
        translate: function (number, withoutSuffix, key) {
            var wordKey = translator.words[key];
            if (key.length === 1) {
                return withoutSuffix ? wordKey[0] : wordKey[1];
            } else {
                return number + ' ' + translator.correctGrammaticalCase(number, wordKey);
            }
        }
    };

    var sr = moment.defineLocale('sr', {
        months: 'januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar'.split('_'),
        monthsShort: 'jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.'.split('_'),
        monthsParseExact: true,
        weekdays: 'nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota'.split('_'),
        weekdaysShort: 'ned._pon._uto._sre._čet._pet._sub.'.split('_'),
        weekdaysMin: 'ne_po_ut_sr_če_pe_su'.split('_'),
        weekdaysParseExact : true,
        longDateFormat: {
            LT: 'H:mm',
            LTS : 'H:mm:ss',
            L: 'DD.MM.YYYY',
            LL: 'D. MMMM YYYY',
            LLL: 'D. MMMM YYYY H:mm',
            LLLL: 'dddd, D. MMMM YYYY H:mm'
        },
        calendar: {
            sameDay: '[danas u] LT',
            nextDay: '[sutra u] LT',
            nextWeek: function () {
                switch (this.day()) {
                    case 0:
                        return '[u] [nedelju] [u] LT';
                    case 3:
                        return '[u] [sredu] [u] LT';
                    case 6:
                        return '[u] [subotu] [u] LT';
                    case 1:
                    case 2:
                    case 4:
                    case 5:
                        return '[u] dddd [u] LT';
                }
            },
            lastDay  : '[juče u] LT',
            lastWeek : function () {
                var lastWeekDays = [
                    '[prošle] [nedelje] [u] LT',
                    '[prošlog] [ponedeljka] [u] LT',
                    '[prošlog] [utorka] [u] LT',
                    '[prošle] [srede] [u] LT',
                    '[prošlog] [četvrtka] [u] LT',
                    '[prošlog] [petka] [u] LT',
                    '[prošle] [subote] [u] LT'
                ];
                return lastWeekDays[this.day()];
            },
            sameElse : 'L'
        },
        relativeTime : {
            future : 'za %s',
            past   : 'pre %s',
            s      : 'nekoliko sekundi',
            ss     : translator.translate,
            m      : translator.translate,
            mm     : translator.translate,
            h      : translator.translate,
            hh     : translator.translate,
            d      : 'dan',
            dd     : translator.translate,
            M      : 'mesec',
            MM     : translator.translate,
            y      : 'godinu',
            yy     : translator.translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return sr;

})));


/***/ }),
/* 617 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ss = moment.defineLocale('ss', {
        months : "Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split('_'),
        monthsShort : 'Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo'.split('_'),
        weekdays : 'Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo'.split('_'),
        weekdaysShort : 'Lis_Umb_Lsb_Les_Lsi_Lsh_Umg'.split('_'),
        weekdaysMin : 'Li_Us_Lb_Lt_Ls_Lh_Ug'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Namuhla nga] LT',
            nextDay : '[Kusasa nga] LT',
            nextWeek : 'dddd [nga] LT',
            lastDay : '[Itolo nga] LT',
            lastWeek : 'dddd [leliphelile] [nga] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'nga %s',
            past : 'wenteka nga %s',
            s : 'emizuzwana lomcane',
            ss : '%d mzuzwana',
            m : 'umzuzu',
            mm : '%d emizuzu',
            h : 'lihora',
            hh : '%d emahora',
            d : 'lilanga',
            dd : '%d emalanga',
            M : 'inyanga',
            MM : '%d tinyanga',
            y : 'umnyaka',
            yy : '%d iminyaka'
        },
        meridiemParse: /ekuseni|emini|entsambama|ebusuku/,
        meridiem : function (hours, minutes, isLower) {
            if (hours < 11) {
                return 'ekuseni';
            } else if (hours < 15) {
                return 'emini';
            } else if (hours < 19) {
                return 'entsambama';
            } else {
                return 'ebusuku';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'ekuseni') {
                return hour;
            } else if (meridiem === 'emini') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'entsambama' || meridiem === 'ebusuku') {
                if (hour === 0) {
                    return 0;
                }
                return hour + 12;
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : '%d',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ss;

})));


/***/ }),
/* 618 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var sv = moment.defineLocale('sv', {
        months : 'januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december'.split('_'),
        monthsShort : 'jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec'.split('_'),
        weekdays : 'söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag'.split('_'),
        weekdaysShort : 'sön_mån_tis_ons_tor_fre_lör'.split('_'),
        weekdaysMin : 'sö_må_ti_on_to_fr_lö'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY-MM-DD',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY [kl.] HH:mm',
            LLLL : 'dddd D MMMM YYYY [kl.] HH:mm',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Idag] LT',
            nextDay: '[Imorgon] LT',
            lastDay: '[Igår] LT',
            nextWeek: '[På] dddd LT',
            lastWeek: '[I] dddd[s] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'om %s',
            past : 'för %s sedan',
            s : 'några sekunder',
            ss : '%d sekunder',
            m : 'en minut',
            mm : '%d minuter',
            h : 'en timme',
            hh : '%d timmar',
            d : 'en dag',
            dd : '%d dagar',
            M : 'en månad',
            MM : '%d månader',
            y : 'ett år',
            yy : '%d år'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(e|a)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'e' :
                (b === 1) ? 'a' :
                (b === 2) ? 'a' :
                (b === 3) ? 'e' : 'e';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return sv;

})));


/***/ }),
/* 619 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var sw = moment.defineLocale('sw', {
        months : 'Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba'.split('_'),
        monthsShort : 'Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des'.split('_'),
        weekdays : 'Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi'.split('_'),
        weekdaysShort : 'Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos'.split('_'),
        weekdaysMin : 'J2_J3_J4_J5_Al_Ij_J1'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[leo saa] LT',
            nextDay : '[kesho saa] LT',
            nextWeek : '[wiki ijayo] dddd [saat] LT',
            lastDay : '[jana] LT',
            lastWeek : '[wiki iliyopita] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s baadaye',
            past : 'tokea %s',
            s : 'hivi punde',
            ss : 'sekunde %d',
            m : 'dakika moja',
            mm : 'dakika %d',
            h : 'saa limoja',
            hh : 'masaa %d',
            d : 'siku moja',
            dd : 'masiku %d',
            M : 'mwezi mmoja',
            MM : 'miezi %d',
            y : 'mwaka mmoja',
            yy : 'miaka %d'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return sw;

})));


/***/ }),
/* 620 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var symbolMap = {
        '1': '௧',
        '2': '௨',
        '3': '௩',
        '4': '௪',
        '5': '௫',
        '6': '௬',
        '7': '௭',
        '8': '௮',
        '9': '௯',
        '0': '௦'
    }, numberMap = {
        '௧': '1',
        '௨': '2',
        '௩': '3',
        '௪': '4',
        '௫': '5',
        '௬': '6',
        '௭': '7',
        '௮': '8',
        '௯': '9',
        '௦': '0'
    };

    var ta = moment.defineLocale('ta', {
        months : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        monthsShort : 'ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்'.split('_'),
        weekdays : 'ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை'.split('_'),
        weekdaysShort : 'ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி'.split('_'),
        weekdaysMin : 'ஞா_தி_செ_பு_வி_வெ_ச'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, HH:mm',
            LLLL : 'dddd, D MMMM YYYY, HH:mm'
        },
        calendar : {
            sameDay : '[இன்று] LT',
            nextDay : '[நாளை] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[நேற்று] LT',
            lastWeek : '[கடந்த வாரம்] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s இல்',
            past : '%s முன்',
            s : 'ஒரு சில விநாடிகள்',
            ss : '%d விநாடிகள்',
            m : 'ஒரு நிமிடம்',
            mm : '%d நிமிடங்கள்',
            h : 'ஒரு மணி நேரம்',
            hh : '%d மணி நேரம்',
            d : 'ஒரு நாள்',
            dd : '%d நாட்கள்',
            M : 'ஒரு மாதம்',
            MM : '%d மாதங்கள்',
            y : 'ஒரு வருடம்',
            yy : '%d ஆண்டுகள்'
        },
        dayOfMonthOrdinalParse: /\d{1,2}வது/,
        ordinal : function (number) {
            return number + 'வது';
        },
        preparse: function (string) {
            return string.replace(/[௧௨௩௪௫௬௭௮௯௦]/g, function (match) {
                return numberMap[match];
            });
        },
        postformat: function (string) {
            return string.replace(/\d/g, function (match) {
                return symbolMap[match];
            });
        },
        // refer http://ta.wikipedia.org/s/1er1
        meridiemParse: /யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,
        meridiem : function (hour, minute, isLower) {
            if (hour < 2) {
                return ' யாமம்';
            } else if (hour < 6) {
                return ' வைகறை';  // வைகறை
            } else if (hour < 10) {
                return ' காலை'; // காலை
            } else if (hour < 14) {
                return ' நண்பகல்'; // நண்பகல்
            } else if (hour < 18) {
                return ' எற்பாடு'; // எற்பாடு
            } else if (hour < 22) {
                return ' மாலை'; // மாலை
            } else {
                return ' யாமம்';
            }
        },
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'யாமம்') {
                return hour < 2 ? hour : hour + 12;
            } else if (meridiem === 'வைகறை' || meridiem === 'காலை') {
                return hour;
            } else if (meridiem === 'நண்பகல்') {
                return hour >= 10 ? hour : hour + 12;
            } else {
                return hour + 12;
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ta;

})));


/***/ }),
/* 621 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var te = moment.defineLocale('te', {
        months : 'జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జూలై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్'.split('_'),
        monthsShort : 'జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జూలై_ఆగ._సెప్._అక్టో._నవ._డిసె.'.split('_'),
        monthsParseExact : true,
        weekdays : 'ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం'.split('_'),
        weekdaysShort : 'ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని'.split('_'),
        weekdaysMin : 'ఆ_సో_మం_బు_గు_శు_శ'.split('_'),
        longDateFormat : {
            LT : 'A h:mm',
            LTS : 'A h:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY, A h:mm',
            LLLL : 'dddd, D MMMM YYYY, A h:mm'
        },
        calendar : {
            sameDay : '[నేడు] LT',
            nextDay : '[రేపు] LT',
            nextWeek : 'dddd, LT',
            lastDay : '[నిన్న] LT',
            lastWeek : '[గత] dddd, LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s లో',
            past : '%s క్రితం',
            s : 'కొన్ని క్షణాలు',
            ss : '%d సెకన్లు',
            m : 'ఒక నిమిషం',
            mm : '%d నిమిషాలు',
            h : 'ఒక గంట',
            hh : '%d గంటలు',
            d : 'ఒక రోజు',
            dd : '%d రోజులు',
            M : 'ఒక నెల',
            MM : '%d నెలలు',
            y : 'ఒక సంవత్సరం',
            yy : '%d సంవత్సరాలు'
        },
        dayOfMonthOrdinalParse : /\d{1,2}వ/,
        ordinal : '%dవ',
        meridiemParse: /రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'రాత్రి') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'ఉదయం') {
                return hour;
            } else if (meridiem === 'మధ్యాహ్నం') {
                return hour >= 10 ? hour : hour + 12;
            } else if (meridiem === 'సాయంత్రం') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'రాత్రి';
            } else if (hour < 10) {
                return 'ఉదయం';
            } else if (hour < 17) {
                return 'మధ్యాహ్నం';
            } else if (hour < 20) {
                return 'సాయంత్రం';
            } else {
                return 'రాత్రి';
            }
        },
        week : {
            dow : 0, // Sunday is the first day of the week.
            doy : 6  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return te;

})));


/***/ }),
/* 622 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tet = moment.defineLocale('tet', {
        months : 'Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez'.split('_'),
        weekdays : 'Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu'.split('_'),
        weekdaysShort : 'Dom_Seg_Ters_Kua_Kint_Sest_Sab'.split('_'),
        weekdaysMin : 'Do_Seg_Te_Ku_Ki_Ses_Sa'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Ohin iha] LT',
            nextDay: '[Aban iha] LT',
            nextWeek: 'dddd [iha] LT',
            lastDay: '[Horiseik iha] LT',
            lastWeek: 'dddd [semana kotuk] [iha] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'iha %s',
            past : '%s liuba',
            s : 'minutu balun',
            ss : 'minutu %d',
            m : 'minutu ida',
            mm : 'minutu %d',
            h : 'oras ida',
            hh : 'oras %d',
            d : 'loron ida',
            dd : 'loron %d',
            M : 'fulan ida',
            MM : 'fulan %d',
            y : 'tinan ida',
            yy : 'tinan %d'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(st|nd|rd|th)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tet;

})));


/***/ }),
/* 623 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var suffixes = {
        0: '-ум',
        1: '-ум',
        2: '-юм',
        3: '-юм',
        4: '-ум',
        5: '-ум',
        6: '-ум',
        7: '-ум',
        8: '-ум',
        9: '-ум',
        10: '-ум',
        12: '-ум',
        13: '-ум',
        20: '-ум',
        30: '-юм',
        40: '-ум',
        50: '-ум',
        60: '-ум',
        70: '-ум',
        80: '-ум',
        90: '-ум',
        100: '-ум'
    };

    var tg = moment.defineLocale('tg', {
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе'.split('_'),
        weekdaysShort : 'яшб_дшб_сшб_чшб_пшб_ҷум_шнб'.split('_'),
        weekdaysMin : 'яш_дш_сш_чш_пш_ҷм_шб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[Имрӯз соати] LT',
            nextDay : '[Пагоҳ соати] LT',
            lastDay : '[Дирӯз соати] LT',
            nextWeek : 'dddd[и] [ҳафтаи оянда соати] LT',
            lastWeek : 'dddd[и] [ҳафтаи гузашта соати] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'баъди %s',
            past : '%s пеш',
            s : 'якчанд сония',
            m : 'як дақиқа',
            mm : '%d дақиқа',
            h : 'як соат',
            hh : '%d соат',
            d : 'як рӯз',
            dd : '%d рӯз',
            M : 'як моҳ',
            MM : '%d моҳ',
            y : 'як сол',
            yy : '%d сол'
        },
        meridiemParse: /шаб|субҳ|рӯз|бегоҳ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === 'шаб') {
                return hour < 4 ? hour : hour + 12;
            } else if (meridiem === 'субҳ') {
                return hour;
            } else if (meridiem === 'рӯз') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === 'бегоҳ') {
                return hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            if (hour < 4) {
                return 'шаб';
            } else if (hour < 11) {
                return 'субҳ';
            } else if (hour < 16) {
                return 'рӯз';
            } else if (hour < 19) {
                return 'бегоҳ';
            } else {
                return 'шаб';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(ум|юм)/,
        ordinal: function (number) {
            var a = number % 10,
                b = number >= 100 ? 100 : null;
            return number + (suffixes[number] || suffixes[a] || suffixes[b]);
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1th is the first week of the year.
        }
    });

    return tg;

})));


/***/ }),
/* 624 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var th = moment.defineLocale('th', {
        months : 'มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม'.split('_'),
        monthsShort : 'ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.'.split('_'),
        monthsParseExact: true,
        weekdays : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์'.split('_'),
        weekdaysShort : 'อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์'.split('_'), // yes, three characters difference
        weekdaysMin : 'อา._จ._อ._พ._พฤ._ศ._ส.'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'H:mm',
            LTS : 'H:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY เวลา H:mm',
            LLLL : 'วันddddที่ D MMMM YYYY เวลา H:mm'
        },
        meridiemParse: /ก่อนเที่ยง|หลังเที่ยง/,
        isPM: function (input) {
            return input === 'หลังเที่ยง';
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'ก่อนเที่ยง';
            } else {
                return 'หลังเที่ยง';
            }
        },
        calendar : {
            sameDay : '[วันนี้ เวลา] LT',
            nextDay : '[พรุ่งนี้ เวลา] LT',
            nextWeek : 'dddd[หน้า เวลา] LT',
            lastDay : '[เมื่อวานนี้ เวลา] LT',
            lastWeek : '[วัน]dddd[ที่แล้ว เวลา] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'อีก %s',
            past : '%sที่แล้ว',
            s : 'ไม่กี่วินาที',
            ss : '%d วินาที',
            m : '1 นาที',
            mm : '%d นาที',
            h : '1 ชั่วโมง',
            hh : '%d ชั่วโมง',
            d : '1 วัน',
            dd : '%d วัน',
            M : '1 เดือน',
            MM : '%d เดือน',
            y : '1 ปี',
            yy : '%d ปี'
        }
    });

    return th;

})));


/***/ }),
/* 625 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tlPh = moment.defineLocale('tl-ph', {
        months : 'Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre'.split('_'),
        monthsShort : 'Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis'.split('_'),
        weekdays : 'Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado'.split('_'),
        weekdaysShort : 'Lin_Lun_Mar_Miy_Huw_Biy_Sab'.split('_'),
        weekdaysMin : 'Li_Lu_Ma_Mi_Hu_Bi_Sab'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'MM/D/YYYY',
            LL : 'MMMM D, YYYY',
            LLL : 'MMMM D, YYYY HH:mm',
            LLLL : 'dddd, MMMM DD, YYYY HH:mm'
        },
        calendar : {
            sameDay: 'LT [ngayong araw]',
            nextDay: '[Bukas ng] LT',
            nextWeek: 'LT [sa susunod na] dddd',
            lastDay: 'LT [kahapon]',
            lastWeek: 'LT [noong nakaraang] dddd',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'sa loob ng %s',
            past : '%s ang nakalipas',
            s : 'ilang segundo',
            ss : '%d segundo',
            m : 'isang minuto',
            mm : '%d minuto',
            h : 'isang oras',
            hh : '%d oras',
            d : 'isang araw',
            dd : '%d araw',
            M : 'isang buwan',
            MM : '%d buwan',
            y : 'isang taon',
            yy : '%d taon'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlPh;

})));


/***/ }),
/* 626 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var numbersNouns = 'pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut'.split('_');

    function translateFuture(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
        time.slice(0, -3) + 'leS' :
        (output.indexOf('jar') !== -1) ?
        time.slice(0, -3) + 'waQ' :
        (output.indexOf('DIS') !== -1) ?
        time.slice(0, -3) + 'nem' :
        time + ' pIq';
        return time;
    }

    function translatePast(output) {
        var time = output;
        time = (output.indexOf('jaj') !== -1) ?
        time.slice(0, -3) + 'Hu’' :
        (output.indexOf('jar') !== -1) ?
        time.slice(0, -3) + 'wen' :
        (output.indexOf('DIS') !== -1) ?
        time.slice(0, -3) + 'ben' :
        time + ' ret';
        return time;
    }

    function translate(number, withoutSuffix, string, isFuture) {
        var numberNoun = numberAsNoun(number);
        switch (string) {
            case 'ss':
                return numberNoun + ' lup';
            case 'mm':
                return numberNoun + ' tup';
            case 'hh':
                return numberNoun + ' rep';
            case 'dd':
                return numberNoun + ' jaj';
            case 'MM':
                return numberNoun + ' jar';
            case 'yy':
                return numberNoun + ' DIS';
        }
    }

    function numberAsNoun(number) {
        var hundred = Math.floor((number % 1000) / 100),
        ten = Math.floor((number % 100) / 10),
        one = number % 10,
        word = '';
        if (hundred > 0) {
            word += numbersNouns[hundred] + 'vatlh';
        }
        if (ten > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[ten] + 'maH';
        }
        if (one > 0) {
            word += ((word !== '') ? ' ' : '') + numbersNouns[one];
        }
        return (word === '') ? 'pagh' : word;
    }

    var tlh = moment.defineLocale('tlh', {
        months : 'tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’'.split('_'),
        monthsShort : 'jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’'.split('_'),
        monthsParseExact : true,
        weekdays : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysShort : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        weekdaysMin : 'lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[DaHjaj] LT',
            nextDay: '[wa’leS] LT',
            nextWeek: 'LLL',
            lastDay: '[wa’Hu’] LT',
            lastWeek: 'LLL',
            sameElse: 'L'
        },
        relativeTime : {
            future : translateFuture,
            past : translatePast,
            s : 'puS lup',
            ss : translate,
            m : 'wa’ tup',
            mm : translate,
            h : 'wa’ rep',
            hh : translate,
            d : 'wa’ jaj',
            dd : translate,
            M : 'wa’ jar',
            MM : translate,
            y : 'wa’ DIS',
            yy : translate
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return tlh;

})));


/***/ }),
/* 627 */
/***/ (function(module, exports, __webpack_require__) {


;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';

    var suffixes = {
        1: '\'inci',
        5: '\'inci',
        8: '\'inci',
        70: '\'inci',
        80: '\'inci',
        2: '\'nci',
        7: '\'nci',
        20: '\'nci',
        50: '\'nci',
        3: '\'üncü',
        4: '\'üncü',
        100: '\'üncü',
        6: '\'ncı',
        9: '\'uncu',
        10: '\'uncu',
        30: '\'uncu',
        60: '\'ıncı',
        90: '\'ıncı'
    };

    var tr = moment.defineLocale('tr', {
        months : 'Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık'.split('_'),
        monthsShort : 'Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara'.split('_'),
        weekdays : 'Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi'.split('_'),
        weekdaysShort : 'Paz_Pts_Sal_Çar_Per_Cum_Cts'.split('_'),
        weekdaysMin : 'Pz_Pt_Sa_Ça_Pe_Cu_Ct'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[bugün saat] LT',
            nextDay : '[yarın saat] LT',
            nextWeek : '[gelecek] dddd [saat] LT',
            lastDay : '[dün] LT',
            lastWeek : '[geçen] dddd [saat] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s sonra',
            past : '%s önce',
            s : 'birkaç saniye',
            ss : '%d saniye',
            m : 'bir dakika',
            mm : '%d dakika',
            h : 'bir saat',
            hh : '%d saat',
            d : 'bir gün',
            dd : '%d gün',
            M : 'bir ay',
            MM : '%d ay',
            y : 'bir yıl',
            yy : '%d yıl'
        },
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'Do':
                case 'DD':
                    return number;
                default:
                    if (number === 0) {  // special case for zero
                        return number + '\'ıncı';
                    }
                    var a = number % 10,
                        b = number % 100 - a,
                        c = number >= 100 ? 100 : null;
                    return number + (suffixes[a] || suffixes[b] || suffixes[c]);
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return tr;

})));


/***/ }),
/* 628 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    // After the year there should be a slash and the amount of years since December 26, 1979 in Roman numerals.
    // This is currently too difficult (maybe even impossible) to add.
    var tzl = moment.defineLocale('tzl', {
        months : 'Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar'.split('_'),
        monthsShort : 'Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec'.split('_'),
        weekdays : 'Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi'.split('_'),
        weekdaysShort : 'Súl_Lún_Mai_Már_Xhú_Vié_Sát'.split('_'),
        weekdaysMin : 'Sú_Lú_Ma_Má_Xh_Vi_Sá'.split('_'),
        longDateFormat : {
            LT : 'HH.mm',
            LTS : 'HH.mm.ss',
            L : 'DD.MM.YYYY',
            LL : 'D. MMMM [dallas] YYYY',
            LLL : 'D. MMMM [dallas] YYYY HH.mm',
            LLLL : 'dddd, [li] D. MMMM [dallas] YYYY HH.mm'
        },
        meridiemParse: /d\'o|d\'a/i,
        isPM : function (input) {
            return 'd\'o' === input.toLowerCase();
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours > 11) {
                return isLower ? 'd\'o' : 'D\'O';
            } else {
                return isLower ? 'd\'a' : 'D\'A';
            }
        },
        calendar : {
            sameDay : '[oxhi à] LT',
            nextDay : '[demà à] LT',
            nextWeek : 'dddd [à] LT',
            lastDay : '[ieiri à] LT',
            lastWeek : '[sür el] dddd [lasteu à] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'osprei %s',
            past : 'ja%s',
            s : processRelativeTime,
            ss : processRelativeTime,
            m : processRelativeTime,
            mm : processRelativeTime,
            h : processRelativeTime,
            hh : processRelativeTime,
            d : processRelativeTime,
            dd : processRelativeTime,
            M : processRelativeTime,
            MM : processRelativeTime,
            y : processRelativeTime,
            yy : processRelativeTime
        },
        dayOfMonthOrdinalParse: /\d{1,2}\./,
        ordinal : '%d.',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    function processRelativeTime(number, withoutSuffix, key, isFuture) {
        var format = {
            's': ['viensas secunds', '\'iensas secunds'],
            'ss': [number + ' secunds', '' + number + ' secunds'],
            'm': ['\'n míut', '\'iens míut'],
            'mm': [number + ' míuts', '' + number + ' míuts'],
            'h': ['\'n þora', '\'iensa þora'],
            'hh': [number + ' þoras', '' + number + ' þoras'],
            'd': ['\'n ziua', '\'iensa ziua'],
            'dd': [number + ' ziuas', '' + number + ' ziuas'],
            'M': ['\'n mes', '\'iens mes'],
            'MM': [number + ' mesen', '' + number + ' mesen'],
            'y': ['\'n ar', '\'iens ar'],
            'yy': [number + ' ars', '' + number + ' ars']
        };
        return isFuture ? format[key][0] : (withoutSuffix ? format[key][0] : format[key][1]);
    }

    return tzl;

})));


/***/ }),
/* 629 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tzmLatn = moment.defineLocale('tzm-latn', {
        months : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        monthsShort : 'innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir'.split('_'),
        weekdays : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysShort : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        weekdaysMin : 'asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[asdkh g] LT',
            nextDay: '[aska g] LT',
            nextWeek: 'dddd [g] LT',
            lastDay: '[assant g] LT',
            lastWeek: 'dddd [g] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'dadkh s yan %s',
            past : 'yan %s',
            s : 'imik',
            ss : '%d imik',
            m : 'minuḍ',
            mm : '%d minuḍ',
            h : 'saɛa',
            hh : '%d tassaɛin',
            d : 'ass',
            dd : '%d ossan',
            M : 'ayowr',
            MM : '%d iyyirn',
            y : 'asgas',
            yy : '%d isgasn'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return tzmLatn;

})));


/***/ }),
/* 630 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var tzm = moment.defineLocale('tzm', {
        months : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        monthsShort : 'ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ'.split('_'),
        weekdays : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysShort : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        weekdaysMin : 'ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS: 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[ⴰⵙⴷⵅ ⴴ] LT',
            nextDay: '[ⴰⵙⴽⴰ ⴴ] LT',
            nextWeek: 'dddd [ⴴ] LT',
            lastDay: '[ⴰⵚⴰⵏⵜ ⴴ] LT',
            lastWeek: 'dddd [ⴴ] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : 'ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s',
            past : 'ⵢⴰⵏ %s',
            s : 'ⵉⵎⵉⴽ',
            ss : '%d ⵉⵎⵉⴽ',
            m : 'ⵎⵉⵏⵓⴺ',
            mm : '%d ⵎⵉⵏⵓⴺ',
            h : 'ⵙⴰⵄⴰ',
            hh : '%d ⵜⴰⵙⵙⴰⵄⵉⵏ',
            d : 'ⴰⵙⵙ',
            dd : '%d oⵙⵙⴰⵏ',
            M : 'ⴰⵢoⵓⵔ',
            MM : '%d ⵉⵢⵢⵉⵔⵏ',
            y : 'ⴰⵙⴳⴰⵙ',
            yy : '%d ⵉⵙⴳⴰⵙⵏ'
        },
        week : {
            dow : 6, // Saturday is the first day of the week.
            doy : 12  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return tzm;

})));


/***/ }),
/* 631 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js language configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var ugCn = moment.defineLocale('ug-cn', {
        months: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        monthsShort: 'يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر'.split(
            '_'
        ),
        weekdays: 'يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە'.split(
            '_'
        ),
        weekdaysShort: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        weekdaysMin: 'يە_دۈ_سە_چا_پە_جۈ_شە'.split('_'),
        longDateFormat: {
            LT: 'HH:mm',
            LTS: 'HH:mm:ss',
            L: 'YYYY-MM-DD',
            LL: 'YYYY-يىلىM-ئاينىڭD-كۈنى',
            LLL: 'YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm',
            LLLL: 'dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm'
        },
        meridiemParse: /يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (
                meridiem === 'يېرىم كېچە' ||
                meridiem === 'سەھەر' ||
                meridiem === 'چۈشتىن بۇرۇن'
            ) {
                return hour;
            } else if (meridiem === 'چۈشتىن كېيىن' || meridiem === 'كەچ') {
                return hour + 12;
            } else {
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem: function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return 'يېرىم كېچە';
            } else if (hm < 900) {
                return 'سەھەر';
            } else if (hm < 1130) {
                return 'چۈشتىن بۇرۇن';
            } else if (hm < 1230) {
                return 'چۈش';
            } else if (hm < 1800) {
                return 'چۈشتىن كېيىن';
            } else {
                return 'كەچ';
            }
        },
        calendar: {
            sameDay: '[بۈگۈن سائەت] LT',
            nextDay: '[ئەتە سائەت] LT',
            nextWeek: '[كېلەركى] dddd [سائەت] LT',
            lastDay: '[تۆنۈگۈن] LT',
            lastWeek: '[ئالدىنقى] dddd [سائەت] LT',
            sameElse: 'L'
        },
        relativeTime: {
            future: '%s كېيىن',
            past: '%s بۇرۇن',
            s: 'نەچچە سېكونت',
            ss: '%d سېكونت',
            m: 'بىر مىنۇت',
            mm: '%d مىنۇت',
            h: 'بىر سائەت',
            hh: '%d سائەت',
            d: 'بىر كۈن',
            dd: '%d كۈن',
            M: 'بىر ئاي',
            MM: '%d ئاي',
            y: 'بىر يىل',
            yy: '%d يىل'
        },

        dayOfMonthOrdinalParse: /\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '-كۈنى';
                case 'w':
                case 'W':
                    return number + '-ھەپتە';
                default:
                    return number;
            }
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week: {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow: 1, // Monday is the first day of the week.
            doy: 7 // The week that contains Jan 1st is the first week of the year.
        }
    });

    return ugCn;

})));


/***/ }),
/* 632 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    function plural(word, num) {
        var forms = word.split('_');
        return num % 10 === 1 && num % 100 !== 11 ? forms[0] : (num % 10 >= 2 && num % 10 <= 4 && (num % 100 < 10 || num % 100 >= 20) ? forms[1] : forms[2]);
    }
    function relativeTimeWithPlural(number, withoutSuffix, key) {
        var format = {
            'ss': withoutSuffix ? 'секунда_секунди_секунд' : 'секунду_секунди_секунд',
            'mm': withoutSuffix ? 'хвилина_хвилини_хвилин' : 'хвилину_хвилини_хвилин',
            'hh': withoutSuffix ? 'година_години_годин' : 'годину_години_годин',
            'dd': 'день_дні_днів',
            'MM': 'місяць_місяці_місяців',
            'yy': 'рік_роки_років'
        };
        if (key === 'm') {
            return withoutSuffix ? 'хвилина' : 'хвилину';
        }
        else if (key === 'h') {
            return withoutSuffix ? 'година' : 'годину';
        }
        else {
            return number + ' ' + plural(format[key], +number);
        }
    }
    function weekdaysCaseReplace(m, format) {
        var weekdays = {
            'nominative': 'неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота'.split('_'),
            'accusative': 'неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу'.split('_'),
            'genitive': 'неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи'.split('_')
        };

        if (!m) {
            return weekdays['nominative'];
        }

        var nounCase = (/(\[[ВвУу]\]) ?dddd/).test(format) ?
            'accusative' :
            ((/\[?(?:минулої|наступної)? ?\] ?dddd/).test(format) ?
                'genitive' :
                'nominative');
        return weekdays[nounCase][m.day()];
    }
    function processHoursFunction(str) {
        return function () {
            return str + 'о' + (this.hours() === 11 ? 'б' : '') + '] LT';
        };
    }

    var uk = moment.defineLocale('uk', {
        months : {
            'format': 'січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня'.split('_'),
            'standalone': 'січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень'.split('_')
        },
        monthsShort : 'січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд'.split('_'),
        weekdays : weekdaysCaseReplace,
        weekdaysShort : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        weekdaysMin : 'нд_пн_вт_ср_чт_пт_сб'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD.MM.YYYY',
            LL : 'D MMMM YYYY р.',
            LLL : 'D MMMM YYYY р., HH:mm',
            LLLL : 'dddd, D MMMM YYYY р., HH:mm'
        },
        calendar : {
            sameDay: processHoursFunction('[Сьогодні '),
            nextDay: processHoursFunction('[Завтра '),
            lastDay: processHoursFunction('[Вчора '),
            nextWeek: processHoursFunction('[У] dddd ['),
            lastWeek: function () {
                switch (this.day()) {
                    case 0:
                    case 3:
                    case 5:
                    case 6:
                        return processHoursFunction('[Минулої] dddd [').call(this);
                    case 1:
                    case 2:
                    case 4:
                        return processHoursFunction('[Минулого] dddd [').call(this);
                }
            },
            sameElse: 'L'
        },
        relativeTime : {
            future : 'за %s',
            past : '%s тому',
            s : 'декілька секунд',
            ss : relativeTimeWithPlural,
            m : relativeTimeWithPlural,
            mm : relativeTimeWithPlural,
            h : 'годину',
            hh : relativeTimeWithPlural,
            d : 'день',
            dd : relativeTimeWithPlural,
            M : 'місяць',
            MM : relativeTimeWithPlural,
            y : 'рік',
            yy : relativeTimeWithPlural
        },
        // M. E.: those two are virtually unused but a user might want to implement them for his/her website for some reason
        meridiemParse: /ночі|ранку|дня|вечора/,
        isPM: function (input) {
            return /^(дня|вечора)$/.test(input);
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 4) {
                return 'ночі';
            } else if (hour < 12) {
                return 'ранку';
            } else if (hour < 17) {
                return 'дня';
            } else {
                return 'вечора';
            }
        },
        dayOfMonthOrdinalParse: /\d{1,2}-(й|го)/,
        ordinal: function (number, period) {
            switch (period) {
                case 'M':
                case 'd':
                case 'DDD':
                case 'w':
                case 'W':
                    return number + '-й';
                case 'D':
                    return number + '-го';
                default:
                    return number;
            }
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return uk;

})));


/***/ }),
/* 633 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var months = [
        'جنوری',
        'فروری',
        'مارچ',
        'اپریل',
        'مئی',
        'جون',
        'جولائی',
        'اگست',
        'ستمبر',
        'اکتوبر',
        'نومبر',
        'دسمبر'
    ];
    var days = [
        'اتوار',
        'پیر',
        'منگل',
        'بدھ',
        'جمعرات',
        'جمعہ',
        'ہفتہ'
    ];

    var ur = moment.defineLocale('ur', {
        months : months,
        monthsShort : months,
        weekdays : days,
        weekdaysShort : days,
        weekdaysMin : days,
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd، D MMMM YYYY HH:mm'
        },
        meridiemParse: /صبح|شام/,
        isPM : function (input) {
            return 'شام' === input;
        },
        meridiem : function (hour, minute, isLower) {
            if (hour < 12) {
                return 'صبح';
            }
            return 'شام';
        },
        calendar : {
            sameDay : '[آج بوقت] LT',
            nextDay : '[کل بوقت] LT',
            nextWeek : 'dddd [بوقت] LT',
            lastDay : '[گذشتہ روز بوقت] LT',
            lastWeek : '[گذشتہ] dddd [بوقت] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : '%s بعد',
            past : '%s قبل',
            s : 'چند سیکنڈ',
            ss : '%d سیکنڈ',
            m : 'ایک منٹ',
            mm : '%d منٹ',
            h : 'ایک گھنٹہ',
            hh : '%d گھنٹے',
            d : 'ایک دن',
            dd : '%d دن',
            M : 'ایک ماہ',
            MM : '%d ماہ',
            y : 'ایک سال',
            yy : '%d سال'
        },
        preparse: function (string) {
            return string.replace(/،/g, ',');
        },
        postformat: function (string) {
            return string.replace(/,/g, '،');
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return ur;

})));


/***/ }),
/* 634 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var uzLatn = moment.defineLocale('uz-latn', {
        months : 'Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr'.split('_'),
        monthsShort : 'Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek'.split('_'),
        weekdays : 'Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba'.split('_'),
        weekdaysShort : 'Yak_Dush_Sesh_Chor_Pay_Jum_Shan'.split('_'),
        weekdaysMin : 'Ya_Du_Se_Cho_Pa_Ju_Sha'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Bugun soat] LT [da]',
            nextDay : '[Ertaga] LT [da]',
            nextWeek : 'dddd [kuni soat] LT [da]',
            lastDay : '[Kecha soat] LT [da]',
            lastWeek : '[O\'tgan] dddd [kuni soat] LT [da]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Yaqin %s ichida',
            past : 'Bir necha %s oldin',
            s : 'soniya',
            ss : '%d soniya',
            m : 'bir daqiqa',
            mm : '%d daqiqa',
            h : 'bir soat',
            hh : '%d soat',
            d : 'bir kun',
            dd : '%d kun',
            M : 'bir oy',
            MM : '%d oy',
            y : 'bir yil',
            yy : '%d yil'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 1st is the first week of the year.
        }
    });

    return uzLatn;

})));


/***/ }),
/* 635 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var uz = moment.defineLocale('uz', {
        months : 'январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр'.split('_'),
        monthsShort : 'янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек'.split('_'),
        weekdays : 'Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба'.split('_'),
        weekdaysShort : 'Якш_Душ_Сеш_Чор_Пай_Жум_Шан'.split('_'),
        weekdaysMin : 'Як_Ду_Се_Чо_Па_Жу_Ша'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'D MMMM YYYY, dddd HH:mm'
        },
        calendar : {
            sameDay : '[Бугун соат] LT [да]',
            nextDay : '[Эртага] LT [да]',
            nextWeek : 'dddd [куни соат] LT [да]',
            lastDay : '[Кеча соат] LT [да]',
            lastWeek : '[Утган] dddd [куни соат] LT [да]',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'Якин %s ичида',
            past : 'Бир неча %s олдин',
            s : 'фурсат',
            ss : '%d фурсат',
            m : 'бир дакика',
            mm : '%d дакика',
            h : 'бир соат',
            hh : '%d соат',
            d : 'бир кун',
            dd : '%d кун',
            M : 'бир ой',
            MM : '%d ой',
            y : 'бир йил',
            yy : '%d йил'
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 7  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return uz;

})));


/***/ }),
/* 636 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var vi = moment.defineLocale('vi', {
        months : 'tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12'.split('_'),
        monthsShort : 'Th01_Th02_Th03_Th04_Th05_Th06_Th07_Th08_Th09_Th10_Th11_Th12'.split('_'),
        monthsParseExact : true,
        weekdays : 'chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy'.split('_'),
        weekdaysShort : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysMin : 'CN_T2_T3_T4_T5_T6_T7'.split('_'),
        weekdaysParseExact : true,
        meridiemParse: /sa|ch/i,
        isPM : function (input) {
            return /^ch$/i.test(input);
        },
        meridiem : function (hours, minutes, isLower) {
            if (hours < 12) {
                return isLower ? 'sa' : 'SA';
            } else {
                return isLower ? 'ch' : 'CH';
            }
        },
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM [năm] YYYY',
            LLL : 'D MMMM [năm] YYYY HH:mm',
            LLLL : 'dddd, D MMMM [năm] YYYY HH:mm',
            l : 'DD/M/YYYY',
            ll : 'D MMM YYYY',
            lll : 'D MMM YYYY HH:mm',
            llll : 'ddd, D MMM YYYY HH:mm'
        },
        calendar : {
            sameDay: '[Hôm nay lúc] LT',
            nextDay: '[Ngày mai lúc] LT',
            nextWeek: 'dddd [tuần tới lúc] LT',
            lastDay: '[Hôm qua lúc] LT',
            lastWeek: 'dddd [tuần rồi lúc] LT',
            sameElse: 'L'
        },
        relativeTime : {
            future : '%s tới',
            past : '%s trước',
            s : 'vài giây',
            ss : '%d giây' ,
            m : 'một phút',
            mm : '%d phút',
            h : 'một giờ',
            hh : '%d giờ',
            d : 'một ngày',
            dd : '%d ngày',
            M : 'một tháng',
            MM : '%d tháng',
            y : 'một năm',
            yy : '%d năm'
        },
        dayOfMonthOrdinalParse: /\d{1,2}/,
        ordinal : function (number) {
            return number;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return vi;

})));


/***/ }),
/* 637 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var xPseudo = moment.defineLocale('x-pseudo', {
        months : 'J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér'.split('_'),
        monthsShort : 'J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc'.split('_'),
        monthsParseExact : true,
        weekdays : 'S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý'.split('_'),
        weekdaysShort : 'S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát'.split('_'),
        weekdaysMin : 'S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá'.split('_'),
        weekdaysParseExact : true,
        longDateFormat : {
            LT : 'HH:mm',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY HH:mm',
            LLLL : 'dddd, D MMMM YYYY HH:mm'
        },
        calendar : {
            sameDay : '[T~ódá~ý át] LT',
            nextDay : '[T~ómó~rró~w át] LT',
            nextWeek : 'dddd [át] LT',
            lastDay : '[Ý~ést~érdá~ý át] LT',
            lastWeek : '[L~ást] dddd [át] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'í~ñ %s',
            past : '%s á~gó',
            s : 'á ~féw ~sécó~ñds',
            ss : '%d s~écóñ~ds',
            m : 'á ~míñ~úté',
            mm : '%d m~íñú~tés',
            h : 'á~ñ hó~úr',
            hh : '%d h~óúrs',
            d : 'á ~dáý',
            dd : '%d d~áýs',
            M : 'á ~móñ~th',
            MM : '%d m~óñt~hs',
            y : 'á ~ýéár',
            yy : '%d ý~éárs'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal : function (number) {
            var b = number % 10,
                output = (~~(number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
            return number + output;
        },
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return xPseudo;

})));


/***/ }),
/* 638 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var yo = moment.defineLocale('yo', {
        months : 'Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀'.split('_'),
        monthsShort : 'Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀'.split('_'),
        weekdays : 'Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta'.split('_'),
        weekdaysShort : 'Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá'.split('_'),
        weekdaysMin : 'Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb'.split('_'),
        longDateFormat : {
            LT : 'h:mm A',
            LTS : 'h:mm:ss A',
            L : 'DD/MM/YYYY',
            LL : 'D MMMM YYYY',
            LLL : 'D MMMM YYYY h:mm A',
            LLLL : 'dddd, D MMMM YYYY h:mm A'
        },
        calendar : {
            sameDay : '[Ònì ni] LT',
            nextDay : '[Ọ̀la ni] LT',
            nextWeek : 'dddd [Ọsẹ̀ tón\'bọ] [ni] LT',
            lastDay : '[Àna ni] LT',
            lastWeek : 'dddd [Ọsẹ̀ tólọ́] [ni] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : 'ní %s',
            past : '%s kọjá',
            s : 'ìsẹjú aayá die',
            ss :'aayá %d',
            m : 'ìsẹjú kan',
            mm : 'ìsẹjú %d',
            h : 'wákati kan',
            hh : 'wákati %d',
            d : 'ọjọ́ kan',
            dd : 'ọjọ́ %d',
            M : 'osù kan',
            MM : 'osù %d',
            y : 'ọdún kan',
            yy : 'ọdún %d'
        },
        dayOfMonthOrdinalParse : /ọjọ́\s\d{1,2}/,
        ordinal : 'ọjọ́ %d',
        week : {
            dow : 1, // Monday is the first day of the week.
            doy : 4 // The week that contains Jan 4th is the first week of the year.
        }
    });

    return yo;

})));


/***/ }),
/* 639 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var zhCn = moment.defineLocale('zh-cn', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '周日_周一_周二_周三_周四_周五_周六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日Ah点mm分',
            LLLL : 'YYYY年M月D日ddddAh点mm分',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour: function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' ||
                    meridiem === '上午') {
                return hour;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            } else {
                // '中午'
                return hour >= 11 ? hour : hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|周)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd':
                case 'D':
                case 'DDD':
                    return number + '日';
                case 'M':
                    return number + '月';
                case 'w':
                case 'W':
                    return number + '周';
                default:
                    return number;
            }
        },
        relativeTime : {
            future : '%s内',
            past : '%s前',
            s : '几秒',
            ss : '%d 秒',
            m : '1 分钟',
            mm : '%d 分钟',
            h : '1 小时',
            hh : '%d 小时',
            d : '1 天',
            dd : '%d 天',
            M : '1 个月',
            MM : '%d 个月',
            y : '1 年',
            yy : '%d 年'
        },
        week : {
            // GB/T 7408-1994《数据元和交换格式·信息交换·日期和时间表示法》与ISO 8601:1988等效
            dow : 1, // Monday is the first day of the week.
            doy : 4  // The week that contains Jan 4th is the first week of the year.
        }
    });

    return zhCn;

})));


/***/ }),
/* 640 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var zhHk = moment.defineLocale('zh-hk', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日dddd HH:mm',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天]LT',
            nextDay : '[明天]LT',
            nextWeek : '[下]ddddLT',
            lastDay : '[昨天]LT',
            lastWeek : '[上]ddddLT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd' :
                case 'D' :
                case 'DDD' :
                    return number + '日';
                case 'M' :
                    return number + '月';
                case 'w' :
                case 'W' :
                    return number + '週';
                default :
                    return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            ss : '%d 秒',
            m : '1 分鐘',
            mm : '%d 分鐘',
            h : '1 小時',
            hh : '%d 小時',
            d : '1 天',
            dd : '%d 天',
            M : '1 個月',
            MM : '%d 個月',
            y : '1 年',
            yy : '%d 年'
        }
    });

    return zhHk;

})));


/***/ }),
/* 641 */
/***/ (function(module, exports, __webpack_require__) {

//! moment.js locale configuration

;(function (global, factory) {
    true ? factory(__webpack_require__(514)) :
   typeof define === 'function' && define.amd ? define(['../moment'], factory) :
   factory(global.moment)
}(this, (function (moment) { 'use strict';


    var zhTw = moment.defineLocale('zh-tw', {
        months : '一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月'.split('_'),
        monthsShort : '1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月'.split('_'),
        weekdays : '星期日_星期一_星期二_星期三_星期四_星期五_星期六'.split('_'),
        weekdaysShort : '週日_週一_週二_週三_週四_週五_週六'.split('_'),
        weekdaysMin : '日_一_二_三_四_五_六'.split('_'),
        longDateFormat : {
            LT : 'HH:mm',
            LTS : 'HH:mm:ss',
            L : 'YYYY/MM/DD',
            LL : 'YYYY年M月D日',
            LLL : 'YYYY年M月D日 HH:mm',
            LLLL : 'YYYY年M月D日dddd HH:mm',
            l : 'YYYY/M/D',
            ll : 'YYYY年M月D日',
            lll : 'YYYY年M月D日 HH:mm',
            llll : 'YYYY年M月D日dddd HH:mm'
        },
        meridiemParse: /凌晨|早上|上午|中午|下午|晚上/,
        meridiemHour : function (hour, meridiem) {
            if (hour === 12) {
                hour = 0;
            }
            if (meridiem === '凌晨' || meridiem === '早上' || meridiem === '上午') {
                return hour;
            } else if (meridiem === '中午') {
                return hour >= 11 ? hour : hour + 12;
            } else if (meridiem === '下午' || meridiem === '晚上') {
                return hour + 12;
            }
        },
        meridiem : function (hour, minute, isLower) {
            var hm = hour * 100 + minute;
            if (hm < 600) {
                return '凌晨';
            } else if (hm < 900) {
                return '早上';
            } else if (hm < 1130) {
                return '上午';
            } else if (hm < 1230) {
                return '中午';
            } else if (hm < 1800) {
                return '下午';
            } else {
                return '晚上';
            }
        },
        calendar : {
            sameDay : '[今天] LT',
            nextDay : '[明天] LT',
            nextWeek : '[下]dddd LT',
            lastDay : '[昨天] LT',
            lastWeek : '[上]dddd LT',
            sameElse : 'L'
        },
        dayOfMonthOrdinalParse: /\d{1,2}(日|月|週)/,
        ordinal : function (number, period) {
            switch (period) {
                case 'd' :
                case 'D' :
                case 'DDD' :
                    return number + '日';
                case 'M' :
                    return number + '月';
                case 'w' :
                case 'W' :
                    return number + '週';
                default :
                    return number;
            }
        },
        relativeTime : {
            future : '%s內',
            past : '%s前',
            s : '幾秒',
            ss : '%d 秒',
            m : '1 分鐘',
            mm : '%d 分鐘',
            h : '1 小時',
            hh : '%d 小時',
            d : '1 天',
            dd : '%d 天',
            M : '1 個月',
            MM : '%d 個月',
            y : '1 年',
            yy : '%d 年'
        }
    });

    return zhTw;

})));


/***/ }),
/* 642 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(644);
module.exports = __webpack_require__(30).Object.keys;


/***/ }),
/* 643 */
/***/ (function(module, exports, __webpack_require__) {

// most Object methods by ES6 should accept primitives
var $export = __webpack_require__(51);
var core = __webpack_require__(30);
var fails = __webpack_require__(94);
module.exports = function (KEY, exec) {
  var fn = (core.Object || {})[KEY] || Object[KEY];
  var exp = {};
  exp[KEY] = exec(fn);
  $export($export.S + $export.F * fails(function () { fn(1); }), 'Object', exp);
};


/***/ }),
/* 644 */
/***/ (function(module, exports, __webpack_require__) {

// 19.1.2.14 Object.keys(O)
var toObject = __webpack_require__(97);
var $keys = __webpack_require__(138);

__webpack_require__(643)('keys', function () {
  return function keys(it) {
    return $keys(toObject(it));
  };
});


/***/ }),
/* 645 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _iterator = __webpack_require__(654);

var _iterator2 = _interopRequireDefault(_iterator);

var _symbol = __webpack_require__(653);

var _symbol2 = _interopRequireDefault(_symbol);

var _typeof = typeof _symbol2.default === "function" && typeof _iterator2.default === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj; };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = typeof _symbol2.default === "function" && _typeof(_iterator2.default) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof(obj);
} : function (obj) {
  return obj && typeof _symbol2.default === "function" && obj.constructor === _symbol2.default && obj !== _symbol2.default.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof(obj);
};

/***/ }),
/* 646 */
/***/ (function(module, exports, __webpack_require__) {

module.exports=function(t){function e(n){if(i[n])return i[n].exports;var a=i[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,e),a.l=!0,a.exports}var i={};return e.m=t,e.c=i,e.d=function(t,i,n){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:n})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="/",e(e.s=7)}([function(t,e){t.exports=__webpack_require__(514)},function(t,e){t.exports=function(t,e,i,n,a,s){var r,o=t=t||{},l=typeof t.default;"object"!==l&&"function"!==l||(r=t,o=t.default);var c="function"==typeof o?o.options:o;e&&(c.render=e.render,c.staticRenderFns=e.staticRenderFns,c._compiled=!0),i&&(c.functional=!0),a&&(c._scopeId=a);var u;if(s?(u=function(t){t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext,t||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),n&&n.call(this,t),t&&t._registeredComponents&&t._registeredComponents.add(s)},c._ssrRegister=u):n&&(u=n),u){var h=c.functional,d=h?c.render:c.beforeCreate;h?(c._injectStyles=u,c.render=function(t,e){return u.call(e),d(t,e)}):c.beforeCreate=d?[].concat(d,u):[u]}return{esModule:r,exports:o,options:c}}},function(t,e,i){"use strict";function n(t,e,i){var n=Math.ceil(e.minute()/t)*t;return i(e.clone().minute(n).second(0))}var a=i(0),s=i.n(a),r=i(10);e.a={name:"vue-ctk-date-time-picker",components:{CtkDatePickerAgenda:r.a},props:{label:{type:String,default:"Select date & time"},hint:{type:String},errorHint:{type:Boolean},value:{required:!1},formatted:{type:String,default:"llll"},format:{type:String},locale:{type:String,default:"en"},disableTime:{type:Boolean,default:!1},disableDate:{type:Boolean,default:!1},minuteInterval:{type:Number,default:1},color:{type:String},timeFormat:{type:String,default:"h:mm a"},withoutHeader:{type:Boolean,default:!1},id:{type:String,default:"CtkDateTimePicker"},minDate:{type:String},maxDate:{type:String},withoutInput:{type:Boolean,default:!1},noWeekendsDays:{type:Boolean,default:!1},autoClose:{type:Boolean,default:!1},disabled:{type:Boolean,default:!1},enableButtonValidate:{type:Boolean,default:!1}},data:function(){return{isVisible:!1,isFocus:!1,agendaPosition:"top",oldValue:this.value,clientWidth:null}},computed:{colorStyle:function(){return{color:this.color}},borderStyle:function(){return{borderColor:this.color}},dateTime:{get:function(){if(this.disableDate){if(this.value){var t=void 0;return t=this.disableDate?s()(s()().format("YYYY-MM-DD")+" "+this.value):s()(this.value),n(this.minuteInterval,t,s.a)}return n(this.minuteInterval,s()(),s.a)}return n(this.minuteInterval,this.value?s()(this.value):s()(),s.a)}},dateFormatted:{get:function(){var t=void 0;return t=this.value?this.disableDate?s()(s()().format("YYYY-MM-DD")+" "+this.value):s()(this.value):null,t?n(this.minuteInterval,t,s.a).locale(this.locale).format(this.formatted):null}}},created:function(){this.value&&this.$emit("input",this.dateTime.format(this.format)),s.a.locale(this.locale)},methods:{changeDate:function(t){this.$emit("input",s()(t).format(this.format)),this.autoClose&&this.hideDatePicker()},showDatePicker:function(){if(!this.disabled){var t=this.$refs.parent.getBoundingClientRect(),e=window.innerHeight;e-(t.top+t.height)>300||e-t.top>e/2+t.height?this.agendaPosition="top":this.agendaPosition="bottom",this.isVisible=!0}},hideDatePicker:function(){this.isVisible=!1},onFocus:function(){this.isFocus=!0,this.showDatePicker()},unFocus:function(){this.hideDatePicker(),this.isFocus=!1},validate:function(){this.unFocus(),this.hideDatePicker()}}}},function(t,e,i){"use strict";var n=i(12),a=i(17),s=i(6),r=i(0),o=i.n(r);e.a={name:"CtkDatePickerAgenda",components:{CtkTimePicker:n.a,CtkDatePicker:a.a},props:{dateTime:{},visible:{type:Boolean,required:!0,default:!0},disableTime:{type:Boolean},disableDate:{type:Boolean},minuteInterval:{type:Number},color:{type:String},timeFormat:{type:String},withoutHeader:{},locale:{},maxDate:{},minDate:{},withoutInput:{},agendaPosition:{},noWeekendsDays:{},autoClose:{},enableButtonValidate:{},value:{}},data:function(){return{month:this.disableDate?"":new s.a(this.dateTime.month(),this.dateTime.year()),transitionDayName:"slidevnext",timeWidth:this.disableTime?null:this.dateTimeWidth()}},computed:{position:function(){return"top"===this.agendaPosition?{top:"100%",marginBottom:"10px"}:{bottom:"100%",marginTop:"10px"}},isFormatTwelve:function(){return!!this.timeFormat&&(this.timeFormat.indexOf("a")>-1||this.timeFormat.indexOf("A")>-1)},bgStyle:function(){return{backgroundColor:this.color,padding:this.disableDate?"10px 0":"10px 0 10px 10px"}},year:function(){return this.dateTime.format("YYYY")}},methods:{getDateFormatted:function(){return o()(this.dateTime).locale(this.locale).format("ddd D MMM")},selectTime:function(t){this.transitionDayName="slidevprev",t>this.dateTime&&(this.transitionDayName="slidevnext"),this.$emit("change-date",t)},selectDate:function(t){this.transitionDayName="slidevnext",t.isBefore(this.dateTime)&&(this.transitionDayName="slidevprev"),t.add(this.dateTime.hour(),"hours"),t.add(this.dateTime.minute(),"minutes"),this.$emit("change-date",t)},changeMonth:function(t){var e=this.month.month+("prev"===t?-1:1),i=this.month.year;(e>11||e<0)&&(i+="prev"===t?-1:1,e="prev"===t?11:0),this.month=new s.a(e,i)},validate:function(){this.$emit("validate")},dateTimeWidth:function(){var t=void 0;return t=this.$refs.timePickerComponent&&this.$refs.timePickerComponent.$el.clientWidth?this.$refs.timePickerComponent.$el.clientWidth:160,{flex:"0 0 "+t+"px",width:t+"px",minWidth:t+"px",maxWidth:t+"px"}}},watch:{dateTime:{handler:function(){this.month=this.disableDate?"":new s.a(this.dateTime.month(),this.dateTime.year()),this.getDateFormatted()},deep:!0},locale:function(){this.month=this.disableDate?"":new s.a(this.dateTime.month(),this.dateTime.year()),this.getDateFormatted()},visible:function(t){var e=this;t&&!this.disableTime&&this.$nextTick(function(){e.timeWidth=e.dateTimeWidth()})}}}},function(t,e,i){"use strict";var n=i(14),a=i.n(n),s=i(15),r=i.n(s),o=i(0),l=i.n(o),c={HOUR_TOKENS:["HH","H","hh","h","kk","k"],MINUTE_TOKENS:["mm","m"],APM_TOKENS:["A","a"]};e.a={name:"CtkTimePicker",props:{format:{type:String},minuteInterval:{type:Number},month:{},dateTime:{type:Object},color:{type:String},withoutInput:{type:Boolean},visible:{type:Boolean},value:{}},data:function(){return{hours:[],minutes:[],apms:[],muteWatch:!1,hourType:"HH",minuteType:"mm",apmType:"",hour:"",minute:"",apm:"",fullValues:void 0}},computed:{styleColor:function(){return{backgroundColor:this.color}},monthDays:function(){return this.month.getMonthDays()},weekDay:function(){return this.month.getWeekStart()}},watch:{format:"renderFormat",minuteInterval:function(t){this.renderList("minute",t)},displayTime:"fillValues",visible:function(t){var e=this;t&&this.$nextTick(function(){["hours","minutes"].forEach(function(t){var i=e.$refs[""+t],n=e.$refs[""+t].querySelector(".item.active");if(n){i.scrollTop=0;var a=n.getBoundingClientRect(),s=i.getBoundingClientRect();i&&a&&s&&(i.scrollTop=a.top-s.top-40)}})})}},methods:{formatValue:function(t,e){switch(t){case"H":case"m":return String(e);case"HH":case"mm":return e<10?"0"+e:String(e);case"h":case"k":return String(e+1);case"hh":case"kk":return e+1<10?"0"+(e+1):String(e+1);default:return""}},checkAcceptingType:function(t,e,i){if(!t||!e||!e.length)return"";for(var n=0;n<t.length;n++)if(e.indexOf(t[n])>-1)return t[n];return i||""},renderFormat:function(t){t=t||this.format,this.hourType=this.checkAcceptingType(c.HOUR_TOKENS,t,"HH"),this.minuteType=this.checkAcceptingType(c.MINUTE_TOKENS,t,"mm"),this.apmType=this.checkAcceptingType(c.APM_TOKENS,t),this.renderHoursList(),this.renderList("minute"),this.apmType&&this.renderApmList();var e=this;this.$nextTick(function(){e.readValues()})},renderHoursList:function(){var t="h"===this.hourType||"hh"===this.hourType?12:24;this.hours=[];for(var e=0;e<t;e++)this.hours.push(this.formatValue(this.hourType,e))},renderList:function(t,e){if("minute"===t){e=e||this.minuteInterval,0===e?e=60:e>60?(window.console.warn("`"+t+"-interval` should be less than 60. Current value is",e),e=1):e<1?(window.console.warn("`"+t+"-interval` should be NO less than 1. Current value is",e),e=1):e||(e=1),this.minutes=[];for(var i=0;i<60;i+=e)this.minutes.push(this.formatValue(this.minuteType,i))}},renderApmList:function(){this.apms=[],this.apmType&&(this.apms="A"===this.apmType?["AM","PM"]:["am","pm"])},readValues:function(){this.hour=this.dateTime.format(this.hourType),this.minute=this.dateTime.format(this.minuteType),this.apmType&&(this.apm=this.dateTime.format("HH")>=12?this.apms[1]:this.apms[0]),this.fillValues()},fillValues:function(){var t={},e=this.hour,i=this.hourType,n=e||0===e?Number(e):"",a=this.isTwelveHours(i),s=!(!a||!this.apm)&&String(this.apm).toLowerCase();if(c.HOUR_TOKENS.forEach(function(r){if(r===i)return void(t[r]=e);var o=void 0,l=void 0;switch(r){case"H":case"HH":if(!String(n).length)return void(t[r]="");o=a?"pm"===s?n<12?n+12:n:n%12:n%24,t[r]="HH"===r&&o<10?"0"+o:String(o);break;case"k":case"kk":if(!String(n).length)return void(t[r]="");o=a?"pm"===s?n<12?n+12:n:12===n?24:n:0===n?24:n,t[r]="kk"===r&&o<10?"0"+o:String(o);break;case"h":case"hh":if(s)o=n,l=s||"am";else{if(!String(n).length)return t[r]="",t.a="",void(t.A="");n>11?(l="pm",o=12===n?12:n%12):(l=a?"":"am",o=n%12==0?12:n)}t[r]="hh"===r&&o<10?"0"+o:String(o),t.a=l,t.A=l.toUpperCase()}}),this.minute||0===this.minute){var r=Number(this.minute);t.m=String(r),t.mm=r<10?"0"+r:String(r)}else t.m="",t.mm="";this.fullValues=t,this.updateTimeValue(t),this.$emit("change",{data:t})},updateTimeValue:function(t){this.muteWatch=!0;var e=this,i=JSON.parse(r()(this.value||{})),n={};a()(i).forEach(function(e){n[e]=t[e]}),this.$emit("input",n),this.$nextTick(function(){e.muteWatch=!1})},isTwelveHours:function(t){return"h"===t||"hh"===t},select:function(t,e){"hour"===t?this.hour=e:"minute"===t?this.minute=e:"apm"===t&&(this.apm=e);var i=void 0;i=this.apm?l()(this.hour+":"+this.minute+(this.apm?this.apm:""),"HH:mm A").format("HH:mm"):l()(this.hour+":"+this.minute+(this.apm?this.apm:""),"HH:mm").format("HH:mm");var n=l()(this.dateTime.format("YYYY-MM-DD")+"T"+i);this.$emit("change-time",n)}},mounted:function(){this.renderFormat()}}},function(t,e,i){"use strict";var n=i(0),a=i.n(n),s=i(6);e.a={name:"CtkDatePicker",props:["month","dateTime","color","minDate","maxDate","locale","withoutInput","noWeekendsDays","value"],data:function(){return{transitionDaysName:"slidenext",transitionLabelName:"slidevnext",weekDays:Object(s.b)(this.locale)}},computed:{bgStyle:function(){return{backgroundColor:this.color}},endEmptyDays:function(){return this.monthDays.length+this.weekDay>35?42-this.monthDays.length-this.weekDay:35-this.monthDays.length-this.weekDay},monthDays:function(){return this.month.getMonthDays()},weekDay:function(){return this.month.getWeekStart()}},methods:{getMonthFormatted:function(){return this.month.getFormatted()},isDisabled:function(t){return this.minDate&&this.maxDate?!a()(t).isBetween(this.minDate,this.maxDate):this.minDate?a()(t).isBefore(this.minDate):!!this.maxDate&&a()(t).isAfter(this.maxDate)},isSelected:function(t){return a()(a()(this.dateTime).format("YYYY-MM-DD")).isSame(t.format("YYYY-MM-DD"))},isWeekEndDay:function(t){var e=a()(t).day(),i=[6,0];return!!this.noWeekendsDays&&i.indexOf(e)>-1},selectDate:function(t){this.$emit("change-date",t)},changeMonth:function(t){this.transitionDaysName="slide"+t,this.transitionLabelName="slidev"+t,this.$emit("change-month",t)}}}},function(t,e,i){"use strict";i.d(e,"b",function(){return f});var n=i(19),a=i.n(n),s=i(20),r=i.n(s),o=i(21),l=i.n(o),c=i(0),u=i.n(c),h=i(22),d=(i.n(h),Object(h.extendMoment)(u.a)),m=function(){function t(e,i){r()(this,t),this.start=d([i,e]),this.end=this.start.clone().endOf("month"),this.month=e,this.year=i}return l()(t,[{key:"getWeekStart",value:function(){return this.start.weekday()}},{key:"getDays",value:function(){return a()(d.range(this.start,this.end).by("days"))}},{key:"getFormatted",value:function(){return this.start.format("MMMM YYYY")}},{key:"getWeeks",value:function(){return this.end.week()-this.start.week()+1}},{key:"getMonthDays",value:function(){var t=d.range(this.start,this.end).by("days");return a()(t)}}]),t}();e.a=m;var f=function(t){var e=d.localeData(t).firstDayOfWeek();return d.weekdaysShort(1===e)}},function(t,e,i){t.exports=i(8)},function(t,e,i){"use strict";function n(t){i(9)}Object.defineProperty(e,"__esModule",{value:!0});var a=i(2),s=i(25),r=i(1),o=n,l=r(a.a,s.a,!1,o,null,null);e.default=l.exports},function(t,e){},function(t,e,i){"use strict";function n(t){i(11)}var a=i(3),s=i(24),r=i(1),o=n,l=r(a.a,s.a,!1,o,"data-v-586d12fc",null);e.a=l.exports},function(t,e){},function(t,e,i){"use strict";function n(t){i(13)}var a=i(4),s=i(16),r=i(1),o=n,l=r(a.a,s.a,!1,o,"data-v-4ef930c5",null);e.a=l.exports},function(t,e){},function(t,e){t.exports=__webpack_require__(517)},function(t,e){t.exports=__webpack_require__(144)},function(t,e,i){"use strict";var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"timepicker-container flex",class:{inline:t.withoutInput},style:[{height:this.month?t.monthDays.length+t.weekDay>35?"347px":"307px":"180px"}]},[i("div",{staticClass:"time-container hours-container flex flex-1 flex-direction-column h-100 mh-100 w-100"},[i("div",{staticClass:"flex align-center justify-content-center time-label text-muted"},[t._v(t._s(t.hourType))]),t._v(" "),i("div",{ref:"hours",staticClass:"h-100 mh-100 numbers-container"},t._l(t.hours,function(e){return i("button",{key:e,staticClass:"item flex align-center justify-content-center",class:[{active:t.hour===e&&t.value},e],attrs:{type:"button",tabindex:"-1"},on:{click:function(i){i.stopPropagation(),t.select("hour",e)}}},[i("span",{staticClass:"timepicker-day-effect",style:t.styleColor}),t._v(" "),i("span",{staticClass:"timepicker-day-text"},[t._v(t._s(e))])])}))]),t._v(" "),i("div",{staticClass:"time-container minutes-container flex-1 flex flex-direction-column h-100 mh-100 w-100"},[i("div",{staticClass:"flex align-center justify-content-center time-label text-muted"},[t._v(t._s(t.minuteType))]),t._v(" "),i("div",{ref:"minutes",staticClass:"h-100 mh-100 numbers-container"},t._l(t.minutes,function(e){return i("button",{key:e,staticClass:"item flex align-center justify-content-center",class:[{active:t.minute===e&&t.value},e],attrs:{type:"button",tabindex:"-1"},on:{click:function(i){i.stopPropagation(),t.select("minute",e)}}},[i("span",{staticClass:"timepicker-day-effect",style:t.styleColor}),t._v(" "),i("span",{staticClass:"timepicker-day-text"},[t._v(t._s(e))])])}))]),t._v(" "),t.apmType?i("div",{staticClass:"time-container apms-container flex flex-1 flex-direction-column h-100 mh-100 w-100"},[i("div",{staticClass:"flex align-center justify-content-center time-label text-muted"},[t._v(t._s(t.apmType))]),t._v(" "),i("div",{staticClass:"h-100 mh-100 numbers-container"},t._l(t.apms,function(e){return i("button",{key:e,staticClass:"item flex align-center justify-content-center",class:[{active:t.apm===e&&t.value},e],attrs:{type:"button",tabindex:"-1"},on:{click:function(i){i.stopPropagation(),t.select("apm",e)}}},[i("span",{staticClass:"timepicker-day-effect",style:t.styleColor}),t._v(" "),i("span",{staticClass:"timepicker-day-text"},[t._v(t._s(e))])])}))]):t._e()])},a=[],s={render:n,staticRenderFns:a};e.a=s},function(t,e,i){"use strict";function n(t){i(18)}var a=i(5),s=i(23),r=i(1),o=n,l=r(a.a,s.a,!1,o,"data-v-5f5d31bc",null);e.a=l.exports},function(t,e){},function(t,e){t.exports=__webpack_require__(145)},function(t,e){t.exports=__webpack_require__(655)},function(t,e){t.exports=__webpack_require__(656)},function(t,e){t.exports=__webpack_require__(669)},function(t,e,i){"use strict";var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"datepicker-container",class:{"flex-1 inline":t.withoutInput},attrs:{id:"CtkDatePicker"}},[i("div",{staticClass:"datepicker-controls flex align-center justify-content-center"},[i("div",{staticClass:"arrow-month h-100"},[i("button",{staticClass:"datepicker-button datepicker-prev text-center h-100 flex align-center",attrs:{type:"button",tabindex:"-1"},on:{click:function(e){t.changeMonth("prev")}}},[i("svg",{attrs:{viewBox:"0 0 1000 1000"}},[i("path",{attrs:{d:"M336.2 274.5l-210.1 210h805.4c13 0 23 10 23 23s-10 23-23 23H126.1l210.1 210.1c11 11 11 21 0 32-5 5-10 7-16 7s-11-2-16-7l-249.1-249c-11-11-11-21 0-32l249.1-249.1c21-21.1 53 10.9 32 32z"}})])])]),t._v(" "),i("div",{staticClass:"datepicker-container-label flex-1"},[i("transition-group",{staticClass:"h-100 flex align-center justify-content-center",attrs:{name:t.transitionLabelName}},t._l([t.month],function(e){return i("div",{key:e.month,staticClass:"datepicker-label fs-16",domProps:{textContent:t._s(t.getMonthFormatted())}})}))],1),t._v(" "),i("div",{staticClass:"arrow-month h-100 text-right"},[i("button",{staticClass:"datepicker-button datepicker-next text-center h-100 flex align-center justify-content-right",attrs:{type:"button",tabindex:"-1"},on:{click:function(e){t.changeMonth("next")}}},[i("svg",{attrs:{viewBox:"0 0 1000 1000"}},[i("path",{attrs:{d:"M694.4 242.4l249.1 249.1c11 11 11 21 0 32L694.4 772.7c-5 5-10 7-16 7s-11-2-16-7c-11-11-11-21 0-32l210.1-210.1H67.1c-13 0-23-10-23-23s10-23 23-23h805.4L662.4 274.5c-21-21.1 11-53.1 32-32.1z"}})])])])]),t._v(" "),i("div",{staticClass:"datepicker-week flex"},t._l(t.weekDays,function(e,n){return i("div",{key:n,staticClass:"flex-1 text-muted fs-12 flex justify-content-center align-center"},[t._v("\n      "+t._s(e)+"\n    ")])})),t._v(" "),i("div",{staticClass:"month-container",style:{height:t.monthDays.length+t.weekDay>35?"250px":"210px"}},[i("transition-group",{attrs:{name:t.transitionDaysName}},t._l([t.month],function(e){return i("div",{key:e.month,staticClass:"datepicker-days flex"},[t._l(t.weekDay,function(t){return i("div",{key:t+"startEmptyDay",staticClass:"datepicker-day align-center justify-content-center"})}),t._v(" "),t._l(t.monthDays,function(e){return i("button",{key:e.format("D"),staticClass:"datepicker-day flex align-center justify-content-center",class:{selected:t.isSelected(e)&&t.value,disabled:t.isDisabled(e)||t.isWeekEndDay(e),enable:!(t.isDisabled(e)||t.isWeekEndDay(e))},attrs:{type:"button",tabindex:"-1"},on:{click:function(i){t.isDisabled(e)||t.isWeekEndDay(e)||t.selectDate(e)}}},[i("span",{directives:[{name:"show",rawName:"v-show",value:!t.isDisabled(e)||t.isSelected(e),expression:"!isDisabled(day) || isSelected(day)"}],staticClass:"datepicker-day-effect",style:t.bgStyle}),t._v(" "),i("span",{staticClass:"datepicker-day-text"},[t._v(t._s(e.format("D")))])])}),t._v(" "),t._l(t.endEmptyDays,function(e){return t.endEmptyDays?i("div",{key:e+"endEmptyDay",staticClass:"datepicker-day flex align-center justify-content-center"}):t._e()})],2)}))],1)])},a=[],s={render:n,staticRenderFns:a};e.a=s},function(t,e,i){"use strict";var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("transition",{attrs:{name:"top"===this.agendaPosition?"slide":"slideinvert"}},[i("div",{directives:[{name:"show",rawName:"v-show",value:t.visible||t.withoutInput,expression:"visible || withoutInput"}],staticClass:"datetimepicker flex",class:{inline:t.withoutInput},style:t.position,on:{click:function(t){t.stopPropagation()}}},[i("div",{staticClass:"datepicker",style:t.position},[t.withoutHeader?i("div",{staticClass:"datepicker-header",style:t.bgStyle},[t.disableDate?t._e():i("div",{staticClass:"datepicker-year"},[i("transition-group",{attrs:{name:t.transitionDayName}},t._l([t.year],function(e){return i("div",{key:e},[t._v(t._s(e))])}))],1),t._v(" "),i("div",{staticClass:"flex justify-content-between"},[t.disableDate?t._e():i("transition-group",{staticClass:"datepicker-date dots-text flex-1",attrs:{name:t.transitionDayName}},t._l([t.getDateFormatted()],function(e){return i("span",{key:e},[t._v(t._s(t.getDateFormatted()))])})),t._v(" "),t.disableTime||t.isFormatTwelve?t.disableTime?t._e():i("div",{staticClass:"datepicker-time flex justify-content-center",style:t.timeWidth},[i("transition-group",{staticClass:"dots-text datepicker-hour flex-1 flex justify-content-center",attrs:{name:t.transitionDayName}},t._l([t.dateTime.format(t.timeFormat)],function(e){return i("span",{key:e},[t._v(t._s(e))])}))],1):i("div",{staticClass:"datepicker-time flex justify-content-center",style:t.timeWidth},[i("transition-group",{staticClass:"dots-text datepicker-hour flex-1 flex justify-content-right",attrs:{name:t.transitionDayName}},t._l([t.dateTime.format("HH")],function(e){return i("span",{key:e},[t._v(t._s(e))])})),t._v(" "),i("span",[t._v(":")]),t._v(" "),i("transition-group",{staticClass:"dots-text datepicker-minute flex-1 flex justify-content-left",attrs:{name:t.transitionDayName}},t._l([t.dateTime.format("mm")],function(e){return i("span",{key:e},[t._v(t._s(e))])}))],1)],1)]):t._e(),t._v(" "),i("div",{staticClass:"datetimepicker-container flex"},[t.disableDate?t._e():i("ctk-date-picker",{attrs:{"without-input":t.withoutInput,"no-weekends-days":t.noWeekendsDays,month:t.month,"date-time":t.dateTime,locale:t.locale,color:t.color,"min-date":t.minDate,"max-date":t.maxDate,value:t.value},on:{"change-date":t.selectDate,"change-month":t.changeMonth}}),t._v(" "),t.disableTime?t._e():i("ctk-time-picker",{ref:"timePickerComponent",attrs:{month:t.month,"date-time":t.dateTime,color:t.color,format:t.timeFormat,"minute-interval":t.minuteInterval,visible:t.visible,value:t.value},on:{"change-time":t.selectTime}})],1),t._v(" "),!t.enableButtonValidate||t.withoutInput||t.autoClose?t._e():i("div",{staticClass:"datepicker-buttons-container flex justify-content-right"},[i("button",{staticClass:"datepicker-button validation flex align-center justify-content-center",attrs:{type:"button",tabindex:"-1"},on:{click:t.validate}},[i("svg",{attrs:{xmlns:"http://www.w3.org/2000/svg",width:"24",height:"24",viewBox:"0 0 24 24"}},[i("path",{attrs:{d:"M0 0h24v24H0z",fill:"none"}}),t._v(" "),i("path",{attrs:{d:"M9 16.17L4.83 12l-1.42 1.41L9 19 21 7l-1.41-1.41z"}})]),t._v(" "),i("span",{staticClass:"datepicker-button-effect"})])])])])])},a=[],s={render:n,staticRenderFns:a};e.a=s},function(t,e,i){"use strict";var n=function(){var t=this,e=t.$createElement,i=t._self._c||e;return i("div",{staticClass:"ctk-date-time-picker",class:{inline:t.withoutInput},attrs:{id:t.id}},[i("div",{ref:"parent",staticClass:"field",class:{"is-focused":t.isFocus||t.isVisible,"has-value":t.dateFormatted,"has-error":t.errorHint,"is-disabled":t.disabled},on:{click:t.showDatePicker}},[t.withoutInput?t._e():i("div",[i("input",{ref:"CtkDateTimePicker",staticClass:"field-input",style:t.isFocus&&!t.errorHint||t.isVisible?t.borderStyle:"",attrs:{type:"text",id:t.id,placeholder:t.label,disabled:t.disabled,readonly:""},domProps:{value:t.dateFormatted},on:{focus:t.onFocus}}),t._v(" "),i("label",{ref:"label",staticClass:"field-label",class:t.hint?t.errorHint?"text-danger":"text-primary":"",style:t.isFocus||t.isVisible?t.colorStyle:"",attrs:{for:t.id}},[t._v("\n        "+t._s(t.hint||t.label)+"\n       ")])])]),t._v(" "),t.isVisible&&!t.withoutInput?i("div",{staticClass:"time-picker-overlay",on:{click:function(e){return e.stopPropagation(),t.unFocus(e)}}}):t._e(),t._v(" "),i("ctk-date-picker-agenda",{ref:"agenda",attrs:{value:t.value,"date-time":t.dateTime,color:t.color,visible:t.isVisible,"without-header":!t.withoutHeader,"disable-time":t.disableTime,"disable-date":t.disableDate,"minute-interval":t.minuteInterval,"time-format":t.timeFormat,locale:t.locale,"min-date":t.minDate,"max-date":t.maxDate,"agenda-position":t.agendaPosition,"without-input":t.withoutInput,"no-weekends-days":t.noWeekendsDays,"enable-button-validate":t.enableButtonValidate,"auto-close":t.autoClose},on:{"change-date":t.changeDate,validate:t.validate}})],1)},a=[],s={render:n,staticRenderFns:a};e.a=s}]);
//# sourceMappingURL=vue-ctk-date-time-picker.min.js.map

/***/ }),
/* 647 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__ = __webpack_require__(139);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_toastr__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_toastr___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_toastr__);






/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    onlyView: {
      type: Boolean,
      default: function _default() {
        return false;
      }
    },
    id: {
      type: String,
      default: function _default() {
        return 'nm';
      }
    },
    partTypes: {
      type: Array,
      default: function _default() {
        return [1, 3];
      }
    },
    checkInput: {
      type: Number,
      default: function _default() {
        return 0;
      }
    }
  },
  data: function data() {
    return {
      dossierTemplateItems: [],
      dossierMarksItems: [],
      dossierFilesItems: [],
      thongTinHoSo: {},
      valid: true,
      stateView: false,
      dialogAddOtherTemp: false,
      loadingAddOther: false,
      otherDossierTemplate: '',
      sheet: false,
      partView: '',
      dossierFileIdView: '',
      stateEdit: false,
      progressUploadPart: '',
      dialogPDF: false,
      dialogPDFLoading: true,
      stateAddFileOther: false,
      dossierTemplatesItemSelect: {},
      fileViews: [],
      sampleCount: 0,
      serviceInfoId: 0,
      fileMarkItems: [{
        text: 'Không có',
        value: 0
      }, {
        text: 'Bản chụp',
        value: 1
      }, {
        text: 'Bản sao',
        value: 2
      }, {
        text: 'Bản gốc',
        value: 3
      }],
      fileCheckItems: [{
        text: 'Chưa kiểm tra',
        value: 0
      }, {
        text: 'Đạt',
        value: 1
      }, {
        text: 'Không đạt',
        value: 2
      }],
      fileTemplateItems: [],
      stateViewResult: true
    };
  },
  computed: {
    loading: function loading() {
      return this.$store.getters.loading;
    },
    originality: function originality() {
      var vm = this;
      return vm.getOriginality();
    },
    initDataResource: function initDataResource() {
      return this.$store.getters.loadingInitData;
    }
  },
  mounted: function mounted() {
    var vm = this;
    vm.page = 1;
    vm.$nextTick(function () {});
  },

  methods: {
    resetCounterTemplate: function resetCounterTemplate(_ref, data) {
      var commit = _ref.commit,
          state = _ref.state;

      var vm = this;
      vm.dossierTemplateItems.forEach(function (val) {
        if (val.partNo === data.partNo) {
          if (val.hasForm) {
            val.count = 1;
          } else {
            val.count = 0;
          }
        }
      });
    },
    recountFileTemplates: function recountFileTemplates() {
      var vm = this;
      vm.dossierTemplateItems.forEach(function (itemTemplate) {
        itemTemplate.count = 0;
        vm.dossierFilesItems.forEach(function (itemFile) {
          if (itemTemplate.partNo === itemFile.dossierPartNo && !itemFile.eForm) {
            itemTemplate.count++;
          }
        });
      });
    },
    initData: function initData(data) {
      var vm = this;
      var arrTemp = [];

      if (data['sampleCount'] !== null && data['sampleCount'] !== undefined && data['sampleCount'] !== 'undefined') {
        vm.sampleCount = data['sampleCount'];
      }
      arrTemp.push(vm.$store.dispatch('loadDossierTemplates', data));
      arrTemp.push(vm.$store.dispatch('loadDossierMark', data));
      arrTemp.push(vm.$store.dispatch('loadDossierFiles', data.dossierId));
      arrTemp.push(vm.$store.dispatch('getServiceInfo', {
        serviceInfoId: data.serviceCode
      }));
      vm.thongTinHoSo = data;
      __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_promise___default.a.all(arrTemp).then(function (values) {
        var dossierTemplates = values[0];
        var dossierMarks = values[1];
        var dossierFiles = values[2];
        var fileTemplates = [];
        if (values[3].hasOwnProperty('serviceInfoId')) {
          vm.serviceInfoId = values[3].serviceInfoId;
        }
        if (values[3].fileTemplates) {
          if (Array.isArray(values[3].fileTemplates)) {
            fileTemplates = values[3].fileTemplates;
          } else {
            fileTemplates.push(values[3].fileTemplates);
          }
        }

        var dossierTemplateItems = vm.mergeDossierTemplateVsDossierFiles(dossierTemplates, dossierFiles);

        dossierTemplateItems = vm.mergeDossierTemplateVsDossierMark(dossierTemplateItems, dossierMarks);
        dossierTemplateItems = vm.mergeDossierTemplateVsFileTemplates(dossierTemplateItems, fileTemplates);

        vm.dossierFilesItems = dossierFiles;
        vm.dossierMarksItems = dossierMarks;
        vm.fileTemplateItems = fileTemplates;
        vm.dossierTemplateItems = dossierTemplateItems;
        vm.changeStateViewResult();
        setTimeout(function (argument) {
          vm.genAllAlpacaForm(dossierFiles, dossierTemplateItems);
          vm.recountFileTemplates();
        }, 500);
      }).catch(function (reject) {});
    },
    genAllAlpacaForm: function genAllAlpacaForm(dossierFiles, dossierTemplateItems) {
      var vm = this;
      if (dossierFiles.length > 0) {
        var dossierFilesEform = dossierFiles.filter(function (file) {
          return file.eForm;
        });
        var dossierTemplatesHasForm = dossierTemplateItems.filter(function (template) {
          return template.hasForm && vm.partTypes.includes(template.partType);
        });
        if (dossierFilesEform.length > 0) {
          dossierFilesEform.forEach(function (itemFiles) {
            if (itemFiles.eForm) {
              vm.$store.dispatch('loadAlpcaForm', itemFiles);
            }
          });
        } else {
          dossierTemplateItems.forEach(function (val) {
            if (val.hasForm && vm.partTypes.includes(val.partType)) {
              val['templateFileNo'] = vm.thongTinHoSo.dossierTemplateNo;
              vm.showAlpacaJSFORM(val);
            }
          });
        }
        if (dossierTemplatesHasForm.length !== dossierFilesEform.length) {
          dossierTemplatesHasForm.forEach(function (template) {
            var indexFromFile = dossierFilesEform.findIndex(function (item) {
              return template.partNo === item.dossierPartNo;
            });
            if (indexFromFile === -1) {
              template['templateFileNo'] = vm.thongTinHoSo.dossierTemplateNo;
              vm.showAlpacaJSFORM(template);
            }
          });
        }
      } else {
        dossierTemplateItems.forEach(function (val) {
          if (val.hasForm && vm.partTypes.includes(val.partType)) {
            val['templateFileNo'] = vm.thongTinHoSo.dossierTemplateNo;
            vm.showAlpacaJSFORM(val);
          }
        });
      }
    },
    postDossierMark: function postDossierMark(item, index) {
      var vm = this;
      item['dossierId'] = vm.thongTinHoSo.dossierId;
      vm.$store.dispatch('postDossierMark', item).then(function (resultMark) {}).catch(function (reject) {});
    },
    mergeDossierTemplateVsDossierFiles: function mergeDossierTemplateVsDossierFiles(dossierTemplates, dossierFiles) {
      var vm = this;
      if (dossierFiles.length !== 0) {
        dossierTemplates.forEach(function (template) {
          template['daKhai'] = false;
          var itemFind = dossierFiles.find(function (file) {
            return template.partNo === file.dossierPartNo && vm.partTypes.includes(template.partType) && file.eForm;
          });
          if (itemFind) {
            template['daKhai'] = true;
          } else if (!itemFind && template.hasForm) {
            template['daKhai'] = false;
          }
          dossierFiles.forEach(function (dossierFile) {
            if (template.partNo === dossierFile.dossierPartNo && !dossierFile.eForm && !template.hasForm) {
              template['daKhai'] = true;
            }
          });
        });
      } else {
        dossierTemplates.forEach(function (template) {
          if (template.hasForm) {
            template['daKhai'] = false;
          }
        });
      }
      return dossierTemplates;
    },
    mergeDossierTemplateVsDossierMark: function mergeDossierTemplateVsDossierMark(dossierTemplates, dossierMarks) {
      if (dossierMarks.length !== 0) {
        dossierTemplates.map(function (itemTemplate) {
          itemTemplate['count'] = 0;
          itemTemplate['stateEditFileCheck'] = false;
          var fileMarkFind = dossierMarks.find(function (fileMark) {
            return fileMark.dossierPartNo === itemTemplate.partNo;
          });
          if (fileMarkFind !== null && fileMarkFind !== undefined) {
            itemTemplate['fileMark'] = fileMarkFind.fileMark;
            itemTemplate['fileComment'] = fileMarkFind.fileComment;
            itemTemplate['fileCheck'] = fileMarkFind.fileCheck;
          } else {
            itemTemplate['fileMark'] = 0;
            itemTemplate['fileComment'] = '';
            itemTemplate['fileCheck'] = 0;
          }
          return itemTemplate;
        });
      } else {
        if (dossierTemplates) {
          dossierTemplates.forEach(function (itemTemplate) {
            itemTemplate['stateEditFileCheck'] = false;
            itemTemplate['count'] = 0;
            itemTemplate['fileMark'] = 0;
            itemTemplate['fileComment'] = '';
            itemTemplate['fileCheck'] = 0;
            itemTemplate['stateEditFileCheck'] = false;
          });
        }
      }
      return dossierTemplates;
    },
    mergeDossierTemplateVsFileTemplates: function mergeDossierTemplateVsFileTemplates(dossierTemplates, fileTemplates) {
      if (fileTemplates.length !== 0) {
        dossierTemplates.map(function (itemTemplate) {
          var fileTemp = fileTemplates.find(function (fileTemplate) {
            return fileTemplate.fileTemplateNo === itemTemplate.fileTemplateNo;
          });
          if (fileTemp !== null && fileTemp !== undefined) {
            itemTemplate['hasFileTemp'] = fileTemp.fileTemplateNo;
          } else {
            itemTemplate['hasFileTemp'] = '';
          }
          return itemTemplate;
        });
      } else {
        if (dossierTemplates) {
          dossierTemplates.forEach(function (itemTemplate) {
            itemTemplate['hasFileTemp'] = '';
          });
        }
      }
      return dossierTemplates;
    },
    showAlpacaJSFORM: function showAlpacaJSFORM(item) {
      var vm = this;
      item['dossierId'] = vm.thongTinHoSo.dossierId;
      vm.$store.dispatch('loadFormScript', item).then(function (resScript) {
        vm.$store.dispatch('loadFormData', item).then(function (resData) {
          __WEBPACK_IMPORTED_MODULE_1_jquery___default()('#formAlpaca' + item.partNo + vm.id).empty();
          var formScript, formData;

          if (resScript) {
            formScript = eval('(' + resScript + ')');
          } else {
            formScript = {};
          }
          if (resData) {
            formData = eval('(' + resData + ')');
          } else {
            formData = {};
          }

          formScript.data = formData;
          __WEBPACK_IMPORTED_MODULE_1_jquery___default()('#formAlpaca' + item.partNo + vm.id).alpaca(formScript);
        });
      });
    },
    saveAlpacaForm: function saveAlpacaForm(item, index) {
      var vm = this;
      var fileFind = vm.dossierFilesItems.find(function (itemFile) {
        return itemFile.dossierPartNo === item.partNo && itemFile.eForm;
      });
      if (fileFind) {
        fileFind['dossierId'] = vm.thongTinHoSo.dossierId;
        fileFind['id'] = vm.id;
        vm.$store.dispatch('putAlpacaForm', fileFind).then(function (resData) {}).catch(function (reject) {
          __WEBPACK_IMPORTED_MODULE_2_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
        });
      } else {
        item['dossierId'] = vm.thongTinHoSo.dossierId;
        item['id'] = vm.id;
        vm.$store.dispatch('postEform', item).then(function (resPostEform) {
          vm.dossierTemplateItems[index].daKhai = true;
          vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId).then(function (resFiles) {
            vm.dossierFilesItems = resFiles;
          }).catch(function (reject) {
            __WEBPACK_IMPORTED_MODULE_2_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
          });
        }).catch(function (reject) {
          __WEBPACK_IMPORTED_MODULE_2_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
        });
      }
    },
    onDeleteAttackFiles: function onDeleteAttackFiles(item) {
      var vm = this;

      var x = confirm('Bạn có muốn xóa toàn bộ file trong thành phần hồ sơ này?');
      if (x) {
        vm.dossierFilesItems.forEach(function (val) {
          if (val.dossierPartNo === item.partNo) {
            val['dossierId'] = vm.thongTinHoSo.dossierId;
            vm.$store.dispatch('deleteAttackFiles', val).then(function (result) {
              vm.resetCounterTemplate(item);
              vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId);
            }).catch(function (xhr) {});
          }
        });
      }
    },
    pickFile: function pickFile(item) {
      var vm = this;
      vm.stateAddFileOther = false;
      document.getElementById('file' + item.partNo).click();
    },
    onUploadSingleFile: function onUploadSingleFile(e, data, index) {
      var vm = this;
      vm.dossierTemplatesItemSelect = data;
      vm.progressUploadPart = data.partNo;
      data['dossierId'] = vm.thongTinHoSo.dossierId;
      data['dossierTemplateNo'] = vm.thongTinHoSo.dossierTemplateNo;
      vm.dossierTemplateItems[index]['daKhai'] = true;
      if (data.partType !== 3) {
        vm.$store.dispatch('uploadSingleFile', data).then(function (result) {
          vm.progressUploadPart = '';
          vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId).then(function (result) {
            vm.dossierFilesItems = result;
            vm.recountFileTemplates();
          });
        }).catch(function (xhr) {
          vm.progressUploadPart = '';
        });
      } else {
        if (__WEBPACK_IMPORTED_MODULE_1_jquery___default()('#file' + data.partNo)[0].files.length === 0) {
          vm.progressUploadPart = '';
          return;
        }
        vm.partView = data.partNo;
        vm.stateView = true;
        vm.dialogAddOtherTemp = true;
      }
    },
    loadAlpcaForm: function loadAlpcaForm(data) {
      var vm = this;
      var fileFind = vm.dossierFilesItems.find(function (itemFile) {
        return itemFile.dossierPartNo === data.partNo && itemFile.eForm;
      });
      if (fileFind) {
        fileFind['id'] = vm.id;
        vm.$store.dispatch('loadAlpcaForm', fileFind);
      } else {
        vm.dossierTemplateItems.forEach(function (val) {
          if (val.hasForm && data.partNo === val.partNo) {
            val['templateFileNo'] = vm.thongTinHoSo.dossierTemplateNo;
            vm.showAlpacaJSFORM(val);
          }
        });
      }
    },
    deleteSingleFileEform: function deleteSingleFileEform(item, index) {
      var vm = this;
      var x = confirm('Bạn có muốn xóa?');
      if (x) {
        vm.dossierFilesItems.forEach(function (file) {
          if (file.dossierPartNo === item.partNo && file.eForm) {
            file['dossierId'] = vm.thongTinHoSo.dossierId;
            vm.$store.dispatch('deleteDossierFile', file).then(function (resFile) {
              vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId).then(function (result) {
                vm.dossierFilesItems = result;
                vm.recountFileTemplates();
                var fileViewsTemp = vm.dossierFilesItems.filter(function (file) {
                  return file.dossierPartNo === item.partNo && !file.eForm;
                });
                if (fileViewsTemp) {
                  vm.fileViews = fileViewsTemp;
                }
              });
            });
          }
        });
        vm.dossierTemplateItems[index].daKhai = false;
      }
    },
    previewFileEfom: function previewFileEfom(item, index) {
      var vm = this;
      vm.dossierFilesItems.forEach(function (file) {
        if (file.dossierPartNo === item.partNo && file.eForm) {
          file['dossierId'] = vm.thongTinHoSo.dossierId;
          vm.dialogPDFLoading = true;
          vm.dialogPDF = true;
          if (!vm.onlyView) {
            file['id'] = vm.id;
            vm.$store.dispatch('putAlpacaForm', file).then(function (resData) {
              setTimeout(function () {
                vm.$store.dispatch('viewFile', file).then(function (result) {
                  vm.dialogPDFLoading = false;
                  document.getElementById('dialogPDFPreview' + vm.id).src = result;
                });
              }, 1000);
            }).catch(function (reject) {
              __WEBPACK_IMPORTED_MODULE_2_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
            });
          } else {
            vm.$store.dispatch('viewFile', file).then(function (result) {
              vm.dialogPDFLoading = false;
              document.getElementById('dialogPDFPreview' + vm.id).src = result;
            });
          }
        }
      });
    },
    deleteSingleFile: function deleteSingleFile(item, index) {
      var vm = this;
      var x = confirm('Bạn có muốn xóa?');
      if (x) {
        item['dossierId'] = vm.thongTinHoSo.dossierId;
        vm.$store.dispatch('deleteDossierFile', item).then(function (resFile) {
          vm.fileViews.splice(index, 1);
          vm.stateView = true;
          vm.partView = item.dossierPartNo;
          vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId).then(function (result) {
            vm.dossierFilesItems = result;

            vm.setDaKhai(vm.dossierFilesItems);
          });
        }).catch(function (reject) {
          __WEBPACK_IMPORTED_MODULE_2_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
        });
      }
    },
    viewFile: function viewFile(data) {
      var _this = this;

      var vm = this;
      vm.dossierFilesItems.forEach(function (val) {
        val['dossierId'] = vm.thongTinHoSo.dossierId;
        if (val.dossierPartNo === data.partNo) {
          _this.$store.dispatch('viewFile', val);
        }
      });
    },
    setDaKhai: function setDaKhai(itemFile) {
      var vm = this;
      var indexFile = vm.dossierFilesItems.findIndex(function (file) {
        return file.dossierPartNo === itemFile.dossierPartNo;
      });
      if (indexFile === -1) {
        for (var i = 0; i < vm.dossierTemplateItems.length; i++) {
          if (vm.dossierTemplateItems[i].partNo === itemFile.dossierPartNo && !vm.dossierTemplateItems[i].hasForm) {
            vm.dossierTemplateItems[i]['daKhai'] = false;
            break;
          }
        }
      }
    },
    checkPartType3: function checkPartType3() {
      var vm = this;
      if (vm.dossierTemplateItems.length !== 0) {
        for (var i = 0; i < vm.dossierTemplateItems.length; i++) {
          if (vm.dossierTemplateItems[i].partType === 3) {
            return true;
          }
        }
      }
      return false;
    },
    viewFile2: function viewFile2(data) {
      var vm = this;
      if (data.fileSize === 0) {
        return;
      }
      if (data.fileType === 'doc' || data.fileType === 'docx' || data.fileType === 'xlsx' || data.fileType === 'xls' || data.fileType === 'zip' || data.fileType === 'rar') {
        var url = vm.initDataResource.dossierApi + '/' + vm.thongTinHoSo.dossierId + '/files/' + data.referenceUid;
        window.open(url);
      } else {
        vm.dialogPDFLoading = true;
        vm.dialogPDF = true;
        data['dossierId'] = vm.thongTinHoSo.dossierId;
        vm.$store.dispatch('viewFile', data).then(function (result) {
          vm.dialogPDFLoading = false;
          document.getElementById('dialogPDFPreview' + vm.id).src = result;
        });
      }
    },
    viewFileWithPartNo: function viewFileWithPartNo(item) {
      var vm = this;
      if (vm.dossierFilesItems) {
        var fileViewsTemp = vm.dossierFilesItems.filter(function (file) {
          return file.dossierPartNo === item.partNo && !file.eForm;
        });
        if (fileViewsTemp) {
          vm.fileViews = fileViewsTemp;

          if (vm.partView !== item.partNo) {
            vm.stateView = true;
            vm.partView = item.partNo;
          } else {
            vm.stateView = !vm.stateView;
            vm.partView = item.partNo;
          }
        } else {
          return;
        }
      }
      return;
    },
    saveMark: function saveMark() {
      var vm = this;
      if (vm.dossierTemplateItems) {
        vm.dossierTemplateItems.forEach(function (value, index) {
          if (value.partType === 1) {
            value['dossierId'] = vm.thongTinHoSo.dossierId;
            vm.$store.dispatch('postDossierMark', value);
          }
        });
      }
    },
    changeFileMark: function changeFileMark(event, index) {
      var vm = this;

      var item = vm.dossierTemplateItems[index];
      item['dossierId'] = vm.thongTinHoSo.dossierId;
      item['fileMark'] = event;
      item['checkInput'] = vm.checkInput;

      vm.$store.dispatch('postDossierMark', item);
      vm.dossierTemplateItems[index].fileMark = event;
    },
    changeFileCheck: function changeFileCheck(event, index) {
      var vm = this;

      var item = vm.dossierTemplateItems[index];
      item['dossierId'] = vm.thongTinHoSo.dossierId;
      item['fileCheck'] = event;
      item['checkInput'] = vm.checkInput;
      if (event === 2) {
        item['stateEditFileCheck'] = true;
        return;
      } else {
        item['fileComment'] = '';
      }

      vm.$store.dispatch('postDossierMark', item);
      vm.dossierTemplateItems[index].fileCheck = event;
    },
    changeFileComment: function changeFileComment(item, index) {
      var vm = this;

      if (item.fileComment === null || item.fileComment === undefined || item.fileComment === '') {
        return;
      }
      item['dossierId'] = vm.thongTinHoSo.dossierId;
      item['fileComment'] = item.fileComment;
      item['checkInput'] = vm.checkInput;
      item['stateEditFileCheck'] = !item['stateEditFileCheck'];

      vm.$store.dispatch('postDossierMark', item);
      vm.dossierTemplateItems[index].fileComment = item.fileComment;
    },
    checkStyle: function checkStyle(item) {
      var vm = this;
      if (vm.checkInput === 1) {
        return 'calc(100% - 140px)';
      } else {
        var divPx = 0;
        if (vm.originality !== 1 && item.partType === 1 && !vm.thongTinHoSo.online && vm.checkInput !== 1) {
          divPx += 140;
        }
        if (item.fileCheck > 0 && !vm.thongTinHoSo.online) {
          divPx += 20;
        }
        if (item.fileCheck > 0 && vm.thongTinHoSo.online) {
          divPx += 40;
        }
        if (!vm.onlyView) {
          divPx += 90;
        }
        return 'calc(100% - ' + divPx + 'px)';
      }
    },
    checkVisibleTemp: function checkVisibleTemp(item, index) {
      var vm = this;
      if (!vm.onlyView) {
        return true;
      }
      if (item.partType === 3) {
        if (vm.dossierFilesItems.length > 0) {
          var indexFile = vm.dossierFilesItems.findIndex(function (file) {
            return file.dossierPartNo === item.partNo;
          });
          if (indexFile === -1) {
            return false;
          } else {
            return true;
          }
        } else {
          return false;
        }
      } else {
        return true;
      }
    },
    changeStateViewResult: function changeStateViewResult() {
      var vm = this;
      if (vm.dossierFilesItems.length > 0) {
        var index = vm.dossierFilesItems.findIndex(function (file) {
          return file.dossierPartType === 2;
        });
        if (index !== -1) {
          vm.$emit('tp:change-state-view-result', true);
        } else {
          vm.$emit('tp:change-state-view-result', false);
        }
      }
    },
    changeOtherDossierTemp: function changeOtherDossierTemp(data) {
      var vm = this;
      if (vm.originality === 3 && vm.stateAddFileOther) {
        vm.loadingAddOther = true;
        vm.$store.dispatch('uploadSingleOtherFile', {
          dossierId: vm.thongTinHoSo.dossierId,
          displayName: data,
          partNo: vm.dossierTemplatesItemSelect.partNo
        }).then(function (resFile) {
          vm.loadingAddOther = false;
          vm.dialogAddOtherTemp = false;
          vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId).then(function (result2) {
            vm.dossierFilesItems = result2;
          });
        }).catch(function (reject) {
          vm.loadingAddOther = false;
        });
      } else {
        var params = vm.dossierTemplatesItemSelect;
        params['dossierId'] = vm.thongTinHoSo.dossierId;
        params['displayName'] = data;
        params['dossierTemplateNo'] = vm.thongTinHoSo.dossierTemplateNo;
        vm.$store.dispatch('uploadSingleFile', params).then(function (result1) {
          vm.progressUploadPart = '';
          vm.dialogAddOtherTemp = false;

          vm.$store.dispatch('loadDossierFiles', vm.thongTinHoSo.dossierId).then(function (result2) {
            vm.dossierFilesItems = result2;
            vm.recountFileTemplates();
            if (vm.stateView && vm.dossierFilesItems) {
              var fileViewsTemp = vm.dossierFilesItems.filter(function (file) {
                return file.dossierPartNo === vm.dossierTemplatesItemSelect.partNo && !file.eForm;
              });
              if (fileViewsTemp) {
                vm.fileViews = fileViewsTemp;
              }
            }
          });
        }).catch(function (xhr) {
          vm.progressUploadPart = '';
        });
      }
    },
    downloadFileTemplate: function downloadFileTemplate(item, index) {
      var vm = this;
      if (vm.fileTemplateItems.length > 0) {
        var fileFind = vm.fileTemplateItems.find(function (file) {
          return item.fileTemplateNo === file.fileTemplateNo;
        });
        if (fileFind) {
          var url = vm.initDataResource.serviceInfoApi + '/' + vm.serviceInfoId + '/filetemplates/' + fileFind.fileTemplateNo;
          window.open(url);
        } else {}
      }
    },
    addOtherTemplate: function addOtherTemplate() {
      var vm = this;
      if (vm.$refs.form.validate()) {
        vm.changeOtherDossierTemp(vm.otherDossierTemplate);
      }
    },
    editDisplayName: function editDisplayName(item, index) {
      var vm = this;
      if (vm.dossierFileIdView !== item.dossierFileId) {
        vm.dossierFileIdView = item.dossierFileId;
        vm.stateEdit = true;
      } else {
        vm.dossierFileIdView = item.dossierFileId;
        vm.stateEdit = !vm.stateEdit;
      }
    },
    cancelDialog: function cancelDialog() {
      var vm = this;
      vm.dialogAddOtherTemp = false;
      vm.progressUploadPart = '';
    },
    addFileOther: function addFileOther(item) {
      var vm = this;
      vm.dialogAddOtherTemp = true;
      vm.stateAddFileOther = true;
      vm.dossierTemplatesItemSelect = item;
    },
    validDossierTemplate: function validDossierTemplate() {
      var vm = this;
      if (vm.dossierTemplateItems.length > 0) {
        for (var i = 0; i < vm.dossierTemplateItems.length; i++) {
          if (vm.dossierTemplateItems[i]['required'] && !vm.dossierTemplateItems[i]['daKhai'] && vm.partTypes.includes(vm.dossierTemplateItems[i].partType)) {
            var message = 'Chú ý :' + vm.dossierTemplateItems[i].partName + ' là thành phần bắt buộc!';
            __WEBPACK_IMPORTED_MODULE_2_toastr___default.a.error(message);
            return false;
          }
        }
        return true;
      } else {
        return true;
      }
    },
    changeDisplayName: function changeDisplayName(item, index) {
      var vm = this;
      var params = {
        dossierId: vm.thongTinHoSo.dossierId,
        value: value
      };
      vm.$store.dispatch('changeDisplayNameFile', params).then(function (result) {
        vm.fileViews[index].displayName = result.displayName;
        vm.stateEdit = false;
      }).catch(function (reject) {});
    }
  }
});

/***/ }),
/* 648 */
/***/ (function(module, exports, __webpack_require__) {

(function(e,t){ true?module.exports=t():"function"==typeof define&&define.amd?define([],t):"object"==typeof exports?exports.VMoney=t():e.VMoney=t()})(this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}var n={};return t.m=e,t.c=n,t.i=function(e){return e},t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p=".",t(t.s=9)}([function(e,t,n){"use strict";t.a={prefix:"",suffix:"",thousands:",",decimal:".",precision:2}},function(e,t,n){"use strict";var r=n(2),i=n(5),u=n(0);t.a=function(e,t){if(t.value){var o=n.i(i.a)(u.a,t.value);if("INPUT"!==e.tagName.toLocaleUpperCase()){var a=e.getElementsByTagName("input");1!==a.length||(e=a[0])}e.oninput=function(){var t=e.value.length-e.selectionEnd;e.value=n.i(r.a)(e.value,o),t=Math.max(t,o.suffix.length),t=e.value.length-t,t=Math.max(t,o.prefix.length+1),n.i(r.b)(e,t),e.dispatchEvent(n.i(r.c)("change"))},e.onfocus=function(){n.i(r.b)(e,e.value.length-o.suffix.length)},e.oninput(),e.dispatchEvent(n.i(r.c)("input"))}}},function(e,t,n){"use strict";function r(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:m.a;"number"==typeof e&&(e=e.toFixed(o(t.precision)));var n=e.indexOf("-")>=0?"-":"",r=u(e),i=c(r,t.precision),a=d(i).split("."),p=a[0],l=a[1];return p=f(p,t.thousands),t.prefix+n+s(p,l,t.decimal)+t.suffix}function i(e,t){var n=e.indexOf("-")>=0?-1:1,r=u(e),i=c(r,t);return parseFloat(i)*n}function u(e){return d(e).replace(/\D+/g,"")||"0"}function o(e){return a(0,e,20)}function a(e,t,n){return Math.max(e,Math.min(t,n))}function c(e,t){var n=Math.pow(10,t);return(parseFloat(e)/n).toFixed(o(t))}function f(e,t){return e.replace(/(\d)(?=(?:\d{3})+\b)/gm,"$1"+t)}function s(e,t,n){return t?e+n+t:e}function d(e){return e?e.toString():""}function p(e,t){var n=function(){e.setSelectionRange(t,t)};e===document.activeElement&&(n(),setTimeout(n,1))}function l(e){var t=document.createEvent("Event");return t.initEvent(e,!0,!0),t}var m=n(0);n.d(t,"a",function(){return r}),n.d(t,"d",function(){return i}),n.d(t,"b",function(){return p}),n.d(t,"c",function(){return l})},function(e,t,n){"use strict";function r(e,t){t&&Object.keys(t).map(function(e){a.a[e]=t[e]}),e.directive("money",o.a),e.component("money",u.a)}Object.defineProperty(t,"__esModule",{value:!0});var i=n(6),u=n.n(i),o=n(1),a=n(0);n.d(t,"Money",function(){return u.a}),n.d(t,"VMoney",function(){return o.a}),n.d(t,"options",function(){return a.a}),n.d(t,"VERSION",function(){return c});var c="0.8.1";t.default=r,"undefined"!=typeof window&&window.Vue&&window.Vue.use(r)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),i=n(0),u=n(2);t.default={name:"Money",props:{value:{required:!0,type:[Number,String],default:0},masked:{type:Boolean,default:!1},precision:{type:Number,default:function(){return i.a.precision}},decimal:{type:String,default:function(){return i.a.decimal}},thousands:{type:String,default:function(){return i.a.thousands}},prefix:{type:String,default:function(){return i.a.prefix}},suffix:{type:String,default:function(){return i.a.suffix}}},directives:{money:r.a},data:function(){return{formattedValue:""}},watch:{value:{immediate:!0,handler:function(e,t){var r=n.i(u.a)(e,this.$props);r!==this.formattedValue&&(this.formattedValue=r)}}},methods:{change:function(e){this.$emit("input",this.masked?e.target.value:n.i(u.d)(e.target.value,this.precision))}}}},function(e,t,n){"use strict";t.a=function(e,t){return e=e||{},t=t||{},Object.keys(e).concat(Object.keys(t)).reduce(function(n,r){return n[r]=void 0===t[r]?e[r]:t[r],n},{})}},function(e,t,n){var r=n(7)(n(4),n(8),null,null);e.exports=r.exports},function(e,t){e.exports=function(e,t,n,r){var i,u=e=e||{},o=typeof e.default;"object"!==o&&"function"!==o||(i=e,u=e.default);var a="function"==typeof u?u.options:u;if(t&&(a.render=t.render,a.staticRenderFns=t.staticRenderFns),n&&(a._scopeId=n),r){var c=a.computed||(a.computed={});Object.keys(r).forEach(function(e){var t=r[e];c[e]=function(){return t}})}return{esModule:i,exports:u,options:a}}},function(e,t){e.exports={render:function(){var e=this,t=e.$createElement;return(e._self._c||t)("input",{directives:[{name:"money",rawName:"v-money",value:{precision:e.precision,decimal:e.decimal,thousands:e.thousands,prefix:e.prefix,suffix:e.suffix},expression:"{precision, decimal, thousands, prefix, suffix}"}],staticClass:"v-money",attrs:{type:"tel"},domProps:{value:e.formattedValue},on:{change:e.change}})},staticRenderFns:[]}},function(e,t,n){e.exports=n(3)}])});

/***/ }),
/* 649 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', [_c('v-card', [_vm._l((_vm.dossierTemplateItems), function(item, index) {
    return (_vm.partTypes.includes(item.partType) && _vm.checkVisibleTemp(item, index)) ? _c('div', {
      key: item.partNo,
      staticClass: "form_alpaca",
      staticStyle: {
        "position": "relative"
      }
    }, [_c('v-expansion-panel', {
      staticClass: "expaned__list__data"
    }, [_c('v-expansion-panel-content', {
      attrs: {
        "hide-actions": "",
        "value": false
      }
    }, [_c('div', {
      staticStyle: {
        "background-color": "#fff"
      },
      attrs: {
        "slot": "header"
      },
      on: {
        "click": function($event) {
          _vm.stateView = false
        }
      },
      slot: "header"
    }, [_c('div', {
      staticStyle: {
        "align-items": "center",
        "min-height": "38px",
        "background": "#fff",
        "padding-left": "15px"
      },
      style: ({
        width: _vm.checkStyle(item)
      })
    }, [_c('div', {
      staticClass: "mr-2",
      staticStyle: {
        "min-width": "18px",
        "display": "flex",
        "min-height": "38px"
      },
      on: {
        "click": function($event) {
          _vm.loadAlpcaForm(item)
        }
      }
    }, [_c('div', {
      staticClass: "header__tphs"
    }, [_c('span', {
      staticClass: "text-bold"
    }, [_vm._v(_vm._s(index + 1) + ".")]), _vm._v("  ")]), _vm._v(" "), _c('div', {
      staticClass: "header__tphs"
    }, [_vm._v("\n                  " + _vm._s(item.partName) + "  "), (item.required) ? _c('span', {
      staticStyle: {
        "color": "red"
      }
    }, [_vm._v(" (*) ")]) : _vm._e(), _vm._v("\n                    \n                  "), (item.hasForm && item.daKhai) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('i', {
      staticClass: "fa fa-file-text-o",
      staticStyle: {
        "color": "#0d71bb",
        "font-size": "13px"
      },
      attrs: {
        "slot": "activator",
        "aria-hidden": "true"
      },
      slot: "activator"
    }), _vm._v(" "), _c('span', [_vm._v("Biểu mẫu trực tuyến (Đã khai)")])]) : _vm._e(), _vm._v(" "), (item.hasForm && !item.daKhai) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('i', {
      staticClass: "fa fa-file-o",
      staticStyle: {
        "color": "#0d71bb",
        "font-size": "13px"
      },
      attrs: {
        "slot": "activator"
      },
      slot: "activator"
    }), _vm._v(" "), _c('span', [_vm._v("Biểu mẫu trực tuyến (Chưa khai)")])]) : _vm._e(), _vm._v("\n                    \n                  "), (!item.hasForm && item.hasFileTemp) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-icon', {
      staticStyle: {
        "color": "#0d71bb"
      },
      attrs: {
        "slot": "activator",
        "size": "16",
        "color": "primary"
      },
      on: {
        "click": function($event) {
          $event.stopPropagation();
          _vm.downloadFileTemplate(item, index)
        }
      },
      slot: "activator"
    }, [_vm._v("save_alt")]), _vm._v(" "), _c('span', [_vm._v("Biểu mẫu điền thủ công")])], 1) : _vm._e()], 1)]), _vm._v(" "), _c('div', {
      staticStyle: {
        "display": "flex"
      }
    }, [(_vm.checkInput === 1 && item.fileCheck === 2 && item.stateEditFileCheck) ? _c('v-text-field', {
      attrs: {
        "placeholder": "Nhập lý do",
        "rules": [function (v) { return !!v || 'Bạn phải nhập lý do trước khi gửi'; }],
        "required": ""
      },
      on: {
        "click": function($event) {
          $event.stopPropagation();
        },
        "keyup": function($event) {
          if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) { return null; }
          _vm.changeFileComment(item, index)
        }
      },
      model: {
        value: (item.fileComment),
        callback: function($$v) {
          _vm.$set(item, "fileComment", $$v)
        },
        expression: "item.fileComment"
      }
    }) : _vm._e(), _vm._v(" "), (_vm.checkInput === 1 && item.fileCheck === 2 && item.stateEditFileCheck) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-btn', {
      staticClass: "mx-0 my-0",
      attrs: {
        "slot": "activator",
        "icon": ""
      },
      on: {
        "click": function($event) {
          $event.stopPropagation();
          _vm.changeFileComment(item, index)
        }
      },
      slot: "activator"
    }, [_c('v-icon', {
      staticClass: "mx-0",
      attrs: {
        "size": "16",
        "color": "primary"
      }
    }, [_vm._v("send")])], 1), _vm._v(" "), _c('span', [_vm._v("Gửi")])], 1) : _vm._e()], 1), _vm._v(" "), (item.fileComment && !item.stateEditFileCheck) ? _c('i', {
      staticStyle: {
        "font-size": "12px",
        "color": "#0d71bb",
        "margin-left": "10px"
      }
    }, [_vm._v(_vm._s(item.fileComment))]) : _vm._e(), _vm._v(" "), (item.fileComment && !item.stateEditFileCheck && _vm.checkInput === 1) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-icon', {
      staticStyle: {
        "font-size": "13px",
        "color": "#0d71bb",
        "margin-left": "10px",
        "cursor": "pointer"
      },
      attrs: {
        "slot": "activator"
      },
      on: {
        "click": function($event) {
          $event.stopPropagation();
          item.stateEditFileCheck = !item.stateEditFileCheck
        }
      },
      slot: "activator"
    }, [_vm._v("edit")]), _vm._v(" "), _c('span', [_vm._v("Chỉnh sửa ý kiến")])], 1) : _vm._e(), _vm._v(" "), _vm._l((_vm.dossierFilesItems), function(itemFileView, index) {
      return (item.partNo === itemFileView.dossierPartNo && !itemFileView.eForm) ? _c('div', {
        key: index
      }, [_c('div', {
        staticStyle: {
          "width": "calc(100% - 370px)",
          "display": "flex",
          "align-items": "center",
          "min-height": "38px",
          "background": "#fff",
          "padding-left": "15px",
          "font-size": "12px"
        }
      }, [_c('span', {
        staticClass: "ml-3",
        staticStyle: {
          "cursor": "pointer"
        },
        on: {
          "click": function($event) {
            $event.stopPropagation();
            _vm.viewFile2(itemFileView)
          }
        }
      }, [(itemFileView.fileSize !== 0) ? _c('v-icon', [_vm._v("attach_file")]) : _vm._e(), _vm._v("\n                    " + _vm._s(itemFileView.displayName) + " - \n                    "), _c('i', [_vm._v(_vm._s(itemFileView.modifiedDate))])], 1), _vm._v(" "), (!_vm.onlyView && _vm.checkInput !== 1) ? _c('v-btn', {
        staticClass: "mx-0 my-0",
        attrs: {
          "icon": "",
          "ripple": ""
        },
        on: {
          "click": function($event) {
            $event.stopPropagation();
            _vm.deleteSingleFile(itemFileView, index)
          }
        }
      }, [_c('v-icon', {
        staticStyle: {
          "color": "red"
        }
      }, [_vm._v("delete_outline")])], 1) : _vm._e()], 1)]) : _vm._e()
    })], 2)]), _vm._v(" "), (item.hasForm) ? _c('v-card', [_c('v-card-text', {
      staticStyle: {
        "background-color": "rgba(244, 247, 213, 0.19)"
      }
    }, [_c('v-layout', {
      attrs: {
        "wrap": ""
      }
    }, [(!_vm.stateView) ? _c('v-flex', {
      staticClass: "text-xs-right",
      attrs: {
        "xs12": ""
      }
    }, [(item.hasForm && !_vm.onlyView && _vm.checkInput !== 1) ? _c('v-btn', {
      attrs: {
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.saveAlpacaForm(item, index)
        }
      }
    }, [_vm._v("Lưu lại")]) : _vm._e(), _vm._v(" "), (item.daKhai && item.hasForm && !_vm.onlyView && _vm.checkInput !== 1) ? _c('v-btn', {
      attrs: {
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.deleteSingleFileEform(item, index)
        }
      }
    }, [_vm._v("Xóa")]) : _vm._e(), _vm._v(" "), (item.daKhai && item.hasForm) ? _c('v-btn', {
      attrs: {
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.previewFileEfom(item, index)
        }
      }
    }, [_vm._v("In")]) : _vm._e(), _vm._v(" "), (!_vm.onlyView || item.daKhai) ? _c('div', {
      class: {
        "no_acction__event": _vm.onlyView
      },
      attrs: {
        "id": 'formAlpaca' + item.partNo + _vm.id
      }
    }) : _vm._e()], 1) : _vm._e()], 1)], 1)], 1) : _vm._e()], 1)], 1), _vm._v(" "), _c('div', {
      staticClass: "absolute__btn group__thanh_phan pr-3 mr-1"
    }, [(_vm.loading) ? _c('content-placeholders', {
      staticClass: "mt-1"
    }, [_c('content-placeholders-text', {
      attrs: {
        "lines": 1
      }
    })], 1) : _c('v-layout', {
      attrs: {
        "row": "",
        "wrap": ""
      }
    }, [(_vm.originality !== 1 && item.partType === 1 && !_vm.thongTinHoSo.online && _vm.checkInput !== 1) ? _c('v-flex', {
      staticClass: "layout wrap",
      staticStyle: {
        "width": "110px"
      }
    }, [_c('v-select', {
      attrs: {
        "items": _vm.fileMarkItems,
        "disabled": _vm.onlyView
      },
      on: {
        "change": function($event) {
          _vm.changeFileMark($event, index)
        }
      },
      model: {
        value: (_vm.dossierTemplateItems[index].fileMark),
        callback: function($$v) {
          _vm.$set(_vm.dossierTemplateItems[index], "fileMark", $$v)
        },
        expression: "dossierTemplateItems[index].fileMark"
      }
    })], 1) : _vm._e(), _vm._v(" "), (_vm.checkInput === 1) ? _c('v-flex', {
      staticClass: "layout wrap",
      staticStyle: {
        "width": "120px"
      }
    }, [_c('v-select', {
      attrs: {
        "items": _vm.fileCheckItems,
        "item-text": "text",
        "item-value": "value"
      },
      on: {
        "change": function($event) {
          _vm.changeFileCheck($event, index)
        }
      },
      model: {
        value: (_vm.dossierTemplateItems[index].fileCheck),
        callback: function($$v) {
          _vm.$set(_vm.dossierTemplateItems[index], "fileCheck", $$v)
        },
        expression: "dossierTemplateItems[index].fileCheck"
      }
    })], 1) : (item.fileCheck > 0) ? _c('v-flex', {
      staticClass: "layout wrap",
      style: ({
        width: '20px',
        'align-items': 'center',
        'margin-left': '10px',
        'margin-top': _vm.thongTinHoSo.online ? '10px' : '0px'
      })
    }, [(item.fileCheck === 1) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-icon', {
      staticClass: "mx-0",
      attrs: {
        "slot": "activator",
        "size": "16",
        "color": "primary"
      },
      slot: "activator"
    }, [_vm._v("done")]), _vm._v(" "), _c('span', [_vm._v("Đạt")])], 1) : (item.fileCheck === 2) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-icon', {
      staticClass: "mx-0",
      attrs: {
        "slot": "activator",
        "size": "16",
        "color": "primary"
      },
      slot: "activator"
    }, [_vm._v("close")]), _vm._v(" "), _c('span', [_vm._v("Không đạt")])], 1) : _vm._e()], 1) : _vm._e(), _vm._v(" "), (_vm.checkInput !== 1) ? _c('v-flex', {
      class: {
        'text-xs-center': !_vm.onlyView, 'text-xs-right': _vm.onlyView
      },
      style: ({
        width: !_vm.onlyView ? '90px' : 'auto'
      })
    }, [_c('input', {
      staticStyle: {
        "display": "none"
      },
      attrs: {
        "type": "file",
        "id": 'file' + item.partNo
      },
      on: {
        "change": function($event) {
          _vm.onUploadSingleFile($event, item, index)
        }
      }
    }), _vm._v(" "), (item.partType === 3 && _vm.originality === 3 && !_vm.onlyView) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-btn', {
      staticClass: "mx-0 my-0",
      attrs: {
        "slot": "activator",
        "icon": ""
      },
      on: {
        "click": function($event) {
          _vm.addFileOther(item)
        }
      },
      slot: "activator"
    }, [_c('v-icon', {
      staticClass: "mx-0",
      attrs: {
        "size": "16",
        "color": "primary"
      }
    }, [_vm._v("add")])], 1), _vm._v(" "), _c('span', [_vm._v("Thêm giấy tờ khác")])], 1) : _vm._e(), _vm._v(" "), (_vm.progressUploadPart === item.partNo) ? _c('v-progress-circular', {
      attrs: {
        "width": 2,
        "size": 25,
        "color": "green",
        "indeterminate": ""
      }
    }) : (_vm.progressUploadPart !== item.partNo && !_vm.onlyView) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-btn', {
      staticClass: "mx-0 my-0",
      attrs: {
        "slot": "activator",
        "icon": ""
      },
      on: {
        "click": function($event) {
          _vm.pickFile(item)
        }
      },
      slot: "activator"
    }, [_c('v-badge', [_c('v-icon', {
      attrs: {
        "size": "16",
        "color": "primary"
      }
    }, [_vm._v("cloud_upload")])], 1)], 1), _vm._v(" "), _c('span', [_vm._v("Tải file lên")])], 1) : _vm._e()], 1) : _vm._e()], 1)], 1)], 1) : _vm._e()
  }), _vm._v(" "), _c('v-dialog', {
    attrs: {
      "max-width": "400",
      "transition": "fade-transition",
      "persistent": ""
    },
    model: {
      value: (_vm.dialogAddOtherTemp),
      callback: function($$v) {
        _vm.dialogAddOtherTemp = $$v
      },
      expression: "dialogAddOtherTemp"
    }
  }, [_c('v-card', [_c('v-form', {
    ref: "form",
    attrs: {
      "lazy-validation": ""
    },
    model: {
      value: (_vm.valid),
      callback: function($$v) {
        _vm.valid = $$v
      },
      expression: "valid"
    }
  }, [_c('v-card-title', {
    staticClass: "headline"
  }, [_vm._v("Tên giấy tờ")]), _vm._v(" "), _c('v-btn', {
    staticClass: "mx-0 my-0 absolute__btn_panel mr-2",
    attrs: {
      "icon": "",
      "dark": ""
    },
    nativeOn: {
      "click": function($event) {
        return _vm.cancelDialog($event)
      }
    }
  }, [_c('v-icon', [_vm._v("clear")])], 1), _vm._v(" "), (_vm.loadingAddOther) ? _c('v-progress-linear', {
    staticClass: "my-0",
    attrs: {
      "indeterminate": true
    }
  }) : _vm._e(), _vm._v(" "), _c('v-card-text', {
    staticClass: "pb-0 pt-4"
  }, [_c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, [_c('v-flex', {
    staticClass: "px-2 pb-3",
    attrs: {
      "xs12": ""
    }
  }, [_c('v-text-field', {
    attrs: {
      "label": "Tên giấy tờ:",
      "rules": [function (v) { return !!v || 'Bạn phải điền tên giấy tờ.'; }],
      "required": ""
    },
    model: {
      value: (_vm.otherDossierTemplate),
      callback: function($$v) {
        _vm.otherDossierTemplate = $$v
      },
      expression: "otherDossierTemplate"
    }
  })], 1)], 1)], 1), _vm._v(" "), _c('v-card-actions', [_c('v-spacer'), _vm._v(" "), _c('v-btn', {
    attrs: {
      "color": "red darken-3",
      "flat": "flat"
    },
    nativeOn: {
      "click": function($event) {
        return _vm.cancelDialog($event)
      }
    }
  }, [_vm._v("\n              Quay lại\n            ")]), _vm._v(" "), _c('v-btn', {
    attrs: {
      "color": "primary",
      "flat": "flat",
      "loading": _vm.loadingAddOther
    },
    nativeOn: {
      "click": function($event) {
        return _vm.addOtherTemplate($event)
      }
    }
  }, [_vm._v("\n            Đồng ý\n            "), _c('span', {
    attrs: {
      "slot": "loader"
    },
    slot: "loader"
  }, [_vm._v("Loading...")])])], 1)], 1)], 1)], 1)], 2), _vm._v(" "), _c('v-dialog', {
    staticStyle: {
      "overflow": "hidden"
    },
    attrs: {
      "max-width": "900",
      "transition": "fade-transition"
    },
    model: {
      value: (_vm.dialogPDF),
      callback: function($$v) {
        _vm.dialogPDF = $$v
      },
      expression: "dialogPDF"
    }
  }, [_c('v-card', [_c('v-card-title', {
    staticClass: "headline"
  }, [_vm._v("File đính kèm")]), _vm._v(" "), _c('v-btn', {
    staticClass: "mx-0 my-0 absolute__btn_panel mr-2",
    attrs: {
      "icon": "",
      "dark": ""
    },
    nativeOn: {
      "click": function($event) {
        _vm.dialogPDF = false
      }
    }
  }, [_c('v-icon', [_vm._v("clear")])], 1), _vm._v(" "), (_vm.dialogPDFLoading) ? _c('div', {
    staticStyle: {
      "min-height": "600px",
      "text-align": "center",
      "margin": "auto",
      "padding": "25%"
    }
  }, [_c('v-progress-circular', {
    attrs: {
      "size": 100,
      "width": 1,
      "color": "primary",
      "indeterminate": ""
    }
  })], 1) : _vm._e(), _vm._v(" "), _c('iframe', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.dialogPDFLoading),
      expression: "!dialogPDFLoading"
    }],
    staticStyle: {
      "overflow": "auto",
      "min-height": "600px"
    },
    attrs: {
      "id": 'dialogPDFPreview' + _vm.id,
      "src": "",
      "type": "application/pdf",
      "width": "100%",
      "height": "100%",
      "frameborder": "0"
    }
  })], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-687ee6a0", module.exports)
  }
}

/***/ }),
/* 650 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_v_money__ = __webpack_require__(648);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_v_money___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_v_money__);



/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    payments: {
      type: Object,
      default: function _default() {}
    },
    viaPortal: {
      type: Number,
      default: function _default() {
        return 0;
      }
    }
  },
  model: {
    prop: 'payments'
  },
  data: function data() {
    return {
      data_payment: {},
      money: {
        decimal: '',
        thousands: '.',
        prefix: '',
        suffix: '',
        precision: 0,
        masked: false
      },
      totalFee: 0,
      feeTamThu: 0,
      feeTong: 0,
      checkPaid: true,
      activeEdit: true
    };
  },
  directives: { money: __WEBPACK_IMPORTED_MODULE_0_v_money__["VMoney"] },
  created: function created() {
    var vm = this;
    vm.data_payment = vm.payments;
    if (vm.payments) {
      setTimeout(function () {
        var feeAmount = vm.payments.feeAmount ? Number(vm.payments.feeAmount.toString().replace(/\./g, '')) : 0;

        if (vm.payments.requestPayment === 1) {
          var advanceAmount = vm.payments.advanceAmount ? Number(vm.payments.advanceAmount.toString().replace(/\./g, '')) : 0;
          vm.totalFee = advanceAmount;
        } else if (vm.payments.requestPayment === 2) {
          var serviceAmount = vm.payments.serviceAmount ? Number(vm.payments.serviceAmount.toString().replace(/\./g, '')) : 0;
          vm.totalFee = feeAmount + serviceAmount;
        } else {
          var _advanceAmount = vm.payments.advanceAmount ? Number(vm.payments.advanceAmount.toString().replace(/\./g, '')) : 0;
          var _serviceAmount = vm.payments.serviceAmount ? Number(vm.payments.serviceAmount.toString().replace(/\./g, '')) : 0;
          vm.feeTong = feeAmount + _serviceAmount;
          vm.totalFee = feeAmount + _serviceAmount - _advanceAmount;
        }
        if (vm.totalFee < 0) {
          vm.totalFee = 0;
        }
      }, 200);
    }
  },

  methods: {
    changeFee: function changeFee() {
      var vm = this;
      var val = vm.data_payment;
      var feeAmount = val.feeAmount ? Number(val.feeAmount.toString().replace(/\./g, '')) : 0;
      if (val.requestPayment === 1) {
        var advanceAmount = Number(val.advanceAmount.toString().replace(/\./g, ''));
        vm.totalFee = advanceAmount;
      } else if (val.requestPayment === 2) {
        var serviceAmount = Number(val.serviceAmount.toString().replace(/\./g, ''));
        vm.totalFee = feeAmount + serviceAmount;
      } else {
        var _advanceAmount2 = Number(val.advanceAmount.toString().replace(/\./g, ''));
        var _serviceAmount2 = Number(val.serviceAmount.toString().replace(/\./g, ''));
        vm.feeTong = feeAmount + _serviceAmount2;
        vm.totalFee = feeAmount + _serviceAmount2 - _advanceAmount2;
      }
      if (vm.totalFee < 0) {
        vm.totalFee = 0;
      }
    },
    currency: function currency(value) {
      if (value) {
        var moneyCur = (value / 1).toFixed(0).replace('.', ',');
        return moneyCur.toString().replace(/\B(?=(\d{3})+(?!\d))/g, '.');
      }
      return '';
    },
    goBack: function goBack() {
      window.history.back();
    }
  },
  filters: {}
});

/***/ }),
/* 651 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__ = __webpack_require__(645);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof__);



var constants = {
  colorChecked: '#75C791',
  colorUnchecked: '#bfcbd9',
  cssColors: false,
  labelChecked: 'on',
  labelUnchecked: 'off',
  width: 50,
  height: 22,
  margin: 3
};

var contains = function contains(object, title) {
  return (typeof object === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(object)) === 'object' && object.hasOwnProperty(title);
};

var px = function px(v) {
  return v + 'px';
};

/* harmony default export */ __webpack_exports__["default"] = ({
  name: 'toggle-button',
  props: {
    title_checked: '',
    title_unchecked: '',
    value: {
      type: Boolean,
      default: false
    },
    disabled: {
      type: Boolean,
      default: false
    },
    sync: {
      type: Boolean,
      default: false
    },
    speed: {
      type: Number,
      default: 300
    },
    color: {
      type: [String, Object],
      validator: function validator(value) {
        return (typeof value === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(value)) === 'object' ? value.checked || value.unchecked : typeof value === 'string';
      }
    },
    cssColors: {
      type: Boolean,
      default: false
    },
    labels: {
      type: [Boolean, Object],
      default: false,
      validator: function validator(value) {
        return (typeof value === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(value)) === 'object' ? value.checked || value.unchecked : typeof value === 'boolean';
      }
    },
    height: {
      type: Number,
      default: constants.height
    },
    width: {
      type: Number,
      default: constants.width
    }
  },
  computed: {
    className: function className() {
      var toggled = this.toggled,
          disabled = this.disabled;

      return ['vue-js-switch', { toggled: toggled, disabled: disabled }];
    },
    ariaChecked: function ariaChecked() {
      return this.toggled.toString();
    },
    coreStyle: function coreStyle() {
      return {
        width: px(this.width),
        height: px(this.height),
        backgroundColor: this.cssColors ? null : this.colorCurrent,
        borderRadius: px(Math.round(this.height / 2))
      };
    },
    maxWidth: function maxWidth() {
      return {
        width: px(this.width) + '!important'
      };
    },
    buttonRadius: function buttonRadius() {
      return this.height - constants.margin * 2;
    },
    distance: function distance() {
      return px(this.width - this.height + constants.margin);
    },
    buttonStyle: function buttonStyle() {
      return {
        width: px(this.buttonRadius),
        height: px(this.buttonRadius),
        transition: 'transform ' + this.speed + 'ms',
        transform: this.toggled ? 'translate3d(' + this.distance + ', 3px, 0px)' : null
      };
    },
    labelStyle: function labelStyle() {
      return {
        lineHeight: px(this.height)
      };
    },
    colorChecked: function colorChecked() {
      var color = this.color;

      if ((typeof color === 'undefined' ? 'undefined' : __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_typeof___default()(color)) !== 'object') {
        return color || constants.colorChecked;
      }
      return contains(color, 'checked') ? color.checked : constants.colorChecked;
    },
    colorUnchecked: function colorUnchecked() {
      var color = this.color;

      return contains(color, 'unchecked') ? color.unchecked : constants.colorUnchecked;
    },
    colorCurrent: function colorCurrent() {
      return this.toggled ? this.colorChecked : this.colorUnchecked;
    },
    labelChecked: function labelChecked() {
      return contains(this.labels, 'checked') ? this.labels.checked : constants.labelChecked;
    },
    labelUnchecked: function labelUnchecked() {
      return contains(this.labels, 'unchecked') ? this.labels.unchecked : constants.labelUnchecked;
    }
  },
  watch: {
    value: function value(_value) {
      if (this.sync) {
        this.toggled = !!_value;
      }
    }
  },
  data: function data() {
    return {
      toggled: !!this.value
    };
  },

  methods: {
    toggle: function toggle(event) {
      this.toggled = !this.toggled;
      this.$emit('input', this.toggled);
      this.$emit('change', {
        value: this.toggled,
        srcEvent: event
      });
    }
  }
});

/***/ }),
/* 652 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(657), __esModule: true };

/***/ }),
/* 653 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(658), __esModule: true };

/***/ }),
/* 654 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(659), __esModule: true };

/***/ }),
/* 655 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

exports.default = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
};

/***/ }),
/* 656 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _defineProperty = __webpack_require__(652);

var _defineProperty2 = _interopRequireDefault(_defineProperty);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      (0, _defineProperty2.default)(target, descriptor.key, descriptor);
    }
  }

  return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
}();

/***/ }),
/* 657 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(665);
var $Object = __webpack_require__(30).Object;
module.exports = function defineProperty(it, key, desc) {
  return $Object.defineProperty(it, key, desc);
};


/***/ }),
/* 658 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(666);
__webpack_require__(231);
__webpack_require__(667);
__webpack_require__(668);
module.exports = __webpack_require__(30).Symbol;


/***/ }),
/* 659 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(140);
__webpack_require__(213);
module.exports = __webpack_require__(516).f('iterator');


/***/ }),
/* 660 */
/***/ (function(module, exports, __webpack_require__) {

// all enumerable object keys, includes symbols
var getKeys = __webpack_require__(138);
var gOPS = __webpack_require__(214);
var pIE = __webpack_require__(211);
module.exports = function (it) {
  var result = getKeys(it);
  var getSymbols = gOPS.f;
  if (getSymbols) {
    var symbols = getSymbols(it);
    var isEnum = pIE.f;
    var i = 0;
    var key;
    while (symbols.length > i) if (isEnum.call(it, key = symbols[i++])) result.push(key);
  } return result;
};


/***/ }),
/* 661 */
/***/ (function(module, exports, __webpack_require__) {

// 7.2.2 IsArray(argument)
var cof = __webpack_require__(74);
module.exports = Array.isArray || function isArray(arg) {
  return cof(arg) == 'Array';
};


/***/ }),
/* 662 */
/***/ (function(module, exports, __webpack_require__) {

var META = __webpack_require__(143)('meta');
var isObject = __webpack_require__(59);
var has = __webpack_require__(73);
var setDesc = __webpack_require__(57).f;
var id = 0;
var isExtensible = Object.isExtensible || function () {
  return true;
};
var FREEZE = !__webpack_require__(94)(function () {
  return isExtensible(Object.preventExtensions({}));
});
var setMeta = function (it) {
  setDesc(it, META, { value: {
    i: 'O' + ++id, // object ID
    w: {}          // weak collections IDs
  } });
};
var fastKey = function (it, create) {
  // return primitive with prefix
  if (!isObject(it)) return typeof it == 'symbol' ? it : (typeof it == 'string' ? 'S' : 'P') + it;
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return 'F';
    // not necessary to add metadata
    if (!create) return 'E';
    // add missing metadata
    setMeta(it);
  // return object ID
  } return it[META].i;
};
var getWeak = function (it, create) {
  if (!has(it, META)) {
    // can't set metadata to uncaught frozen object
    if (!isExtensible(it)) return true;
    // not necessary to add metadata
    if (!create) return false;
    // add missing metadata
    setMeta(it);
  // return hash weak collections IDs
  } return it[META].w;
};
// add metadata on freeze-family methods calling
var onFreeze = function (it) {
  if (FREEZE && meta.NEED && isExtensible(it) && !has(it, META)) setMeta(it);
  return it;
};
var meta = module.exports = {
  KEY: META,
  NEED: false,
  fastKey: fastKey,
  getWeak: getWeak,
  onFreeze: onFreeze
};


/***/ }),
/* 663 */
/***/ (function(module, exports, __webpack_require__) {

var pIE = __webpack_require__(211);
var createDesc = __webpack_require__(96);
var toIObject = __webpack_require__(95);
var toPrimitive = __webpack_require__(215);
var has = __webpack_require__(73);
var IE8_DOM_DEFINE = __webpack_require__(228);
var gOPD = Object.getOwnPropertyDescriptor;

exports.f = __webpack_require__(58) ? gOPD : function getOwnPropertyDescriptor(O, P) {
  O = toIObject(O);
  P = toPrimitive(P, true);
  if (IE8_DOM_DEFINE) try {
    return gOPD(O, P);
  } catch (e) { /* empty */ }
  if (has(O, P)) return createDesc(!pIE.f.call(O, P), O[P]);
};


/***/ }),
/* 664 */
/***/ (function(module, exports, __webpack_require__) {

// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
var toIObject = __webpack_require__(95);
var gOPN = __webpack_require__(518).f;
var toString = {}.toString;

var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
  ? Object.getOwnPropertyNames(window) : [];

var getWindowNames = function (it) {
  try {
    return gOPN(it);
  } catch (e) {
    return windowNames.slice();
  }
};

module.exports.f = function getOwnPropertyNames(it) {
  return windowNames && toString.call(it) == '[object Window]' ? getWindowNames(it) : gOPN(toIObject(it));
};


/***/ }),
/* 665 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(51);
// 19.1.2.4 / 15.2.3.6 Object.defineProperty(O, P, Attributes)
$export($export.S + $export.F * !__webpack_require__(58), 'Object', { defineProperty: __webpack_require__(57).f });


/***/ }),
/* 666 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

// ECMAScript 6 symbols shim
var global = __webpack_require__(20);
var has = __webpack_require__(73);
var DESCRIPTORS = __webpack_require__(58);
var $export = __webpack_require__(51);
var redefine = __webpack_require__(230);
var META = __webpack_require__(662).KEY;
var $fails = __webpack_require__(94);
var shared = __webpack_require__(147);
var setToStringTag = __webpack_require__(98);
var uid = __webpack_require__(143);
var wks = __webpack_require__(19);
var wksExt = __webpack_require__(516);
var wksDefine = __webpack_require__(515);
var enumKeys = __webpack_require__(660);
var isArray = __webpack_require__(661);
var anObject = __webpack_require__(38);
var isObject = __webpack_require__(59);
var toIObject = __webpack_require__(95);
var toPrimitive = __webpack_require__(215);
var createDesc = __webpack_require__(96);
var _create = __webpack_require__(218);
var gOPNExt = __webpack_require__(664);
var $GOPD = __webpack_require__(663);
var $DP = __webpack_require__(57);
var $keys = __webpack_require__(138);
var gOPD = $GOPD.f;
var dP = $DP.f;
var gOPN = gOPNExt.f;
var $Symbol = global.Symbol;
var $JSON = global.JSON;
var _stringify = $JSON && $JSON.stringify;
var PROTOTYPE = 'prototype';
var HIDDEN = wks('_hidden');
var TO_PRIMITIVE = wks('toPrimitive');
var isEnum = {}.propertyIsEnumerable;
var SymbolRegistry = shared('symbol-registry');
var AllSymbols = shared('symbols');
var OPSymbols = shared('op-symbols');
var ObjectProto = Object[PROTOTYPE];
var USE_NATIVE = typeof $Symbol == 'function';
var QObject = global.QObject;
// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
var setter = !QObject || !QObject[PROTOTYPE] || !QObject[PROTOTYPE].findChild;

// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
var setSymbolDesc = DESCRIPTORS && $fails(function () {
  return _create(dP({}, 'a', {
    get: function () { return dP(this, 'a', { value: 7 }).a; }
  })).a != 7;
}) ? function (it, key, D) {
  var protoDesc = gOPD(ObjectProto, key);
  if (protoDesc) delete ObjectProto[key];
  dP(it, key, D);
  if (protoDesc && it !== ObjectProto) dP(ObjectProto, key, protoDesc);
} : dP;

var wrap = function (tag) {
  var sym = AllSymbols[tag] = _create($Symbol[PROTOTYPE]);
  sym._k = tag;
  return sym;
};

var isSymbol = USE_NATIVE && typeof $Symbol.iterator == 'symbol' ? function (it) {
  return typeof it == 'symbol';
} : function (it) {
  return it instanceof $Symbol;
};

var $defineProperty = function defineProperty(it, key, D) {
  if (it === ObjectProto) $defineProperty(OPSymbols, key, D);
  anObject(it);
  key = toPrimitive(key, true);
  anObject(D);
  if (has(AllSymbols, key)) {
    if (!D.enumerable) {
      if (!has(it, HIDDEN)) dP(it, HIDDEN, createDesc(1, {}));
      it[HIDDEN][key] = true;
    } else {
      if (has(it, HIDDEN) && it[HIDDEN][key]) it[HIDDEN][key] = false;
      D = _create(D, { enumerable: createDesc(0, false) });
    } return setSymbolDesc(it, key, D);
  } return dP(it, key, D);
};
var $defineProperties = function defineProperties(it, P) {
  anObject(it);
  var keys = enumKeys(P = toIObject(P));
  var i = 0;
  var l = keys.length;
  var key;
  while (l > i) $defineProperty(it, key = keys[i++], P[key]);
  return it;
};
var $create = function create(it, P) {
  return P === undefined ? _create(it) : $defineProperties(_create(it), P);
};
var $propertyIsEnumerable = function propertyIsEnumerable(key) {
  var E = isEnum.call(this, key = toPrimitive(key, true));
  if (this === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return false;
  return E || !has(this, key) || !has(AllSymbols, key) || has(this, HIDDEN) && this[HIDDEN][key] ? E : true;
};
var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(it, key) {
  it = toIObject(it);
  key = toPrimitive(key, true);
  if (it === ObjectProto && has(AllSymbols, key) && !has(OPSymbols, key)) return;
  var D = gOPD(it, key);
  if (D && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) D.enumerable = true;
  return D;
};
var $getOwnPropertyNames = function getOwnPropertyNames(it) {
  var names = gOPN(toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (!has(AllSymbols, key = names[i++]) && key != HIDDEN && key != META) result.push(key);
  } return result;
};
var $getOwnPropertySymbols = function getOwnPropertySymbols(it) {
  var IS_OP = it === ObjectProto;
  var names = gOPN(IS_OP ? OPSymbols : toIObject(it));
  var result = [];
  var i = 0;
  var key;
  while (names.length > i) {
    if (has(AllSymbols, key = names[i++]) && (IS_OP ? has(ObjectProto, key) : true)) result.push(AllSymbols[key]);
  } return result;
};

// 19.4.1.1 Symbol([description])
if (!USE_NATIVE) {
  $Symbol = function Symbol() {
    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor!');
    var tag = uid(arguments.length > 0 ? arguments[0] : undefined);
    var $set = function (value) {
      if (this === ObjectProto) $set.call(OPSymbols, value);
      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
      setSymbolDesc(this, tag, createDesc(1, value));
    };
    if (DESCRIPTORS && setter) setSymbolDesc(ObjectProto, tag, { configurable: true, set: $set });
    return wrap(tag);
  };
  redefine($Symbol[PROTOTYPE], 'toString', function toString() {
    return this._k;
  });

  $GOPD.f = $getOwnPropertyDescriptor;
  $DP.f = $defineProperty;
  __webpack_require__(518).f = gOPNExt.f = $getOwnPropertyNames;
  __webpack_require__(211).f = $propertyIsEnumerable;
  __webpack_require__(214).f = $getOwnPropertySymbols;

  if (DESCRIPTORS && !__webpack_require__(142)) {
    redefine(ObjectProto, 'propertyIsEnumerable', $propertyIsEnumerable, true);
  }

  wksExt.f = function (name) {
    return wrap(wks(name));
  };
}

$export($export.G + $export.W + $export.F * !USE_NATIVE, { Symbol: $Symbol });

for (var es6Symbols = (
  // 19.4.2.2, 19.4.2.3, 19.4.2.4, 19.4.2.6, 19.4.2.8, 19.4.2.9, 19.4.2.10, 19.4.2.11, 19.4.2.12, 19.4.2.13, 19.4.2.14
  'hasInstance,isConcatSpreadable,iterator,match,replace,search,species,split,toPrimitive,toStringTag,unscopables'
).split(','), j = 0; es6Symbols.length > j;)wks(es6Symbols[j++]);

for (var wellKnownSymbols = $keys(wks.store), k = 0; wellKnownSymbols.length > k;) wksDefine(wellKnownSymbols[k++]);

$export($export.S + $export.F * !USE_NATIVE, 'Symbol', {
  // 19.4.2.1 Symbol.for(key)
  'for': function (key) {
    return has(SymbolRegistry, key += '')
      ? SymbolRegistry[key]
      : SymbolRegistry[key] = $Symbol(key);
  },
  // 19.4.2.5 Symbol.keyFor(sym)
  keyFor: function keyFor(sym) {
    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol!');
    for (var key in SymbolRegistry) if (SymbolRegistry[key] === sym) return key;
  },
  useSetter: function () { setter = true; },
  useSimple: function () { setter = false; }
});

$export($export.S + $export.F * !USE_NATIVE, 'Object', {
  // 19.1.2.2 Object.create(O [, Properties])
  create: $create,
  // 19.1.2.4 Object.defineProperty(O, P, Attributes)
  defineProperty: $defineProperty,
  // 19.1.2.3 Object.defineProperties(O, Properties)
  defineProperties: $defineProperties,
  // 19.1.2.6 Object.getOwnPropertyDescriptor(O, P)
  getOwnPropertyDescriptor: $getOwnPropertyDescriptor,
  // 19.1.2.7 Object.getOwnPropertyNames(O)
  getOwnPropertyNames: $getOwnPropertyNames,
  // 19.1.2.8 Object.getOwnPropertySymbols(O)
  getOwnPropertySymbols: $getOwnPropertySymbols
});

// 24.3.2 JSON.stringify(value [, replacer [, space]])
$JSON && $export($export.S + $export.F * (!USE_NATIVE || $fails(function () {
  var S = $Symbol();
  // MS Edge converts symbol values to JSON as {}
  // WebKit converts symbol values to JSON as null
  // V8 throws on boxed symbols
  return _stringify([S]) != '[null]' || _stringify({ a: S }) != '{}' || _stringify(Object(S)) != '{}';
})), 'JSON', {
  stringify: function stringify(it) {
    var args = [it];
    var i = 1;
    var replacer, $replacer;
    while (arguments.length > i) args.push(arguments[i++]);
    $replacer = replacer = args[1];
    if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
    if (!isArray(replacer)) replacer = function (key, value) {
      if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
      if (!isSymbol(value)) return value;
    };
    args[1] = replacer;
    return _stringify.apply($JSON, args);
  }
});

// 19.4.3.4 Symbol.prototype[@@toPrimitive](hint)
$Symbol[PROTOTYPE][TO_PRIMITIVE] || __webpack_require__(52)($Symbol[PROTOTYPE], TO_PRIMITIVE, $Symbol[PROTOTYPE].valueOf);
// 19.4.3.5 Symbol.prototype[@@toStringTag]
setToStringTag($Symbol, 'Symbol');
// 20.2.1.9 Math[@@toStringTag]
setToStringTag(Math, 'Math', true);
// 24.3.3 JSON[@@toStringTag]
setToStringTag(global.JSON, 'JSON', true);


/***/ }),
/* 667 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(515)('asyncIterator');


/***/ }),
/* 668 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(515)('observable');


/***/ }),
/* 669 */
/***/ (function(module, exports, __webpack_require__) {

!function(t,e){ true?module.exports=e(__webpack_require__(514)):"function"==typeof define&&define.amd?define("moment-range",["moment"],e):"object"==typeof exports?exports["moment-range"]=e(require("moment")):t["moment-range"]=e(t.moment)}(this,function(t){return function(t){function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}var n={};return e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e,n){"use strict";var r=n(5)();t.exports=function(t){return t!==r&&null!==t}},function(t,e,n){"use strict";t.exports=n(18)()?Symbol:n(20)},function(e,n){e.exports=t},function(t,e,n){"use strict";function r(t){return t&&t.__esModule?t:{default:t}}function o(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function u(t){return t.range=function(e,n){var r=this;return"string"==typeof e&&y.hasOwnProperty(e)?new h(t(r).startOf(e),t(r).endOf(e)):new h(e,n)},t.rangeFromInterval=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:1,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:t();if(t.isMoment(r)||(r=t(r)),!r.isValid())throw new Error("Invalid date.");var o=r.clone().add(n,e),i=[];return i.push(t.min(r,o)),i.push(t.max(r,o)),new h(i)},t.rangeFromISOString=function(e){var n=a(e),r=t.parseZone(n[0]),o=t.parseZone(n[1]);return new h(r,o)},t.parseZoneRange=t.rangeFromISOString,t.fn.range=t.range,t.range.constructor=h,t.isRange=function(t){return t instanceof h},t.fn.within=function(t){return t.contains(this.toDate())},t}function a(t){return t.split("/")}Object.defineProperty(e,"__esModule",{value:!0}),e.DateRange=void 0;var s=function(){function t(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var u,a=t[Symbol.iterator]();!(r=(u=a.next()).done)&&(n.push(u.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}return function(e,n){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return t(e,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},f=function(){function t(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(e,n,r){return n&&t(e.prototype,n),r&&t(e,r),e}}();e.extendMoment=u;var l=n(2),v=r(l),d=n(1),p=r(d),y={year:!0,quarter:!0,month:!0,week:!0,day:!0,hour:!0,minute:!0,second:!0},h=e.DateRange=function(){function t(e,n){i(this,t);var r=e,o=n;if(1===arguments.length||void 0===n)if("object"===(void 0===e?"undefined":c(e))&&2===e.length){var u=s(e,2);r=u[0],o=u[1]}else if("string"==typeof e){var f=a(e),l=s(f,2);r=l[0],o=l[1]}this.start=r||0===r?(0,v.default)(r):(0,v.default)(-864e13),this.end=o||0===o?(0,v.default)(o):(0,v.default)(864e13)}return f(t,[{key:"adjacent",value:function(t){var e=this.start.isSame(t.end),n=this.end.isSame(t.start);return e&&t.start.valueOf()<=this.start.valueOf()||n&&t.end.valueOf()>=this.end.valueOf()}},{key:"add",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{adjacent:!1};return this.overlaps(t,e)?new this.constructor(v.default.min(this.start,t.start),v.default.max(this.end,t.end)):null}},{key:"by",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeEnd:!1,step:1},n=this;return o({},p.default.iterator,function(){var r=e.step||1,o=Math.abs(n.start.diff(n.end,t))/r,i=e.excludeEnd||!1,u=0;return e.hasOwnProperty("exclusive")&&(i=e.exclusive),{next:function(){var e=n.start.clone().add(u*r,t),a=i?!(u<o):!(u<=o);return u++,{done:a,value:a?void 0:e}}}})}},{key:"byRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeEnd:!1,step:1},n=this,r=e.step||1,i=this.valueOf()/t.valueOf()/r,u=Math.floor(i),a=e.excludeEnd||!1,s=0;return e.hasOwnProperty("exclusive")&&(a=e.exclusive),o({},p.default.iterator,function(){return u===1/0?{done:!0}:{next:function(){var e=(0,v.default)(n.start.valueOf()+t.valueOf()*s*r),o=u===i&&a?!(s<u):!(s<=u);return s++,{done:o,value:o?void 0:e}}}})}},{key:"center",value:function(){var t=this.start.valueOf()+this.diff()/2;return(0,v.default)(t)}},{key:"clone",value:function(){return new this.constructor(this.start.clone(),this.end.clone())}},{key:"contains",value:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeStart:!1,excludeEnd:!1},r=this.start.valueOf(),o=this.end.valueOf(),i=e.valueOf(),u=e.valueOf(),a=n.excludeStart||!1,s=n.excludeEnd||!1;n.hasOwnProperty("exclusive")&&(a=s=n.exclusive),e instanceof t&&(i=e.start.valueOf(),u=e.end.valueOf());var c=r<i||r<=i&&!a,f=o>u||o>=u&&!s;return c&&f}},{key:"diff",value:function(t,e){return this.end.diff(this.start,t,e)}},{key:"duration",value:function(t,e){return this.diff(t,e)}},{key:"intersect",value:function(t){var e=this.start.valueOf(),n=this.end.valueOf(),r=t.start.valueOf(),o=t.end.valueOf(),i=e==n,u=r==o;if(i){var a=e;if(a==r||a==o)return null;if(a>r&&a<o)return this.clone()}else if(u){var s=r;if(s==e||s==n)return null;if(s>e&&s<n)return new this.constructor(s,s)}return e<=r&&r<n&&n<o?new this.constructor(r,n):r<e&&e<o&&o<=n?new this.constructor(e,o):r<e&&e<=n&&n<o?this.clone():e<=r&&r<=o&&o<=n?new this.constructor(r,o):null}},{key:"isEqual",value:function(t){return this.start.isSame(t.start)&&this.end.isSame(t.end)}},{key:"isSame",value:function(t){return this.isEqual(t)}},{key:"overlaps",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{adjacent:!1},n=null!==this.intersect(t);return e.adjacent&&!n?this.adjacent(t):n}},{key:"reverseBy",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeStart:!1,step:1},n=this;return o({},p.default.iterator,function(){var r=e.step||1,o=Math.abs(n.start.diff(n.end,t))/r,i=e.excludeStart||!1,u=0;return e.hasOwnProperty("exclusive")&&(i=e.exclusive),{next:function(){var e=n.end.clone().subtract(u*r,t),a=i?!(u<o):!(u<=o);return u++,{done:a,value:a?void 0:e}}}})}},{key:"reverseByRange",value:function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{excludeStart:!1,step:1},n=this,r=e.step||1,i=this.valueOf()/t.valueOf()/r,u=Math.floor(i),a=e.excludeStart||!1,s=0;return e.hasOwnProperty("exclusive")&&(a=e.exclusive),o({},p.default.iterator,function(){return u===1/0?{done:!0}:{next:function(){var e=(0,v.default)(n.end.valueOf()-t.valueOf()*s*r),o=u===i&&a?!(s<u):!(s<=u);return s++,{done:o,value:o?void 0:e}}}})}},{key:"snapTo",value:function(t){var e=this.clone();return e.start.isSame((0,v.default)(-864e13))||(e.start=e.start.startOf(t)),e.end.isSame((0,v.default)(864e13))||(e.end=e.end.endOf(t)),e}},{key:"subtract",value:function(t){var e=this.start.valueOf(),n=this.end.valueOf(),r=t.start.valueOf(),o=t.end.valueOf();return null===this.intersect(t)?[this]:r<=e&&e<n&&n<=o?[]:r<=e&&e<o&&o<n?[new this.constructor(o,n)]:e<r&&r<n&&n<=o?[new this.constructor(e,r)]:e<r&&r<o&&o<n?[new this.constructor(e,r),new this.constructor(o,n)]:e<r&&r<n&&o<n?[new this.constructor(e,r),new this.constructor(r,n)]:[]}},{key:"toDate",value:function(){return[this.start.toDate(),this.end.toDate()]}},{key:"toString",value:function(){return this.start.format()+"/"+this.end.format()}},{key:"valueOf",value:function(){return this.end.valueOf()-this.start.valueOf()}}]),t}()},function(t,e,n){"use strict";var r,o=n(6),i=n(13),u=n(9),a=n(15);r=t.exports=function(t,e){var n,r,u,s,c;return arguments.length<2||"string"!=typeof t?(s=e,e=t,t=null):s=arguments[2],null==t?(n=u=!0,r=!1):(n=a.call(t,"c"),r=a.call(t,"e"),u=a.call(t,"w")),c={value:e,configurable:n,enumerable:r,writable:u},s?o(i(s),c):c},r.gs=function(t,e,n){var r,s,c,f;return"string"!=typeof t?(c=n,n=e,e=t,t=null):c=arguments[3],null==e?e=void 0:u(e)?null==n?n=void 0:u(n)||(c=n,n=void 0):(c=e,e=n=void 0),null==t?(r=!0,s=!1):(r=a.call(t,"c"),s=a.call(t,"e")),f={get:e,set:n,configurable:r,enumerable:s},c?o(i(c),f):f}},function(t,e,n){"use strict";t.exports=function(){}},function(t,e,n){"use strict";t.exports=n(7)()?Object.assign:n(8)},function(t,e,n){"use strict";t.exports=function(){var t,e=Object.assign;return"function"==typeof e&&(t={foo:"raz"},e(t,{bar:"dwa"},{trzy:"trzy"}),t.foo+t.bar+t.trzy==="razdwatrzy")}},function(t,e,n){"use strict";var r=n(10),o=n(14),i=Math.max;t.exports=function(t,e){var n,u,a,s=i(arguments.length,2);for(t=Object(o(t)),a=function(r){try{t[r]=e[r]}catch(t){n||(n=t)}},u=1;u<s;++u)e=arguments[u],r(e).forEach(a);if(void 0!==n)throw n;return t}},function(t,e,n){"use strict";t.exports=function(t){return"function"==typeof t}},function(t,e,n){"use strict";t.exports=n(11)()?Object.keys:n(12)},function(t,e,n){"use strict";t.exports=function(){try{return Object.keys("primitive"),!0}catch(t){return!1}}},function(t,e,n){"use strict";var r=n(0),o=Object.keys;t.exports=function(t){return o(r(t)?Object(t):t)}},function(t,e,n){"use strict";var r=n(0),o=Array.prototype.forEach,i=Object.create,u=function(t,e){var n;for(n in t)e[n]=t[n]};t.exports=function(t){var e=i(null);return o.call(arguments,function(t){r(t)&&u(Object(t),e)}),e}},function(t,e,n){"use strict";var r=n(0);t.exports=function(t){if(!r(t))throw new TypeError("Cannot use null or undefined");return t}},function(t,e,n){"use strict";t.exports=n(16)()?String.prototype.contains:n(17)},function(t,e,n){"use strict";var r="razdwatrzy";t.exports=function(){return"function"==typeof r.contains&&(!0===r.contains("dwa")&&!1===r.contains("foo"))}},function(t,e,n){"use strict";var r=String.prototype.indexOf;t.exports=function(t){return r.call(this,t,arguments[1])>-1}},function(t,e,n){"use strict";var r={object:!0,symbol:!0};t.exports=function(){var t;if("function"!=typeof Symbol)return!1;t=Symbol("test symbol");try{String(t)}catch(t){return!1}return!!r[typeof Symbol.iterator]&&(!!r[typeof Symbol.toPrimitive]&&!!r[typeof Symbol.toStringTag])}},function(t,e,n){"use strict";t.exports=function(t){return!!t&&("symbol"==typeof t||!!t.constructor&&("Symbol"===t.constructor.name&&"Symbol"===t[t.constructor.toStringTag]))}},function(t,e,n){"use strict";var r,o,i,u,a=n(4),s=n(21),c=Object.create,f=Object.defineProperties,l=Object.defineProperty,v=Object.prototype,d=c(null);if("function"==typeof Symbol){r=Symbol;try{String(r()),u=!0}catch(t){}}var p=function(){var t=c(null);return function(e){for(var n,r,o=0;t[e+(o||"")];)++o;return e+=o||"",t[e]=!0,n="@@"+e,l(v,n,a.gs(null,function(t){r||(r=!0,l(this,n,a(t)),r=!1)})),n}}();i=function(t){if(this instanceof i)throw new TypeError("Symbol is not a constructor");return o(t)},t.exports=o=function t(e){var n;if(this instanceof t)throw new TypeError("Symbol is not a constructor");return u?r(e):(n=c(i.prototype),e=void 0===e?"":String(e),f(n,{__description__:a("",e),__name__:a("",p(e))}))},f(o,{for:a(function(t){return d[t]?d[t]:d[t]=o(String(t))}),keyFor:a(function(t){var e;s(t);for(e in d)if(d[e]===t)return e}),hasInstance:a("",r&&r.hasInstance||o("hasInstance")),isConcatSpreadable:a("",r&&r.isConcatSpreadable||o("isConcatSpreadable")),iterator:a("",r&&r.iterator||o("iterator")),match:a("",r&&r.match||o("match")),replace:a("",r&&r.replace||o("replace")),search:a("",r&&r.search||o("search")),species:a("",r&&r.species||o("species")),split:a("",r&&r.split||o("split")),toPrimitive:a("",r&&r.toPrimitive||o("toPrimitive")),toStringTag:a("",r&&r.toStringTag||o("toStringTag")),unscopables:a("",r&&r.unscopables||o("unscopables"))}),f(i.prototype,{constructor:a(o),toString:a("",function(){return this.__name__})}),f(o.prototype,{toString:a(function(){return"Symbol ("+s(this).__description__+")"}),valueOf:a(function(){return s(this)})}),l(o.prototype,o.toPrimitive,a("",function(){var t=s(this);return"symbol"==typeof t?t:t.toString()})),l(o.prototype,o.toStringTag,a("c","Symbol")),l(i.prototype,o.toStringTag,a("c",o.prototype[o.toStringTag])),l(i.prototype,o.toPrimitive,a("c",o.prototype[o.toPrimitive]))},function(t,e,n){"use strict";var r=n(19);t.exports=function(t){if(!r(t))throw new TypeError(t+" is not a symbol");return t}}])});
//# sourceMappingURL=moment-range.js.map

/***/ }),
/* 670 */
/***/ (function(module, exports, __webpack_require__) {

var map = {
	"./af": 519,
	"./af.js": 519,
	"./ar": 526,
	"./ar-dz": 520,
	"./ar-dz.js": 520,
	"./ar-kw": 521,
	"./ar-kw.js": 521,
	"./ar-ly": 522,
	"./ar-ly.js": 522,
	"./ar-ma": 523,
	"./ar-ma.js": 523,
	"./ar-sa": 524,
	"./ar-sa.js": 524,
	"./ar-tn": 525,
	"./ar-tn.js": 525,
	"./ar.js": 526,
	"./az": 527,
	"./az.js": 527,
	"./be": 528,
	"./be.js": 528,
	"./bg": 529,
	"./bg.js": 529,
	"./bm": 530,
	"./bm.js": 530,
	"./bn": 531,
	"./bn.js": 531,
	"./bo": 532,
	"./bo.js": 532,
	"./br": 533,
	"./br.js": 533,
	"./bs": 534,
	"./bs.js": 534,
	"./ca": 535,
	"./ca.js": 535,
	"./cs": 536,
	"./cs.js": 536,
	"./cv": 537,
	"./cv.js": 537,
	"./cy": 538,
	"./cy.js": 538,
	"./da": 539,
	"./da.js": 539,
	"./de": 542,
	"./de-at": 540,
	"./de-at.js": 540,
	"./de-ch": 541,
	"./de-ch.js": 541,
	"./de.js": 542,
	"./dv": 543,
	"./dv.js": 543,
	"./el": 544,
	"./el.js": 544,
	"./en-au": 545,
	"./en-au.js": 545,
	"./en-ca": 546,
	"./en-ca.js": 546,
	"./en-gb": 547,
	"./en-gb.js": 547,
	"./en-ie": 548,
	"./en-ie.js": 548,
	"./en-il": 549,
	"./en-il.js": 549,
	"./en-nz": 550,
	"./en-nz.js": 550,
	"./eo": 551,
	"./eo.js": 551,
	"./es": 554,
	"./es-do": 552,
	"./es-do.js": 552,
	"./es-us": 553,
	"./es-us.js": 553,
	"./es.js": 554,
	"./et": 555,
	"./et.js": 555,
	"./eu": 556,
	"./eu.js": 556,
	"./fa": 557,
	"./fa.js": 557,
	"./fi": 558,
	"./fi.js": 558,
	"./fo": 559,
	"./fo.js": 559,
	"./fr": 562,
	"./fr-ca": 560,
	"./fr-ca.js": 560,
	"./fr-ch": 561,
	"./fr-ch.js": 561,
	"./fr.js": 562,
	"./fy": 563,
	"./fy.js": 563,
	"./gd": 564,
	"./gd.js": 564,
	"./gl": 565,
	"./gl.js": 565,
	"./gom-latn": 566,
	"./gom-latn.js": 566,
	"./gu": 567,
	"./gu.js": 567,
	"./he": 568,
	"./he.js": 568,
	"./hi": 569,
	"./hi.js": 569,
	"./hr": 570,
	"./hr.js": 570,
	"./hu": 571,
	"./hu.js": 571,
	"./hy-am": 572,
	"./hy-am.js": 572,
	"./id": 573,
	"./id.js": 573,
	"./is": 574,
	"./is.js": 574,
	"./it": 575,
	"./it.js": 575,
	"./ja": 576,
	"./ja.js": 576,
	"./jv": 577,
	"./jv.js": 577,
	"./ka": 578,
	"./ka.js": 578,
	"./kk": 579,
	"./kk.js": 579,
	"./km": 580,
	"./km.js": 580,
	"./kn": 581,
	"./kn.js": 581,
	"./ko": 582,
	"./ko.js": 582,
	"./ky": 583,
	"./ky.js": 583,
	"./lb": 584,
	"./lb.js": 584,
	"./lo": 585,
	"./lo.js": 585,
	"./lt": 586,
	"./lt.js": 586,
	"./lv": 587,
	"./lv.js": 587,
	"./me": 588,
	"./me.js": 588,
	"./mi": 589,
	"./mi.js": 589,
	"./mk": 590,
	"./mk.js": 590,
	"./ml": 591,
	"./ml.js": 591,
	"./mn": 592,
	"./mn.js": 592,
	"./mr": 593,
	"./mr.js": 593,
	"./ms": 595,
	"./ms-my": 594,
	"./ms-my.js": 594,
	"./ms.js": 595,
	"./mt": 596,
	"./mt.js": 596,
	"./my": 597,
	"./my.js": 597,
	"./nb": 598,
	"./nb.js": 598,
	"./ne": 599,
	"./ne.js": 599,
	"./nl": 601,
	"./nl-be": 600,
	"./nl-be.js": 600,
	"./nl.js": 601,
	"./nn": 602,
	"./nn.js": 602,
	"./pa-in": 603,
	"./pa-in.js": 603,
	"./pl": 604,
	"./pl.js": 604,
	"./pt": 606,
	"./pt-br": 605,
	"./pt-br.js": 605,
	"./pt.js": 606,
	"./ro": 607,
	"./ro.js": 607,
	"./ru": 608,
	"./ru.js": 608,
	"./sd": 609,
	"./sd.js": 609,
	"./se": 610,
	"./se.js": 610,
	"./si": 611,
	"./si.js": 611,
	"./sk": 612,
	"./sk.js": 612,
	"./sl": 613,
	"./sl.js": 613,
	"./sq": 614,
	"./sq.js": 614,
	"./sr": 616,
	"./sr-cyrl": 615,
	"./sr-cyrl.js": 615,
	"./sr.js": 616,
	"./ss": 617,
	"./ss.js": 617,
	"./sv": 618,
	"./sv.js": 618,
	"./sw": 619,
	"./sw.js": 619,
	"./ta": 620,
	"./ta.js": 620,
	"./te": 621,
	"./te.js": 621,
	"./tet": 622,
	"./tet.js": 622,
	"./tg": 623,
	"./tg.js": 623,
	"./th": 624,
	"./th.js": 624,
	"./tl-ph": 625,
	"./tl-ph.js": 625,
	"./tlh": 626,
	"./tlh.js": 626,
	"./tr": 627,
	"./tr.js": 627,
	"./tzl": 628,
	"./tzl.js": 628,
	"./tzm": 630,
	"./tzm-latn": 629,
	"./tzm-latn.js": 629,
	"./tzm.js": 630,
	"./ug-cn": 631,
	"./ug-cn.js": 631,
	"./uk": 632,
	"./uk.js": 632,
	"./ur": 633,
	"./ur.js": 633,
	"./uz": 635,
	"./uz-latn": 634,
	"./uz-latn.js": 634,
	"./uz.js": 635,
	"./vi": 636,
	"./vi.js": 636,
	"./x-pseudo": 637,
	"./x-pseudo.js": 637,
	"./yo": 638,
	"./yo.js": 638,
	"./zh-cn": 639,
	"./zh-cn.js": 639,
	"./zh-hk": 640,
	"./zh-hk.js": 640,
	"./zh-tw": 641,
	"./zh-tw.js": 641
};
function webpackContext(req) {
	return __webpack_require__(webpackContextResolve(req));
};
function webpackContextResolve(req) {
	var id = map[req];
	if(!(id + 1)) // check for number or string
		throw new Error("Cannot find module '" + req + "'.");
	return id;
};
webpackContext.keys = function webpackContextKeys() {
	return Object.keys(map);
};
webpackContext.resolve = webpackContextResolve;
module.exports = webpackContext;
webpackContext.id = 670;

/***/ }),
/* 671 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "payment-info",
    staticStyle: {
      "width": "100%"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" "), (_vm.data_payment.requestPayment === 1 || _vm.data_payment.requestPayment === 5) ? _c('span', [_vm._v(_vm._s(_vm.data_payment.paymentFee))]) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 2) ? _c('span', [_vm._v("Lập phiếu thanh toán")]) : _vm._e()]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
    staticClass: "pb-1"
  }, [_c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, [_c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Lệ phí: ")])], 1), _vm._v(" "), _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [(_vm.data_payment.editable === 1 || _vm.data_payment.editable === 3) ? _c('v-text-field', {
    directives: [{
      name: "money",
      rawName: "v-money",
      value: (_vm.money),
      expression: "money"
    }],
    attrs: {
      "suffix": "vnđ"
    },
    on: {
      "keyup": _vm.changeFee
    },
    model: {
      value: (_vm.data_payment.feeAmount),
      callback: function($$v) {
        _vm.$set(_vm.data_payment, "feeAmount", $$v)
      },
      expression: "data_payment.feeAmount"
    }
  }) : _c('p', {
    staticClass: "mt-1 mb-0"
  }, [_vm._v(_vm._s(_vm.currency(_vm.data_payment.feeAmount.toString().replace(/\./g, ''))) + "    vnđ")])], 1), _vm._v(" "), _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Phí: ")])], 1), _vm._v(" "), _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [(_vm.data_payment.editable === 2 || _vm.data_payment.editable === 3) ? _c('v-text-field', {
    directives: [{
      name: "money",
      rawName: "v-money",
      value: (_vm.money),
      expression: "money"
    }],
    attrs: {
      "suffix": "vnđ"
    },
    on: {
      "keyup": _vm.changeFee
    },
    model: {
      value: (_vm.data_payment.serviceAmount),
      callback: function($$v) {
        _vm.$set(_vm.data_payment, "serviceAmount", $$v)
      },
      expression: "data_payment.serviceAmount"
    }
  }) : _c('p', {
    staticClass: "mt-1 mb-0"
  }, [_vm._v(_vm._s(_vm.currency(_vm.data_payment.serviceAmount.toString().replace(/\./g, ''))) + "    vnđ")])], 1), _vm._v(" "), _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  })], 1)], 1), _vm._v(" "), _c('v-card-text', {
    staticClass: "pt-0"
  }, [_c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, [(_vm.data_payment.requestPayment === 1) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Tổng: ")])], 1) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 1) ? _c('v-flex', {
    staticClass: "pt-1",
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [_c('span', [_vm._v(_vm._s(_vm.currency(_vm.feeTong.toString().replace(/\./g, ''))) + "    vnđ")])]) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 1) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm1": ""
    }
  }) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 2) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Tổng: ")])], 1) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 2) ? _c('v-flex', {
    staticClass: "pt-1",
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [_c('span', [_vm._v(_vm._s(_vm.currency(_vm.totalFee.toString().replace(/\./g, ''))) + "    vnđ")])]) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 2) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm1": ""
    }
  }) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Tổng: ")])], 1) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    staticClass: "pt-1",
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [_c('span', [_vm._v(_vm._s(_vm.currency(_vm.feeTong.toString().replace(/\./g, ''))) + "    vnđ")])]) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Đã tạm nộp: ")])], 1) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    staticClass: "pt-2",
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [_c('span', [_vm._v(_vm._s(_vm.currency((Number(_vm.data_payment.advanceAmount.toString().replace(/\./g, ''))).toString().replace(/\./g, ''))) + "    vnđ")])]) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm1": ""
    }
  }) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm2": ""
    }
  }, [_c('v-subheader', {
    staticClass: "pl-0 text-right"
  }, [_vm._v("Còn phải nộp: ")])], 1) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    staticClass: "pt-2",
    attrs: {
      "xs12": "",
      "sm3": ""
    }
  }, [_c('span', [_vm._v(_vm._s(_vm.currency(_vm.totalFee.toString().replace(/\./g, ''))) + "    vnđ")])]) : _vm._e(), _vm._v(" "), (_vm.data_payment.requestPayment === 5) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm1": ""
    }
  }) : _vm._e()], 1), _vm._v(" "), _c('v-layout', {
    staticStyle: {
      "position": "relative"
    },
    attrs: {
      "wrap": ""
    }
  }, [_c('v-flex', {
    staticClass: "my-0 py-1",
    staticStyle: {
      "width": "70px"
    }
  }, [_c('span', {
    staticClass: "red--text"
  }, [_vm._v("* ")]), _vm._v(" Ghi chú:")]), _vm._v(" "), _c('v-flex', {
    staticStyle: {
      "width": "calc(100% - 80px)"
    }
  }, [(_vm.activeEdit == false) ? _c('div', {
    staticClass: "pl-2"
  }, [_c('v-text-field', {
    staticClass: "py-0",
    attrs: {
      "multi-line": "",
      "readonly": _vm.activeEdit,
      "required": ""
    },
    model: {
      value: (_vm.data_payment.paymentNote),
      callback: function($$v) {
        _vm.$set(_vm.data_payment, "paymentNote", $$v)
      },
      expression: "data_payment.paymentNote"
    }
  })], 1) : _vm._e(), _vm._v(" "), (_vm.activeEdit || _vm.data_payment.paymentNote === '') ? _c('p', {
    staticClass: "px-2 my-0 py-1"
  }, [_vm._v("\n                " + _vm._s(_vm.data_payment.paymentNote) + "   \n                "), (_vm.activeEdit == true) ? _c('v-icon', {
    staticClass: "hover-pointer btn-add mx-0 my-0",
    attrs: {
      "color": "blue",
      "size": "20",
      "title": "Sửa",
      "grey": "",
      "darken-4": ""
    },
    on: {
      "click": function($event) {
        $event.stopPropagation();
        _vm.activeEdit = false
      }
    }
  }, [_vm._v("\n                  create\n                ")]) : _vm._e()], 1) : _vm._e(), _vm._v(" "), _c('span', {
    staticStyle: {
      "position": "absolute",
      "top": "15px",
      "right": "10px"
    }
  }, [(_vm.activeEdit == false) ? _c('v-icon', {
    staticClass: "hover-pointer btn-add mx-0 my-0",
    attrs: {
      "color": "green",
      "size": "25",
      "grey": "",
      "darken-4": ""
    },
    on: {
      "click": function($event) {
        $event.stopPropagation();
        _vm.activeEdit = true
      }
    }
  }, [_vm._v("\n                  check\n                ")]) : _vm._e()], 1)])], 1)], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-6830f0e4", module.exports)
  }
}

/***/ }),
/* 672 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('label', {
    class: _vm.className,
    style: (_vm.maxWidth),
    attrs: {
      "role": "checkbox",
      "title": _vm.toggled ? _vm.title_checked : _vm.title_unchecked,
      "aria-checked": _vm.ariaChecked
    }
  }, [_c('input', {
    staticClass: "v-switch-input",
    attrs: {
      "type": "checkbox"
    },
    on: {
      "change": function($event) {
        $event.stopPropagation();
        return _vm.toggle($event)
      }
    }
  }), _vm._v(" "), _c('div', {
    staticClass: "v-switch-core",
    style: (_vm.coreStyle)
  }, [_c('div', {
    staticClass: "v-switch-button",
    style: (_vm.buttonStyle)
  })]), _vm._v(" "), (_vm.labels) ? [(_vm.toggled) ? _c('span', {
    staticClass: "v-switch-label v-left",
    style: (_vm.labelStyle),
    domProps: {
      "innerHTML": _vm._s(_vm.labelChecked)
    }
  }) : _c('span', {
    staticClass: "v-switch-label v-right",
    style: (_vm.labelStyle),
    domProps: {
      "innerHTML": _vm._s(_vm.labelUnchecked)
    }
  })] : _vm._e()], 2)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7cc31a58", module.exports)
  }
}

/***/ }),
/* 673 */
/***/ (function(module, exports) {

module.exports = function(module) {
	if(!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 674 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__toggleButton_vue__ = __webpack_require__(217);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__toggleButton_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1__toggleButton_vue__);




/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    'toggle-button': __WEBPACK_IMPORTED_MODULE_1__toggleButton_vue___default.a
  },
  props: {
    assign_items: {
      type: Array,
      default: function _default() {
        return [];
      }
    },
    type: {
      type: Number,
      default: function _default() {
        return 1;
      }
    },
    configNote: {
      type: Object,
      default: function _default() {}
    }
  },
  model: {
    prop: 'assign_items'
  },
  data: function data() {
    return {
      data_phancong: [],
      assignedtype_items: {
        '2': [{ text: 'Không có phân công', value: 0 }, { text: 'Thực hiện chính', value: 1 }, { text: 'Thực hiện phối hợp', value: 2 }],
        '3': [{ text: 'Không có phân công', value: 0 }, { text: 'Thực hiện chính', value: 1 }, { text: 'Thực hiện phối hợp', value: 2 }, { text: 'Theo dõi', value: 3 }]
      },
      title_asign: {
        '1': 'PHÂN CÔNG NGƯỜI THỰC HIỆN',
        '2': 'PHÂN CÔNG THỰC HIỆN, PHỐI HỢP',
        '3': 'PHÂN CÔNG THỰC HIỆN, PHỐI HỢP VÀ THEO DÕI'
      },
      presenterAddGroup: true,
      assignValidate: true
    };
  },
  created: function created() {
    var vm = this;
    setTimeout(function () {
      __WEBPACK_IMPORTED_MODULE_0_jquery___default()('.btn-tgl').addClass('btn-hidden');
    }, 200);
  },
  mounted: function mounted() {
    this.data_phancong = this.assign_items;
  },

  methods: {
    changeAssigned: function changeAssigned(event, index) {
      var vm = this;
      if (vm.type === 1) {
        if (event === true) {
          vm.assign_items[index].assigned = 1;
        } else {
          vm.assign_items[index].assigned = 0;
        }
      }
    },
    checkAsign: function checkAsign(event, index) {
      var vm = this;
      if (event) {
        vm.assign_items[index].assigned = 1;
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#btn-' + index).removeClass('btn-hidden');
      } else {
        vm.assign_items[index].assigned = 0;
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#btn-' + index).addClass('btn-hidden');
      }
    },
    changeTypeAssign: function changeTypeAssign(event, index) {
      var vm = this;
      if (event.value) {
        vm.assign_items[index].assigned = 1;
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#btn-' + index).removeClass('btn-hidden');
      } else {
        vm.assign_items[index].assigned = 2;
        __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#btn-' + index).addClass('btn-hidden');
      }
    },
    doExport: function doExport() {
      var vm = this;
      var assign = vm.assign_items.filter(function (item) {
        return Number(item.assigned) > 0;
      });
      if (assign.length === 0) {
        vm.assignValidate = false;
        return vm.assignValidate;
      } else {
        vm.assignValidate = true;
        return vm.assignValidate;
      }
    }
  }
});

/***/ }),
/* 675 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });


/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    detailDossier: {
      type: Object,
      default: function _default() {}
    }
  },
  watch: {
    detailDossier: function detailDossier(val) {
      var vm = this;
      vm.thongTinChiTietHoSo = val;
    }
  },
  components: {},
  data: function data() {
    return {
      thongTinChiTietHoSo: {},
      showContactDetail: false
    };
  },
  computed: {
    loading: function loading() {
      return this.$store.getters.loading;
    },
    originality: function originality() {
      var vm = this;
      return vm.getOriginality();
    }
  },
  created: function created() {
    var vm = this;
    vm.thongTinChiTietHoSo = vm.detailDossier;
  },
  mounted: function mounted() {
    var vm = this;
    vm.thongTinChiTietHoSo = vm.detailDossier;
  },

  methods: {
    initData: function initData(data) {
      var vm = this;
      vm.$store.dispatch('getDetailDossier', data).then(function (resultDossier) {
        vm.thongTinChiTietHoSo = resultDossier;
      });
    },
    goBack: function goBack() {
      window.history.back();
    },
    durationText: function durationText(durationUnit, durationCount) {
      var durationText;
      if (durationUnit === 1 && durationCount > 8) {
        var day = Math.floor(durationCount / 8) + ' ngày';
        var hours = void 0;
        if (durationCount % 8 !== 0) {
          hours = (durationCount / 8 - Math.floor(durationCount / 8)) * 8 + ' giờ';
        } else {
          hours = '';
        }
        durationText = day + ' ' + hours;
      } else if (durationUnit === 0) {
        durationText = durationCount + ' ngày';
      } else if (durationUnit === 1 && durationCount <= 8) {
        durationText = durationCount + ' giờ';
      }
      return durationText;
    }
  },
  filters: {
    dateTimeView: function dateTimeView(arg) {
      if (arg) {
        var value = new Date(arg);
        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + ' | ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');
      } else {
        return '';
      }
    }
  }
});

/***/ }),
/* 676 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });


/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    resultFiles: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  data: function data() {
    return {
      dossierId: '',
      loadingAction: false,
      headers: [{
        text: 'STT',
        align: 'center',
        sortable: false
      }, {
        text: 'Số giấy',
        align: 'center',
        sortable: false
      }, {
        text: 'Ngày cấp',
        align: 'center',
        sortable: false
      }, {
        text: 'Tên giấy tờ',
        align: 'center',
        sortable: false
      }]
    };
  },
  computed: {
    loading: function loading() {
      return this.$store.getters.loading;
    }
  },
  created: function created() {
    var vm = this;
    vm.$nextTick(function () {});
  },

  methods: {},
  filters: {
    dateTimeView: function dateTimeView(arg) {
      if (arg) {
        var value = new Date(arg);
        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear();
      } else {
        return '';
      }
    },
    filterFileResult: function filterFileResult(arg) {
      if (arg.length > 0) {
        var resultFilter = [];
        resultFilter = arg.filter(function (val, index) {
          return val.dossierPartType === 2 && val.eForm === false;
        });
        return resultFilter;
      }
    }
  }
});

/***/ }),
/* 677 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });


/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    user_note: {
      type: Number,
      required: true
    },
    configNote: {
      type: Object,
      required: false
    }
  },
  data: function data() {
    return {
      noteYkien: '',
      valid: false
    };
  },
  methods: {
    initData: function initData(data) {
      var vm = this;
      vm.$store.dispatch('getDetailDossier', data).then(function (resultDossier) {
        vm.thongTinChiTietHoSo = resultDossier;
      });
    },
    doExport: function doExport() {
      var vm = this;
      var exportData = {
        text: vm.noteYkien,
        valid: vm.$refs.userNoteForm.validate()
      };
      return exportData;
    }
  }
});

/***/ }),
/* 678 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('v-expansion-panel', {
    staticClass: "expansion-pl ext__form"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v("Thông tin chung hồ sơ")]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
    staticClass: "py-0"
  }, [_c('v-layout', {
    staticClass: "px-2 py-2",
    attrs: {
      "wrap": ""
    }
  }, [(_vm.originality !== 1) ? _c('v-flex', {
    staticClass: "pr-3",
    attrs: {
      "xs12": "",
      "sm4": ""
    }
  }, [_c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Chủ hồ sơ: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold"
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.applicantName))])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1 overHidden"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Địa chỉ: ")]), _vm._v(" "), _c('v-tooltip', {
    attrs: {
      "top": ""
    }
  }, [_c('span', {
    staticClass: "text-bold ",
    attrs: {
      "slot": "activator"
    },
    slot: "activator"
  }, [_vm._v(_vm._s(_vm.thongTinChiTietHoSo.address) + " " + _vm._s(_vm.thongTinChiTietHoSo.wardName) + ", " + _vm._s(_vm.thongTinChiTietHoSo.districtName) + ", " + _vm._s(_vm.thongTinChiTietHoSo.cityName))]), _vm._v(" "), _c('span', {
    staticClass: "pl-0"
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.address) + " " + _vm._s(_vm.thongTinChiTietHoSo.wardName) + ", " + _vm._s(_vm.thongTinChiTietHoSo.districtName) + ", " + _vm._s(_vm.thongTinChiTietHoSo.cityName))])])], 1), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pl-0"
  }, [_vm._v("Thư điện tử: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.contactEmail) + " ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Điện thoại: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.contactTelNo) + " ")])])]) : _vm._e(), _vm._v(" "), (_vm.originality === 1) ? _c('v-flex', {
    staticClass: "pr-3",
    attrs: {
      "xs12": "",
      "sm4": ""
    }
  }, [_c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Mã hồ sơ: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v("  " + _vm._s(_vm.thongTinChiTietHoSo.dossierNo) + " ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Cơ quan: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v("  " + _vm._s(_vm.thongTinChiTietHoSo.govAgencyName) + " ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Trạng thái: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.dossierStatusText) + " ")])])]) : _vm._e(), _vm._v(" "), (_vm.originality !== 1) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm4": ""
    }
  }, [_c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Ngày gửi trực tuyến: ")]), _vm._v(" "), (_vm.thongTinChiTietHoSo.online) ? _c('span', {
    staticClass: "pl-0 text-bold"
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.submitDate) + " ")]) : _c('span', {
    staticClass: "pl-0 text-bold"
  }, [_vm._v(" Một cửa ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Ngày tiếp nhận: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.receiveDate))])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Thời hạn giải quyết: ")]), _vm._v(" "), (_vm.thongTinChiTietHoSo.durationCount > 0) ? _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" \n                " + _vm._s(_vm.durationText(_vm.thongTinChiTietHoSo.durationUnit, _vm.thongTinChiTietHoSo.durationCount)) + " làm việc \n              ")]) : _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v("\n                Không quy định\n              ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Ngày hẹn trả: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.dueDate))])])]) : _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm4": ""
    }
  }, [_c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Ngày gửi: ")]), _vm._v(" "), (_vm.thongTinChiTietHoSo.online) ? _c('span', {
    staticClass: "pl-0 text-bold"
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.submitDate) + " ")]) : _c('span', {
    staticClass: "pl-0 text-bold"
  }, [_vm._v(" Một cửa ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Ngày tiếp nhận: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.receiveDate))])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Ngày hẹn trả: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.dueDate))])])]), _vm._v(" "), (_vm.originality !== 1) ? _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm4": ""
    }
  }, [_c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Mã hồ sơ: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v("  " + _vm._s(_vm.thongTinChiTietHoSo.dossierNo) + " ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Trạng thái: ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0 text-bold "
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.dossierStatusText) + " ")])]), _vm._v(" "), _c('div', {
    staticClass: "xs12 sm12 pb-1 overHidden"
  }, [_c('span', {
    staticClass: "pr-2"
  }, [_vm._v("Nội dung: ")]), _vm._v(" "), (_vm.thongTinChiTietHoSo.briefNote) ? _c('v-tooltip', {
    attrs: {
      "top": ""
    }
  }, [_c('span', {
    staticClass: "text-bold ",
    attrs: {
      "slot": "activator"
    },
    slot: "activator"
  }, [_vm._v(_vm._s(_vm.thongTinChiTietHoSo.briefNote))]), _vm._v(" "), _c('span', {
    staticClass: "pl-0"
  }, [_vm._v(_vm._s(_vm.thongTinChiTietHoSo.briefNote) + " ")])]) : _vm._e()], 1)]) : _c('v-flex', {
    attrs: {
      "xs12": "",
      "sm4": ""
    }
  }, [_c('div', {
    staticClass: "xs12 sm12 pb-1",
    staticStyle: {
      "color": "#0b72ba"
    }
  }, [_vm._v("Ghi chú:")]), _vm._v(" "), (_vm.thongTinChiTietHoSo.dossierNote && _vm.thongTinChiTietHoSo.dossierNote !== 'null') ? _c('div', {
    staticClass: "xs12 sm12 pb-1 overHidden"
  }, [_c('v-tooltip', {
    attrs: {
      "top": ""
    }
  }, [_c('span', {
    staticClass: "text-bold ",
    attrs: {
      "slot": "activator"
    },
    slot: "activator"
  }, [_vm._v(_vm._s(_vm.thongTinChiTietHoSo.dossierNote) + " ")]), _vm._v(" "), _c('span', {
    staticClass: "pl-0"
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.dossierNote) + " ")])])], 1) : _vm._e(), _vm._v(" "), (_vm.thongTinChiTietHoSo.extendDate) ? _c('div', {
    staticClass: "xs12 sm12 pb-1"
  }, [_c('span', {
    staticClass: "pl-0 text-bold"
  }, [_vm._v("Hẹn lại: " + _vm._s(_vm.thongTinChiTietHoSo.extendDate))])]) : _vm._e()])], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-02494d10", module.exports)
  }
}

/***/ }),
/* 679 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "traketqua"
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v("Giấy tờ kết quả\n      ")]), _vm._v(" "), _c('v-card', [_c('v-card-text', [_c('v-data-table', {
    staticClass: "table-bordered",
    attrs: {
      "headers": _vm.headers,
      "items": _vm._f("filterFileResult")(_vm.resultFiles),
      "item-key": "no",
      "hide-actions": "",
      "no-data-text": 'Không có giấy tờ kết quả'
    },
    scopedSlots: _vm._u([{
      key: "headerCell",
      fn: function(props) {
        return [_c('v-tooltip', {
          attrs: {
            "bottom": ""
          }
        }, [_c('span', {
          attrs: {
            "slot": "activator"
          },
          slot: "activator"
        }, [_vm._v("\n                  " + _vm._s(props.header.text) + "\n                ")]), _vm._v(" "), _c('span', [_vm._v("\n                  " + _vm._s(props.header.text) + "\n                ")])])]
      }
    }, {
      key: "items",
      fn: function(props) {
        return [_c('td', {
          staticClass: "text-xs-center",
          staticStyle: {
            "width": "5%"
          }
        }, [_vm._v(" " + _vm._s(props.index + 1) + " ")]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left",
          staticStyle: {
            "width": "10%"
          }
        }, [_vm._v(" " + _vm._s(props.item.deliverableCode) + " ")]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left",
          staticStyle: {
            "width": "10%"
          }
        }, [_vm._v(" " + _vm._s(_vm._f("dateTimeView")(props.item.createDate)) + " ")]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left",
          staticStyle: {
            "width": "75%"
          }
        }, [_vm._v(" " + _vm._s(props.item.displayName) + " ")])]
      }
    }])
  })], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-5b02061d", module.exports)
  }
}

/***/ }),
/* 680 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "phancong",
    staticStyle: {
      "background-color": "white",
      "width": "100%"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v("Chọn người thực hiện\n      ")]), _vm._v(" "), _c('v-card', [(_vm.type === 1) ? _c('v-card-text', {
    staticClass: "py-1"
  }, [_c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, _vm._l((_vm.data_phancong), function(item, index) {
    return _c('v-checkbox', {
      key: item.userId,
      staticStyle: {
        "display": "inline-block"
      },
      attrs: {
        "slot": "activator",
        "label": item.userName,
        "title": item.userName
      },
      on: {
        "change": function($event) {
          _vm.changeAssigned($event, index)
        }
      },
      slot: "activator",
      model: {
        value: (item.assigned),
        callback: function($$v) {
          _vm.$set(item, "assigned", $$v)
        },
        expression: "item.assigned"
      }
    })
  })), _vm._v(" "), (!_vm.assignValidate) ? _c('span', {
    staticClass: "ml-3",
    staticStyle: {
      "color": "#f44336"
    }
  }, [_vm._v("* Yêu cầu chọn người để thực hiện")]) : _vm._e()], 1) : _c('v-card-text', {
    staticClass: "px-2 py-1"
  }, [_c('v-layout', {
    staticClass: "my-1",
    attrs: {
      "wrap": ""
    }
  }, _vm._l((_vm.data_phancong), function(item, index) {
    return _c('div', {
      key: item.userId,
      staticClass: "ml-3"
    }, [_c('v-layout', {
      attrs: {
        "wrap": ""
      }
    }, [_c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-checkbox', {
      staticStyle: {
        "min-width": "150px"
      },
      attrs: {
        "slot": "activator",
        "label": item.userName
      },
      on: {
        "change": function($event) {
          _vm.checkAsign($event, index)
        }
      },
      slot: "activator",
      model: {
        value: (item.assigned),
        callback: function($$v) {
          _vm.$set(item, "assigned", $$v)
        },
        expression: "item.assigned"
      }
    }), _vm._v(" "), _c('span', {
      staticClass: "pl-0"
    }, [_vm._v(" " + _vm._s(item.userName) + " ")])], 1), _vm._v(" "), _c('toggle-button', {
      staticClass: "mx-1 btn-tgl",
      attrs: {
        "id": ("btn-" + index),
        "title_checked": "Thực hiện",
        "title_unchecked": "Phối hợp",
        "labels": {
          checked: 'TH',
          unchecked: 'PH'
        },
        "color": {
          checked: '#7DCE94',
          unchecked: '#82C7EB'
        },
        "width": 50
      },
      on: {
        "change": function($event) {
          _vm.changeTypeAssign($event, index)
        }
      },
      model: {
        value: (_vm.presenterAddGroup),
        callback: function($$v) {
          _vm.presenterAddGroup = $$v
        },
        expression: "presenterAddGroup"
      }
    })], 1)], 1)
  })), _vm._v(" "), (!_vm.assignValidate) ? _c('span', {
    staticClass: "ml-3",
    staticStyle: {
      "color": "#f44336"
    }
  }, [_vm._v("* Yêu cầu chọn người để thực hiện")]) : _vm._e()], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-7cac08a2", module.exports)
  }
}

/***/ }),
/* 681 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('v-expansion-panel', {
    staticClass: "expansion-pl ext__form"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" "), _c('span', [_vm._v("Ý kiến cán bộ")]), _vm._v(" "), (_vm.user_note === 2) ? _c('span', {
    staticClass: "red--text text--darken-3"
  }, [_vm._v("*")]) : _vm._e()]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
    staticClass: "py-2 px-2"
  }, [_c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, [_c('v-flex', {
    attrs: {
      "xs12": ""
    }
  }, [_c('v-form', {
    ref: "userNoteForm",
    model: {
      value: (_vm.valid),
      callback: function($$v) {
        _vm.valid = $$v
      },
      expression: "valid"
    }
  }, [_c('v-text-field', {
    attrs: {
      "multi-line": "",
      "rows": 4,
      "rules": _vm.user_note === 2 ? [function () { return _vm.noteYkien !== '' || 'Trường dữ liệu bắt buộc'; }] : []
    },
    model: {
      value: (_vm.noteYkien),
      callback: function($$v) {
        _vm.noteYkien = $$v
      },
      expression: "noteYkien"
    }
  })], 1)], 1)], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-ad80357c", module.exports)
  }
}

/***/ }),
/* 682 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__ = __webpack_require__(517);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete__ = __webpack_require__(695);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery_textcomplete__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_comments__ = __webpack_require__(694);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_jquery_comments___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_jquery_comments__);







/* harmony default export */ __webpack_exports__["default"] = ({
  props: ['classPK', 'className'],
  data: function data() {
    return {
      usersComment: [],
      comment: [],
      argShowMore: true,

      checkOpinion: true
    };
  },
  computed: {
    loading: function loading() {
      return this.$store.getters.loading;
    },
    initData: function initData() {
      return this.$store.getters.loadingInitData;
    }
  },
  watch: {
    classPK: function classPK(val) {
      var vm = this;
      vm.$store.dispatch('loadUsersComment', val).then(function (result) {
        vm.usersComment = result;
        vm.initComment();
      }).catch(function (reject) {
        vm.initComment();
      });
    }
  },
  created: function created() {},
  mounted: function mounted() {},

  methods: {
    runComment: function runComment() {
      var vm = this;
      if (vm.classPK) {
        vm.initComment();
      }
    },

    initComment: function initComment() {
      var vm = this;
      __WEBPACK_IMPORTED_MODULE_1_jquery___default()('#comments-container-el').comments({
        profilePictureURL: 'https://png.icons8.com/material/50/000000/guest-male.png',
        textareaRows: 2,
        enableAttachments: true,
        enableHashtags: true,
        enablePinging: true,
        postCommentOnEnter: false,
        forceResponsive: false,
        readOnly: false,
        textareaPlaceholderText: 'Thêm bình luận mới',
        newestText: 'Mới nhất',
        oldestText: 'Cũ nhất',
        popularText: 'Phổ biến',
        attachmentsText: 'Đính kèm',
        sendText: 'Gửi',
        replyText: 'Trả lời',
        editText: 'Sửa',
        editedText: 'Đã sửa',
        youText: 'Bạn',
        saveText: 'Ghi lại',
        deleteText: 'Xóa',

        hideRepliesText: 'Ẩn câu trả lời',
        noCommentsText: 'Không có bình luận nào',
        noAttachmentsText: 'Không có tệp đính kèm',
        attachmentDropText: 'Kéo thả tệp đính kèm',
        fieldMappings: {
          id: 'commentId',
          parent: 'parent',
          userId: 'userId',
          created: 'createdDate',
          modified: 'modifiedDate',
          content: 'content',
          fileURL: 'fileUrl',
          fileMimeType: 'fileType',
          fileName: 'fileName',
          pings: 'pings',
          creator: 'userId',
          fullname: 'fullname',
          profileURL: 'profileUrl',
          profilePictureURL: 'pictureUrl',
          isNew: 'isNew',
          createdByAdmin: 'isAdmin',
          createdByCurrentUser: 'createdByCurrentUser',
          upvoteCount: 'upvoteCount',
          userHasUpvoted: 'userHasUpvoted',
          email: 'email',
          opinion: 'opinion',
          className: 'className',
          classPK: 'classPK'
        },
        timeFormatter: function timeFormatter(time) {
          if (time) {
            var value = new Date(time);
            value.setHours(value.getHours() - 7);
            return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + ' ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');
          } else {
            return '';
          }
        },
        getUsers: function getUsers(onSuccess, onError) {
          onSuccess(vm.usersComment);
        },
        getComments: function getComments(onSuccess, onError) {
          var dataGet = {
            'classPK': vm.classPK,
            'className': vm.className
          };
          var promise = vm.$store.dispatch('loadCommentItems', dataGet);
          promise.then(function (result) {
            var data = [];
            __WEBPACK_IMPORTED_MODULE_1_jquery___default.a.each(result, function (index, item) {
              vm.comment = item;
              vm.formatComment(vm.comment);
              data.push(vm.comment);
            });
            onSuccess(data);
          }).catch(function (reject) {
            onSuccess([]);
            onError();
          });
        },
        postComment: function postComment(data, onSuccess, onError) {
          data.classPK = vm.classPK;
          data.className = vm.className;
          data.opinion = document.getElementById('opinion').checked;
          vm.$store.dispatch('postComment', data).then(function (result) {
            if (result.opinion) {
              __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.opinion').hide();
            }
            document.getElementById('opinion').checked = false;
            vm.comment = result;
            vm.formatComment(vm.comment);
            onSuccess(vm.comment);
          });
        },
        putComment: function putComment(data, onSuccess, onError) {
          data.classPK = vm.classPK;
          data.className = vm.className;
          vm.$store.dispatch('putComment', data).then(function (result) {
            vm.comment = result;
            vm.formatComment(vm.comment);
            onSuccess(vm.comment);
          });
        },
        deleteComment: function deleteComment(data, onSuccess, onError) {
          data.classPK = vm.classPK;
          data.className = vm.className;
          vm.$store.dispatch('deleteComment', data).then(function (result) {
            onSuccess();
          }).catch(function (reject) {
            onError();
          });
        },
        upvoteComment: function upvoteComment(data, onSuccess, onError) {
          data.classPK = vm.classPK;
          data.className = vm.className;
          vm.$store.dispatch('upvoteComment', data).then(function (result) {
            vm.comment = result;
            vm.formatComment(vm.comment);
            onSuccess(vm.comment);
          }).catch(function (reject) {});
        },
        uploadAttachments: function uploadAttachments(comments, onSuccess, onError) {
          var responses = 0;
          var successfulUploads = [];
          var serverResponded = function serverResponded() {
            responses++;
            if (responses === comments.length) {
              if (successfulUploads.length === 0) {
                onError();
              } else {
                onSuccess(successfulUploads);
              }
            }
          };
          __WEBPACK_IMPORTED_MODULE_1_jquery___default()(comments).each(function (index, comment) {
            var formData = new FormData();
            __WEBPACK_IMPORTED_MODULE_1_jquery___default()(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_keys___default()(comment)).each(function (index, key) {
              var value = comment[key];
              if (value) {
                formData.append(key, value);
              }
            });
            formData.append('file', comment.file);
            formData.append('className', vm.className);
            formData.append('classPK', vm.classPK);
            formData.append('parent', comment.parent != null ? comment.parent : 0);
            formData.append('fileName', comment.file.name);
            formData.append('fileType', comment.file.type);
            formData.append('fileSize', comment.file.size);
            formData.append('pings', comment.pings.join());
            formData.append('opinion', document.getElementById('opinion').checked);

            formData.append('email', vm.initData.user.userEmail);
            formData.append('fullname', vm.initData.user.userName);
            formData.append('opinion', document.getElementById('opinion').checked);
            __WEBPACK_IMPORTED_MODULE_1_jquery___default.a.ajax({
              url: vm.initData.commentApi + '/uploads',
              dataType: 'json',
              type: 'POST',
              headers: {
                'groupId': vm.initData.groupId
              },
              data: formData,
              cache: false,
              contentType: false,
              processData: false,
              success: function success(comment) {
                if (comment.opinion) {
                  __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.opinion').hide();
                }
                document.getElementById('opinion').checked = false;
                vm.formatComment(comment);
                successfulUploads.push(vm.comment);
                serverResponded();
                if (comment.opinion) {
                  __WEBPACK_IMPORTED_MODULE_1_jquery___default()('.opinion').hide();
                }
                document.getElementById('opinion').checked = false;
              },
              error: function error(xhr, data) {
                serverResponded();
              }
            });
          });
        }
      });
    },
    formatComment: function formatComment(comment) {
      var vm = this;
      vm.comment = comment;
      if (comment.parent === 0) {
        vm.comment.parent = null;
      }
      if (comment.fileName === '') {
        vm.comment.fileName = null;
      }
      if (comment.fileType === '') {
        vm.comment.fileType = null;
      }
      if (comment.fileUrl === '') {
        vm.comment.fileUrl = null;
      }
      if (comment.pictureUrl === '') {
        vm.comment.pictureUrl = 'https://png.icons8.com/material/50/000000/guest-male.png';
      }
      vm.comment.fullname = comment.fullname;
      vm.comment.opinion = comment.opinion;
      vm.comment.pings = comment.pings.toString().split(',');
      vm.comment.createdDate = vm.comment.createDate;
      vm.comment.modifiedDate = vm.comment.modifiedDate;
    },
    dateTimeView: function dateTimeView(arg) {
      if (arg) {
        var value = new Date(arg);
        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + ' ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');
      } else {
        return '';
      }
    }
  },
  filters: {
    dateTimeView: function dateTimeView(arg) {
      if (arg) {
        var value = new Date(arg);
        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + '  ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');
      } else {
        return '';
      }
    }
  }
});

/***/ }),
/* 683 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });


/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    dossier_id: {
      type: Number
    },
    action_id: {
      type: Number
    }
  },
  data: function data() {
    return {
      itemId: null,
      fieldNameID: '',
      date: null,
      dialog: false,
      formBuilder: [],
      rulesValid: {
        number: function number(value) {
          var pattern = /^\d+$/;
          return pattern.test(value) || 'Kiểu dữ liệu sai định dạng.';
        }
      }
    };
  },
  created: function created() {
    var vm = this;
    vm.$nextTick(function () {
      var filter = {
        dossierId: vm.dossier_id,
        actionId: vm.action_id
      };
      vm.$store.dispatch('getExtraForm', filter).then(function (result) {
        vm.formBuilder = result;
      });
    });
  },

  methods: {
    openDialogCustom: function openDialogCustom(item, fieldName) {
      var vm = this;
      vm.dialog = true;
      vm.fieldNameID = fieldName;
      vm.itemId = item;
    },
    pickDateCustom: function pickDateCustom() {
      var vm = this;

      vm.itemId.value = vm.dateTimeView(vm.date);
      vm.dialog = false;
    },
    inputChangeValue: function inputChangeValue(item) {
      var vm = this;
      item.value = document.getElementById(item.fieldName).value;
    },
    dateTimeView: function dateTimeView(arg) {
      if (arg) {
        var value = new Date(arg);
        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear();
      } else {
        return '';
      }
    },
    formSubmitData: function formSubmitData() {
      var vm = this;
      var objectReturn = {};
      for (var key in vm.formBuilder) {
        objectReturn[vm.formBuilder[key].fieldName] = vm.formBuilder[key].value;
      }
      return objectReturn;
    }
  }
});

/***/ }),
/* 684 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);



/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    detailDossier: {}
  },
  data: function data() {
    return {
      tabActive: 'tabs-1',
      activeKS: true,
      noteReason: '',
      thongTinHoSo: {}
    };
  },
  created: function created() {},
  mounted: function mounted() {},

  methods: {
    changeActive: function changeActive() {
      var vm = this;
    },
    doExport: function doExport() {
      var vm = this;
      var exportData = {
        textValue: vm.noteReason,
        useKS: vm.activeKS
      };
      return exportData;
    }
  }
});

/***/ }),
/* 685 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_toastr__ = __webpack_require__(141);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_toastr___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_toastr__);




/* harmony default export */ __webpack_exports__["default"] = ({
  props: {
    id: {
      type: String,
      default: function _default() {
        return 'nm';
      }
    },
    detailDossier: {
      type: Object,
      default: function _default() {}
    },
    createFiles: {
      type: Array,
      default: function _default() {
        return [];
      }
    }
  },
  data: function data() {
    return {
      dossierTemplateItems: [],
      dossierMarksItems: [],
      dossierFilesItems: [],
      thongTinHoSo: {},
      valid: true,
      stateView: false,
      dialogAddOtherTemp: false,
      loadingAddOther: false,
      otherDossierTemplate: '',
      sheet: false,
      partView: '',
      dossierFileIdView: '',
      stateEdit: false,
      progressUploadPart: '',
      dialogPDF: false,
      dialogPDFLoading: true,
      stateAddFileOther: false,
      dossierTemplatesItemSelect: {},
      fileViews: [],
      sampleCount: 0,
      fileTemplateItems: []
    };
  },
  computed: {
    loading: function loading() {
      return this.$store.getters.loading;
    },
    originality: function originality() {
      var vm = this;
      return vm.getOriginality();
    },
    initDataResource: function initDataResource() {
      return this.$store.getters.loadingInitData;
    }
  },
  created: function created() {
    var vm = this;
    vm.page = 1;
    vm.$nextTick(function () {
      if (vm.detailDossier['dossierId']) {
        vm.$store.dispatch('loadDossierFiles', vm.detailDossier.dossierId).then(function (resFiles) {
          vm.dossierFilesItems = resFiles;
          vm.createFiles = vm.mergeDossierTemplateVsDossierFiles(vm.createFiles, resFiles);
        }).catch(function (reject) {});
      }
    });
  },
  mounted: function mounted() {
    var vm = this;
    vm.$nextTick(function () {
      if (vm.createFiles.length > 0) {
        setTimeout(function () {
          vm.genAllAlpacaForm(vm.dossierFilesItems, vm.createFiles);
        }, 300);
      }
    });
  },

  methods: {
    genAllAlpacaForm: function genAllAlpacaForm(dossierFiles, createFiles) {
      var vm = this;
      if (dossierFiles.length > 0) {
        var dossierFilesEform = dossierFiles.filter(function (file) {
          return file.eForm;
        });
        var dossierTemplatesHasForm = createFiles.filter(function (template) {
          return template.eForm;
        });
        if (dossierFilesEform.length > 0) {
          dossierFilesEform.forEach(function (itemFiles) {
            if (itemFiles.eForm) {
              vm.$store.dispatch('loadAlpcaForm', itemFiles);
            }
          });
        } else {
          createFiles.forEach(function (val) {
            if (val.eForm) {
              val['templateFileNo'] = vm.detailDossier.dossierTemplateNo;
              vm.showAlpacaJSFORM(val);
            }
          });
        }
        if (dossierTemplatesHasForm.length !== dossierFilesEform.length) {
          dossierTemplatesHasForm.forEach(function (template) {
            var indexFromFile = dossierFilesEform.findIndex(function (item) {
              return template.partNo === item.dossierPartNo;
            });
            if (indexFromFile === -1) {
              template['templateFileNo'] = vm.detailDossier.dossierTemplateNo;
              vm.showAlpacaJSFORM(template);
            }
          });
        }
      } else {
        createFiles.forEach(function (val) {
          if (val.eForm) {
            val['templateFileNo'] = vm.detailDossier.dossierTemplateNo;
            vm.showAlpacaJSFORM(val);
          }
        });
      }
    },
    mergeDossierTemplateVsDossierFiles: function mergeDossierTemplateVsDossierFiles(createFiles, dossierFiles) {
      var vm = this;
      if (dossierFiles.length !== 0) {
        createFiles.forEach(function (template) {
          var itemFind = dossierFiles.find(function (file) {
            return template.partNo === file.dossierPartNo && file.eForm;
          });
          if (itemFind) {
            template['daKhai'] = true;
          } else if (!itemFind && template.eForm) {
            template['daKhai'] = false;
          }
        });
      } else {
        createFiles.forEach(function (template) {
          if (template.eForm) {
            template['daKhai'] = false;
          }
        });
      }
      return createFiles;
    },
    showAlpacaJSFORM: function showAlpacaJSFORM(item) {
      var vm = this;
      item['dossierId'] = vm.detailDossier.dossierId;
      vm.$store.dispatch('loadFormScript', item).then(function (resScript) {
        vm.$store.dispatch('loadFormData', item).then(function (resData) {
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#formAlpaca' + item.partNo + vm.id).empty();
          var formScript, formData;

          if (resScript) {
            formScript = eval('(' + resScript + ')');
          } else {
            formScript = {};
          }
          if (resData) {
            formData = eval('(' + resData + ')');
          } else {
            formData = {};
          }

          formScript.data = formData;
          __WEBPACK_IMPORTED_MODULE_0_jquery___default()('#formAlpaca' + item.partNo + vm.id).alpaca(formScript);
        });
      });
    },
    saveAlpacaForm: function saveAlpacaForm(item, index) {
      var vm = this;
      var fileFind = vm.dossierFilesItems.find(function (itemFile) {
        return itemFile.dossierPartNo === item.partNo && itemFile.eForm;
      });
      if (fileFind) {
        fileFind['dossierId'] = vm.detailDossier.dossierId;
        fileFind['id'] = vm.id;
        vm.$store.dispatch('putAlpacaForm', fileFind).then(function (resData) {}).catch(function (reject) {
          __WEBPACK_IMPORTED_MODULE_1_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
        });
      } else {
        item['dossierId'] = vm.detailDossier.dossierId;
        item['id'] = vm.id;
        vm.$store.dispatch('postEform', item).then(function (resPostEform) {
          vm.createFiles[index].daKhai = true;
          vm.$store.dispatch('loadDossierFiles', vm.detailDossier.dossierId).then(function (resFiles) {
            vm.dossierFilesItems = resFiles;
          }).catch(function (reject) {
            __WEBPACK_IMPORTED_MODULE_1_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
          });
        }).catch(function (reject) {
          __WEBPACK_IMPORTED_MODULE_1_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
        });
      }
    },
    onDeleteAttackFiles: function onDeleteAttackFiles(item) {
      var vm = this;

      var x = confirm('Bạn có muốn xóa toàn bộ file trong thành phần hồ sơ này?');
      if (x) {
        vm.dossierFilesItems.forEach(function (val) {
          if (val.dossierPartNo === item.partNo) {
            val['dossierId'] = vm.detailDossier.dossierId;
            vm.$store.dispatch('deleteAttackFiles', val).then(function (result) {
              vm.$store.dispatch('loadDossierFiles', vm.detailDossier.dossierId);
            }).catch(function (xhr) {});
          }
        });
      }
    },
    pickFile: function pickFile(item) {
      var vm = this;
      vm.stateAddFileOther = false;
      document.getElementById('file' + item.partNo).click();
    },
    onUploadSingleFile: function onUploadSingleFile(e, data) {
      var vm = this;
      vm.dossierTemplatesItemSelect = data;
      vm.progressUploadPart = data.partNo;
      data['dossierId'] = vm.detailDossier.dossierId;
      data['dossierTemplateNo'] = vm.detailDossier.dossierTemplateNo;
      vm.$store.dispatch('uploadSingleFile', data).then(function (result) {
        vm.progressUploadPart = '';
        vm.$store.dispatch('loadDossierFiles', vm.detailDossier.dossierId).then(function (result) {
          vm.dossierFilesItems = result;
        });
      }).catch(function (xhr) {
        vm.progressUploadPart = '';
      });
    },
    loadAlpcaForm: function loadAlpcaForm(data) {
      var vm = this;
      var fileFind = vm.dossierFilesItems.find(function (itemFile) {
        return itemFile.dossierPartNo === data.partNo && itemFile.eForm;
      });
      if (fileFind) {
        fileFind['id'] = vm.id;
        vm.$store.dispatch('loadAlpcaForm', fileFind);
      } else {
        vm.createFiles.forEach(function (val) {
          if (val.eForm && data.partNo === val.partNo) {
            val['templateFileNo'] = vm.detailDossier.dossierTemplateNo;
            vm.showAlpacaJSFORM(val);
          }
        });
      }
    },
    deleteSingleFileEform: function deleteSingleFileEform(item, index) {
      var vm = this;
      var x = confirm('Bạn có muốn xóa?');
      if (x) {
        vm.dossierFilesItems.forEach(function (file) {
          if (file.dossierPartNo === item.partNo && file.eForm) {
            file['dossierId'] = vm.detailDossier.dossierId;
            vm.$store.dispatch('deleteDossierFile', file).then(function (resFile) {
              vm.$store.dispatch('loadDossierFiles', vm.detailDossier.dossierId).then(function (result) {
                vm.dossierFilesItems = result;
                var fileViewsTemp = vm.dossierFilesItems.filter(function (file) {
                  return file.dossierPartNo === item.partNo && !file.eForm;
                });
                if (fileViewsTemp) {
                  vm.fileViews = fileViewsTemp;
                }
              });
            });
          }
        });
        vm.createFiles[index].daKhai = false;
      }
    },
    previewFileEfom: function previewFileEfom(item, index) {
      var vm = this;
      vm.dossierFilesItems.forEach(function (file) {
        if (file.dossierPartNo === item.partNo && file.eForm) {
          file['dossierId'] = vm.detailDossier.dossierId;
          vm.dialogPDFLoading = true;
          vm.dialogPDF = true;
          file['id'] = vm.id;
          vm.$store.dispatch('putAlpacaForm', file).then(function (resData) {
            setTimeout(function () {
              vm.$store.dispatch('viewFile', file).then(function (result) {
                vm.dialogPDFLoading = false;
                document.getElementById('dialogPDFPreview' + vm.id).src = result;
              });
            }, 1000);
          }).catch(function (reject) {
            __WEBPACK_IMPORTED_MODULE_1_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
          });
        }
      });
    },
    deleteSingleFile: function deleteSingleFile(item, index) {
      var vm = this;
      var x = confirm('Bạn có muốn xóa?');
      if (x) {
        item['dossierId'] = vm.detailDossier.dossierId;
        vm.$store.dispatch('deleteDossierFile', item).then(function (resFile) {
          vm.fileViews.splice(index, 1);
          vm.partView = item.dossierPartNo;
          vm.$store.dispatch('loadDossierFiles', vm.detailDossier.dossierId).then(function (result) {
            vm.dossierFilesItems = result;
          });
        }).catch(function (reject) {
          __WEBPACK_IMPORTED_MODULE_1_toastr___default.a.error('Yêu cầu của bạn được thực hiện thất bại.');
        });
      }
    },
    viewFile: function viewFile(data) {
      var _this = this;

      var vm = this;
      vm.dossierFilesItems.forEach(function (val) {
        val['dossierId'] = vm.detailDossier.dossierId;
        if (val.dossierPartNo === data.partNo) {
          _this.$store.dispatch('viewFile', val);
        }
      });
    },
    viewFile2: function viewFile2(data) {
      var vm = this;
      if (data.fileType === 'doc' || data.fileType === 'docx' || data.fileType === 'xlsx' || data.fileType === 'xls' || data.fileType === 'zip' || data.fileType === 'rar') {
        var url = vm.initDataResource.dossierApi + '/' + vm.detailDossier.dossierId + '/files/' + data.referenceUid;
        window.open(url);
      } else {
        vm.dialogPDFLoading = true;
        vm.dialogPDF = true;
        data['dossierId'] = vm.detailDossier.dossierId;
        vm.$store.dispatch('viewFile', data).then(function (result) {
          vm.dialogPDFLoading = false;
          document.getElementById('dialogPDFPreview' + vm.id).src = result;
        });
      }
    },
    viewFileWithPartNo: function viewFileWithPartNo(item) {
      var vm = this;
      if (vm.dossierFilesItems) {
        var fileViewsTemp = vm.dossierFilesItems.filter(function (file) {
          return file.dossierPartNo === item.partNo && !file.eForm;
        });
        if (fileViewsTemp) {
          vm.fileViews = fileViewsTemp;
          if (vm.partView !== item.partNo) {
            vm.stateView = true;
            vm.partView = item.partNo;
          } else {
            vm.stateView = !vm.stateView;
            vm.partView = item.partNo;
          }
        } else {
          return;
        }
      }
      return;
    },
    checkStyle: function checkStyle(item) {
      return 'calc(100% - ' + 50 + 'px)';
    },
    downloadFileTemplate: function downloadFileTemplate(item, index) {
      var vm = this;
      if (vm.fileTemplateItems.length > 0) {
        var fileFind = vm.fileTemplateItems.find(function (file) {
          return item.fileTemplateNo === file.fileTemplateNo;
        });
        if (fileFind) {
          var url = vm.initDataResource.serviceInfoApi + '/' + fileFind.serviceCode + '/filetemplates/' + fileFind.fileTemplateNo;
          window.open(url);
        } else {}
      }
    },
    cancelDialog: function cancelDialog() {
      var vm = this;
      vm.dialogAddOtherTemp = false;
      vm.progressUploadPart = '';
    },
    addFileOther: function addFileOther(item) {
      var vm = this;
      vm.dialogAddOtherTemp = true;
      vm.stateAddFileOther = true;
      vm.dossierTemplatesItemSelect = item;
    },
    changeDisplayName: function changeDisplayName(item, index) {
      var vm = this;
      var params = {
        dossierId: vm.detailDossier.dossierId,
        value: value
      };
      vm.$store.dispatch('changeDisplayNameFile', params).then(function (result) {
        vm.fileViews[index].displayName = result.displayName;
        vm.stateEdit = false;
      }).catch(function (reject) {});
    }
  }
});

/***/ }),
/* 686 */,
/* 687 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(690), __esModule: true };

/***/ }),
/* 688 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(691), __esModule: true };

/***/ }),
/* 689 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


exports.__esModule = true;

var _isIterable2 = __webpack_require__(688);

var _isIterable3 = _interopRequireDefault(_isIterable2);

var _getIterator2 = __webpack_require__(687);

var _getIterator3 = _interopRequireDefault(_getIterator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

exports.default = function () {
  function sliceIterator(arr, i) {
    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = (0, _getIterator3.default)(arr), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if ((0, _isIterable3.default)(Object(arr))) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

/***/ }),
/* 690 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(213);
__webpack_require__(140);
module.exports = __webpack_require__(692);


/***/ }),
/* 691 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(213);
__webpack_require__(140);
module.exports = __webpack_require__(693);


/***/ }),
/* 692 */
/***/ (function(module, exports, __webpack_require__) {

var anObject = __webpack_require__(38);
var get = __webpack_require__(149);
module.exports = __webpack_require__(30).getIterator = function (it) {
  var iterFn = get(it);
  if (typeof iterFn != 'function') throw TypeError(it + ' is not iterable!');
  return anObject(iterFn.call(it));
};


/***/ }),
/* 693 */
/***/ (function(module, exports, __webpack_require__) {

var classof = __webpack_require__(148);
var ITERATOR = __webpack_require__(19)('iterator');
var Iterators = __webpack_require__(60);
module.exports = __webpack_require__(30).isIterable = function (it) {
  var O = Object(it);
  return O[ITERATOR] !== undefined
    || '@@iterator' in O
    // eslint-disable-next-line no-prototype-builtins
    || Iterators.hasOwnProperty(classof(O));
};


/***/ }),
/* 694 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/* eslint-disable */

(function (factory) {
	if (true) {
		// AMD. Register as an anonymous module.
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(36)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if (typeof module === 'object' && module.exports) {
		// Node/CommonJS
		module.exports = function(root, jQuery) {
			if (jQuery === undefined) {
				// require('jQuery') returns a factory that requires window to
				// build a jQuery instance, we normalize how we use modules
				// that require this pattern but the window provided is a noop
				// if it's defined (how jquery works)
				if (typeof window !== 'undefined') {
					jQuery = require('jquery');
				}
				else {
					jQuery = require('jquery')(root);
				}
			}
			factory(jQuery);
			return jQuery;
		};
	} else {
		// Browser globals
		factory(jQuery);
	}
}(function($) {

	var Comments = {
		// Instance variables
		$el: null,
		commentsById: {},
		usersById: {},
		dataFetched: false,
		currentSortKey: '',
		options: {},
		events: {
			// Close dropdowns
			'click': 'closeDropdowns',
			// Save comment on keydown
			'keydown [contenteditable]' : 'saveOnKeydown',
			// Listening changes in contenteditable fields (due to input event not working with IE)
			'focus [contenteditable]' : 'saveEditableContent',
			'keyup [contenteditable]' : 'checkEditableContentForChange',
			'paste [contenteditable]' : 'checkEditableContentForChange',
			'input [contenteditable]' : 'checkEditableContentForChange',
			'blur [contenteditable]' : 'checkEditableContentForChange',
			// Navigation
			'click .navigation li[data-sort-key]' : 'navigationElementClicked',
			'click .navigation li.title' : 'toggleNavigationDropdown',
			// Main comenting field
			'click .commenting-field.main .textarea': 'showMainCommentingField',
			'click .commenting-field.main .close' : 'hideMainCommentingField',
			// All commenting fields
			'click .commenting-field .textarea' : 'increaseTextareaHeight',
			'change .commenting-field .textarea' : 'increaseTextareaHeight textareaContentChanged',
			'click .commenting-field:not(.main) .close' : 'removeCommentingField',
			// Edit mode actions
			'click .commenting-field .send.enabled' : 'postComment',
			'click .commenting-field .update.enabled' : 'putComment',
			'click .commenting-field .delete.enabled' : 'deleteComment',
			'change .commenting-field .upload.enabled input[type="file"]' : 'fileInputChanged',
			// Other actions
			'click li.comment button.upvote' : 'upvoteComment',
			'click li.comment button.delete.enabled' : 'deleteComment',
			'click li.comment .hashtag' : 'hashtagClicked',
			'click li.comment .ping' : 'pingClicked',
			// Other
			'click li.comment ul.child-comments .toggle-all': 'toggleReplies',
			'click li.comment button.reply': 'replyButtonClicked',
			'click li.comment button.edit': 'editButtonClicked',
			// Drag & dropping attachments
			'dragenter' : 'showDroppableOverlay',
			'dragenter .droppable-overlay' : 'handleDragEnter',
			'dragleave .droppable-overlay' : 'handleDragLeaveForOverlay',
			'dragenter .droppable-overlay .droppable' : 'handleDragEnter',
			'dragleave .droppable-overlay .droppable' : 'handleDragLeaveForDroppable',
			'dragover .droppable-overlay' : 'handleDragOverForOverlay',
			'drop .droppable-overlay' : 'handleDrop',
			// Prevent propagating the click event into buttons under the autocomplete dropdown
			'click .dropdown.autocomplete': 'stopPropagation',
			'mousedown .dropdown.autocomplete': 'stopPropagation',
			'touchstart .dropdown.autocomplete': 'stopPropagation',
		},
		// Default options

		getDefaultOptions: function() {
			return {
				// User        
				profilePictureURL: '',
				currentUserIsAdmin: false,
				currentUserId: null,
				// Font awesome icon overrides        
				spinnerIconURL: '',
				upvoteIconURL: '',
				replyIconURL: '',
				uploadIconURL: '',
				attachmentIconURL: '',
				fileIconURL: '',
				noCommentsIconURL: '',
				noCommentsImptIconURL: '',
				// Strings to be formatted (for example localization)     
				textareaPlaceholderText: 'Thêm bình luận mới',
				newestText: 'Mới nhất',
				oldestText: 'Cũ nhất',
				importantCmtText: 'Ý kiến chính thức',
				popularText: 'Phổ biến',
				attachmentsText: 'Tệp đính kèm',
				sendText: 'Gửi',
				replyText: 'Trả lời',
				editText: 'Sửa',
				editedText: 'Đã sửa',
				youText: 'You',
				saveText: 'Ghi lại',
				deleteText: 'Xoá',
				newText: 'Mới',
				viewAllRepliesText: 'Xem tất cả __replyCount__ trả lời',
				hideRepliesText: 'Hide replies',
				noCommentsText: 'Không có bình luận',
				noCommentsImportantText: 'Không có ý kiến chính thức',
				noAttachmentsText: 'Không có tệp đính kèm',
				attachmentDropText: 'Kéo thả tệp để tải lên',
				textFormatter: function(text) {return text},
				
				// Functionalities        
				enableReplying: true,
				enableEditing: true,
				enableUpvoting: true,
				enableDeleting: true,
				enableAttachments: false,
				enableHashtags: false,
				enablePinging: false,
				enableDeletingCommentWithReplies: false,
				enableNavigation: true,
				postCommentOnEnter: false,
				forceResponsive: false,
				readOnly: false,
				defaultNavigationSortKey: 'newest',
				// Colors     
				highlightColor: '#2793e6',
				deleteButtonColor: '#C9302C',
				scrollContainer: this.$el,
				roundProfilePictures: false,
				textareaRows: 2,
				textareaRowsOnFocus: 2,
				textareaMaxRows: 5,
				maxRepliesVisible: 2,
				
				fieldMappings: {
					id: 'id',
					parent: 'parent',
					created: 'createdDate',
					modified: 'modifiedDate',
					content: 'content',
					file: 'file',
					fileURL: 'file_url',
					fileMimeType: 'file_mime_type',
					pings: 'pings',
					creator: 'creator',
					fullname: 'fullname',
					profileURL: 'profile_url',
					profilePictureURL: 'profile_picture_url',
					isNew: 'is_new',
					createdByAdmin: 'created_by_admin',
					createdByCurrentUser: 'created_by_current_user',
					upvoteCount: 'upvote_count',
					userHasUpvoted: 'user_has_upvoted'
				},
				
				getUsers: function(success, error) {success([])},
				getComments: function(success, error) {success([])},
				postComment: function(commentJSON, success, error) {success(commentJSON)},
				putComment: function(commentJSON, success, error) {success(commentJSON)},
				deleteComment: function(commentJSON, success, error) {success()},
				upvoteComment: function(commentJSON, success, error) {success(commentJSON)},
				hashtagClicked: function(hashtag) {},
				pingClicked: function(userId) {},
				uploadAttachments: function(commentArray, success, error) {success(commentArray)},
				refresh: function() {},
				timeFormatter: function(time) {return new Date(time).toLocaleDateString()},
				appendNewComments: function(commentJSONs, success, error) {success([])}
			}
		},

		// Initialization
		init: function(options, el) {
			this.$el = $(el);
			this.$el.addClass('jquery-comments');
			this.undelegateEvents();
			this.delegateEvents();
			// Detect mobile devices
			(function(a){(jQuery.browser=jQuery.browser||{}).mobile=/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0,4))})(navigator.userAgent||navigator.vendor||window.opera);
			if($.browser.mobile) this.$el.addClass('mobile');
			// Init options
			this.options = $.extend(true, {}, this.getDefaultOptions(), options);;
			// Read-only mode
			if(this.options.readOnly) this.$el.addClass('read-only');
			// Set initial sort key
			this.currentSortKey = this.options.defaultNavigationSortKey;
			// Create CSS declarations for highlight color
			this.createCssDeclarations();
			// Fetching data and rendering
			this.fetchDataAndRender();
		},

		delegateEvents: function() {
			this.bindEvents(false);
		},

		undelegateEvents: function() {
			this.bindEvents(true);
		},

		bindEvents: function(unbind) {
				var bindFunction = unbind ? 'off' : 'on';
				for (var key in this.events) {
						var eventName = key.split(' ')[0];
						var selector = key.split(' ').slice(1).join(' ');
						var methodNames = this.events[key].split(' ');

						for(var index in methodNames) {
								if(methodNames.hasOwnProperty(index)) {
										var method = this[methodNames[index]];

										// Keep the context
										method = $.proxy(method, this);

										if (selector == '') {
												this.$el[bindFunction](eventName, method);
										} else {
												this.$el[bindFunction](eventName, selector, method);
										}
								}
						}
				}
		},

		// Basic functionalities
		fetchDataAndRender: function () {
			var self = this;
			setTimeout(function(){self.appendNewComments()},30000);
			this.commentsById = {};
			this.usersById = {};
			this.$el.empty();
			this.createHTML();
			// Render after data has been fetched
			var dataFetched = this.after(this.options.enablePinging ? 2 : 1, function() {
				self.dataFetched = true;
				self.render();
			});

			// Comments
			var commentsFetched = function(commentsArray) {
				// Convert comments to custom data model
				var commentModels = commentsArray.map(function(commentsJSON){
					return self.createCommentModel(commentsJSON)
				});
				// Sort comments by date (oldest first so that they can be appended to the data model
				// without caring dependencies)
				self.sortComments(commentModels, 'oldest');
				$(commentModels).each(function(index, commentModel) {
						self.addCommentToDataModel(commentModel);
				});
				dataFetched();
			};
			this.options.getComments(commentsFetched, dataFetched);

			// Users
			if(this.options.enablePinging) {
				var usersFetched = function(userArray) {
					$(userArray).each(function(index, user) {
						self.usersById[user.id] = user;
					});
					dataFetched();
				}
				this.options.getUsers(usersFetched, dataFetched);
			};
		},

		fetchNext: function() {
			var self = this;
			// Loading indicator
			var spinner = this.createSpinner();
			this.$el.find('ul#comment-list').append(spinner);
			var success = function (commentModels) {
				$(commentModels).each(function(index, commentModel) {
					self.createComment(commentModel);
				});
				spinner.remove();
			}

			var error = function() {
				spinner.remove();
			}
			this.options.getComments(success, error);
		},

		createCommentModel: function(commentJSON) {
			var commentModel = this.applyInternalMappings(commentJSON);
			commentModel.childs = [];
			this.commentsById[commentModel.id] = commentModel;
			return commentModel;
		},

		addCommentToDataModel: function(commentModel) {
			if(!(commentModel.id in this.commentsById)) {
				this.commentsById[commentModel.id] = commentModel;

				// Update child array of the parent (append childs to the array of outer most parent)
				if(commentModel.parent) {
					var outermostParent = this.getOutermostParent(commentModel.parent);
					outermostParent.childs.push(commentModel.id);
				}
			}
		},

		updateCommentModel: function(commentModel) {
			$.extend(this.commentsById[commentModel.id], commentModel);
		},

		render: function() {
			var self = this;
			// Prevent re-rendering if data hasn't been fetched
			if(!this.dataFetched) return;
			// Show active container
			this.showActiveContainer();
			// Create comments
			this.createComments();
			// Create attachments if enabled
			if(this.options.enableAttachments) this.createAttachments(); 
			// Create important comment
			this.createImportantComments();
			// Remove spinner
			this.$el.find('> .spinner').remove();
			this.options.refresh();
		},

		showActiveContainer: function() {
			var activeNavigationEl = this.$el.find('.navigation li[data-container-name].active');
			var containerName = activeNavigationEl.data('container-name');
			var containerEl = this.$el.find('[data-container="' + containerName + '"]');
			containerEl.siblings('[data-container]').hide();
			containerEl.show();
		},

		createComments: function() {
			var self = this;
			// Create the list element before appending to DOM in order to reach better performance
			this.$el.find('#comment-list').remove();
			var commentList = $('<ul/>', {
				id: 'comment-list',
				'class': 'main'
			});

			// Divide commments into main level comments and replies
			var mainLevelComments = [];
			var replies = [];

			$(this.getComments()).each(function(index, commentModel) {
				if(commentModel.parent == null) {
					mainLevelComments.push(commentModel);
				} else {
					replies.push(commentModel);
				}
			});

			// Append main level comments
			this.sortComments(mainLevelComments, this.currentSortKey);
			mainLevelComments.reverse();    // Reverse the order as they are prepended to DOM
			$(mainLevelComments).each(function(index, commentModel) {
				self.addComment(commentModel, commentList);
			});

			// Append replies in chronological order
			this.sortComments(replies, 'oldest');
			$(replies).each(function(index, commentModel) {
				self.addComment(commentModel, commentList);
			});

			// Appned list to DOM
			this.$el.find('[data-container="comments"]').prepend(commentList);
		},

		createAttachments: function() {
			var self = this;
			// Create the list element before appending to DOM in order to reach better performance
			this.$el.find('#attachment-list').remove();
			var attachmentList = $('<ul/>', {
				id: 'attachment-list',
				'class': 'main'
			});

			var attachments = this.getAttachments();
			this.sortComments(attachments, 'newest');
			attachments.reverse();    // Reverse the order as they are prepended to DOM
			$(attachments).each(function(index, commentModel) {
				self.addAttachment(commentModel, attachmentList);
			});

			// Appned list to DOM
			this.$el.find('[data-container="attachments"]').prepend(attachmentList);
		},
		createImportantComments: function() {
			var self = this;
			// Create the list element before appending to DOM in order to reach better performance
			this.$el.find('#importantCmt-list').remove();
			var importantCmtList = $('<ul/>', {
					id: 'importantCmt-list',
					'class': 'main'
			});

			var importantCmt = this.getImportantCmt();

			this.sortComments(importantCmt, 'newest');
			importantCmt.reverse();    // Reverse the order as they are prepended to DOM
			$(importantCmt).each(function(index, commentModel) {
					self.addImportantCmt(commentModel, importantCmtList);
			});

			// Appned list to DOM
			this.$el.find('[data-container="importantCmt"]').prepend(importantCmtList);
		},
		addComment: function(commentModel, commentList) {
			commentList = commentList || this.$el.find('#comment-list');
			var commentEl = this.createCommentElement(commentModel);

			// Case: reply
			if(commentModel.parent) {
				var directParentEl = commentList.find('.comment[data-id="'+commentModel.parent+'"]');

				// Re-render action bar of direct parent element
				this.reRenderCommentActionBar(commentModel.parent);

				// Force replies into one level only
				var outerMostParent = directParentEl.parents('.comment').last();
				if(outerMostParent.length == 0) outerMostParent = directParentEl;

				// Append element to DOM
				var childCommentsEl = outerMostParent.find('.child-comments');
				var commentingField = childCommentsEl.find('.commenting-field');
				if(commentingField.length) {
					commentingField.before(commentEl)
				} else {
					childCommentsEl.append(commentEl);
				}

				// Update toggle all -button
				this.updateToggleAllButton(outerMostParent);

			// Case: main level comment
			} else {
				commentList.prepend(commentEl);
			}
		},
		addAttachment: function(commentModel, commentList) {
			commentList = commentList || this.$el.find('#attachment-list');
			var commentEl = this.createCommentElement(commentModel);
			commentList.prepend(commentEl);
		},
		addImportantCmt: function(commentModel, commentList) {
			commentList = commentList || this.$el.find('#importantCmt-list');
			var commentEl = this.createCommentElement(commentModel);
			commentList.prepend(commentEl);
		},
		removeComment: function(commentId) {
			var self = this;
			var commentModel = this.commentsById[commentId];

			// Remove child comments recursively
			var childComments = this.getChildComments(commentModel.id);
			$(childComments).each(function(index, childComment) {
				self.removeComment(childComment.id);
			});

			// Update the child array of outermost parent
			if(commentModel.parent) {
				var outermostParent = this.getOutermostParent(commentModel.parent);
				var indexToRemove = outermostParent.childs.indexOf(commentModel.id);
				outermostParent.childs.splice(indexToRemove, 1);
			}

			// Remove the comment from data model
			delete this.commentsById[commentId];
			var commentElements = this.$el.find('li.comment[data-id="'+commentId+'"]');
			var parentEl = commentElements.parents('li.comment').last();

			// Remove the element
			commentElements.remove();

			// Update the toggle all button
			this.updateToggleAllButton(parentEl);
		},

		uploadAttachments: function(files, commentingField) {
			var self = this;
			if(!commentingField) commentingField = this.$el.find('.commenting-field.main');
			var isReply = !commentingField.hasClass('main');
			var fileCount = files.length;

			if(fileCount) {
				var uploadButton = commentingField.find('.upload');
				var textarea = commentingField.find('.textarea');

				// Disable upload button and append spinners while request is pending
				uploadButton.removeClass('enabled');
				var attachmentListSpinner = this.createSpinner();
				var commentListSpinner = this.createSpinner();
				this.$el.find('ul#attachment-list').prepend(attachmentListSpinner);
				if(isReply) {
					commentingField.before(commentListSpinner);
				} else {
					this.$el.find('ul#comment-list').prepend(commentListSpinner);
				}

				var success = function(commentArray) {
					$(commentArray).each(function(index, commentJSON) {
						var commentModel = self.createCommentModel(commentJSON);
						self.addCommentToDataModel(commentModel);
						self.addComment(commentModel);
						self.addAttachment(commentModel);
					});

					// Close the commenting field if all the uploads were successfull
					// and there's no content besides the attachment
					if(commentArray.length == fileCount && self.getTextareaContent(textarea).length == 0) {
						commentingField.find('.close').trigger('click');
					}

					// Enable upload button and remove spinners
					uploadButton.addClass('enabled');
					commentListSpinner.remove();
					attachmentListSpinner.remove();
				};

				var error = function() {
					// Enable upload button and remove spinners
					uploadButton.addClass('enabled');
					commentListSpinner.remove();
					attachmentListSpinner.remove();
				};

				var commentArray = [];
				$(files).each(function(index, file) {
					// Create comment JSON
					var commentJSON = self.createCommentJSON(textarea);
					commentJSON.id += '-' + index;
					commentJSON.content = '';
					commentJSON.file = file;
					commentJSON.fileURL = 'C:/fakepath/' + file.name;
					commentJSON.fileMimeType = file.type;
					// Reverse mapping
					commentJSON = self.applyExternalMappings(commentJSON);
					commentArray.push(commentJSON);
				});

				self.options.uploadAttachments(commentArray, success, error);
			}

			// Clear the input field
			uploadButton.find('input').val('');
		},

		updateToggleAllButton: function(parentEl) {
			// Don't hide replies if maxRepliesVisible is null or undefined
			if (this.options.maxRepliesVisible == null) return;

			var childCommentsEl = parentEl.find('.child-comments');
			var childComments = childCommentsEl.find('.comment');
			var toggleAllButton = childCommentsEl.find('li.toggle-all');
			childComments.removeClass('hidden-reply');

			// Select replies to be hidden
			if (this.options.maxRepliesVisible === 0) {
				var hiddenReplies = childComments;
			} else {
				var hiddenReplies = childComments.slice(0, -this.options.maxRepliesVisible);
			}

			// Add identifying class for hidden replies so they can be toggled
			hiddenReplies.addClass('hidden-reply');

			// Show all replies if replies are expanded
			if(toggleAllButton.find('span.text').text() == this.options.textFormatter(this.options.hideRepliesText)) {
				hiddenReplies.addClass('visible');
			}

			// Make sure that toggle all button is present
			if(childComments.length > this.options.maxRepliesVisible) {

				// Append button to toggle all replies if necessary
				if(!toggleAllButton.length) {

					toggleAllButton = $('<li/>', {
						'class': 'toggle-all highlight-font-bold'
					});
					var toggleAllButtonText = $('<span/>', {
						'class': 'text'
					});
					var caret = $('<span/>', {
						'class': 'caret'
					});

					// Append toggle button to DOM
					toggleAllButton.append(toggleAllButtonText).append(caret);
					childCommentsEl.prepend(toggleAllButton);
				}

				// Update the text of toggle all -button
				this.setToggleAllButtonText(toggleAllButton, false);
			// Make sure that toggle all button is not present
			} else {
				toggleAllButton.remove();
			}
		},

		sortComments: function (comments, sortKey) {
			var self = this;
			// Sort by popularity
			if(sortKey == 'popularity') {
				comments.sort(function(commentA, commentB) {
					var pointsOfA = commentA.childs.length;
					var pointsOfB = commentB.childs.length;

					if(self.options.enableUpvoting) {
						pointsOfA += commentA.upvoteCount;
						pointsOfB += commentB.upvoteCount;
					}

					if(pointsOfB != pointsOfA) {
						return pointsOfB - pointsOfA;

					} else {
						// Return newer if popularity is the same
						var createdA = new Date(commentA.created).getTime();
						var createdB = new Date(commentB.created).getTime();
						return createdB - createdA;
					}
				});
			// Sort by date
			} else {
				comments.sort(function(commentA, commentB) {
					var createdA = (new Date(commentA.created)).getTime();
					var createdB = (new Date(commentB.created)).getTime();
					if(sortKey == 'oldest') {
						return createdA - createdB;
					} else {
						return createdB - createdA;
					}
				});
			}
		},

		sortUsers: function(users) {
			users.sort(function(a,b) {
				var nameA = a.fullname.toLowerCase().trim();
				var nameB = b.fullname.toLowerCase().trim();
				if(nameA < nameB) return -1;
				if(nameA > nameB) return 1;
				return 0;
			});
		},

		sortAndReArrangeComments: function(sortKey) {
			var commentList = this.$el.find('#comment-list');

			// Get main level comments
			var mainLevelComments = this.getComments().filter(function(commentModel){return !commentModel.parent});
			this.sortComments(mainLevelComments, sortKey);

			// Rearrange the main level comments
			$(mainLevelComments).each(function(index, commentModel) {
					var commentEl = commentList.find('> li.comment[data-id='+commentModel.id+']');
					commentList.append(commentEl);
			});
		},

		showActiveSort: function() {
			var activeElements = this.$el.find('.navigation li[data-sort-key="' + this.currentSortKey + '"]');

			// Indicate active sort
			this.$el.find('.navigation li').removeClass('active');
			activeElements.addClass('active');

			// Update title for dropdown
			var titleEl = this.$el.find('.navigation .title');
			if(this.currentSortKey != 'attachments') {
				titleEl.addClass('active');
				titleEl.find('header').html(activeElements.first().html());
			} else {
				var defaultDropdownEl = this.$el.find('.navigation ul.dropdown').children().first();
				titleEl.find('header').html(defaultDropdownEl.html());
			} 

			// Show active container
			this.showActiveContainer();
		},

		forceResponsive: function() {
			this.$el.addClass('responsive');
		},

		// Event handlers

		closeDropdowns: function() {
			this.$el.find('.dropdown').hide();
		},

		saveOnKeydown: function(ev) {
			// Save comment on cmd/ctrl + enter
			if(ev.keyCode == 13) {
				var metaKey = ev.metaKey || ev.ctrlKey;
				if(this.options.postCommentOnEnter || metaKey) {                
					var el = $(ev.currentTarget);
					el.siblings('.control-row').find('.save').trigger('click');
					ev.stopPropagation();
					ev.preventDefault();
				}
			}
		},

		saveEditableContent: function(ev) {
			var el = $(ev.currentTarget);
			el.data('before', el.html());
		},

		checkEditableContentForChange: function(ev) {
			var el = $(ev.currentTarget);
			if (el.data('before') != el.html()) {
				el.data('before', el.html());
				el.trigger('change');
			}
		},

		navigationElementClicked: function(ev) {
			var navigationEl = $(ev.currentTarget);
			var sortKey = navigationEl.data().sortKey;

			// Sort the comments if necessary
			if(sortKey != 'attachments') {
					this.sortAndReArrangeComments(sortKey);
			}
			// Save the current sort key
			this.currentSortKey = sortKey;
			this.showActiveSort();
		},

		toggleNavigationDropdown: function(ev) {
			// Prevent closing immediately
			ev.stopPropagation();

			var dropdown = $(ev.currentTarget).find('~ .dropdown');
			dropdown.toggle();
		},

		showMainCommentingField: function(ev) {
			var mainTextarea = $(ev.currentTarget);
			mainTextarea.siblings('.control-row').show();
			mainTextarea.parent().find('.close').show();
			mainTextarea.focus();
		},

		hideMainCommentingField: function(ev) {
			var closeButton = $(ev.currentTarget);
			var mainTextarea = this.$el.find('.commenting-field.main .textarea');
			var mainControlRow = this.$el.find('.commenting-field.main .control-row');

			this.clearTextarea(mainTextarea);
			this.adjustTextareaHeight(mainTextarea, false);

			mainControlRow.hide();
			closeButton.hide();
			mainTextarea.blur();
		},

		increaseTextareaHeight: function(ev) {
			var textarea = $(ev.currentTarget);
			this.adjustTextareaHeight(textarea, true);
		},

		textareaContentChanged: function(ev) {
			var textarea = $(ev.currentTarget);
			var saveButton = textarea.siblings('.control-row').find('.save');

			// Update parent id if reply-to tag was removed
			if(!textarea.find('.reply-to.tag').length) {
				var commentId = textarea.attr('data-comment');

				// Case: editing comment
				if(commentId) {
					var parentComments = textarea.parents('li.comment');
					if(parentComments.length > 1) {
						var parentId = parentComments.last().data('id');
						textarea.attr('data-parent', parentId);
					}

				// Case: new comment
				} else {
					var parentId = textarea.parents('li.comment').last().data('id');
					textarea.attr('data-parent', parentId);
				}
			}

			// Move close button if scrollbar is visible
			var commentingField = textarea.parents('.commenting-field').first();
			if(textarea[0].scrollHeight > textarea.outerHeight()) {
				commentingField.addClass('scrollable');
			} else {
				commentingField.removeClass('scrollable');
			}

			// Check if content or parent has changed if editing
			var contentOrParentChangedIfEditing = true;
			var content = this.getTextareaContent(textarea, true);
			if(commentId = textarea.attr('data-comment')) {
				var contentChanged = content != this.commentsById[commentId].content;
				var parentFromModel;
				if(this.commentsById[commentId].parent) {
					parentFromModel = this.commentsById[commentId].parent.toString();
				}
				var parentChanged = textarea.attr('data-parent') != parentFromModel;
				contentOrParentChangedIfEditing = contentChanged || parentChanged;
			}

			// Check whether save button needs to be enabled
			if(content.length && contentOrParentChangedIfEditing) {
				saveButton.addClass('enabled');
			} else {
				saveButton.removeClass('enabled');
			}
		},

		removeCommentingField: function(ev) {
			var closeButton = $(ev.currentTarget);

			// Remove edit class from comment if user was editing the comment
			var textarea = closeButton.siblings('.textarea');
			if(textarea.attr('data-comment')) {
				closeButton.parents('li.comment').first().removeClass('edit');
			}

			// Remove the field
			var commentingField = closeButton.parents('.commenting-field').first();
			commentingField.remove();
		},

		appendNewComments: function() {
			var self = this;
			console.log($(self.$el.context), $(self.$el.context).length);
			if ($(self.$el.context).length == 0) {
				clearTimeout(myVar);
				return;
			}
			var commentJSONs = this.getComments();

			var success = function(commentsNew, commentsEdit) {
				for (var c in commentsNew) {
					self.createComment(commentsNew[c]);
				}
				
				for (var cmt in commentsEdit) {
					var commentModel = self.createCommentModel(commentsEdit[cmt]);
					self.updateCommentModel(commentModel);
					self.reRenderComment(commentModel.id);
				}
			};

			var error = function() {
				console.log('jquery comment append new error');
			};
			var myVar = setTimeout(function(){self.appendNewComments()},30000);
			this.options.appendNewComments(commentJSONs, success, error);
		},
			
		postComment: function(ev) {
			var self = this;
			var sendButton = $(ev.currentTarget);
			var commentingField = sendButton.parents('.commenting-field').first();
			var textarea = commentingField.find('.textarea');

			// Disable send button while request is pending
			sendButton.removeClass('enabled');

			// Create comment JSON
			var commentJSON = this.createCommentJSON(textarea);

			// Reverse mapping
			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function(commentJSON) {
				self.currentSortKey = 'newest'
				self.showActiveSort()
				self.createComment(commentJSON);
				commentingField.find('.close').trigger('click');
			};

			var error = function() {
				sendButton.addClass('enabled');
			};

			this.options.postComment(commentJSON, success, error);
		},

		createComment: function(commentJSON) {
			var commentModel = this.createCommentModel(commentJSON);
			this.addCommentToDataModel(commentModel);
			this.addComment(commentModel);
			if (commentModel.opinion == true) {
				this.addImportantCmt(commentModel);
			}
		},

		putComment: function(ev) {
			var self = this;
			var saveButton = $(ev.currentTarget);
			var commentingField = saveButton.parents('.commenting-field').first();
			var textarea = commentingField.find('.textarea');

			// Disable send button while request is pending
			saveButton.removeClass('enabled');

			// Use a clone of the existing model and update the model after succesfull update
			var commentJSON =  $.extend({}, this.commentsById[textarea.attr('data-comment')]);
			$.extend(commentJSON, {
				parent: textarea.attr('data-parent') || null,
				content: this.getTextareaContent(textarea),
				pings: this.getPings(textarea),
				modified: new Date().getTime()
			});

			// Reverse mapping
			commentJSON = this.applyExternalMappings(commentJSON);
			
			var success = function(commentJSON) {
				// The outermost parent can not be changed by editing the comment so the childs array
				// of parent does not require an update

				var commentModel = self.createCommentModel(commentJSON);
			
				// Delete childs array from new comment model since it doesn't need an update
				delete commentModel['childs'];
				self.updateCommentModel(commentModel);
				// Close the editing field
				commentingField.find('.close').trigger('click');

				// Re-render the comment
				self.reRenderComment(commentModel.id);
			};

			var error = function() {
				saveButton.addClass('enabled');
			};

			this.options.putComment(commentJSON, success, error);
		},

		deleteComment: function(ev) {
			var self = this;
			var deleteButton = $(ev.currentTarget);
			var commentEl = deleteButton.parents('.comment').first();
			var commentJSON =  $.extend({}, this.commentsById[commentEl.attr('data-id')]);
			var commentId = commentJSON.id;
			var parentId = commentJSON.parent;

			// Disable send button while request is pending
			deleteButton.removeClass('enabled');

			// Reverse mapping
			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function() {
				self.removeComment(commentId);
				if(parentId) self.reRenderCommentActionBar(parentId);
				// 
				if (commentJSON.opinion==true) {
					$(`[data-sort-key=${self.currentSortKey}]`).trigger('click')
				}
				// 
			};

			var error = function() {
				deleteButton.addClass('enabled');
			};

			this.options.deleteComment(commentJSON, success, error);
		},

		hashtagClicked: function(ev) {
			var el = $(ev.currentTarget);
			var value = el.attr('data-value');
			this.options.hashtagClicked(value);
		},

		pingClicked: function(ev) {
			var el = $(ev.currentTarget);
			var value = el.attr('data-value');
			this.options.pingClicked(value);
		},

		fileInputChanged: function(ev, files) {
			var files = ev.currentTarget.files;
			var commentingField = $(ev.currentTarget).parents('.commenting-field').first();
			this.uploadAttachments(files, commentingField);
		},

		upvoteComment: function(ev) {
			var self = this;
			var commentEl = $(ev.currentTarget).parents('li.comment').first();
			var commentModel = commentEl.data().model;

			// Check whether user upvoted the comment or revoked the upvote
			var previousUpvoteCount = commentModel.upvoteCount;
			var newUpvoteCount;
			if(commentModel.userHasUpvoted) {
				newUpvoteCount = previousUpvoteCount - 1;
			} else {
				newUpvoteCount = previousUpvoteCount + 1;
			}

			// Show changes immediatelly
			commentModel.userHasUpvoted = !commentModel.userHasUpvoted;
			commentModel.upvoteCount = newUpvoteCount;
			this.reRenderUpvotes(commentModel.id);

			// Reverse mapping
			var commentJSON = $.extend({}, commentModel);
			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function(commentJSON) {
				var commentModel = self.createCommentModel(commentJSON);
				self.updateCommentModel(commentModel);
				self.reRenderUpvotes(commentModel.id);
			};

			var error = function() {
				// Revert changes
				commentModel.userHasUpvoted = !commentModel.userHasUpvoted;
				commentModel.upvoteCount = previousUpvoteCount;
				self.reRenderUpvotes(commentModel.id);
			};

			this.options.upvoteComment(commentJSON, success, error);
		},

		toggleReplies: function(ev) {
			var el = $(ev.currentTarget);
			el.siblings('.hidden-reply').toggleClass('visible');
			this.setToggleAllButtonText(el, true);
		},

		replyButtonClicked: function(ev) {
			var replyButton = $(ev.currentTarget);
			var outermostParent = replyButton.parents('li.comment').last();
			var parentId = replyButton.parents('.comment').first().data().id;

			// Remove existing field
			var replyField = outermostParent.find('.child-comments > .commenting-field');
			if(replyField.length) replyField.remove();
			var previousParentId = replyField.find('.textarea').attr('data-parent');

			// Create the reply field (do not re-create)
			if(previousParentId != parentId) {
				replyField = this.createCommentingFieldElement(parentId, null, false);
				outermostParent.find('.child-comments').append(replyField);

				// Move cursor to end
				var textarea = replyField.find('.textarea');
				this.moveCursorToEnd(textarea)

				// Make sure the reply field will be displayed
				var scrollTop = this.options.scrollContainer.scrollTop();
				var endOfReply = scrollTop + replyField.position().top + replyField.outerHeight();
				var endOfScrollable = scrollTop + this.options.scrollContainer.outerHeight();
				if(endOfReply > endOfScrollable) {
					var newScrollTop = scrollTop + (endOfReply - endOfScrollable);
					this.options.scrollContainer.scrollTop(newScrollTop);
				}
			}
		},

		editButtonClicked: function(ev) {
			var editButton = $(ev.currentTarget);
			var commentEl = editButton.parents('li.comment').first();
			var commentModel = commentEl.data().model;
			
			commentModel = this.commentsById[commentModel.id];
			commentEl.addClass('edit');

			// Create the editing field
			var editField = this.createCommentingFieldElement(commentModel.parent, commentModel.id, false);
			commentEl.find('.comment-wrapper').first().append(editField);

			// Append original content
			var textarea = editField.find('.textarea');
			textarea.attr('data-comment', commentModel.id);

			// Escaping HTML
			textarea.append(this.getFormattedCommentContent(commentModel, true));

			// Move cursor to end
			this.moveCursorToEnd(textarea);
		},

		showDroppableOverlay: function(ev) {
			if(this.options.enableAttachments) {
				this.$el.find('.droppable-overlay').css('top', this.$el[0].scrollTop);
				this.$el.find('.droppable-overlay').show();
				this.$el.addClass('drag-ongoing');
			}
		},

		handleDragEnter: function(ev) {
			var count = $(ev.currentTarget).data('dnd-count') || 0;
			count++;
			$(ev.currentTarget).data('dnd-count', count);
			$(ev.currentTarget).addClass('drag-over');
		},

		handleDragLeave: function(ev, callback) {
			var count = $(ev.currentTarget).data('dnd-count');
			count--;
			$(ev.currentTarget).data('dnd-count', count);

			if(count == 0) {            
				$(ev.currentTarget).removeClass('drag-over');
				if(callback) callback();
			}
		},

		handleDragLeaveForOverlay: function(ev) {
			var self = this;
			this.handleDragLeave(ev, function() {
				self.hideDroppableOverlay();
			});
		},

		handleDragLeaveForDroppable: function(ev) {
			this.handleDragLeave(ev);
		},

		handleDragOverForOverlay: function(ev) {
			ev.stopPropagation();
			ev.preventDefault();
			ev.originalEvent.dataTransfer.dropEffect = 'copy';
		},

		hideDroppableOverlay: function() {
			this.$el.find('.droppable-overlay').hide();
			this.$el.removeClass('drag-ongoing');
		},

		handleDrop: function(ev) {
			ev.preventDefault();

			// Reset DND counts
			$(ev.target).trigger('dragleave');

			// Hide the overlay and upload the files
			this.hideDroppableOverlay();
			this.uploadAttachments(ev.originalEvent.dataTransfer.files);
		},

		stopPropagation: function(ev) {
			ev.stopPropagation();
		},


		// HTML elements

		createHTML: function() {
			var self = this;
			// Commenting field
			var mainCommentingField = this.createCommentingFieldElement(null, null, true);
			mainCommentingField.addClass('main');
			this.$el.append(mainCommentingField);

			// Hide control row and close button
			var mainControlRow = mainCommentingField.find('.control-row');
			mainControlRow.hide();
			mainCommentingField.find('.close').hide();

			// Navigation bar
			if (this.options.enableNavigation) {
				this.$el.append(this.createNavigationElement());
				this.showActiveSort();
			}

			// Loading spinner
			var spinner = this.createSpinner();
			this.$el.append(spinner);

			// Comments container
			var commentsContainer = $('<div/>', {
				'class': 'data-container overflowComment',
				'data-container': 'comments'
			});
			this.$el.append(commentsContainer);
				
			// "No comments" placeholder
			var noComments = $('<div/>', {
				'class': 'no-comments no-data',
				text: this.options.textFormatter(this.options.noCommentsText)
			});
			var noCommentsIcon = $('<i/>', {
				'class': 'fa fa-comments fa-2x'
			});
			if(this.options.noCommentsIconURL.length) {
				noCommentsIcon.css('background-image', 'url("'+this.options.noCommentsIconURL+'")');
				noCommentsIcon.addClass('image');
			}
			noComments.prepend($('<br/>')).prepend(noCommentsIcon);            
			commentsContainer.append(noComments);

			// important Comment Container
			var importantCmtContainer = $('<div/>', {
				'class': 'data-container overflowComment',
				'data-container': 'importantCmt'
			});
			this.$el.append(importantCmtContainer);
				// "No comments Important" placeholder
			var noCommentsImpt = $('<div/>', {
				'class': 'no-comments no-data',
				text: this.options.textFormatter(this.options.noCommentsImportantText)
			});
			var noCommentsImptIcon = $('<i/>', {
				'class': 'fa fa-comments fa-2x'
			});
			if(this.options.noCommentsImptIconURL.length) {
				noCommentsImptIcon.css('background-image', 'url("'+this.options.noCommentsImptIconURL+'")');
				noCommentsImptIcon.addClass('image');
			}
			noCommentsImpt.prepend($('<br/>')).prepend(noCommentsImptIcon);            
			importantCmtContainer.append(noCommentsImpt);

			// Attachments
			if(this.options.enableAttachments) {
				// Attachments container
				var attachmentsContainer = $('<div/>', {
					'class': 'data-container overflowComment',
					'data-container': 'attachments'
				});
				this.$el.append(attachmentsContainer);
				
				// "No attachments" placeholder
				var noAttachments = $('<div/>', {
					'class': 'no-attachments no-data',
					text: this.options.textFormatter(this.options.noAttachmentsText)
				});
				var noAttachmentsIcon = $('<i/>', {
					'class': 'fa fa-paperclip fa-2x'
				});
				if(this.options.attachmentIconURL.length) {
					noAttachmentsIcon.css('background-image', 'url("'+this.options.attachmentIconURL+'")');
					noAttachmentsIcon.addClass('image');
				}
				noAttachments.prepend($('<br/>')).prepend(noAttachmentsIcon);
				attachmentsContainer.append(noAttachments);


				// Drag & dropping attachments
				var droppableOverlay = $('<div/>', {
					'class': 'droppable-overlay'
				});

				var droppableContainer = $('<div/>', {
					'class': 'droppable-container'
				});

				var droppable = $('<div/>', {
					'class': 'droppable'
				});

				var uploadIcon = $('<i/>', {
					'class': 'fa fa-upload fa-4x'
				});
				if(this.options.uploadIconURL.length) {
					uploadIcon.css('background-image', 'url("'+this.options.uploadIconURL+'")');
					uploadIcon.addClass('image');
				}

				var dropAttachmentText = $('<div/>', {
					text: this.options.textFormatter(this.options.attachmentDropText)
				});
				droppable.append(uploadIcon);
				droppable.append(dropAttachmentText);

				droppableOverlay.html(droppableContainer.html(droppable)).hide();
				this.$el.append(droppableOverlay);
			}
		},

		createProfilePictureElement: function(src) {
			if(src) {
				var profilePicture = $('<img/>', {
					src: src
				});
			} else {
				var profilePicture = $('<i/>', {
					'class': 'fa fa-user'
				});
			}
			profilePicture.addClass('profile-picture');
			if(this.options.roundProfilePictures) profilePicture.addClass('round');
			return profilePicture;
		},

		createCommentingFieldElement: function(parentId, existingCommentId, enableOpinion) {
			var self = this;
			// Commenting field
			var commentingField = $('<div/>', {
				'class': 'commenting-field'
			});

			// Profile picture
			if(existingCommentId) {
				var profilePictureURL = this.commentsById[existingCommentId].profilePictureURL;
			} else {
				var profilePictureURL = this.options.profilePictureURL;
			}
			var profilePicture = this.createProfilePictureElement(profilePictureURL);

			// New comment
			var textareaWrapper = $('<div/>', {
				'class': 'textarea-wrapper'
			});

			// Control row
			var controlRow = $('<div/>', {
				'class': 'control-row'
			});

			// Textarea
			var textarea = $('<div/>', {
				'class': 'textarea',
				'data-placeholder': this.options.textFormatter(this.options.textareaPlaceholderText),
				contenteditable: true
			});

			// Setting the initial height for the textarea
			this.adjustTextareaHeight(textarea, false);

			// Close button
			var closeButton = $('<span/>', {
				'class': 'close'
			}).append($('<span class="left"/>')).append($('<span class="right"/>'));

			// Save button text
			if(existingCommentId) {
				var saveButtonText = this.options.textFormatter(this.options.saveText);
				var opinionCmtId = existingCommentId
				// Delete button Edit Comment
				// var deleteButton = $('<span/>', {
				// 		'class': 'delete',
				// 		text: this.options.textFormatter(this.options.deleteText)
				// }).css('background-color', this.options.deleteButtonColor);
				// controlRow.append(deleteButton);

				// // Enable the delete button only if the user is allowed to delete
				// if(this.isAllowedToDelete(existingCommentId)) deleteButton.addClass('enabled')

			} else {
				var saveButtonText = this.options.textFormatter(this.options.sendText);
				var opinionCmtId =''
				// Add upload button if attachments are enabled
				if(this.options.enableAttachments) {
					var uploadButton = $('<span/>', {
						'class': 'enabled upload'
					});
					var uploadIcon = $('<i/>', {
						'class': 'md-icon',
						text: 'Tải lên'
					});
					var fileInput = $('<input/>', {
						type: 'file',
						'data-role': 'none' // Prevent jquery-mobile for adding classes
					});
					// Multi file upload might not work with backend as the the file names
					// may be the same causing duplicates
					if(!$.browser.mobile) fileInput.attr('multiple', 'multiple');

					if(this.options.uploadIconURL.length) {
						uploadIcon.css('background-image', 'url("'+this.options.uploadIconURL+'")');
						uploadIcon.addClass('image');
					}
					uploadButton.append(uploadIcon).append(fileInput);
					controlRow.append(uploadButton);
				}
			}

			// Save button
			var saveButtonClass = existingCommentId ? 'update' : 'send';
			var saveButton = $('<span/>', {
				'class': saveButtonClass + ' save highlight-background',
				text: saveButtonText
			});
			// Check opinion

			if (enableOpinion) {
				var checkOpinion = $('<input/>', {
					'class': 'opinion checkOpinion mt-1 mr-1',
					'id': 'opinion' + opinionCmtId,
					'name': 'opinion' + opinionCmtId,
					'type': 'checkbox'
				});
				var labelCheckOpinion = $('<label/>', {
					'class': 'opinion label-opinion',
					'for': 'opinion'+opinionCmtId,
					text: 'Ý kiến chính thức'
				});
				controlRow.append(checkOpinion).append(labelCheckOpinion);
			}
			
			// Populate the element
			controlRow.prepend(saveButton);
			textareaWrapper.append(closeButton).append(textarea).append(controlRow);
			commentingField.append(profilePicture).append(textareaWrapper);


			if(parentId) {

					// Set the parent id to the field if necessary
				textarea.attr('data-parent', parentId);

				// Append reply-to tag if necessary
				var parentModel = this.commentsById[parentId];
				if(parentModel.parent) {
					textarea.html('&nbsp;');    // Needed to set the cursor to correct place

					// Creating the reply-to tag
					var replyToName = '@' + parentModel.fullname;
					var replyToTag = this.createTagElement(replyToName, 'reply-to', parentModel.creator);
					textarea.prepend(replyToTag);
				}
			}

			// Pinging users
			if(this.options.enablePinging) {
					textarea.textcomplete([{
							/**match: /(^|\s)@(([a-zäöüß]|\s)*)$/im,*/
						match: /(^|\s)@(([0-9]|[^\u0000-\u007F]|[a-zäöüß]|\s)*)$/im,
							search: function (term, callback) {
								// console.log(term);
									term = self.normalizeSpaces(term);

									// Users excluding self and already pinged users
									var pings = self.getPings(textarea);
									var users = self.getUsers().filter(function(user) {
											var isSelf = user.id == self.options.currentUserId;
											var alreadyPinged = pings.indexOf(user.id) != -1;
											return !isSelf && !alreadyPinged;
									});

									// Sort users
									self.sortUsers(users);

									callback($.map(users, function (user) {
											var lowercaseTerm = term.toLowerCase();
											var nameMatch = user.fullname.toLowerCase().indexOf(lowercaseTerm) != -1;
											var emailMatch = user.email.toLowerCase().indexOf(lowercaseTerm) != -1;
											return nameMatch || emailMatch ? user : null;
									}));
							},
							template: function(user) {
									var wrapper = $('<div/>');

									var profilePictureEl = $('<img/>', {
											src: user.pictureUrl,
											'class': 'profile-picture round'
									});
									var detailsEl = $('<div/>', {
											'class': 'details',
									});
									var nameEl = $('<div/>', {
											'class': 'name',
									}).html(user.fullname);

									var emailEl = $('<div/>', {
											'class': 'email',
									}).html(user.email);
											
									if (user.email) {
											detailsEl.append(nameEl).append(emailEl);
									} else {
											detailsEl.addClass('no-email')
											detailsEl.append(nameEl)
									}

									wrapper.append(profilePictureEl).append(detailsEl);
									return wrapper.html();
							},
							replace: function (user) {
									var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);
									return ' ' + tag[0].outerHTML + ' ';
							},
					}], {
							appendTo: '.jquery-comments',
							dropdownClassName: 'dropdown autocomplete',
							maxCount: 5,
							rightEdgeOffset: 0,
					});


					// OVERIDE TEXTCOMPLETE DROPDOWN POSITIONING

					$.fn.textcomplete.Dropdown.prototype.render = function(zippedData) {
						var contentsHtml = this._buildContents(zippedData);
						var unzippedData = $.map(zippedData, function (d) { return d.value; });
						if (zippedData.length) {
							var strategy = zippedData[0].strategy;
							if (strategy.id) {
								this.$el.attr('data-strategy', strategy.id);
							} else {
								this.$el.removeAttr('data-strategy');
							}
							this._renderHeader(unzippedData);
							this._renderFooter(unzippedData);
							if (contentsHtml) {
								this._renderContents(contentsHtml);
								this._fitToBottom();
								this._fitToRight();
								this._activateIndexedItem();
							}
							this._setScroll();
						} else if (this.noResultsMessage) {
							this._renderNoResultsMessage(unzippedData);
						} else if (this.shown) {
							this.deactivate();
						}

						// CUSTOM CODE
						// ===========

						// Adjust vertical position
						var top = parseInt(this.$el.css('top')) + self.options.scrollContainer.scrollTop();
						this.$el.css('top', top);

						// Adjust horizontal position
						var originalLeft = this.$el.css('left');
						this.$el.css('left', 0);    // Left must be set to 0 in order to get the real width of the el
						var maxLeft = self.$el.width() - this.$el.outerWidth();
						var left = Math.min(maxLeft, parseInt(originalLeft));
						this.$el.css('left', left);

						// ===========
					}
			}

			return commentingField;
	},

	createNavigationElement: function() {
		var navigationEl = $('<ul/>', {
			'class': 'navigation'
		});
		var navigationWrapper = $('<div/>', {
			'class': 'navigation-wrapper'
		});
		navigationEl.append(navigationWrapper);

		// Newest
		var newest = $('<li/>', {
			text: this.options.textFormatter(this.options.newestText),
			'data-sort-key': 'newest',
			'data-container-name': 'comments'
		});

		// Oldest
		var oldest = $('<li/>', {
			text: this.options.textFormatter(this.options.oldestText),
			'data-sort-key': 'oldest',
			'data-container-name': 'comments'
		});
		// Important
		var important = $('<li/>', {
			text: this.options.textFormatter(this.options.importantCmtText),
			'data-sort-key': 'important',
			'data-container-name': 'importantCmt'
		});
		// Popular
		var popular = $('<li/>', {
			text: this.options.textFormatter(this.options.popularText),
			'data-sort-key': 'popularity',
			'data-container-name': 'comments'
		});

		// Attachments
		var attachments = $('<li/>', {
			text: this.options.textFormatter(this.options.attachmentsText),
			'data-sort-key': 'attachments',
			'data-container-name': 'attachments'
		});

		// Attachments icon
		var attachmentsIcon = $('<i/>', {
			'class': 'fa fa-paperclip'
		});
		if(this.options.attachmentIconURL.length) {
			attachmentsIcon.css('background-image', 'url("'+this.options.attachmentIconURL+'")');
			attachmentsIcon.addClass('image');
		}
		attachments.prepend(attachmentsIcon);

		// Responsive navigation
		var dropdownNavigationWrapper = $('<div/>', {
			'class': 'navigation-wrapper responsive'
		});
		var dropdownNavigation = $('<ul/>', {
			'class': 'dropdown'
		});
		var dropdownTitle = $('<li/>', {
			'class': 'title'
		});
		var dropdownTitleHeader = $('<header/>');

		dropdownTitle.append(dropdownTitleHeader);
		dropdownNavigationWrapper.append(dropdownTitle);
		dropdownNavigationWrapper.append(dropdownNavigation);
		navigationEl.append(dropdownNavigationWrapper);

		// Populate elements
		navigationWrapper.append(newest).append(oldest).append(important);
		dropdownNavigation.append(newest.clone()).append(oldest.clone()).append(important.clone());

		if(this.options.enableReplying || this.options.enableUpvoting) {
			navigationWrapper.append(popular);
			dropdownNavigation.append(popular.clone());
		}
		if(this.options.enableAttachments) {
			navigationWrapper.append(attachments);
			dropdownNavigationWrapper.append(attachments.clone());
		}

		if(this.options.forceResponsive) this.forceResponsive();
		return navigationEl;
	},

	createSpinner: function() {
		var spinner = $('<div/>', {
			'class': 'spinner'
		});
		var spinnerIcon = $('<i/>', {
			'class': 'fa fa-spinner fa-spin'
		});
		if(this.options.spinnerIconURL.length) {
			spinnerIcon.css('background-image', 'url("'+this.options.spinnerIconURL+'")');
			spinnerIcon.addClass('image');
		}
		spinner.html(spinnerIcon);
		return spinner;
	},

	createCommentElement: function(commentModel) {

		// Comment container element
		var commentEl = $('<li/>', {
			'data-id': commentModel.id,
			'class': 'comment'
		}).data('model', commentModel);

		if(commentModel.createdByCurrentUser) commentEl.addClass('by-current-user');
		if(commentModel.createdByAdmin) commentEl.addClass('by-admin');

		// Child comments
		var childComments = $('<ul/>', {
			'class': 'child-comments'
		});

		// Comment wrapper
		var commentWrapper = this.createCommentWrapperElement(commentModel);

		commentEl.append(commentWrapper);
		if(commentModel.parent == null) commentEl.append(childComments);
		return commentEl;
	},

	createCommentWrapperElement: function(commentModel) {
		var commentWrapper = $('<div/>', {
			'class': 'comment-wrapper'
		});

		// Profile picture
		var profilePicture = this.createProfilePictureElement(commentModel.profilePictureURL);

		// Time
		var time = $('<time/>', {
			text: this.options.timeFormatter(commentModel.created),
			'data-original': commentModel.created
		});

		// Name
		var nameText = commentModel.createdByCurrentUser ? this.options.textFormatter(this.options.youText) : commentModel.fullname;
		var name = $('<div/>', {
			'class': 'name'
		});
		if(commentModel.profileURL) {
			var link = $('<a/>', {
				href: commentModel.profileURL,
				text: nameText
			});
			name.html(link);
		} else {
			name.text(nameText);
		}

		// Highlight name for own comments and admin
		if(commentModel.createdByCurrentUser || commentModel.createdByAdmin) name.addClass('highlight-font-bold');

		// Show reply-to name if parent of parent exists
		if(commentModel.parent) {
			var parent = this.commentsById[commentModel.parent];
			if(parent.parent) {
				var replyTo = $('<span/>', {
					'class': 'reply-to',
					text: parent.fullname
				});

				// reply icon
				var replyIcon = $('<i/>', {
					'class': 'fa fa-share'
				});
				if(this.options.replyIconURL.length) {
					replyIcon.css('background-image', 'url("'+this.options.replyIconURL+'")');
					replyIcon.addClass('image');
				}

				replyTo.prepend(replyIcon);
				name.append(replyTo);
			}
		}

		// New tag
		if(commentModel.isNew) {
			var newTag = $('<span/>', {
				'class': 'new highlight-background',
				text: this.options.newText
			});
			name.append(newTag);
		}

		// Wrapper
		var wrapper = $('<div/>', {
			'class': 'wrapper'
		});
		// Note Ý kiến chính thức
		var noteOpinion = $('<div/>', {
			'class': 'note-opinion',
			text: '(Ý kiến chính thức)'
		});
		// Content
		var content = $('<div/>', {
			'class': 'content'
		});

		// Case: attachment
		var isAttachment = commentModel.fileURL != undefined;
		if(isAttachment) {
			var format = null;
			var type = null;

			// Type and format
			if(commentModel.fileMimeType) {
				var mimeTypeParts = commentModel.fileMimeType.split('/');
				if(mimeTypeParts.length == 2) {
					format = mimeTypeParts[1];
					type = mimeTypeParts[0];
				}
			}

			// Attachment link
			var link = $('<a/>', {
				'class': 'attachment',
				href: commentModel.fileURL,
				target: '_blank'
			});
			
			// var link = $('<a/>', {
			// 		'class': 'attachment',
			// 		href: 'javascript:viewCommentFileAttach("' + commentModel.fileURL + '","' + commentModel.fileMimeType + '");'
			// });
			
			// Case: image preview
			if(type == 'image') {
				var image = $('<img/>', {
					src: commentModel.fileURL
				});
				link.html(image);
			// Case: video preview
			} else if(type == 'video') {
				var video = $('<video/>', {
					src: commentModel.fileURL,
					type: commentModel.fileMimeType,
					controls: 'controls'
				});
				link.html(video);

			// Case: icon and text
			} else {

				// Icon
				var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo',
					'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'];
				
				var iconClass = 'fa fa-file-o';
				if(availableIcons.indexOf(format) > 0) {
					iconClass = 'fa fa-file-' + format + '-o';
				} else if(availableIcons.indexOf(type) > 0) {
					iconClass = 'fa fa-file-' + type + '-o';
				}

				var fileIcon = $('<i/>', {
					'class': iconClass
				});
				if(this.options.fileIconURL.length) {
					fileIcon.css('background-image', 'url("'+this.options.fileIconURL+'")');
					fileIcon.addClass('image');
				}
				// File name
				/**
				var parts = commentModel.fileURL.split('/');
				var fileName = parts[parts.length - 1];
				fileName = fileName.split('?')[0];
				fileName = decodeURIComponent(fileName);
				*/
				var fileName = commentModel.fileName;
				link.text(fileName);
				link.prepend(fileIcon);
			}
			content.html(link);
		// Case: regular comment
		} else {
			content.html(this.getFormattedCommentContent(commentModel));
		}

		// Edited timestamp
		if(commentModel.modified && commentModel.modified != commentModel.created) {
			var editedTime = this.options.timeFormatter(commentModel.modified);
			var edited = $('<time/>', {
				'class': 'edited',
				text: this.options.textFormatter(this.options.editedText) + ' ' + editedTime,
				'data-original': commentModel.modified
			});
			content.append(edited);
		}

		// Actions
		var actions = $('<span/>', {
			'class': 'actions'
		});

		// Reply
		var reply = $('<button/>', {
			'class': 'action reply',
			'type': 'button',
			text: this.options.textFormatter(this.options.replyText)
		});

		// Upvote icon
		var upvoteIcon = $('<i/>', {
			'class': 'fa fa-thumbs-up'
		});
		if(this.options.upvoteIconURL.length) {
			upvoteIcon.css('background-image', 'url("'+this.options.upvoteIconURL+'")');
			upvoteIcon.addClass('image');
		}

		// Upvotes
		var upvotes = this.createUpvoteElement(commentModel);

		// Append buttons for actions that are enabled
		if(this.options.enableReplying) actions.append(reply);
		if(this.options.enableUpvoting) actions.append(upvotes);

		if(commentModel.createdByCurrentUser || this.options.currentUserIsAdmin) {
			// Case: delete button for attachment and currentUser
			if(isAttachment && this.isAllowedToDelete(commentModel.id)) {
				var deleteButton = $('<button/>', {
					'class': 'action delete enabled',
					text: this.options.textFormatter(this.options.deleteText)
				});
				actions.append(deleteButton);

			// Case: edit button for regular comment
			} else if(!isAttachment && this.options.enableEditing) {
				var editButton = $('<button/>', {
					'class': 'action edit',
					text: this.options.textFormatter(this.options.editText)
				});
				actions.append(editButton);
				var deleteButton = $('<button/>', {
					'class': 'action delete enabled',
					text: this.options.textFormatter(this.options.deleteText)
				});
				actions.append(deleteButton);
			}
		}

		wrapper.append(content);
		if(commentModel.opinion == true) {
			wrapper.append(noteOpinion);
		}
		wrapper.append(actions);
		commentWrapper.append(profilePicture).append(time).append(name).append(wrapper);
		return commentWrapper;
	},

	createUpvoteElement: function(commentModel) {
		// Upvote icon
		var upvoteIcon = $('<i/>', {
			'class': 'fa fa-thumbs-up'
		});
		if(this.options.upvoteIconURL.length) {
			upvoteIcon.css('background-image', 'url("'+this.options.upvoteIconURL+'")');
			upvoteIcon.addClass('image');
		}

		// Upvotes
		var upvoteEl = $('<button/>', {
			'class': 'action upvote' + (commentModel.userHasUpvoted ? ' highlight-font' : '')
		}).append($('<span/>', {
			text: commentModel.upvoteCount,
			'class': 'upvote-count'
		})).append(upvoteIcon);

		return upvoteEl;
	},

	createTagElement: function(text, extraClasses, value) {
		var tagEl = $('<input/>', {
			'class': 'tag',
			'type': 'button',
			'data-role': 'none',
		});
		if(extraClasses) tagEl.addClass(extraClasses);
		tagEl.val(text);
		tagEl.attr('data-value', value);
		return tagEl;
	},

	reRenderComment: function(id) {
		var commentModel = this.commentsById[id];
		var commentElements = this.$el.find('li.comment[data-id="'+commentModel.id+'"]');

		var self = this;
		commentElements.each(function(index, commentEl) {
			var commentWrapper = self.createCommentWrapperElement(commentModel);
			$(commentEl).find('.comment-wrapper').first().replaceWith(commentWrapper);
		});
	},

	reRenderCommentActionBar: function(id) {
		var commentModel = this.commentsById[id];
		var commentElements = this.$el.find('li.comment[data-id="'+commentModel.id+'"]');

		var self = this;
		commentElements.each(function(index, commentEl) {
			var commentWrapper = self.createCommentWrapperElement(commentModel);
			$(commentEl).find('.actions').first().replaceWith(commentWrapper.find('.actions'));
		});
	},

	reRenderUpvotes: function(id) {
		var commentModel = this.commentsById[id];
		var commentElements = this.$el.find('li.comment[data-id="'+commentModel.id+'"]');

		var self = this;
		commentElements.each(function(index, commentEl) {
			var upvotes = self.createUpvoteElement(commentModel);
			$(commentEl).find('.upvote').first().replaceWith(upvotes);
		});
	},


	// Styling
	createCssDeclarations: function() {

		// Remove previous css-declarations
		$('head style.jquery-comments-css').remove();

		// Navigation underline
		this.createCss('.jquery-comments ul.navigation li.active:after {background: '
			+ this.options.highlightColor  + ' !important;',
			+'}');

		// Dropdown active element
		this.createCss('.jquery-comments ul.navigation ul.dropdown li.active {background: '
			+ this.options.highlightColor  + ' !important;',
			+'}');

		// Background highlight
		this.createCss('.jquery-comments .highlight-background {background: '
			+ this.options.highlightColor  + ' !important;',
			+'}');

		// Font highlight
		this.createCss('.jquery-comments .highlight-font {color: '
			+ this.options.highlightColor + ' !important;'
			+'}');
		this.createCss('.jquery-comments .highlight-font-bold {color: '
			+ this.options.highlightColor + ' !important;'
			+ 'font-weight: bold;'
			+'}');
	},

	createCss: function(css) {
		var styleEl = $('<style/>', {
			type: 'text/css',
			'class': 'jquery-comments-css',
			text: css
		});
		$('head').append(styleEl);
	},

	//
	getComments: function() {
		var self = this;
		let commentArr = Object.keys(this.commentsById).map(function(id){return self.commentsById[id]})
		let importantCmtArr = commentArr.filter(function(comment){return comment.opinion})
		let importantCmtUser = commentArr.filter(function(comment){return comment.opinion&&comment.createdByCurrentUser})
		let attachCmtArr = commentArr.filter(function(comment){return comment.fileURL != undefined})
		if (commentArr.length > 3) {
			$('.data-container[data-container=comments]').addClass('lessEl')
		} else {
			$('.data-container[data-container=comments]').addClass('fullEl')
		}
		// 
		if (importantCmtArr.length > 3) {
			$('.data-container[data-container=importantCmt]').addClass('lessEl')
		} else {
			$('.data-container[data-container=importantCmt]').addClass('fullEl')
		}
		if (importantCmtUser.length > 0) {
			$('.opinion').hide()
		} else {
			$('.opinion').show()
		}
		// 
		if (attachCmtArr.length > 3) {
			$('.data-container[data-container=attachments]').addClass('lessEl')
		} else {
			$('.data-container[data-container=attachments]').addClass('fullEl')
		}

		return Object.keys(this.commentsById).map(function(id){return self.commentsById[id]});
	},

	getUsers: function() {
		var self = this;
		return Object.keys(this.usersById).map(function(id){return self.usersById[id]});
	},

	getChildComments: function(parentId) {
		return this.getComments().filter(function(comment){return comment.parent == parentId});
	},

	getAttachments: function() {
		var self = this;
		return this.getComments().filter(function(comment){return comment.fileURL != undefined});
	},
	getImportantCmt: function() {
		var self = this;
		return this.getComments().filter(function(comment){return comment.opinion == true});
	},
	getOutermostParent: function(directParentId) {
		var parentId = directParentId;
		do {
			var parentComment = this.commentsById[parentId];
			parentId = parentComment.parent;
		} while(parentComment.parent != null);
		return parentComment;
	},

	createCommentJSON: function(textarea) {
		var time = new Date().toISOString();
		var commentJSON = {
			id: 'c' +  (this.getComments().length + 1),   // Temporary id
			parent: textarea.attr('data-parent') || null,
			created: time,
			modified: time,
			content: this.getTextareaContent(textarea),
			pings: this.getPings(textarea),
			fullname: this.options.textFormatter(this.options.youText),
			profilePictureURL: this.options.profilePictureURL,
			createdByCurrentUser: true,
			upvoteCount: 0,
			userHasUpvoted: false
		};
		return commentJSON;
	},

	isAllowedToDelete: function(commentId) {
		if(this.options.enableDeleting) {
			var isAllowedToDelete = true;
			if(!this.options.enableDeletingCommentWithReplies) {
				$(this.getComments()).each(function(index, comment) {
					if(comment.parent == commentId) isAllowedToDelete = false;
				});
			}
			return isAllowedToDelete;
		}
		return false;
	},

	setToggleAllButtonText: function(toggleAllButton, toggle) {
		var self = this;
		var textContainer = toggleAllButton.find('span.text');
		var caret = toggleAllButton.find('.caret');

		var showExpandingText = function() {
				var text = self.options.textFormatter(self.options.viewAllRepliesText);
				var replyCount = toggleAllButton.siblings('.comment').length;
				text = text.replace('__replyCount__', replyCount);
				textContainer.text(text);
		};

		var hideRepliesText = this.options.textFormatter(this.options.hideRepliesText);

		if(toggle) {
			// Toggle text
			if(textContainer.text() == hideRepliesText) {
				showExpandingText();
			} else {
				textContainer.text(hideRepliesText);
			}
			// Toggle direction of the caret
			caret.toggleClass('up');
		} else {
			// Update text if necessary
			if(textContainer.text() != hideRepliesText) {
				showExpandingText();
			}
		}
	},

	adjustTextareaHeight: function(textarea, focus) {
		var textareaBaseHeight = 2.2;
		var lineHeight = 1.45;

		var setRows = function(rows) {
			var height = textareaBaseHeight + (rows - 1) * lineHeight;
			textarea.css('height', height + 'em');
		};

		textarea = $(textarea);
		var rowCount = focus == true ? this.options.textareaRowsOnFocus : this.options.textareaRows;
		do {
			setRows(rowCount);
			rowCount++;
			var isAreaScrollable = textarea[0].scrollHeight > textarea.outerHeight();
			var maxRowsUsed = this.options.textareaMaxRows == false ?
				false : rowCount > this.options.textareaMaxRows;
		} while(isAreaScrollable && !maxRowsUsed);
	},

	clearTextarea: function(textarea) {
		textarea.empty().trigger('input');
	},

	getTextareaContent: function(textarea, humanReadable) {
		var textareaClone = textarea.clone();

		// Remove reply-to tag
		textareaClone.find('.reply-to.tag').remove();

		// Replace tags with text values
		textareaClone.find('.tag.hashtag').replaceWith(function(){
			return humanReadable ? $(this).val() : '#' + $(this).attr('data-value');
		});
		textareaClone.find('.tag.ping').replaceWith(function(){
			return humanReadable ? $(this).val() : '@' + $(this).attr('data-value');
		});

		var ce = $('<pre/>').html(textareaClone.html());
		ce.find('div, p, br').replaceWith(function() { return '\n' + this.innerHTML; });

		// Trim leading spaces
		var text = ce.text().replace(/^\s+/g, '');

		// Normalize spaces
		var text = this.normalizeSpaces(text);
		return text;
	},

	getFormattedCommentContent: function(commentModel, replaceNewLines) {
		var html = this.escape(commentModel.content);
		html = this.linkify(html);
		html = this.highlightTags(commentModel, html);
		if(replaceNewLines) html = html.replace(/(?:\n)/g, '<br>');
		return html;
	},

	getPings: function(textarea) {
		return $.map(textarea.find('.ping'), function(el){return parseInt($(el).attr('data-value'))});
	},

	moveCursorToEnd: function(el) {
		el = $(el)[0];

		// Trigger input to adjust size
		$(el).trigger('input');

		// Scroll to bottom
		$(el).scrollTop(el.scrollHeight);

		// Move cursor to end
		if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {
			var range = document.createRange();
			range.selectNodeContents(el);
			range.collapse(false);
			var sel = window.getSelection();
			sel.removeAllRanges();
			sel.addRange(range);
		} else if (typeof document.body.createTextRange != 'undefined') {
			var textRange = document.body.createTextRange();
			textRange.moveToElementText(el);
			textRange.collapse(false);
			textRange.select();
		}

		// Focus
		el.focus();
	},

	escape: function(inputText) {
		return $('<pre/>').text(this.normalizeSpaces(inputText)).html();
	},

	normalizeSpaces: function(inputText) {
		return inputText.replace(new RegExp('\u00a0', 'g'), ' ');   // Convert non-breaking spaces to reguar spaces
	},

	after: function(times, func) {
		var self = this;
		return function() {
			times--;
			if (times == 0) {
				return func.apply(self, arguments);
			}
		}
	},

	highlightTags: function(commentModel, html) {
		if(this.options.enableHashtags) html = this.highlightHashtags(commentModel, html);
		if(this.options.enablePinging) html = this.highlightPings(commentModel, html);
		return html;
	},

	highlightHashtags: function(commentModel, html) {
		var self = this;

		if(html.indexOf('#') != -1) {
			var __createTag = function(tag) {
				var tag = self.createTagElement('#' + tag, 'hashtag', tag);
				return tag[0].outerHTML;
			}

			var regex = /(^|\s)#([a-zäöüß\d-_]+)/gim;
			html = html.replace(regex, function($0, $1, $2){
				return $1 + __createTag($2);
			});
		}
		return html;
	},

	highlightPings: function(commentModel, html) {
		var self = this;

		if(html.indexOf('@') != -1) {

			var __createTag = function(user) {
				var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);
				return tag[0].outerHTML;
			}

			var highlightedHtml = '';
			$(commentModel.pings).each(function(index, id) {
				if(id in self.usersById) {
					var user = self.usersById[id];
					var pingText = '@' + user.id;

					var endIndex = html.indexOf(pingText) + pingText.length;
					var current = html.slice(0, endIndex);
					highlightedHtml += current.replace(pingText, __createTag(user));

					html = html.slice(endIndex);
				}
			});
			highlightedHtml += html;
			return highlightedHtml;
		}
		return html;
	},

	linkify: function(inputText) {
		var replacedText, replacePattern1, replacePattern2, replacePattern3;

		// URLs starting with http://, https://, file:// or ftp://
		replacePattern1 = /(^|\s)((https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
		replacedText = inputText.replace(replacePattern1, '$1<a href="$2" target="_blank">$2</a>');

		// URLs starting with "www." (without // before it, or it'd re-link the ones done above).
		replacePattern2 = /(^|\s)(www\.[\S]+(\b|$))/gim;
		replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

		// Change email addresses to mailto:: links.
		replacePattern3 = /(^|\s)(([a-zA-Z0-9\-\_\.]+)@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
		replacedText = replacedText.replace(replacePattern3, '$1<a href="mailto:$2">$2</a>');

		// If there are hrefs in the original text, let's split
		// the text up and only work on the parts that don't have urls yet.
		var count = inputText.match(/<a href/g) || [];

		if(count.length > 0){
			// Keep delimiter when splitting
			var splitInput = inputText.split(/(<\/a>)/g);
			for (var i = 0 ; i < splitInput.length ; i++){
				if(splitInput[i].match(/<a href/g) == null){
					splitInput[i] = splitInput[i].replace(replacePattern1, '<a href="$1" target="_blank">$1</a>').replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>').replace(replacePattern3, '<a href="mailto:$1">$1</a>');
				}
			}
			var combinedReplacedText = splitInput.join('');
			return combinedReplacedText;
		} else {
			return replacedText;
		}
	},

	waitUntil: function(condition, callback) {
		var self = this;

		if(condition()) {
			callback();
		} else {
			setTimeout(function() {
				self.waitUntil(condition, callback);
			}, 100);
		}
	},

	applyInternalMappings: function(commentJSON) {
		// Inverting field mappings
		var invertedMappings = {};
		var mappings = this.options.fieldMappings;
		for (var prop in mappings) {
			if(mappings.hasOwnProperty(prop)) {
				invertedMappings[mappings[prop]] = prop;
			}
		}

		return this.applyMappings(invertedMappings, commentJSON);
	},

	applyExternalMappings: function(commentJSON) {
		var mappings = this.options.fieldMappings;
		return this.applyMappings(mappings, commentJSON);
	},

	applyMappings: function(mappings, commentJSON) {
		var result = {};

		for(var key1 in commentJSON) {
			if(key1 in mappings) {
				var key2 = mappings[key1];
				result[key2] = commentJSON[key1];
			}
		}
		return result;
	}

	};

	$.fn.comments = function(options) {
		return this.each(function() {
			var comments = Object.create(Comments);
			$.data(this, 'comments', comments);
			comments.init(options || {}, this);
		});
	};
}));


/* eslint-disable */
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(36)))

/***/ }),
/* 695 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;(function (factory) {
  if (true) {
    // AMD. Register as an anonymous module.
    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(36)], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof module === "object" && module.exports) {
    var $ = require('jquery');
    module.exports = factory($);
  } else {
    // Browser globals
    factory(jQuery);
  }
}(function (jQuery) {

/*!
 * jQuery.textcomplete
 *
 * Repository: https://github.com/yuku-t/jquery-textcomplete
 * License:    MIT (https://github.com/yuku-t/jquery-textcomplete/blob/master/LICENSE)
 * Author:     Yuku Takahashi
 */

if (typeof jQuery === 'undefined') {
  throw new Error('jQuery.textcomplete requires jQuery');
}

+function ($) {
  'use strict';

  var warn = function (message) {
    if (console.warn) { console.warn(message); }
  };

  var id = 1;

  $.fn.textcomplete = function (strategies, option) {
    var args = Array.prototype.slice.call(arguments);
    return this.each(function () {
      var self = this;
      var $this = $(this);
      var completer = $this.data('textComplete');
      if (!completer) {
        option || (option = {});
        option._oid = id++;  // unique object id
        completer = new $.fn.textcomplete.Completer(this, option);
        $this.data('textComplete', completer);
      }
      if (typeof strategies === 'string') {
        if (!completer) return;
        args.shift()
        completer[strategies].apply(completer, args);
        if (strategies === 'destroy') {
          $this.removeData('textComplete');
        }
      } else {
        // For backward compatibility.
        // TODO: Remove at v0.4
        $.each(strategies, function (obj) {
          $.each(['header', 'footer', 'placement', 'maxCount'], function (name) {
            if (obj[name]) {
              completer.option[name] = obj[name];
              warn(name + 'as a strategy param is deprecated. Use option.');
              delete obj[name];
            }
          });
        });
        completer.register($.fn.textcomplete.Strategy.parse(strategies, {
          el: self,
          $el: $this
        }));
      }
    });
  };

}(jQuery);

+function ($) {
  'use strict';

  // Exclusive execution control utility.
  //
  // func - The function to be locked. It is executed with a function named
  //        `free` as the first argument. Once it is called, additional
  //        execution are ignored until the free is invoked. Then the last
  //        ignored execution will be replayed immediately.
  //
  // Examples
  //
  //   var lockedFunc = lock(function (free) {
  //     setTimeout(function { free(); }, 1000); // It will be free in 1 sec.
  //     console.log('Hello, world');
  //   });
  //   lockedFunc();  // => 'Hello, world'
  //   lockedFunc();  // none
  //   lockedFunc();  // none
  //   // 1 sec past then
  //   // => 'Hello, world'
  //   lockedFunc();  // => 'Hello, world'
  //   lockedFunc();  // none
  //
  // Returns a wrapped function.
  var lock = function (func) {
    var locked, queuedArgsToReplay;

    return function () {
      // Convert arguments into a real array.
      var args = Array.prototype.slice.call(arguments);
      if (locked) {
        // Keep a copy of this argument list to replay later.
        // OK to overwrite a previous value because we only replay
        // the last one.
        queuedArgsToReplay = args;
        return;
      }
      locked = true;
      var self = this;
      args.unshift(function replayOrFree() {
        if (queuedArgsToReplay) {
          // Other request(s) arrived while we were locked.
          // Now that the lock is becoming available, replay
          // the latest such request, then call back here to
          // unlock (or replay another request that arrived
          // while this one was in flight).
          var replayArgs = queuedArgsToReplay;
          queuedArgsToReplay = undefined;
          replayArgs.unshift(replayOrFree);
          func.apply(self, replayArgs);
        } else {
          locked = false;
        }
      });
      func.apply(this, args);
    };
  };

  var isString = function (obj) {
    return Object.prototype.toString.call(obj) === '[object String]';
  };

  var uniqueId = 0;
  var initializedEditors = [];

  function Completer(element, option) {
    this.$el        = $(element);
    this.id         = 'textcomplete' + uniqueId++;
    this.strategies = [];
    this.views      = [];
    this.option     = $.extend({}, Completer.defaults, option);

    if (!this.$el.is('input[type=text]') && !this.$el.is('input[type=search]') && !this.$el.is('textarea') && !element.isContentEditable && element.contentEditable != 'true') {
      throw new Error('textcomplete must be called on a Textarea or a ContentEditable.');
    }

    // use ownerDocument to fix iframe / IE issues
    if (element === element.ownerDocument.activeElement) {
      // element has already been focused. Initialize view objects immediately.
      this.initialize()
    } else {
      // Initialize view objects lazily.
      var self = this;
      this.$el.one('focus.' + this.id, function () { self.initialize(); });

      // Special handling for CKEditor: lazy init on instance load
      if ((!this.option.adapter || this.option.adapter == 'CKEditor') && typeof CKEDITOR != 'undefined' && (this.$el.is('textarea'))) {
        CKEDITOR.on("instanceReady", function(event) { //For multiple ckeditors on one page: this needs to be executed each time a ckeditor-instance is ready.

          if($.inArray(event.editor.id, initializedEditors) == -1) { //For multiple ckeditors on one page: focus-eventhandler should only be added once for every editor.
            initializedEditors.push(event.editor.id);
			
            event.editor.on("focus", function(event2) {
				//replace the element with the Iframe element and flag it as CKEditor
				self.$el = $(event.editor.editable().$);
				if (!self.option.adapter) {
					self.option.adapter = $.fn.textcomplete['CKEditor'];
				}
				self.option.ckeditor_instance = event.editor; //For multiple ckeditors on one page: in the old code this was not executed when adapter was alread set. So we were ALWAYS working with the FIRST instance.
              	self.initialize();
            });
          }
        });
      }
    }
  }

  Completer.defaults = {
    appendTo: 'body',
    className: '',  // deprecated option
    dropdownClassName: 'dropdown-menu textcomplete-dropdown',
    maxCount: 10,
    zIndex: '100',
    rightEdgeOffset: 30
  };

  $.extend(Completer.prototype, {
    // Public properties
    // -----------------

    id:         null,
    option:     null,
    strategies: null,
    adapter:    null,
    dropdown:   null,
    $el:        null,
    $iframe:    null,

    // Public methods
    // --------------

    initialize: function () {
      var element = this.$el.get(0);
      
      // check if we are in an iframe
      // we need to alter positioning logic if using an iframe
      if (this.$el.prop('ownerDocument') !== document && window.frames.length) {
        for (var iframeIndex = 0; iframeIndex < window.frames.length; iframeIndex++) {
          if (this.$el.prop('ownerDocument') === window.frames[iframeIndex].document) {
            this.$iframe = $(window.frames[iframeIndex].frameElement);
            break;
          }
        }
      }
      
      
      // Initialize view objects.
      this.dropdown = new $.fn.textcomplete.Dropdown(element, this, this.option);
      var Adapter, viewName;
      if (this.option.adapter) {
        Adapter = this.option.adapter;
      } else {
        if (this.$el.is('textarea') || this.$el.is('input[type=text]') || this.$el.is('input[type=search]')) {
          viewName = typeof element.selectionEnd === 'number' ? 'Textarea' : 'IETextarea';
        } else {
          viewName = 'ContentEditable';
        }
        Adapter = $.fn.textcomplete[viewName];
      }
      this.adapter = new Adapter(element, this, this.option);
    },

    destroy: function () {
      this.$el.off('.' + this.id);
      if (this.adapter) {
        this.adapter.destroy();
      }
      if (this.dropdown) {
        this.dropdown.destroy();
      }
      this.$el = this.adapter = this.dropdown = null;
    },

    deactivate: function () {
      if (this.dropdown) {
        this.dropdown.deactivate();
      }
    },

    // Invoke textcomplete.
    trigger: function (text, skipUnchangedTerm) {
      if (!this.dropdown) { this.initialize(); }
      text != null || (text = this.adapter.getTextFromHeadToCaret());
      var searchQuery = this._extractSearchQuery(text);
      if (searchQuery.length) {
        var term = searchQuery[1];
        // Ignore shift-key, ctrl-key and so on.
        if (skipUnchangedTerm && this._term === term && term !== "") { return; }
        this._term = term;
        this._search.apply(this, searchQuery);
      } else {
        this._term = null;
        this.dropdown.deactivate();
      }
    },

    fire: function (eventName) {
      var args = Array.prototype.slice.call(arguments, 1);
      this.$el.trigger(eventName, args);
      return this;
    },

    register: function (strategies) {
      Array.prototype.push.apply(this.strategies, strategies);
    },

    // Insert the value into adapter view. It is called when the dropdown is clicked
    // or selected.
    //
    // value    - The selected element of the array callbacked from search func.
    // strategy - The Strategy object.
    // e        - Click or keydown event object.
    select: function (value, strategy, e) {
      this._term = null;
      this.adapter.select(value, strategy, e);
      this.fire('change').fire('textComplete:select', value, strategy);
      this.adapter.focus();
    },

    // Private properties
    // ------------------

    _clearAtNext: true,
    _term:        null,

    // Private methods
    // ---------------

    // Parse the given text and extract the first matching strategy.
    //
    // Returns an array including the strategy, the query term and the match
    // object if the text matches an strategy; otherwise returns an empty array.
    _extractSearchQuery: function (text) {
      for (var i = 0; i < this.strategies.length; i++) {
        var strategy = this.strategies[i];
        var context = strategy.context(text);
        if (context || context === '') {
          var matchRegexp = $.isFunction(strategy.match) ? strategy.match(text) : strategy.match;
          if (isString(context)) { text = context; }
          var match = text.match(matchRegexp);
          if (match) { return [strategy, match[strategy.index], match]; }
        }
      }
      return []
    },

    // Call the search method of selected strategy..
    _search: lock(function (free, strategy, term, match) {
      var self = this;
      strategy.search(term, function (data, stillSearching) {
        if (!self.dropdown.shown) {
          self.dropdown.activate();
        }
        if (self._clearAtNext) {
          // The first callback in the current lock.
          self.dropdown.clear();
          self._clearAtNext = false;
        }
        self.dropdown.setPosition(self.adapter.getCaretPosition());
        self.dropdown.render(self._zip(data, strategy, term));
        if (!stillSearching) {
          // The last callback in the current lock.
          free();
          self._clearAtNext = true; // Call dropdown.clear at the next time.
        }
      }, match);
    }),

    // Build a parameter for Dropdown#render.
    //
    // Examples
    //
    //  this._zip(['a', 'b'], 's');
    //  //=> [{ value: 'a', strategy: 's' }, { value: 'b', strategy: 's' }]
    _zip: function (data, strategy, term) {
      return $.map(data, function (value) {
        return { value: value, strategy: strategy, term: term };
      });
    }
  });

  $.fn.textcomplete.Completer = Completer;
}(jQuery);

+function ($) {
  'use strict';

  var $window = $(window);

  var include = function (zippedData, datum) {
    var i, elem;
    var idProperty = datum.strategy.idProperty
    for (i = 0; i < zippedData.length; i++) {
      elem = zippedData[i];
      if (elem.strategy !== datum.strategy) continue;
      if (idProperty) {
        if (elem.value[idProperty] === datum.value[idProperty]) return true;
      } else {
        if (elem.value === datum.value) return true;
      }
    }
    return false;
  };

  var dropdownViews = {};
  $(document).on('click', function (e) {
    var id = e.originalEvent && e.originalEvent.keepTextCompleteDropdown;
    $.each(dropdownViews, function (key, view) {
      if (key !== id) { view.deactivate(); }
    });
  });

  var commands = {
    SKIP_DEFAULT: 0,
    KEY_UP: 1,
    KEY_DOWN: 2,
    KEY_ENTER: 3,
    KEY_PAGEUP: 4,
    KEY_PAGEDOWN: 5,
    KEY_ESCAPE: 6
  };

  // Dropdown view
  // =============

  // Construct Dropdown object.
  //
  // element - Textarea or contenteditable element.
  function Dropdown(element, completer, option) {
    this.$el       = Dropdown.createElement(option);
    this.completer = completer;
    this.id        = completer.id + 'dropdown';
    this._data     = []; // zipped data.
    this.$inputEl  = $(element);
    this.option    = option;

    // Override setPosition method.
    if (option.listPosition) { this.setPosition = option.listPosition; }
    if (option.height) { this.$el.height(option.height); }
    var self = this;
    $.each(['maxCount', 'placement', 'footer', 'header', 'noResultsMessage', 'className'], function (_i, name) {
      if (option[name] != null) { self[name] = option[name]; }
    });
    this._bindEvents(element);
    dropdownViews[this.id] = this;
  }

  $.extend(Dropdown, {
    // Class methods
    // -------------

    createElement: function (option) {
      var $parent = option.appendTo;
      if (!($parent instanceof $)) { $parent = $($parent); }
      var $el = $('<ul></ul>')
        .addClass(option.dropdownClassName)
        .attr('id', 'textcomplete-dropdown-' + option._oid)
        .css({
          display: 'none',
          left: 0,
          position: 'absolute',
          zIndex: option.zIndex
        })
        .appendTo($parent);
      return $el;
    }
  });

  $.extend(Dropdown.prototype, {
    // Public properties
    // -----------------

    $el:       null,  // jQuery object of ul.dropdown-menu element.
    $inputEl:  null,  // jQuery object of target textarea.
    completer: null,
    footer:    null,
    header:    null,
    id:        null,
    maxCount:  null,
    placement: '',
    shown:     false,
    data:      [],     // Shown zipped data.
    className: '',

    // Public methods
    // --------------

    destroy: function () {
      // Don't remove $el because it may be shared by several textcompletes.
      this.deactivate();

      this.$el.off('.' + this.id);
      this.$inputEl.off('.' + this.id);
      this.clear();
      this.$el.remove();
      this.$el = this.$inputEl = this.completer = null;
      delete dropdownViews[this.id]
    },

    render: function (zippedData) {
      var contentsHtml = this._buildContents(zippedData);
      var unzippedData = $.map(zippedData, function (d) { return d.value; });
      if (zippedData.length) {
        var strategy = zippedData[0].strategy;
        if (strategy.id) {
          this.$el.attr('data-strategy', strategy.id);
        } else {
          this.$el.removeAttr('data-strategy');
        }
        this._renderHeader(unzippedData);
        this._renderFooter(unzippedData);
        if (contentsHtml) {
          this._renderContents(contentsHtml);
          this._fitToBottom();
          this._fitToRight();
          this._activateIndexedItem();
        }
        this._setScroll();
      } else if (this.noResultsMessage) {
        this._renderNoResultsMessage(unzippedData);
      } else if (this.shown) {
        this.deactivate();
      }
    },

    setPosition: function (pos) {
      // Make the dropdown fixed if the input is also fixed
      // This can't be done during init, as textcomplete may be used on multiple elements on the same page
      // Because the same dropdown is reused behind the scenes, we need to recheck every time the dropdown is showed
      var position = 'absolute';
      // Check if input or one of its parents has positioning we need to care about
      this.$inputEl.add(this.$inputEl.parents()).each(function() {
        if($(this).css('position') === 'absolute') // The element has absolute positioning, so it's all OK
          return false;
        if($(this).css('position') === 'fixed') {
          pos.top -= $window.scrollTop();
          pos.left -= $window.scrollLeft();
          position = 'fixed';
          return false;
        }
      });
      this.$el.css(this._applyPlacement(pos));
      this.$el.css({ position: position }); // Update positioning

      return this;
    },

    clear: function () {
      this.$el.html('');
      this.data = [];
      this._index = 0;
      this._$header = this._$footer = this._$noResultsMessage = null;
    },

    activate: function () {
      if (!this.shown) {
        this.clear();
        this.$el.show();
        if (this.className) { this.$el.addClass(this.className); }
        this.completer.fire('textComplete:show');
        this.shown = true;
      }
      return this;
    },

    deactivate: function () {
      if (this.shown) {
        this.$el.hide();
        if (this.className) { this.$el.removeClass(this.className); }
        this.completer.fire('textComplete:hide');
        this.shown = false;
      }
      return this;
    },

    isUp: function (e) {
      return e.keyCode === 38 || (e.ctrlKey && e.keyCode === 80);  // UP, Ctrl-P
    },

    isDown: function (e) {
      return e.keyCode === 40 || (e.ctrlKey && e.keyCode === 78);  // DOWN, Ctrl-N
    },

    isEnter: function (e) {
      var modifiers = e.ctrlKey || e.altKey || e.metaKey || e.shiftKey;
      return !modifiers && (e.keyCode === 13 || e.keyCode === 9 || (this.option.completeOnSpace === true && e.keyCode === 32))  // ENTER, TAB
    },

    isPageup: function (e) {
      return e.keyCode === 33;  // PAGEUP
    },

    isPagedown: function (e) {
      return e.keyCode === 34;  // PAGEDOWN
    },

    isEscape: function (e) {
      return e.keyCode === 27;  // ESCAPE
    },

    // Private properties
    // ------------------

    _data:    null,  // Currently shown zipped data.
    _index:   null,
    _$header: null,
    _$noResultsMessage: null,
    _$footer: null,

    // Private methods
    // ---------------

    _bindEvents: function () {
      this.$el.on('mousedown.' + this.id, '.textcomplete-item', $.proxy(this._onClick, this));
      this.$el.on('touchstart.' + this.id, '.textcomplete-item', $.proxy(this._onClick, this));
      this.$el.on('mouseover.' + this.id, '.textcomplete-item', $.proxy(this._onMouseover, this));
      this.$inputEl.on('keydown.' + this.id, $.proxy(this._onKeydown, this));
    },

    _onClick: function (e) {
      var $el = $(e.target);
      e.preventDefault();
      e.originalEvent.keepTextCompleteDropdown = this.id;
      if (!$el.hasClass('textcomplete-item')) {
        $el = $el.closest('.textcomplete-item');
      }
      var datum = this.data[parseInt($el.data('index'), 10)];
      this.completer.select(datum.value, datum.strategy, e);
      var self = this;
      // Deactive at next tick to allow other event handlers to know whether
      // the dropdown has been shown or not.
      setTimeout(function () {
        self.deactivate();
        if (e.type === 'touchstart') {
          self.$inputEl.focus();
        }
      }, 0);
    },

    // Activate hovered item.
    _onMouseover: function (e) {
      var $el = $(e.target);
      e.preventDefault();
      if (!$el.hasClass('textcomplete-item')) {
        $el = $el.closest('.textcomplete-item');
      }
      this._index = parseInt($el.data('index'), 10);
      this._activateIndexedItem();
    },

    _onKeydown: function (e) {
      if (!this.shown) { return; }

      var command;

      if ($.isFunction(this.option.onKeydown)) {
        command = this.option.onKeydown(e, commands);
      }

      if (command == null) {
        command = this._defaultKeydown(e);
      }

      switch (command) {
        case commands.KEY_UP:
          e.preventDefault();
          this._up();
          break;
        case commands.KEY_DOWN:
          e.preventDefault();
          this._down();
          break;
        case commands.KEY_ENTER:
          e.preventDefault();
          this._enter(e);
          break;
        case commands.KEY_PAGEUP:
          e.preventDefault();
          this._pageup();
          break;
        case commands.KEY_PAGEDOWN:
          e.preventDefault();
          this._pagedown();
          break;
        case commands.KEY_ESCAPE:
          e.preventDefault();
          this.deactivate();
          break;
      }
    },

    _defaultKeydown: function (e) {
      if (this.isUp(e)) {
        return commands.KEY_UP;
      } else if (this.isDown(e)) {
        return commands.KEY_DOWN;
      } else if (this.isEnter(e)) {
        return commands.KEY_ENTER;
      } else if (this.isPageup(e)) {
        return commands.KEY_PAGEUP;
      } else if (this.isPagedown(e)) {
        return commands.KEY_PAGEDOWN;
      } else if (this.isEscape(e)) {
        return commands.KEY_ESCAPE;
      }
    },

    _up: function () {
      if (this._index === 0) {
        this._index = this.data.length - 1;
      } else {
        this._index -= 1;
      }
      this._activateIndexedItem();
      this._setScroll();
    },

    _down: function () {
      if (this._index === this.data.length - 1) {
        this._index = 0;
      } else {
        this._index += 1;
      }
      this._activateIndexedItem();
      this._setScroll();
    },

    _enter: function (e) {
      var datum = this.data[parseInt(this._getActiveElement().data('index'), 10)];
      this.completer.select(datum.value, datum.strategy, e);
      this.deactivate();
    },

    _pageup: function () {
      var target = 0;
      var threshold = this._getActiveElement().position().top - this.$el.innerHeight();
      this.$el.children().each(function (i) {
        if ($(this).position().top + $(this).outerHeight() > threshold) {
          target = i;
          return false;
        }
      });
      this._index = target;
      this._activateIndexedItem();
      this._setScroll();
    },

    _pagedown: function () {
      var target = this.data.length - 1;
      var threshold = this._getActiveElement().position().top + this.$el.innerHeight();
      this.$el.children().each(function (i) {
        if ($(this).position().top > threshold) {
          target = i;
          return false
        }
      });
      this._index = target;
      this._activateIndexedItem();
      this._setScroll();
    },

    _activateIndexedItem: function () {
      this.$el.find('.textcomplete-item.active').removeClass('active');
      this._getActiveElement().addClass('active');
    },

    _getActiveElement: function () {
      return this.$el.children('.textcomplete-item:nth(' + this._index + ')');
    },

    _setScroll: function () {
      var $activeEl = this._getActiveElement();
      var itemTop = $activeEl.position().top;
      var itemHeight = $activeEl.outerHeight();
      var visibleHeight = this.$el.innerHeight();
      var visibleTop = this.$el.scrollTop();
      if (this._index === 0 || this._index == this.data.length - 1 || itemTop < 0) {
        this.$el.scrollTop(itemTop + visibleTop);
      } else if (itemTop + itemHeight > visibleHeight) {
        this.$el.scrollTop(itemTop + itemHeight + visibleTop - visibleHeight);
      }
    },

    _buildContents: function (zippedData) {
      var datum, i, index;
      var html = '';
      for (i = 0; i < zippedData.length; i++) {
        if (this.data.length === this.maxCount) break;
        datum = zippedData[i];
        if (include(this.data, datum)) { continue; }
        index = this.data.length;
        this.data.push(datum);
        html += '<li class="textcomplete-item" data-index="' + index + '"><a>';
        html +=   datum.strategy.template(datum.value, datum.term);
        html += '</a></li>';
      }
      return html;
    },

    _renderHeader: function (unzippedData) {
      if (this.header) {
        if (!this._$header) {
          this._$header = $('<li class="textcomplete-header"></li>').prependTo(this.$el);
        }
        var html = $.isFunction(this.header) ? this.header(unzippedData) : this.header;
        this._$header.html(html);
      }
    },

    _renderFooter: function (unzippedData) {
      if (this.footer) {
        if (!this._$footer) {
          this._$footer = $('<li class="textcomplete-footer"></li>').appendTo(this.$el);
        }
        var html = $.isFunction(this.footer) ? this.footer(unzippedData) : this.footer;
        this._$footer.html(html);
      }
    },

    _renderNoResultsMessage: function (unzippedData) {
      if (this.noResultsMessage) {
        if (!this._$noResultsMessage) {
          this._$noResultsMessage = $('<li class="textcomplete-no-results-message"></li>').appendTo(this.$el);
        }
        var html = $.isFunction(this.noResultsMessage) ? this.noResultsMessage(unzippedData) : this.noResultsMessage;
        this._$noResultsMessage.html(html);
      }
    },

    _renderContents: function (html) {
      if (this._$footer) {
        this._$footer.before(html);
      } else {
        this.$el.append(html);
      }
    },

    _fitToBottom: function() {
      var windowScrollBottom = $window.scrollTop() + $window.height();
      var height = this.$el.height();
      if ((this.$el.position().top + height) > windowScrollBottom) {
        // only do this if we are not in an iframe
        if (!this.completer.$iframe) {
          this.$el.offset({top: windowScrollBottom - height});
        }
      }
    },

    _fitToRight: function() {
      // We don't know how wide our content is until the browser positions us, and at that point it clips us
      // to the document width so we don't know if we would have overrun it. As a heuristic to avoid that clipping
      // (which makes our elements wrap onto the next line and corrupt the next item), if we're close to the right
      // edge, move left. We don't know how far to move left, so just keep nudging a bit.
      var tolerance = this.option.rightEdgeOffset; // pixels. Make wider than vertical scrollbar because we might not be able to use that space.
      var lastOffset = this.$el.offset().left, offset;
      var width = this.$el.width();
      var maxLeft = $window.width() - tolerance;
      while (lastOffset + width > maxLeft) {
        this.$el.offset({left: lastOffset - tolerance});
        offset = this.$el.offset().left;
        if (offset >= lastOffset) { break; }
        lastOffset = offset;
      }
    },

    _applyPlacement: function (position) {
      // If the 'placement' option set to 'top', move the position above the element.
      if (this.placement.indexOf('top') !== -1) {
        // Overwrite the position object to set the 'bottom' property instead of the top.
        position = {
          top: 'auto',
          bottom: this.$el.parent().height() - position.top + position.lineHeight,
          left: position.left
        };
      } else {
        position.bottom = 'auto';
        delete position.lineHeight;
      }
      if (this.placement.indexOf('absleft') !== -1) {
        position.left = 0;
      } else if (this.placement.indexOf('absright') !== -1) {
        position.right = 0;
        position.left = 'auto';
      }
      return position;
    }
  });

  $.fn.textcomplete.Dropdown = Dropdown;
  $.extend($.fn.textcomplete, commands);
}(jQuery);

+function ($) {
  'use strict';

  // Memoize a search function.
  var memoize = function (func) {
    var memo = {};
    return function (term, callback) {
      if (memo[term]) {
        callback(memo[term]);
      } else {
        func.call(this, term, function (data) {
          memo[term] = (memo[term] || []).concat(data);
          callback.apply(null, arguments);
        });
      }
    };
  };

  function Strategy(options) {
    $.extend(this, options);
    if (this.cache) { this.search = memoize(this.search); }
  }

  Strategy.parse = function (strategiesArray, params) {
    return $.map(strategiesArray, function (strategy) {
      var strategyObj = new Strategy(strategy);
      strategyObj.el = params.el;
      strategyObj.$el = params.$el;
      return strategyObj;
    });
  };

  $.extend(Strategy.prototype, {
    // Public properties
    // -----------------

    // Required
    match:      null,
    replace:    null,
    search:     null,

    // Optional
    id:         null,
    cache:      false,
    context:    function () { return true; },
    index:      2,
    template:   function (obj) { return obj; },
    idProperty: null
  });

  $.fn.textcomplete.Strategy = Strategy;

}(jQuery);

+function ($) {
  'use strict';

  var now = Date.now || function () { return new Date().getTime(); };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // `wait` msec.
  //
  // This utility function was originally implemented at Underscore.js.
  var debounce = function (func, wait) {
    var timeout, args, context, timestamp, result;
    var later = function () {
      var last = now() - timestamp;
      if (last < wait) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        result = func.apply(context, args);
        context = args = null;
      }
    };

    return function () {
      context = this;
      args = arguments;
      timestamp = now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
      }
      return result;
    };
  };

  function Adapter () {}

  $.extend(Adapter.prototype, {
    // Public properties
    // -----------------

    id:        null, // Identity.
    completer: null, // Completer object which creates it.
    el:        null, // Textarea element.
    $el:       null, // jQuery object of the textarea.
    option:    null,

    // Public methods
    // --------------

    initialize: function (element, completer, option) {
      this.el        = element;
      this.$el       = $(element);
      this.id        = completer.id + this.constructor.name;
      this.completer = completer;
      this.option    = option;

      if (this.option.debounce) {
        this._onKeyup = debounce(this._onKeyup, this.option.debounce);
      }

      this._bindEvents();
    },

    destroy: function () {
      this.$el.off('.' + this.id); // Remove all event handlers.
      this.$el = this.el = this.completer = null;
    },

    // Update the element with the given value and strategy.
    //
    // value    - The selected object. It is one of the item of the array
    //            which was callbacked from the search function.
    // strategy - The Strategy associated with the selected value.
    select: function (/* value, strategy */) {
      throw new Error('Not implemented');
    },

    // Returns the caret's relative coordinates from body's left top corner.
    getCaretPosition: function () {
      var position = this._getCaretRelativePosition();
      var offset = this.$el.offset();

      // Calculate the left top corner of `this.option.appendTo` element.
      var $parent = this.option.appendTo;
      if ($parent) {
         if (!($parent instanceof $)) { $parent = $($parent); }
         var parentOffset = $parent.offsetParent().offset();
         offset.top -= parentOffset.top;
         offset.left -= parentOffset.left;
      }

      position.top += offset.top;
      position.left += offset.left;
      return position;
    },

    // Focus on the element.
    focus: function () {
      this.$el.focus();
    },

    // Private methods
    // ---------------

    _bindEvents: function () {
      this.$el.on('keyup.' + this.id, $.proxy(this._onKeyup, this));
    },

    _onKeyup: function (e) {
      if (this._skipSearch(e)) { return; }
      this.completer.trigger(this.getTextFromHeadToCaret(), true);
    },

    // Suppress searching if it returns true.
    _skipSearch: function (clickEvent) {
      switch (clickEvent.keyCode) {
        case 9:  // TAB
        case 13: // ENTER
        case 16: // SHIFT
        case 17: // CTRL
        case 18: // ALT
        case 33: // PAGEUP
        case 34: // PAGEDOWN
        case 40: // DOWN
        case 38: // UP
        case 27: // ESC
          return true;
      }
      if (clickEvent.ctrlKey) switch (clickEvent.keyCode) {
        case 78: // Ctrl-N
        case 80: // Ctrl-P
          return true;
      }
    }
  });

  $.fn.textcomplete.Adapter = Adapter;
}(jQuery);

+function ($) {
  'use strict';

  // Textarea adapter
  // ================
  //
  // Managing a textarea. It doesn't know a Dropdown.
  function Textarea(element, completer, option) {
    this.initialize(element, completer, option);
  }

  $.extend(Textarea.prototype, $.fn.textcomplete.Adapter.prototype, {
    // Public methods
    // --------------

    // Update the textarea with the given value and strategy.
    select: function (value, strategy, e) {
      var pre = this.getTextFromHeadToCaret();
      var post = this.el.value.substring(this.el.selectionEnd);
      var newSubstr = strategy.replace(value, e);
      var regExp;
      if (typeof newSubstr !== 'undefined') {
        if ($.isArray(newSubstr)) {
          post = newSubstr[1] + post;
          newSubstr = newSubstr[0];
        }
        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;
        pre = pre.replace(regExp, newSubstr);
        this.$el.val(pre + post);
        this.el.selectionStart = this.el.selectionEnd = pre.length;
      }
    },

    getTextFromHeadToCaret: function () {
      return this.el.value.substring(0, this.el.selectionEnd);
    },

    // Private methods
    // ---------------

    _getCaretRelativePosition: function () {
      var p = $.fn.textcomplete.getCaretCoordinates(this.el, this.el.selectionStart);
      return {
        top: p.top + this._calculateLineHeight() - this.$el.scrollTop(),
        left: p.left - this.$el.scrollLeft(),
        lineHeight: this._calculateLineHeight()
      };
    },

    _calculateLineHeight: function () {
      var lineHeight = parseInt(this.$el.css('line-height'), 10);
      if (isNaN(lineHeight)) {
        // http://stackoverflow.com/a/4515470/1297336
        var parentNode = this.el.parentNode;
        var temp = document.createElement(this.el.nodeName);
        var style = this.el.style;
        temp.setAttribute(
          'style',
          'margin:0px;padding:0px;font-family:' + style.fontFamily + ';font-size:' + style.fontSize
        );
        temp.innerHTML = 'test';
        parentNode.appendChild(temp);
        lineHeight = temp.clientHeight;
        parentNode.removeChild(temp);
      }
      return lineHeight;
    }
  });

  $.fn.textcomplete.Textarea = Textarea;
}(jQuery);

+function ($) {
  'use strict';

  var sentinelChar = '吶';

  function IETextarea(element, completer, option) {
    this.initialize(element, completer, option);
    $('<span>' + sentinelChar + '</span>').css({
      position: 'absolute',
      top: -9999,
      left: -9999
    }).insertBefore(element);
  }

  $.extend(IETextarea.prototype, $.fn.textcomplete.Textarea.prototype, {
    // Public methods
    // --------------

    select: function (value, strategy, e) {
      var pre = this.getTextFromHeadToCaret();
      var post = this.el.value.substring(pre.length);
      var newSubstr = strategy.replace(value, e);
      var regExp;
      if (typeof newSubstr !== 'undefined') {
        if ($.isArray(newSubstr)) {
          post = newSubstr[1] + post;
          newSubstr = newSubstr[0];
        }
        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;
        pre = pre.replace(regExp, newSubstr);
        this.$el.val(pre + post);
        this.el.focus();
        var range = this.el.createTextRange();
        range.collapse(true);
        range.moveEnd('character', pre.length);
        range.moveStart('character', pre.length);
        range.select();
      }
    },

    getTextFromHeadToCaret: function () {
      this.el.focus();
      var range = document.selection.createRange();
      range.moveStart('character', -this.el.value.length);
      var arr = range.text.split(sentinelChar)
      return arr.length === 1 ? arr[0] : arr[1];
    }
  });

  $.fn.textcomplete.IETextarea = IETextarea;
}(jQuery);

// NOTE: TextComplete plugin has contenteditable support but it does not work
//       fine especially on old IEs.
//       Any pull requests are REALLY welcome.

+function ($) {
  'use strict';

  // ContentEditable adapter
  // =======================
  //
  // Adapter for contenteditable elements.
  function ContentEditable (element, completer, option) {
    this.initialize(element, completer, option);
  }

  $.extend(ContentEditable.prototype, $.fn.textcomplete.Adapter.prototype, {
    // Public methods
    // --------------

    // Update the content with the given value and strategy.
    // When an dropdown item is selected, it is executed.
    select: function (value, strategy, e) {
      var pre = this.getTextFromHeadToCaret();
      // use ownerDocument instead of window to support iframes
      var sel = this.el.ownerDocument.getSelection();
      
      var range = sel.getRangeAt(0);
      var selection = range.cloneRange();
      selection.selectNodeContents(range.startContainer);
      var content = selection.toString();
      var post = content.substring(range.startOffset);
      var newSubstr = strategy.replace(value, e);
      var regExp;
      if (typeof newSubstr !== 'undefined') {
        if ($.isArray(newSubstr)) {
          post = newSubstr[1] + post;
          newSubstr = newSubstr[0];
        }
        regExp = $.isFunction(strategy.match) ? strategy.match(pre) : strategy.match;
        pre = pre.replace(regExp, newSubstr)
            .replace(/ $/, "&nbsp"); // &nbsp necessary at least for CKeditor to not eat spaces
        range.selectNodeContents(range.startContainer);
        range.deleteContents();
        
        // create temporary elements
        var preWrapper = this.el.ownerDocument.createElement("div");
        preWrapper.innerHTML = pre;
        var postWrapper = this.el.ownerDocument.createElement("div");
        postWrapper.innerHTML = post;
        
        // create the fragment thats inserted
        var fragment = this.el.ownerDocument.createDocumentFragment();
        var childNode;
        var lastOfPre;
        while (childNode = preWrapper.firstChild) {
        	lastOfPre = fragment.appendChild(childNode);
        }
        while (childNode = postWrapper.firstChild) {
        	fragment.appendChild(childNode);
        }
        
        // insert the fragment & jump behind the last node in "pre"
        range.insertNode(fragment);
        range.setStartAfter(lastOfPre);
        
        range.collapse(true);
        sel.removeAllRanges();
        sel.addRange(range);
      }
    },

    // Private methods
    // ---------------

    // Returns the caret's relative position from the contenteditable's
    // left top corner.
    //
    // Examples
    //
    //   this._getCaretRelativePosition()
    //   //=> { top: 18, left: 200, lineHeight: 16 }
    //
    // Dropdown's position will be decided using the result.
    _getCaretRelativePosition: function () {
      var range = this.el.ownerDocument.getSelection().getRangeAt(0).cloneRange();
      var wrapperNode = range.endContainer.parentNode;
      var node = this.el.ownerDocument.createElement('span');
      range.insertNode(node);
      range.selectNodeContents(node);
      range.deleteContents();
      setTimeout(function() { wrapperNode.normalize(); }, 0);
      var $node = $(node);
      var position = $node.offset();
      position.left -= this.$el.offset().left;
      position.top += $node.height() - this.$el.offset().top;
      position.lineHeight = $node.height();
      
      // special positioning logic for iframes
      // this is typically used for contenteditables such as tinymce or ckeditor
      if (this.completer.$iframe) {
        var iframePosition = this.completer.$iframe.offset();
        position.top += iframePosition.top;
        position.left += iframePosition.left;
        // We need to get the scrollTop of the html-element inside the iframe and not of the body-element,
        // because on IE the scrollTop of the body-element (this.$el) is always zero.
        position.top -= $(this.completer.$iframe[0].contentWindow.document).scrollTop();
      }
      
      $node.remove();
      return position;
    },

    // Returns the string between the first character and the caret.
    // Completer will be triggered with the result for start autocompleting.
    //
    // Example
    //
    //   // Suppose the html is '<b>hello</b> wor|ld' and | is the caret.
    //   this.getTextFromHeadToCaret()
    //   // => ' wor'  // not '<b>hello</b> wor'
    getTextFromHeadToCaret: function () {
      var range = this.el.ownerDocument.getSelection().getRangeAt(0);
      var selection = range.cloneRange();
      selection.selectNodeContents(range.startContainer);
      return selection.toString().substring(0, range.startOffset);
    }
  });

  $.fn.textcomplete.ContentEditable = ContentEditable;
}(jQuery);

// NOTE: TextComplete plugin has contenteditable support but it does not work
//       fine especially on old IEs.
//       Any pull requests are REALLY welcome.

+function ($) {
  'use strict';

  // CKEditor adapter
  // =======================
  //
  // Adapter for CKEditor, based on contenteditable elements.
  function CKEditor (element, completer, option) {
    this.initialize(element, completer, option);
  }

  $.extend(CKEditor.prototype, $.fn.textcomplete.ContentEditable.prototype, {
    _bindEvents: function () {
      var $this = this;
      this.option.ckeditor_instance.on('key', function(event) {
        var domEvent = event.data;
        $this._onKeyup(domEvent);
        if ($this.completer.dropdown.shown && $this._skipSearch(domEvent)) {
          return false;
        }
      }, null, null, 1); // 1 = Priority = Important!
      // we actually also need the native event, as the CKEditor one is happening to late
      this.$el.on('keyup.' + this.id, $.proxy(this._onKeyup, this));
    },
});

  $.fn.textcomplete.CKEditor = CKEditor;
}(jQuery);

// The MIT License (MIT)
// 
// Copyright (c) 2015 Jonathan Ong me@jongleberry.com
// 
// Permission is hereby granted, free of charge, to any person obtaining a copy of this software and
// associated documentation files (the "Software"), to deal in the Software without restriction,
// including without limitation the rights to use, copy, modify, merge, publish, distribute,
// sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
// 
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT
// NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
// NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
//
// https://github.com/component/textarea-caret-position

(function ($) {

// The properties that we copy into a mirrored div.
// Note that some browsers, such as Firefox,
// do not concatenate properties, i.e. padding-top, bottom etc. -> padding,
// so we have to do every single property specifically.
var properties = [
  'direction',  // RTL support
  'boxSizing',
  'width',  // on Chrome and IE, exclude the scrollbar, so the mirror div wraps exactly as the textarea does
  'height',
  'overflowX',
  'overflowY',  // copy the scrollbar for IE

  'borderTopWidth',
  'borderRightWidth',
  'borderBottomWidth',
  'borderLeftWidth',
  'borderStyle',

  'paddingTop',
  'paddingRight',
  'paddingBottom',
  'paddingLeft',

  // https://developer.mozilla.org/en-US/docs/Web/CSS/font
  'fontStyle',
  'fontVariant',
  'fontWeight',
  'fontStretch',
  'fontSize',
  'fontSizeAdjust',
  'lineHeight',
  'fontFamily',

  'textAlign',
  'textTransform',
  'textIndent',
  'textDecoration',  // might not make a difference, but better be safe

  'letterSpacing',
  'wordSpacing',

  'tabSize',
  'MozTabSize'

];

var isBrowser = (typeof window !== 'undefined');
var isFirefox = (isBrowser && window.mozInnerScreenX != null);

function getCaretCoordinates(element, position, options) {
  if(!isBrowser) {
    throw new Error('textarea-caret-position#getCaretCoordinates should only be called in a browser');
  }

  var debug = options && options.debug || false;
  if (debug) {
    var el = document.querySelector('#input-textarea-caret-position-mirror-div');
    if ( el ) { el.parentNode.removeChild(el); }
  }

  // mirrored div
  var div = document.createElement('div');
  div.id = 'input-textarea-caret-position-mirror-div';
  document.body.appendChild(div);

  var style = div.style;
  var computed = window.getComputedStyle? getComputedStyle(element) : element.currentStyle;  // currentStyle for IE < 9

  // default textarea styles
  style.whiteSpace = 'pre-wrap';
  if (element.nodeName !== 'INPUT')
    style.wordWrap = 'break-word';  // only for textarea-s

  // position off-screen
  style.position = 'absolute';  // required to return coordinates properly
  if (!debug)
    style.visibility = 'hidden';  // not 'display: none' because we want rendering

  // transfer the element's properties to the div
  properties.forEach(function (prop) {
    style[prop] = computed[prop];
  });

  if (isFirefox) {
    // Firefox lies about the overflow property for textareas: https://bugzilla.mozilla.org/show_bug.cgi?id=984275
    if (element.scrollHeight > parseInt(computed.height))
      style.overflowY = 'scroll';
  } else {
    style.overflow = 'hidden';  // for Chrome to not render a scrollbar; IE keeps overflowY = 'scroll'
  }

  div.textContent = element.value.substring(0, position);
  // the second special handling for input type="text" vs textarea: spaces need to be replaced with non-breaking spaces - http://stackoverflow.com/a/13402035/1269037
  if (element.nodeName === 'INPUT')
    div.textContent = div.textContent.replace(/\s/g, '\u00a0');

  var span = document.createElement('span');
  // Wrapping must be replicated *exactly*, including when a long word gets
  // onto the next line, with whitespace at the end of the line before (#7).
  // The  *only* reliable way to do that is to copy the *entire* rest of the
  // textarea's content into the <span> created at the caret position.
  // for inputs, just '.' would be enough, but why bother?
  span.textContent = element.value.substring(position) || '.';  // || because a completely empty faux span doesn't render at all
  div.appendChild(span);

  var coordinates = {
    top: span.offsetTop + parseInt(computed['borderTopWidth']),
    left: span.offsetLeft + parseInt(computed['borderLeftWidth'])
  };

  if (debug) {
    span.style.backgroundColor = '#aaa';
  } else {
    document.body.removeChild(div);
  }

  return coordinates;
}

$.fn.textcomplete.getCaretCoordinates = getCaretCoordinates;

}(jQuery));

return jQuery;
}));


/***/ }),
/* 696 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('v-expansion-panel', {
    staticClass: "expansion-pl ext__form"
  }, _vm._l((_vm.formBuilder), function(item, index) {
    return _c('v-expansion-panel-content', {
      key: index,
      attrs: {
        "hide-actions": "",
        "value": "1"
      }
    }, [_c('div', {
      attrs: {
        "slot": "header"
      },
      slot: "header"
    }, [_c('div', {
      staticClass: "background-triangle-small"
    }, [_c('v-icon', {
      attrs: {
        "size": "18",
        "color": "white"
      }
    }, [_vm._v("star_rate")])], 1), _vm._v("\n      " + _vm._s(item.fieldLabel) + "\n      ")]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
      staticClass: "py-2 px-2"
    }, [_c('v-layout', {
      attrs: {
        "wrap": ""
      }
    }, [_c('v-flex', {
      attrs: {
        "xs12": ""
      }
    }, [(item.fieldType === 'textarea') ? _c('v-text-field', {
      attrs: {
        "id": item.fieldName,
        "value": item.value,
        "placeholder": item.placeholder,
        "multi-line": ""
      },
      on: {
        "input": function($event) {
          _vm.inputChangeValue(item)
        }
      }
    }) : _vm._e(), _vm._v(" "), (item.fieldType === 'string') ? _c('v-text-field', {
      attrs: {
        "id": item.fieldName,
        "value": item.value,
        "placeholder": item.placeholder
      },
      on: {
        "input": function($event) {
          _vm.inputChangeValue(item)
        }
      }
    }) : _vm._e(), _vm._v(" "), (item.fieldType === 'number') ? _c('v-text-field', {
      attrs: {
        "id": item.fieldName,
        "value": item.value,
        "placeholder": item.placeholder,
        "rules": [_vm.rulesValid.number]
      },
      on: {
        "input": function($event) {
          _vm.inputChangeValue(item)
        }
      }
    }) : _vm._e(), _vm._v(" "), (item.fieldType === 'date') ? _c('v-text-field', {
      attrs: {
        "id": item.fieldName,
        "value": item.value,
        "placeholder": item.placeholder,
        "readonly": "",
        "append-icon": "event"
      },
      nativeOn: {
        "click": function($event) {
          _vm.openDialogCustom(item, item.fieldName)
        }
      }
    }) : _vm._e()], 1)], 1)], 1), _vm._v(" "), _c('v-dialog', {
      attrs: {
        "width": "500"
      },
      model: {
        value: (_vm.dialog),
        callback: function($$v) {
          _vm.dialog = $$v
        },
        expression: "dialog"
      }
    }, [_c('v-date-picker', {
      attrs: {
        "full-width": "",
        "landscape": ""
      },
      model: {
        value: (_vm.date),
        callback: function($$v) {
          _vm.date = $$v
        },
        expression: "date"
      }
    }), _vm._v(" "), _c('v-card-actions', {
      staticStyle: {
        "background": "#fff"
      }
    }, [_c('v-spacer'), _vm._v(" "), _c('v-btn', {
      attrs: {
        "color": "primary",
        "flat": ""
      },
      on: {
        "click": _vm.pickDateCustom
      }
    }, [_vm._v("\n                Xác nhận\n            ")])], 1)], 1)], 1)], 1)
  }))
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-2df4b7d0", module.exports)
  }
}

/***/ }),
/* 697 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "taotailieuketqua",
    staticStyle: {
      "background-color": "white",
      "width": "100%"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" Kết quả xử lý\n        ")]), _vm._v(" "), _c('v-card', _vm._l((_vm.createFiles), function(item, index) {
    return _c('div', {
      key: item.partNo + 'cr',
      staticClass: "form_alpaca",
      staticStyle: {
        "position": "relative"
      }
    }, [_c('v-expansion-panel', {
      staticClass: "expaned__list__data"
    }, [_c('v-expansion-panel-content', {
      attrs: {
        "hide-actions": "",
        "value": false
      }
    }, [_c('div', {
      staticStyle: {
        "background-color": "#fff"
      },
      attrs: {
        "slot": "header"
      },
      on: {
        "click": function($event) {
          _vm.stateView = false
        }
      },
      slot: "header"
    }, [_c('div', {
      staticStyle: {
        "align-items": "center",
        "min-height": "38px",
        "background": "#fff",
        "padding-left": "15px"
      },
      style: ({
        width: _vm.checkStyle(item)
      })
    }, [_c('div', {
      staticClass: "mr-2",
      staticStyle: {
        "min-width": "18px",
        "display": "flex",
        "min-height": "38px"
      },
      on: {
        "click": function($event) {
          _vm.loadAlpcaForm(item)
        }
      }
    }, [_c('div', {
      staticClass: "header__tphs"
    }, [_c('span', {
      staticClass: "text-bold"
    }, [_vm._v(_vm._s(index + 1) + ".")]), _vm._v("  ")]), _vm._v(" "), _c('div', {
      staticClass: "header__tphs"
    }, [_vm._v("\n                        " + _vm._s(item.partName) + " "), (item.required) ? _c('span', {
      staticStyle: {
        "color": "red"
      }
    }, [_vm._v(" (*)")]) : _vm._e(), _vm._v("\n                          \n                        "), (item.eForm && item.daKhai) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('i', {
      staticClass: "fa fa-file-text-o",
      staticStyle: {
        "color": "#0d71bb",
        "font-size": "13px"
      },
      attrs: {
        "slot": "activator",
        "aria-hidden": "true"
      },
      slot: "activator"
    }), _vm._v(" "), _c('span', [_vm._v("Biểu mẫu trực tuyến (Đã khai)")])]) : _vm._e(), _vm._v(" "), (item.eForm && !item.daKhai) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('i', {
      staticClass: "fa fa-file-o",
      staticStyle: {
        "color": "#0d71bb",
        "font-size": "13px"
      },
      attrs: {
        "slot": "activator"
      },
      slot: "activator"
    }), _vm._v(" "), _c('span', [_vm._v("Biểu mẫu trực tuyến (Chưa khai)")])]) : _vm._e()], 1)]), _vm._v(" "), _vm._l((_vm.dossierFilesItems), function(itemFileView, index) {
      return (item.partNo + _vm.id === itemFileView.dossierPartNo + _vm.id && !itemFileView.eForm) ? _c('div', {
        key: index + 'cr'
      }, [_c('div', {
        staticStyle: {
          "width": "calc(100% - 370px)",
          "display": "flex",
          "align-items": "center",
          "min-height": "38px",
          "background": "#fff",
          "padding-left": "15px",
          "font-size": "12px"
        }
      }, [_c('span', {
        staticClass: "ml-3",
        staticStyle: {
          "cursor": "pointer"
        },
        on: {
          "click": function($event) {
            $event.stopPropagation();
            _vm.viewFile2(itemFileView)
          }
        }
      }, [(itemFileView.eForm) ? _c('v-icon', [_vm._v("border_color")]) : _c('v-icon', [_vm._v("attach_file")]), _vm._v("\n                      " + _vm._s(itemFileView.displayName) + " - \n                      "), _c('i', [_vm._v(_vm._s(itemFileView.modifiedDate))])], 1), _vm._v(" "), _c('v-btn', {
        staticClass: "mx-0 my-0",
        attrs: {
          "icon": "",
          "ripple": ""
        },
        on: {
          "click": function($event) {
            $event.stopPropagation();
            _vm.deleteSingleFile(itemFileView, index)
          }
        }
      }, [_c('v-icon', {
        staticStyle: {
          "color": "red"
        }
      }, [_vm._v("delete_outline")])], 1)], 1)]) : _vm._e()
    })], 2)]), _vm._v(" "), (item.eForm) ? _c('v-card', [_c('v-card-text', {
      staticStyle: {
        "background-color": "rgba(244, 247, 213, 0.19)"
      }
    }, [_c('v-layout', {
      attrs: {
        "wrap": ""
      }
    }, [_c('v-flex', {
      staticClass: "text-xs-right",
      attrs: {
        "xs12": ""
      }
    }, [(item.eForm) ? _c('v-btn', {
      attrs: {
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.saveAlpacaForm(item, index)
        }
      }
    }, [_vm._v("Lưu lại")]) : _vm._e(), _vm._v(" "), (item.daKhai && item.eForm) ? _c('v-btn', {
      attrs: {
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.deleteSingleFileEform(item, index)
        }
      }
    }, [_vm._v("Xóa")]) : _vm._e(), _vm._v(" "), (item.daKhai && item.eForm) ? _c('v-btn', {
      attrs: {
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.previewFileEfom(item, index)
        }
      }
    }, [_vm._v("In")]) : _vm._e(), _vm._v(" "), _c('div', {
      attrs: {
        "id": 'formAlpaca' + item.partNo + _vm.id
      }
    })], 1)], 1)], 1)], 1) : _vm._e()], 1)], 1), _vm._v(" "), _c('div', {
      staticClass: "absolute__btn group__thanh_phan pr-3 mr-1"
    }, [(_vm.loading) ? _c('content-placeholders', {
      staticClass: "mt-1"
    }, [_c('content-placeholders-text', {
      attrs: {
        "lines": 1
      }
    })], 1) : _c('v-layout', {
      attrs: {
        "row": "",
        "wrap": ""
      }
    }, [_c('v-flex', {
      staticStyle: {
        "width": "50px"
      }
    }, [_c('input', {
      staticStyle: {
        "display": "none"
      },
      attrs: {
        "type": "file",
        "id": 'file' + item.partNo
      },
      on: {
        "change": function($event) {
          _vm.onUploadSingleFile($event, item)
        }
      }
    }), _vm._v(" "), (_vm.progressUploadPart + _vm.id === item.partNo + _vm.id) ? _c('v-progress-circular', {
      attrs: {
        "width": 2,
        "size": 25,
        "color": "green",
        "indeterminate": ""
      }
    }) : (_vm.progressUploadPart + _vm.id !== item.partNo + _vm.id) ? _c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-btn', {
      staticClass: "mx-0 my-0",
      attrs: {
        "slot": "activator",
        "icon": ""
      },
      on: {
        "click": function($event) {
          _vm.pickFile(item)
        }
      },
      slot: "activator"
    }, [_c('v-badge', [_c('v-icon', {
      attrs: {
        "size": "16",
        "color": "primary"
      }
    }, [_vm._v("cloud_upload")])], 1)], 1), _vm._v(" "), _c('span', [_vm._v("Tải file lên")])], 1) : _vm._e()], 1)], 1)], 1)], 1)
  })), _vm._v(" "), _c('v-dialog', {
    staticStyle: {
      "overflow": "hidden"
    },
    attrs: {
      "max-width": "900",
      "transition": "fade-transition"
    },
    model: {
      value: (_vm.dialogPDF),
      callback: function($$v) {
        _vm.dialogPDF = $$v
      },
      expression: "dialogPDF"
    }
  }, [_c('v-card', [_c('v-card-title', {
    staticClass: "headline"
  }, [_vm._v("File đính kèm")]), _vm._v(" "), _c('v-btn', {
    staticClass: "mx-0 my-0 absolute__btn_panel mr-2",
    attrs: {
      "icon": "",
      "dark": ""
    },
    nativeOn: {
      "click": function($event) {
        _vm.dialogPDF = false
      }
    }
  }, [_c('v-icon', [_vm._v("clear")])], 1), _vm._v(" "), (_vm.dialogPDFLoading) ? _c('div', {
    staticStyle: {
      "min-height": "600px",
      "text-align": "center",
      "margin": "auto",
      "padding": "25%"
    }
  }, [_c('v-progress-circular', {
    attrs: {
      "size": 100,
      "width": 1,
      "color": "primary",
      "indeterminate": ""
    }
  })], 1) : _vm._e(), _vm._v(" "), _c('iframe', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.dialogPDFLoading),
      expression: "!dialogPDFLoading"
    }],
    staticStyle: {
      "overflow": "auto",
      "min-height": "600px"
    },
    attrs: {
      "id": 'dialogPDFPreview' + _vm.id,
      "src": "",
      "type": "application/pdf",
      "width": "100%",
      "height": "100%",
      "frameborder": "0"
    }
  })], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-5b77eb43", module.exports)
  }
}

/***/ }),
/* 698 */,
/* 699 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "comment-temp"
  }, [_c('div', [_c('v-expansion-panel', {
    staticClass: "expansion-pl-transparent"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": true
    }
  }, [_c('v-card', {
    staticClass: "comments__container"
  }, [_c('v-card-text', {
    staticClass: "pl-4"
  }, [_c('div', {
    attrs: {
      "id": "comments-container-el"
    }
  })])], 1)], 1)], 1)], 1)])
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-c8f36406", module.exports)
  }
}

/***/ }),
/* 700 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "phancong",
    staticStyle: {
      "background-color": "white",
      "width": "100%"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v("Duyệt hồ sơ\n      ")]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
    staticClass: "px-0 py-0"
  }, [_c('v-tabs', {
    staticClass: "mb-4",
    attrs: {
      "icons-and-text": ""
    },
    model: {
      value: (_vm.tabActive),
      callback: function($$v) {
        _vm.tabActive = $$v
      },
      expression: "tabActive"
    }
  }, [_c('v-tabs-slider', {
    attrs: {
      "color": "primary"
    }
  }), _vm._v(" "), _c('v-tab', {
    key: 1,
    attrs: {
      "href": "#tabs-1"
    },
    on: {
      "click": _vm.changeActive
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [_vm._v("Ký kết quả hồ sơ")])], 1), _vm._v(" "), _c('v-tab', {
    key: 2,
    attrs: {
      "href": "#tabs-3"
    },
    on: {
      "click": _vm.changeActive
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [_vm._v("Không ký duyệt")])], 1), _vm._v(" "), _c('v-tab', {
    key: 3,
    attrs: {
      "href": "#tabs-4"
    },
    on: {
      "click": _vm.changeActive
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [_vm._v("Yêu cầu trình lại")])], 1), _vm._v(" "), _c('v-tabs-items', {
    staticClass: "px-3 py-3"
  }, [_c('v-tab-item', {
    key: 1,
    attrs: {
      "id": "tabs-1",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, [_c('v-checkbox', {
    attrs: {
      "label": "Sử dụng chữ ký số"
    },
    model: {
      value: (_vm.activeKS),
      callback: function($$v) {
        _vm.activeKS = $$v
      },
      expression: "activeKS"
    }
  })], 1), _vm._v(" "), _c('v-tab-item', {
    key: 2,
    attrs: {
      "id": "tabs-3",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, [_vm._v("\n                Lý do:\n                "), _c('v-text-field', {
    staticClass: "pt-2",
    attrs: {
      "placeholder": "Lý do không ký hồ sơ",
      "textarea": "",
      "rows": 2
    },
    model: {
      value: (_vm.noteReason),
      callback: function($$v) {
        _vm.noteReason = $$v
      },
      expression: "noteReason"
    }
  })], 1), _vm._v(" "), _c('v-tab-item', {
    key: 3,
    attrs: {
      "id": "tabs-4",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, [_c('p', {
    staticClass: "mb-2"
  }, [_vm._v("Trình lại: "), _c('span', {
    staticClass: "text-bold"
  }, [_vm._v(_vm._s(_vm.detailDossier['govAgencyName']))])]), _vm._v("\n                Lý do:\n                "), _c('v-text-field', {
    staticClass: "pt-2",
    attrs: {
      "placeholder": "Lý do trình lại hồ sơ",
      "textarea": "",
      "rows": 2
    },
    model: {
      value: (_vm.noteReason),
      callback: function($$v) {
        _vm.noteReason = $$v
      },
      expression: "noteReason"
    }
  })], 1)], 1)], 1)], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-f7571a70", module.exports)
  }
}

/***/ }),
/* 701 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(jQuery, module) {/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_create__ = __webpack_require__(708);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_create___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_create__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__ = __webpack_require__(517);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_typeof__ = __webpack_require__(645);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_typeof___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_typeof__);





(function (factory) {
	if (typeof define === 'function' && __webpack_require__(246)) {
		define(['jquery'], factory);
	} else if (( false ? 'undefined' : __WEBPACK_IMPORTED_MODULE_2_babel_runtime_helpers_typeof___default()(module)) === 'object' && module.exports) {
		module.exports = function (root, jQuery) {
			if (jQuery === undefined) {
				if (typeof window !== 'undefined') {
					jQuery = __webpack_require__(36);
				} else {
					jQuery = __webpack_require__(36)(root);
				}
			}
			factory(jQuery);
			return jQuery;
		};
	} else {
		factory(jQuery);
	}
})(function ($) {

	var Comments = {
		$el: null,
		commentsById: {},
		usersById: {},
		dataFetched: false,
		currentSortKey: '',
		options: {},
		events: {
			'click': 'closeDropdowns',

			'keydown [contenteditable]': 'saveOnKeydown',

			'focus [contenteditable]': 'saveEditableContent',
			'keyup [contenteditable]': 'checkEditableContentForChange',
			'paste [contenteditable]': 'checkEditableContentForChange',
			'input [contenteditable]': 'checkEditableContentForChange',
			'blur [contenteditable]': 'checkEditableContentForChange',

			'click .navigation li[data-sort-key]': 'navigationElementClicked',
			'click .navigation li.title': 'toggleNavigationDropdown',

			'click .commenting-field.main .textarea': 'showMainCommentingField',
			'click .commenting-field.main .close': 'hideMainCommentingField',

			'click .commenting-field .textarea': 'increaseTextareaHeight',
			'change .commenting-field .textarea': 'increaseTextareaHeight textareaContentChanged',
			'click .commenting-field:not(.main) .close': 'removeCommentingField',

			'click .commenting-field .send.enabled': 'postComment',
			'click .commenting-field .update.enabled': 'putComment',
			'click .commenting-field .delete.enabled': 'deleteComment',
			'change .commenting-field .upload.enabled input[type="file"]': 'fileInputChanged',

			'click li.comment button.upvote': 'upvoteComment',
			'click li.comment button.delete.enabled': 'deleteComment',
			'click li.comment .hashtag': 'hashtagClicked',
			'click li.comment .ping': 'pingClicked',

			'click li.comment ul.child-comments .toggle-all': 'toggleReplies',
			'click li.comment button.reply': 'replyButtonClicked',
			'click li.comment button.edit': 'editButtonClicked',

			'dragenter': 'showDroppableOverlay',
			'dragenter .droppable-overlay': 'handleDragEnter',
			'dragleave .droppable-overlay': 'handleDragLeaveForOverlay',
			'dragenter .droppable-overlay .droppable': 'handleDragEnter',
			'dragleave .droppable-overlay .droppable': 'handleDragLeaveForDroppable',
			'dragover .droppable-overlay': 'handleDragOverForOverlay',
			'drop .droppable-overlay': 'handleDrop',

			'click .dropdown.autocomplete': 'stopPropagation',
			'mousedown .dropdown.autocomplete': 'stopPropagation',
			'touchstart .dropdown.autocomplete': 'stopPropagation'
		},


		getDefaultOptions: function getDefaultOptions() {
			return {
				profilePictureURL: '',
				currentUserIsAdmin: false,
				currentUserId: null,

				spinnerIconURL: '',
				upvoteIconURL: '',
				replyIconURL: '',
				uploadIconURL: '',
				attachmentIconURL: '',
				fileIconURL: '',
				noCommentsIconURL: '',
				noCommentsImptIconURL: '',

				textareaPlaceholderText: 'Thêm bình luận mới',
				newestText: 'Mới nhất',
				oldestText: 'Cũ nhất',
				importantCmtText: 'Ý kiến chính thức',
				popularText: 'Phổ biến',
				attachmentsText: 'Tệp đính kèm',
				sendText: 'Gửi',
				replyText: 'Trả lời',
				editText: 'Sửa',
				editedText: 'Đã sửa',
				youText: 'You',
				saveText: 'Ghi lại',
				deleteText: 'Xoá',
				newText: 'Mới',
				viewAllRepliesText: 'Xem tất cả __replyCount__ trả lời',
				hideRepliesText: 'Hide replies',
				noCommentsText: 'Không có bình luận',
				noCommentsImportantText: 'Không có ý kiến chính thức',
				noAttachmentsText: 'Không có tệp đính kèm',
				attachmentDropText: 'Kéo thả tệp để tải lên',
				textFormatter: function textFormatter(text) {
					return text;
				},

				enableReplying: true,
				enableEditing: true,
				enableUpvoting: true,
				enableDeleting: true,
				enableAttachments: false,
				enableHashtags: false,
				enablePinging: false,
				enableDeletingCommentWithReplies: false,
				enableNavigation: true,
				postCommentOnEnter: false,
				forceResponsive: false,
				readOnly: false,
				defaultNavigationSortKey: 'newest',

				highlightColor: '#2793e6',
				deleteButtonColor: '#C9302C',
				scrollContainer: this.$el,
				roundProfilePictures: false,
				textareaRows: 2,
				textareaRowsOnFocus: 2,
				textareaMaxRows: 5,
				maxRepliesVisible: 2,

				fieldMappings: {
					id: 'id',
					parent: 'parent',
					created: 'createdDate',
					modified: 'modifiedDate',
					content: 'content',
					file: 'file',
					fileURL: 'file_url',
					fileMimeType: 'file_mime_type',
					pings: 'pings',
					creator: 'creator',
					fullname: 'fullname',
					profileURL: 'profile_url',
					profilePictureURL: 'profile_picture_url',
					isNew: 'is_new',
					createdByAdmin: 'created_by_admin',
					createdByCurrentUser: 'created_by_current_user',
					upvoteCount: 'upvote_count',
					userHasUpvoted: 'user_has_upvoted'
				},

				getUsers: function getUsers(success, error) {
					success([]);
				},
				getComments: function getComments(success, error) {
					success([]);
				},
				postComment: function postComment(commentJSON, success, error) {
					success(commentJSON);
				},
				putComment: function putComment(commentJSON, success, error) {
					success(commentJSON);
				},
				deleteComment: function deleteComment(commentJSON, success, error) {
					success();
				},
				upvoteComment: function upvoteComment(commentJSON, success, error) {
					success(commentJSON);
				},
				hashtagClicked: function hashtagClicked(hashtag) {},
				pingClicked: function pingClicked(userId) {},
				uploadAttachments: function uploadAttachments(commentArray, success, error) {
					success(commentArray);
				},
				refresh: function refresh() {},
				timeFormatter: function timeFormatter(time) {
					return new Date(time).toLocaleDateString();
				},
				appendNewComments: function appendNewComments(commentJSONs, success, error) {
					success([]);
				}
			};
		},

		init: function init(options, el) {
			this.$el = $(el);
			this.$el.addClass('jquery-comments');
			this.undelegateEvents();
			this.delegateEvents();

			(function (a) {
				(jQuery.browser = jQuery.browser || {}).mobile = /(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4));
			})(navigator.userAgent || navigator.vendor || window.opera);
			if ($.browser.mobile) this.$el.addClass('mobile');

			this.options = $.extend(true, {}, this.getDefaultOptions(), options);;

			if (this.options.readOnly) this.$el.addClass('read-only');

			this.currentSortKey = this.options.defaultNavigationSortKey;

			this.createCssDeclarations();

			this.fetchDataAndRender();
		},

		delegateEvents: function delegateEvents() {
			this.bindEvents(false);
		},

		undelegateEvents: function undelegateEvents() {
			this.bindEvents(true);
		},

		bindEvents: function bindEvents(unbind) {
			var bindFunction = unbind ? 'off' : 'on';
			for (var key in this.events) {
				var eventName = key.split(' ')[0];
				var selector = key.split(' ').slice(1).join(' ');
				var methodNames = this.events[key].split(' ');

				for (var index in methodNames) {
					if (methodNames.hasOwnProperty(index)) {
						var method = this[methodNames[index]];

						method = $.proxy(method, this);

						if (selector == '') {
							this.$el[bindFunction](eventName, method);
						} else {
							this.$el[bindFunction](eventName, selector, method);
						}
					}
				}
			}
		},

		fetchDataAndRender: function fetchDataAndRender() {
			var self = this;
			setTimeout(function () {
				self.appendNewComments();
			}, 30000);
			this.commentsById = {};
			this.usersById = {};
			this.$el.empty();
			this.createHTML();

			var dataFetched = this.after(this.options.enablePinging ? 2 : 1, function () {
				self.dataFetched = true;
				self.render();
			});

			var commentsFetched = function commentsFetched(commentsArray) {
				var commentModels = commentsArray.map(function (commentsJSON) {
					return self.createCommentModel(commentsJSON);
				});

				self.sortComments(commentModels, 'oldest');
				$(commentModels).each(function (index, commentModel) {
					self.addCommentToDataModel(commentModel);
				});
				dataFetched();
			};
			this.options.getComments(commentsFetched, dataFetched);

			if (this.options.enablePinging) {
				var usersFetched = function usersFetched(userArray) {
					$(userArray).each(function (index, user) {
						self.usersById[user.id] = user;
					});
					dataFetched();
				};
				this.options.getUsers(usersFetched, dataFetched);
			};
		},

		fetchNext: function fetchNext() {
			var self = this;

			var spinner = this.createSpinner();
			this.$el.find('ul#comment-list').append(spinner);
			var success = function success(commentModels) {
				$(commentModels).each(function (index, commentModel) {
					self.createComment(commentModel);
				});
				spinner.remove();
			};

			var error = function error() {
				spinner.remove();
			};
			this.options.getComments(success, error);
		},

		createCommentModel: function createCommentModel(commentJSON) {
			var commentModel = this.applyInternalMappings(commentJSON);
			commentModel.childs = [];
			this.commentsById[commentModel.id] = commentModel;
			return commentModel;
		},

		addCommentToDataModel: function addCommentToDataModel(commentModel) {
			if (!(commentModel.id in this.commentsById)) {
				this.commentsById[commentModel.id] = commentModel;

				if (commentModel.parent) {
					var outermostParent = this.getOutermostParent(commentModel.parent);
					outermostParent.childs.push(commentModel.id);
				}
			}
		},

		updateCommentModel: function updateCommentModel(commentModel) {
			$.extend(this.commentsById[commentModel.id], commentModel);
		},

		render: function render() {
			var self = this;

			if (!this.dataFetched) return;

			this.showActiveContainer();

			this.createComments();

			if (this.options.enableAttachments) this.createAttachments();

			this.createImportantComments();

			this.$el.find('> .spinner').remove();
			this.options.refresh();
		},

		showActiveContainer: function showActiveContainer() {
			var activeNavigationEl = this.$el.find('.navigation li[data-container-name].active');
			var containerName = activeNavigationEl.data('container-name');
			var containerEl = this.$el.find('[data-container="' + containerName + '"]');
			containerEl.siblings('[data-container]').hide();
			containerEl.show();
		},

		createComments: function createComments() {
			var self = this;

			this.$el.find('#comment-list').remove();
			var commentList = $('<ul/>', {
				id: 'comment-list',
				'class': 'main'
			});

			var mainLevelComments = [];
			var replies = [];

			$(this.getComments()).each(function (index, commentModel) {
				if (commentModel.parent == null) {
					mainLevelComments.push(commentModel);
				} else {
					replies.push(commentModel);
				}
			});

			this.sortComments(mainLevelComments, this.currentSortKey);
			mainLevelComments.reverse();
			$(mainLevelComments).each(function (index, commentModel) {
				self.addComment(commentModel, commentList);
			});

			this.sortComments(replies, 'oldest');
			$(replies).each(function (index, commentModel) {
				self.addComment(commentModel, commentList);
			});

			this.$el.find('[data-container="comments"]').prepend(commentList);
		},

		createAttachments: function createAttachments() {
			var self = this;

			this.$el.find('#attachment-list').remove();
			var attachmentList = $('<ul/>', {
				id: 'attachment-list',
				'class': 'main'
			});

			var attachments = this.getAttachments();
			this.sortComments(attachments, 'newest');
			attachments.reverse();
			$(attachments).each(function (index, commentModel) {
				self.addAttachment(commentModel, attachmentList);
			});

			this.$el.find('[data-container="attachments"]').prepend(attachmentList);
		},
		createImportantComments: function createImportantComments() {
			var self = this;

			this.$el.find('#importantCmt-list').remove();
			var importantCmtList = $('<ul/>', {
				id: 'importantCmt-list',
				'class': 'main'
			});

			var importantCmt = this.getImportantCmt();

			this.sortComments(importantCmt, 'newest');
			importantCmt.reverse();
			$(importantCmt).each(function (index, commentModel) {
				self.addImportantCmt(commentModel, importantCmtList);
			});

			this.$el.find('[data-container="importantCmt"]').prepend(importantCmtList);
		},
		addComment: function addComment(commentModel, commentList) {
			commentList = commentList || this.$el.find('#comment-list');
			var commentEl = this.createCommentElement(commentModel);

			if (commentModel.parent) {
				var directParentEl = commentList.find('.comment[data-id="' + commentModel.parent + '"]');

				this.reRenderCommentActionBar(commentModel.parent);

				var outerMostParent = directParentEl.parents('.comment').last();
				if (outerMostParent.length == 0) outerMostParent = directParentEl;

				var childCommentsEl = outerMostParent.find('.child-comments');
				var commentingField = childCommentsEl.find('.commenting-field');
				if (commentingField.length) {
					commentingField.before(commentEl);
				} else {
					childCommentsEl.append(commentEl);
				}

				this.updateToggleAllButton(outerMostParent);
			} else {
				commentList.prepend(commentEl);
			}
		},
		addAttachment: function addAttachment(commentModel, commentList) {
			commentList = commentList || this.$el.find('#attachment-list');
			var commentEl = this.createCommentElement(commentModel);
			commentList.prepend(commentEl);
		},
		addImportantCmt: function addImportantCmt(commentModel, commentList) {
			commentList = commentList || this.$el.find('#importantCmt-list');
			var commentEl = this.createCommentElement(commentModel);
			commentList.prepend(commentEl);
		},
		removeComment: function removeComment(commentId) {
			var self = this;
			var commentModel = this.commentsById[commentId];

			var childComments = this.getChildComments(commentModel.id);
			$(childComments).each(function (index, childComment) {
				self.removeComment(childComment.id);
			});

			if (commentModel.parent) {
				var outermostParent = this.getOutermostParent(commentModel.parent);
				var indexToRemove = outermostParent.childs.indexOf(commentModel.id);
				outermostParent.childs.splice(indexToRemove, 1);
			}

			delete this.commentsById[commentId];
			var commentElements = this.$el.find('li.comment[data-id="' + commentId + '"]');
			var parentEl = commentElements.parents('li.comment').last();

			commentElements.remove();

			this.updateToggleAllButton(parentEl);
		},

		uploadAttachments: function uploadAttachments(files, commentingField) {
			var self = this;
			if (!commentingField) commentingField = this.$el.find('.commenting-field.main');
			var isReply = !commentingField.hasClass('main');
			var fileCount = files.length;

			if (fileCount) {
				var uploadButton = commentingField.find('.upload');
				var textarea = commentingField.find('.textarea');

				uploadButton.removeClass('enabled');
				var attachmentListSpinner = this.createSpinner();
				var commentListSpinner = this.createSpinner();
				this.$el.find('ul#attachment-list').prepend(attachmentListSpinner);
				if (isReply) {
					commentingField.before(commentListSpinner);
				} else {
					this.$el.find('ul#comment-list').prepend(commentListSpinner);
				}

				var success = function success(commentArray) {
					$(commentArray).each(function (index, commentJSON) {
						var commentModel = self.createCommentModel(commentJSON);
						self.addCommentToDataModel(commentModel);
						self.addComment(commentModel);
						self.addAttachment(commentModel);
					});

					if (commentArray.length == fileCount && self.getTextareaContent(textarea).length == 0) {
						commentingField.find('.close').trigger('click');
					}

					uploadButton.addClass('enabled');
					commentListSpinner.remove();
					attachmentListSpinner.remove();
				};

				var error = function error() {
					uploadButton.addClass('enabled');
					commentListSpinner.remove();
					attachmentListSpinner.remove();
				};

				var commentArray = [];
				$(files).each(function (index, file) {
					var commentJSON = self.createCommentJSON(textarea);
					commentJSON.id += '-' + index;
					commentJSON.content = '';
					commentJSON.file = file;
					commentJSON.fileURL = 'C:/fakepath/' + file.name;
					commentJSON.fileMimeType = file.type;

					commentJSON = self.applyExternalMappings(commentJSON);
					commentArray.push(commentJSON);
				});

				self.options.uploadAttachments(commentArray, success, error);
			}

			uploadButton.find('input').val('');
		},

		updateToggleAllButton: function updateToggleAllButton(parentEl) {
			if (this.options.maxRepliesVisible == null) return;

			var childCommentsEl = parentEl.find('.child-comments');
			var childComments = childCommentsEl.find('.comment');
			var toggleAllButton = childCommentsEl.find('li.toggle-all');
			childComments.removeClass('hidden-reply');

			if (this.options.maxRepliesVisible === 0) {
				var hiddenReplies = childComments;
			} else {
				var hiddenReplies = childComments.slice(0, -this.options.maxRepliesVisible);
			}

			hiddenReplies.addClass('hidden-reply');

			if (toggleAllButton.find('span.text').text() == this.options.textFormatter(this.options.hideRepliesText)) {
				hiddenReplies.addClass('visible');
			}

			if (childComments.length > this.options.maxRepliesVisible) {
				if (!toggleAllButton.length) {

					toggleAllButton = $('<li/>', {
						'class': 'toggle-all highlight-font-bold'
					});
					var toggleAllButtonText = $('<span/>', {
						'class': 'text'
					});
					var caret = $('<span/>', {
						'class': 'caret'
					});

					toggleAllButton.append(toggleAllButtonText).append(caret);
					childCommentsEl.prepend(toggleAllButton);
				}

				this.setToggleAllButtonText(toggleAllButton, false);
			} else {
				toggleAllButton.remove();
			}
		},

		sortComments: function sortComments(comments, sortKey) {
			var self = this;

			if (sortKey == 'popularity') {
				comments.sort(function (commentA, commentB) {
					var pointsOfA = commentA.childs.length;
					var pointsOfB = commentB.childs.length;

					if (self.options.enableUpvoting) {
						pointsOfA += commentA.upvoteCount;
						pointsOfB += commentB.upvoteCount;
					}

					if (pointsOfB != pointsOfA) {
						return pointsOfB - pointsOfA;
					} else {
						var createdA = new Date(commentA.created).getTime();
						var createdB = new Date(commentB.created).getTime();
						return createdB - createdA;
					}
				});
			} else {
				comments.sort(function (commentA, commentB) {
					var createdA = new Date(commentA.created).getTime();
					var createdB = new Date(commentB.created).getTime();
					if (sortKey == 'oldest') {
						return createdA - createdB;
					} else {
						return createdB - createdA;
					}
				});
			}
		},

		sortUsers: function sortUsers(users) {
			users.sort(function (a, b) {
				var nameA = a.fullname.toLowerCase().trim();
				var nameB = b.fullname.toLowerCase().trim();
				if (nameA < nameB) return -1;
				if (nameA > nameB) return 1;
				return 0;
			});
		},

		sortAndReArrangeComments: function sortAndReArrangeComments(sortKey) {
			var commentList = this.$el.find('#comment-list');

			var mainLevelComments = this.getComments().filter(function (commentModel) {
				return !commentModel.parent;
			});
			this.sortComments(mainLevelComments, sortKey);

			$(mainLevelComments).each(function (index, commentModel) {
				var commentEl = commentList.find('> li.comment[data-id=' + commentModel.id + ']');
				commentList.append(commentEl);
			});
		},

		showActiveSort: function showActiveSort() {
			var activeElements = this.$el.find('.navigation li[data-sort-key="' + this.currentSortKey + '"]');

			this.$el.find('.navigation li').removeClass('active');
			activeElements.addClass('active');

			var titleEl = this.$el.find('.navigation .title');
			if (this.currentSortKey != 'attachments') {
				titleEl.addClass('active');
				titleEl.find('header').html(activeElements.first().html());
			} else {
				var defaultDropdownEl = this.$el.find('.navigation ul.dropdown').children().first();
				titleEl.find('header').html(defaultDropdownEl.html());
			}

			this.showActiveContainer();
		},

		forceResponsive: function forceResponsive() {
			this.$el.addClass('responsive');
		},

		closeDropdowns: function closeDropdowns() {
			this.$el.find('.dropdown').hide();
		},

		saveOnKeydown: function saveOnKeydown(ev) {
			if (ev.keyCode == 13) {
				var metaKey = ev.metaKey || ev.ctrlKey;
				if (this.options.postCommentOnEnter || metaKey) {
					var el = $(ev.currentTarget);
					el.siblings('.control-row').find('.save').trigger('click');
					ev.stopPropagation();
					ev.preventDefault();
				}
			}
		},

		saveEditableContent: function saveEditableContent(ev) {
			var el = $(ev.currentTarget);
			el.data('before', el.html());
		},

		checkEditableContentForChange: function checkEditableContentForChange(ev) {
			var el = $(ev.currentTarget);
			if (el.data('before') != el.html()) {
				el.data('before', el.html());
				el.trigger('change');
			}
		},

		navigationElementClicked: function navigationElementClicked(ev) {
			var navigationEl = $(ev.currentTarget);
			var sortKey = navigationEl.data().sortKey;

			if (sortKey != 'attachments') {
				this.sortAndReArrangeComments(sortKey);
			}

			this.currentSortKey = sortKey;
			this.showActiveSort();
		},

		toggleNavigationDropdown: function toggleNavigationDropdown(ev) {
			ev.stopPropagation();

			var dropdown = $(ev.currentTarget).find('~ .dropdown');
			dropdown.toggle();
		},

		showMainCommentingField: function showMainCommentingField(ev) {
			var mainTextarea = $(ev.currentTarget);
			mainTextarea.siblings('.control-row').show();
			mainTextarea.parent().find('.close').show();
			mainTextarea.focus();
		},

		hideMainCommentingField: function hideMainCommentingField(ev) {
			var closeButton = $(ev.currentTarget);
			var mainTextarea = this.$el.find('.commenting-field.main .textarea');
			var mainControlRow = this.$el.find('.commenting-field.main .control-row');

			this.clearTextarea(mainTextarea);
			this.adjustTextareaHeight(mainTextarea, false);

			mainControlRow.hide();
			closeButton.hide();
			mainTextarea.blur();
		},

		increaseTextareaHeight: function increaseTextareaHeight(ev) {
			var textarea = $(ev.currentTarget);
			this.adjustTextareaHeight(textarea, true);
		},

		textareaContentChanged: function textareaContentChanged(ev) {
			var textarea = $(ev.currentTarget);
			var saveButton = textarea.siblings('.control-row').find('.save');

			if (!textarea.find('.reply-to.tag').length) {
				var commentId = textarea.attr('data-comment');

				if (commentId) {
					var parentComments = textarea.parents('li.comment');
					if (parentComments.length > 1) {
						var parentId = parentComments.last().data('id');
						textarea.attr('data-parent', parentId);
					}
				} else {
					var parentId = textarea.parents('li.comment').last().data('id');
					textarea.attr('data-parent', parentId);
				}
			}

			var commentingField = textarea.parents('.commenting-field').first();
			if (textarea[0].scrollHeight > textarea.outerHeight()) {
				commentingField.addClass('scrollable');
			} else {
				commentingField.removeClass('scrollable');
			}

			var contentOrParentChangedIfEditing = true;
			var content = this.getTextareaContent(textarea, true);
			if (commentId = textarea.attr('data-comment')) {
				var contentChanged = content != this.commentsById[commentId].content;
				var parentFromModel;
				if (this.commentsById[commentId].parent) {
					parentFromModel = this.commentsById[commentId].parent.toString();
				}
				var parentChanged = textarea.attr('data-parent') != parentFromModel;
				contentOrParentChangedIfEditing = contentChanged || parentChanged;
			}

			if (content.length && contentOrParentChangedIfEditing) {
				saveButton.addClass('enabled');
			} else {
				saveButton.removeClass('enabled');
			}
		},

		removeCommentingField: function removeCommentingField(ev) {
			var closeButton = $(ev.currentTarget);

			var textarea = closeButton.siblings('.textarea');
			if (textarea.attr('data-comment')) {
				closeButton.parents('li.comment').first().removeClass('edit');
			}

			var commentingField = closeButton.parents('.commenting-field').first();
			commentingField.remove();
		},

		appendNewComments: function appendNewComments() {
			var self = this;

			if ($(self.$el.context).length == 0) {
				clearTimeout(myVar);
				return;
			}
			var commentJSONs = this.getComments();

			var success = function success(commentsNew, commentsEdit) {
				for (var c in commentsNew) {
					self.createComment(commentsNew[c]);
				}

				for (var cmt in commentsEdit) {
					var commentModel = self.createCommentModel(commentsEdit[cmt]);
					self.updateCommentModel(commentModel);
					self.reRenderComment(commentModel.id);
				}
			};

			var error = function error() {};
			var myVar = setTimeout(function () {
				self.appendNewComments();
			}, 30000);
			this.options.appendNewComments(commentJSONs, success, error);
		},

		postComment: function postComment(ev) {
			var self = this;
			var sendButton = $(ev.currentTarget);
			var commentingField = sendButton.parents('.commenting-field').first();
			var textarea = commentingField.find('.textarea');

			sendButton.removeClass('enabled');

			var commentJSON = this.createCommentJSON(textarea);

			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function success(commentJSON) {
				self.currentSortKey = 'newest';
				self.showActiveSort();
				self.createComment(commentJSON);
				commentingField.find('.close').trigger('click');
			};

			var error = function error() {
				sendButton.addClass('enabled');
			};

			this.options.postComment(commentJSON, success, error);
		},

		createComment: function createComment(commentJSON) {
			var commentModel = this.createCommentModel(commentJSON);
			this.addCommentToDataModel(commentModel);
			this.addComment(commentModel);
			if (commentModel.opinion == true) {
				this.addImportantCmt(commentModel);
			}
		},

		putComment: function putComment(ev) {
			var self = this;
			var saveButton = $(ev.currentTarget);
			var commentingField = saveButton.parents('.commenting-field').first();
			var textarea = commentingField.find('.textarea');

			saveButton.removeClass('enabled');

			var commentJSON = $.extend({}, this.commentsById[textarea.attr('data-comment')]);
			$.extend(commentJSON, {
				parent: textarea.attr('data-parent') || null,
				content: this.getTextareaContent(textarea),
				pings: this.getPings(textarea),
				modified: new Date().getTime()
			});

			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function success(commentJSON) {

				var commentModel = self.createCommentModel(commentJSON);

				delete commentModel['childs'];
				self.updateCommentModel(commentModel);

				commentingField.find('.close').trigger('click');

				self.reRenderComment(commentModel.id);
			};

			var error = function error() {
				saveButton.addClass('enabled');
			};

			this.options.putComment(commentJSON, success, error);
		},

		deleteComment: function deleteComment(ev) {
			var self = this;
			var deleteButton = $(ev.currentTarget);
			var commentEl = deleteButton.parents('.comment').first();
			var commentJSON = $.extend({}, this.commentsById[commentEl.attr('data-id')]);
			var commentId = commentJSON.id;
			var parentId = commentJSON.parent;

			deleteButton.removeClass('enabled');

			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function success() {
				self.removeComment(commentId);
				if (parentId) self.reRenderCommentActionBar(parentId);

				if (commentJSON.opinion == true) {
					$('[data-sort-key=' + self.currentSortKey + ']').trigger('click');
				}
			};

			var error = function error() {
				deleteButton.addClass('enabled');
			};

			this.options.deleteComment(commentJSON, success, error);
		},

		hashtagClicked: function hashtagClicked(ev) {
			var el = $(ev.currentTarget);
			var value = el.attr('data-value');
			this.options.hashtagClicked(value);
		},

		pingClicked: function pingClicked(ev) {
			var el = $(ev.currentTarget);
			var value = el.attr('data-value');
			this.options.pingClicked(value);
		},

		fileInputChanged: function fileInputChanged(ev, files) {
			var files = ev.currentTarget.files;
			var commentingField = $(ev.currentTarget).parents('.commenting-field').first();
			this.uploadAttachments(files, commentingField);
		},

		upvoteComment: function upvoteComment(ev) {
			var self = this;
			var commentEl = $(ev.currentTarget).parents('li.comment').first();
			var commentModel = commentEl.data().model;

			var previousUpvoteCount = commentModel.upvoteCount;
			var newUpvoteCount;
			if (commentModel.userHasUpvoted) {
				newUpvoteCount = previousUpvoteCount - 1;
			} else {
				newUpvoteCount = previousUpvoteCount + 1;
			}

			commentModel.userHasUpvoted = !commentModel.userHasUpvoted;
			commentModel.upvoteCount = newUpvoteCount;
			this.reRenderUpvotes(commentModel.id);

			var commentJSON = $.extend({}, commentModel);
			commentJSON = this.applyExternalMappings(commentJSON);

			var success = function success(commentJSON) {
				var commentModel = self.createCommentModel(commentJSON);
				self.updateCommentModel(commentModel);
				self.reRenderUpvotes(commentModel.id);
			};

			var error = function error() {
				commentModel.userHasUpvoted = !commentModel.userHasUpvoted;
				commentModel.upvoteCount = previousUpvoteCount;
				self.reRenderUpvotes(commentModel.id);
			};

			this.options.upvoteComment(commentJSON, success, error);
		},

		toggleReplies: function toggleReplies(ev) {
			var el = $(ev.currentTarget);
			el.siblings('.hidden-reply').toggleClass('visible');
			this.setToggleAllButtonText(el, true);
		},

		replyButtonClicked: function replyButtonClicked(ev) {
			var replyButton = $(ev.currentTarget);
			var outermostParent = replyButton.parents('li.comment').last();
			var parentId = replyButton.parents('.comment').first().data().id;

			var replyField = outermostParent.find('.child-comments > .commenting-field');
			if (replyField.length) replyField.remove();
			var previousParentId = replyField.find('.textarea').attr('data-parent');

			if (previousParentId != parentId) {
				replyField = this.createCommentingFieldElement(parentId, null, false);
				outermostParent.find('.child-comments').append(replyField);

				var textarea = replyField.find('.textarea');
				this.moveCursorToEnd(textarea);

				var scrollTop = this.options.scrollContainer.scrollTop();
				var endOfReply = scrollTop + replyField.position().top + replyField.outerHeight();
				var endOfScrollable = scrollTop + this.options.scrollContainer.outerHeight();
				if (endOfReply > endOfScrollable) {
					var newScrollTop = scrollTop + (endOfReply - endOfScrollable);
					this.options.scrollContainer.scrollTop(newScrollTop);
				}
			}
		},

		editButtonClicked: function editButtonClicked(ev) {
			var editButton = $(ev.currentTarget);
			var commentEl = editButton.parents('li.comment').first();
			var commentModel = commentEl.data().model;

			commentModel = this.commentsById[commentModel.id];
			commentEl.addClass('edit');

			var editField = this.createCommentingFieldElement(commentModel.parent, commentModel.id, false);
			commentEl.find('.comment-wrapper').first().append(editField);

			var textarea = editField.find('.textarea');
			textarea.attr('data-comment', commentModel.id);

			textarea.append(this.getFormattedCommentContent(commentModel, true));

			this.moveCursorToEnd(textarea);
		},

		showDroppableOverlay: function showDroppableOverlay(ev) {
			if (this.options.enableAttachments) {
				this.$el.find('.droppable-overlay').css('top', this.$el[0].scrollTop);
				this.$el.find('.droppable-overlay').show();
				this.$el.addClass('drag-ongoing');
			}
		},

		handleDragEnter: function handleDragEnter(ev) {
			var count = $(ev.currentTarget).data('dnd-count') || 0;
			count++;
			$(ev.currentTarget).data('dnd-count', count);
			$(ev.currentTarget).addClass('drag-over');
		},

		handleDragLeave: function handleDragLeave(ev, callback) {
			var count = $(ev.currentTarget).data('dnd-count');
			count--;
			$(ev.currentTarget).data('dnd-count', count);

			if (count == 0) {
				$(ev.currentTarget).removeClass('drag-over');
				if (callback) callback();
			}
		},

		handleDragLeaveForOverlay: function handleDragLeaveForOverlay(ev) {
			var self = this;
			this.handleDragLeave(ev, function () {
				self.hideDroppableOverlay();
			});
		},

		handleDragLeaveForDroppable: function handleDragLeaveForDroppable(ev) {
			this.handleDragLeave(ev);
		},

		handleDragOverForOverlay: function handleDragOverForOverlay(ev) {
			ev.stopPropagation();
			ev.preventDefault();
			ev.originalEvent.dataTransfer.dropEffect = 'copy';
		},

		hideDroppableOverlay: function hideDroppableOverlay() {
			this.$el.find('.droppable-overlay').hide();
			this.$el.removeClass('drag-ongoing');
		},

		handleDrop: function handleDrop(ev) {
			ev.preventDefault();

			$(ev.target).trigger('dragleave');

			this.hideDroppableOverlay();
			this.uploadAttachments(ev.originalEvent.dataTransfer.files);
		},

		stopPropagation: function stopPropagation(ev) {
			ev.stopPropagation();
		},

		createHTML: function createHTML() {
			var self = this;

			var mainCommentingField = this.createCommentingFieldElement(null, null, true);
			mainCommentingField.addClass('main');
			this.$el.append(mainCommentingField);

			var mainControlRow = mainCommentingField.find('.control-row');
			mainControlRow.hide();
			mainCommentingField.find('.close').hide();

			if (this.options.enableNavigation) {
				this.$el.append(this.createNavigationElement());
				this.showActiveSort();
			}

			var spinner = this.createSpinner();
			this.$el.append(spinner);

			var commentsContainer = $('<div/>', {
				'class': 'data-container overflowComment',
				'data-container': 'comments'
			});
			this.$el.append(commentsContainer);

			var noComments = $('<div/>', {
				'class': 'no-comments no-data',
				text: this.options.textFormatter(this.options.noCommentsText)
			});
			var noCommentsIcon = $('<i/>', {
				'class': 'fa fa-comments fa-2x'
			});
			if (this.options.noCommentsIconURL.length) {
				noCommentsIcon.css('background-image', 'url("' + this.options.noCommentsIconURL + '")');
				noCommentsIcon.addClass('image');
			}
			noComments.prepend($('<br/>')).prepend(noCommentsIcon);
			commentsContainer.append(noComments);

			var importantCmtContainer = $('<div/>', {
				'class': 'data-container overflowComment',
				'data-container': 'importantCmt'
			});
			this.$el.append(importantCmtContainer);

			var noCommentsImpt = $('<div/>', {
				'class': 'no-comments no-data',
				text: this.options.textFormatter(this.options.noCommentsImportantText)
			});
			var noCommentsImptIcon = $('<i/>', {
				'class': 'fa fa-comments fa-2x'
			});
			if (this.options.noCommentsImptIconURL.length) {
				noCommentsImptIcon.css('background-image', 'url("' + this.options.noCommentsImptIconURL + '")');
				noCommentsImptIcon.addClass('image');
			}
			noCommentsImpt.prepend($('<br/>')).prepend(noCommentsImptIcon);
			importantCmtContainer.append(noCommentsImpt);

			if (this.options.enableAttachments) {
				var attachmentsContainer = $('<div/>', {
					'class': 'data-container overflowComment',
					'data-container': 'attachments'
				});
				this.$el.append(attachmentsContainer);

				var noAttachments = $('<div/>', {
					'class': 'no-attachments no-data',
					text: this.options.textFormatter(this.options.noAttachmentsText)
				});
				var noAttachmentsIcon = $('<i/>', {
					'class': 'fa fa-paperclip fa-2x'
				});
				if (this.options.attachmentIconURL.length) {
					noAttachmentsIcon.css('background-image', 'url("' + this.options.attachmentIconURL + '")');
					noAttachmentsIcon.addClass('image');
				}
				noAttachments.prepend($('<br/>')).prepend(noAttachmentsIcon);
				attachmentsContainer.append(noAttachments);

				var droppableOverlay = $('<div/>', {
					'class': 'droppable-overlay'
				});

				var droppableContainer = $('<div/>', {
					'class': 'droppable-container'
				});

				var droppable = $('<div/>', {
					'class': 'droppable'
				});

				var uploadIcon = $('<i/>', {
					'class': 'fa fa-upload fa-4x'
				});
				if (this.options.uploadIconURL.length) {
					uploadIcon.css('background-image', 'url("' + this.options.uploadIconURL + '")');
					uploadIcon.addClass('image');
				}

				var dropAttachmentText = $('<div/>', {
					text: this.options.textFormatter(this.options.attachmentDropText)
				});
				droppable.append(uploadIcon);
				droppable.append(dropAttachmentText);

				droppableOverlay.html(droppableContainer.html(droppable)).hide();
				this.$el.append(droppableOverlay);
			}
		},

		createProfilePictureElement: function createProfilePictureElement(src) {
			if (src) {
				var profilePicture = $('<img/>', {
					src: src
				});
			} else {
				var profilePicture = $('<i/>', {
					'class': 'fa fa-user'
				});
			}
			profilePicture.addClass('profile-picture');
			if (this.options.roundProfilePictures) profilePicture.addClass('round');
			return profilePicture;
		},

		createCommentingFieldElement: function createCommentingFieldElement(parentId, existingCommentId, enableOpinion) {
			var self = this;

			var commentingField = $('<div/>', {
				'class': 'commenting-field'
			});

			if (existingCommentId) {
				var profilePictureURL = this.commentsById[existingCommentId].profilePictureURL;
			} else {
				var profilePictureURL = this.options.profilePictureURL;
			}
			var profilePicture = this.createProfilePictureElement(profilePictureURL);

			var textareaWrapper = $('<div/>', {
				'class': 'textarea-wrapper'
			});

			var controlRow = $('<div/>', {
				'class': 'control-row'
			});

			var textarea = $('<div/>', {
				'class': 'textarea',
				'data-placeholder': this.options.textFormatter(this.options.textareaPlaceholderText),
				contenteditable: true
			});

			this.adjustTextareaHeight(textarea, false);

			var closeButton = $('<span/>', {
				'class': 'close'
			}).append($('<span class="left"/>')).append($('<span class="right"/>'));

			if (existingCommentId) {
				var saveButtonText = this.options.textFormatter(this.options.saveText);
				var opinionCmtId = existingCommentId;
			} else {
				var saveButtonText = this.options.textFormatter(this.options.sendText);
				var opinionCmtId = '';

				if (this.options.enableAttachments) {
					var uploadButton = $('<span/>', {
						'class': 'enabled upload'
					});
					var uploadIcon = $('<i/>', {
						'class': 'md-icon',
						text: 'Tải lên'
					});
					var fileInput = $('<input/>', {
						type: 'file',
						'data-role': 'none' });

					if (!$.browser.mobile) fileInput.attr('multiple', 'multiple');

					if (this.options.uploadIconURL.length) {
						uploadIcon.css('background-image', 'url("' + this.options.uploadIconURL + '")');
						uploadIcon.addClass('image');
					}
					uploadButton.append(uploadIcon).append(fileInput);
					controlRow.append(uploadButton);
				}
			}

			var saveButtonClass = existingCommentId ? 'update' : 'send';
			var saveButton = $('<span/>', {
				'class': saveButtonClass + ' save highlight-background',
				text: saveButtonText
			});


			if (enableOpinion) {
				var checkOpinion = $('<input/>', {
					'class': 'opinion checkOpinion mt-1 mr-1',
					'id': 'opinion' + opinionCmtId,
					'name': 'opinion' + opinionCmtId,
					'type': 'checkbox'
				});
				var labelCheckOpinion = $('<label/>', {
					'class': 'opinion label-opinion',
					'for': 'opinion' + opinionCmtId,
					text: 'Ý kiến chính thức'
				});
				controlRow.append(checkOpinion).append(labelCheckOpinion);
			}

			controlRow.prepend(saveButton);
			textareaWrapper.append(closeButton).append(textarea).append(controlRow);
			commentingField.append(profilePicture).append(textareaWrapper);

			if (parentId) {
				textarea.attr('data-parent', parentId);

				var parentModel = this.commentsById[parentId];
				if (parentModel.parent) {
					textarea.html('&nbsp;');
					var replyToName = '@' + parentModel.fullname;
					var replyToTag = this.createTagElement(replyToName, 'reply-to', parentModel.creator);
					textarea.prepend(replyToTag);
				}
			}

			if (this.options.enablePinging) {
				textarea.textcomplete([{
					match: /(^|\s)@(([0-9]|[^\u0000-\u007F]|[a-zäöüß]|\s)*)$/im,
					search: function search(term, callback) {
						term = self.normalizeSpaces(term);

						var pings = self.getPings(textarea);
						var users = self.getUsers().filter(function (user) {
							var isSelf = user.id == self.options.currentUserId;
							var alreadyPinged = pings.indexOf(user.id) != -1;
							return !isSelf && !alreadyPinged;
						});

						self.sortUsers(users);

						callback($.map(users, function (user) {
							var lowercaseTerm = term.toLowerCase();
							var nameMatch = user.fullname.toLowerCase().indexOf(lowercaseTerm) != -1;
							var emailMatch = user.email.toLowerCase().indexOf(lowercaseTerm) != -1;
							return nameMatch || emailMatch ? user : null;
						}));
					},
					template: function template(user) {
						var wrapper = $('<div/>');

						var profilePictureEl = $('<img/>', {
							src: user.pictureUrl,
							'class': 'profile-picture round'
						});
						var detailsEl = $('<div/>', {
							'class': 'details'
						});
						var nameEl = $('<div/>', {
							'class': 'name'
						}).html(user.fullname);

						var emailEl = $('<div/>', {
							'class': 'email'
						}).html(user.email);

						if (user.email) {
							detailsEl.append(nameEl).append(emailEl);
						} else {
							detailsEl.addClass('no-email');
							detailsEl.append(nameEl);
						}

						wrapper.append(profilePictureEl).append(detailsEl);
						return wrapper.html();
					},
					replace: function replace(user) {
						var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);
						return ' ' + tag[0].outerHTML + ' ';
					}
				}], {
					appendTo: '.jquery-comments',
					dropdownClassName: 'dropdown autocomplete',
					maxCount: 5,
					rightEdgeOffset: 0
				});

				$.fn.textcomplete.Dropdown.prototype.render = function (zippedData) {
					var contentsHtml = this._buildContents(zippedData);
					var unzippedData = $.map(zippedData, function (d) {
						return d.value;
					});
					if (zippedData.length) {
						var strategy = zippedData[0].strategy;
						if (strategy.id) {
							this.$el.attr('data-strategy', strategy.id);
						} else {
							this.$el.removeAttr('data-strategy');
						}
						this._renderHeader(unzippedData);
						this._renderFooter(unzippedData);
						if (contentsHtml) {
							this._renderContents(contentsHtml);
							this._fitToBottom();
							this._fitToRight();
							this._activateIndexedItem();
						}
						this._setScroll();
					} else if (this.noResultsMessage) {
						this._renderNoResultsMessage(unzippedData);
					} else if (this.shown) {
						this.deactivate();
					}

					var top = parseInt(this.$el.css('top')) + self.options.scrollContainer.scrollTop();
					this.$el.css('top', top);

					var originalLeft = this.$el.css('left');
					this.$el.css('left', 0);
					var maxLeft = self.$el.width() - this.$el.outerWidth();
					var left = Math.min(maxLeft, parseInt(originalLeft));
					this.$el.css('left', left);
				};
			}

			return commentingField;
		},

		createNavigationElement: function createNavigationElement() {
			var navigationEl = $('<ul/>', {
				'class': 'navigation'
			});
			var navigationWrapper = $('<div/>', {
				'class': 'navigation-wrapper'
			});
			navigationEl.append(navigationWrapper);

			var newest = $('<li/>', {
				text: this.options.textFormatter(this.options.newestText),
				'data-sort-key': 'newest',
				'data-container-name': 'comments'
			});

			var oldest = $('<li/>', {
				text: this.options.textFormatter(this.options.oldestText),
				'data-sort-key': 'oldest',
				'data-container-name': 'comments'
			});

			var important = $('<li/>', {
				text: this.options.textFormatter(this.options.importantCmtText),
				'data-sort-key': 'important',
				'data-container-name': 'importantCmt'
			});

			var popular = $('<li/>', {
				text: this.options.textFormatter(this.options.popularText),
				'data-sort-key': 'popularity',
				'data-container-name': 'comments'
			});

			var attachments = $('<li/>', {
				text: this.options.textFormatter(this.options.attachmentsText),
				'data-sort-key': 'attachments',
				'data-container-name': 'attachments'
			});

			var attachmentsIcon = $('<i/>', {
				'class': 'fa fa-paperclip'
			});
			if (this.options.attachmentIconURL.length) {
				attachmentsIcon.css('background-image', 'url("' + this.options.attachmentIconURL + '")');
				attachmentsIcon.addClass('image');
			}
			attachments.prepend(attachmentsIcon);

			var dropdownNavigationWrapper = $('<div/>', {
				'class': 'navigation-wrapper responsive'
			});
			var dropdownNavigation = $('<ul/>', {
				'class': 'dropdown'
			});
			var dropdownTitle = $('<li/>', {
				'class': 'title'
			});
			var dropdownTitleHeader = $('<header/>');

			dropdownTitle.append(dropdownTitleHeader);
			dropdownNavigationWrapper.append(dropdownTitle);
			dropdownNavigationWrapper.append(dropdownNavigation);
			navigationEl.append(dropdownNavigationWrapper);

			navigationWrapper.append(newest).append(oldest).append(important);
			dropdownNavigation.append(newest.clone()).append(oldest.clone()).append(important.clone());

			if (this.options.enableReplying || this.options.enableUpvoting) {
				navigationWrapper.append(popular);
				dropdownNavigation.append(popular.clone());
			}
			if (this.options.enableAttachments) {
				navigationWrapper.append(attachments);
				dropdownNavigationWrapper.append(attachments.clone());
			}

			if (this.options.forceResponsive) this.forceResponsive();
			return navigationEl;
		},

		createSpinner: function createSpinner() {
			var spinner = $('<div/>', {
				'class': 'spinner'
			});
			var spinnerIcon = $('<i/>', {
				'class': 'fa fa-spinner fa-spin'
			});
			if (this.options.spinnerIconURL.length) {
				spinnerIcon.css('background-image', 'url("' + this.options.spinnerIconURL + '")');
				spinnerIcon.addClass('image');
			}
			spinner.html(spinnerIcon);
			return spinner;
		},

		createCommentElement: function createCommentElement(commentModel) {
			var commentEl = $('<li/>', {
				'data-id': commentModel.id,
				'class': 'comment'
			}).data('model', commentModel);

			if (commentModel.createdByCurrentUser) commentEl.addClass('by-current-user');
			if (commentModel.createdByAdmin) commentEl.addClass('by-admin');

			var childComments = $('<ul/>', {
				'class': 'child-comments'
			});

			var commentWrapper = this.createCommentWrapperElement(commentModel);

			commentEl.append(commentWrapper);
			if (commentModel.parent == null) commentEl.append(childComments);
			return commentEl;
		},

		createCommentWrapperElement: function createCommentWrapperElement(commentModel) {
			var commentWrapper = $('<div/>', {
				'class': 'comment-wrapper'
			});

			var profilePicture = this.createProfilePictureElement(commentModel.profilePictureURL);

			var time = $('<time/>', {
				text: this.options.timeFormatter(commentModel.created),
				'data-original': commentModel.created
			});

			var nameText = commentModel.createdByCurrentUser ? this.options.textFormatter(this.options.youText) : commentModel.fullname;
			var name = $('<div/>', {
				'class': 'name'
			});
			if (commentModel.profileURL) {
				var link = $('<a/>', {
					href: commentModel.profileURL,
					text: nameText
				});
				name.html(link);
			} else {
				name.text(nameText);
			}

			if (commentModel.createdByCurrentUser || commentModel.createdByAdmin) name.addClass('highlight-font-bold');

			if (commentModel.parent) {
				var parent = this.commentsById[commentModel.parent];
				if (parent.parent) {
					var replyTo = $('<span/>', {
						'class': 'reply-to',
						text: parent.fullname
					});

					var replyIcon = $('<i/>', {
						'class': 'fa fa-share'
					});
					if (this.options.replyIconURL.length) {
						replyIcon.css('background-image', 'url("' + this.options.replyIconURL + '")');
						replyIcon.addClass('image');
					}

					replyTo.prepend(replyIcon);
					name.append(replyTo);
				}
			}

			if (commentModel.isNew) {
				var newTag = $('<span/>', {
					'class': 'new highlight-background',
					text: this.options.newText
				});
				name.append(newTag);
			}

			var wrapper = $('<div/>', {
				'class': 'wrapper'
			});

			var noteOpinion = $('<div/>', {
				'class': 'note-opinion',
				text: '(Ý kiến chính thức)'
			});

			var content = $('<div/>', {
				'class': 'content'
			});

			var isAttachment = commentModel.fileURL != undefined;
			if (isAttachment) {
				var format = null;
				var type = null;

				if (commentModel.fileMimeType) {
					var mimeTypeParts = commentModel.fileMimeType.split('/');
					if (mimeTypeParts.length == 2) {
						format = mimeTypeParts[1];
						type = mimeTypeParts[0];
					}
				}

				var link = $('<a/>', {
					'class': 'attachment',
					href: commentModel.fileURL,
					target: '_blank'
				});

				if (type == 'image') {
					var image = $('<img/>', {
						src: commentModel.fileURL
					});
					link.html(image);
				} else if (type == 'video') {
					var video = $('<video/>', {
						src: commentModel.fileURL,
						type: commentModel.fileMimeType,
						controls: 'controls'
					});
					link.html(video);
				} else {
					var availableIcons = ['archive', 'audio', 'code', 'excel', 'image', 'movie', 'pdf', 'photo', 'picture', 'powerpoint', 'sound', 'video', 'word', 'zip'];

					var iconClass = 'fa fa-file-o';
					if (availableIcons.indexOf(format) > 0) {
						iconClass = 'fa fa-file-' + format + '-o';
					} else if (availableIcons.indexOf(type) > 0) {
						iconClass = 'fa fa-file-' + type + '-o';
					}

					var fileIcon = $('<i/>', {
						'class': iconClass
					});
					if (this.options.fileIconURL.length) {
						fileIcon.css('background-image', 'url("' + this.options.fileIconURL + '")');
						fileIcon.addClass('image');
					}

					var fileName = commentModel.fileName;
					link.text(fileName);
					link.prepend(fileIcon);
				}
				content.html(link);
			} else {
				content.html(this.getFormattedCommentContent(commentModel));
			}

			if (commentModel.modified && commentModel.modified != commentModel.created) {
				var editedTime = this.options.timeFormatter(commentModel.modified);
				var edited = $('<time/>', {
					'class': 'edited',
					text: this.options.textFormatter(this.options.editedText) + ' ' + editedTime,
					'data-original': commentModel.modified
				});
				content.append(edited);
			}

			var actions = $('<span/>', {
				'class': 'actions'
			});

			var reply = $('<button/>', {
				'class': 'action reply',
				'type': 'button',
				text: this.options.textFormatter(this.options.replyText)
			});

			var upvoteIcon = $('<i/>', {
				'class': 'fa fa-thumbs-up'
			});
			if (this.options.upvoteIconURL.length) {
				upvoteIcon.css('background-image', 'url("' + this.options.upvoteIconURL + '")');
				upvoteIcon.addClass('image');
			}

			var upvotes = this.createUpvoteElement(commentModel);

			if (this.options.enableReplying) actions.append(reply);
			if (this.options.enableUpvoting) actions.append(upvotes);

			if (commentModel.createdByCurrentUser || this.options.currentUserIsAdmin) {
				if (isAttachment && this.isAllowedToDelete(commentModel.id)) {
					var deleteButton = $('<button/>', {
						'class': 'action delete enabled',
						text: this.options.textFormatter(this.options.deleteText)
					});
					actions.append(deleteButton);
				} else if (!isAttachment && this.options.enableEditing) {
					var editButton = $('<button/>', {
						'class': 'action edit',
						text: this.options.textFormatter(this.options.editText)
					});
					actions.append(editButton);
					var deleteButton = $('<button/>', {
						'class': 'action delete enabled',
						text: this.options.textFormatter(this.options.deleteText)
					});
					actions.append(deleteButton);
				}
			}

			wrapper.append(content);
			if (commentModel.opinion == true) {
				wrapper.append(noteOpinion);
			}
			wrapper.append(actions);
			commentWrapper.append(profilePicture).append(time).append(name).append(wrapper);
			return commentWrapper;
		},

		createUpvoteElement: function createUpvoteElement(commentModel) {
			var upvoteIcon = $('<i/>', {
				'class': 'fa fa-thumbs-up'
			});
			if (this.options.upvoteIconURL.length) {
				upvoteIcon.css('background-image', 'url("' + this.options.upvoteIconURL + '")');
				upvoteIcon.addClass('image');
			}

			var upvoteEl = $('<button/>', {
				'class': 'action upvote' + (commentModel.userHasUpvoted ? ' highlight-font' : '')
			}).append($('<span/>', {
				text: commentModel.upvoteCount,
				'class': 'upvote-count'
			})).append(upvoteIcon);

			return upvoteEl;
		},

		createTagElement: function createTagElement(text, extraClasses, value) {
			var tagEl = $('<input/>', {
				'class': 'tag',
				'type': 'button',
				'data-role': 'none'
			});
			if (extraClasses) tagEl.addClass(extraClasses);
			tagEl.val(text);
			tagEl.attr('data-value', value);
			return tagEl;
		},

		reRenderComment: function reRenderComment(id) {
			var commentModel = this.commentsById[id];
			var commentElements = this.$el.find('li.comment[data-id="' + commentModel.id + '"]');

			var self = this;
			commentElements.each(function (index, commentEl) {
				var commentWrapper = self.createCommentWrapperElement(commentModel);
				$(commentEl).find('.comment-wrapper').first().replaceWith(commentWrapper);
			});
		},

		reRenderCommentActionBar: function reRenderCommentActionBar(id) {
			var commentModel = this.commentsById[id];
			var commentElements = this.$el.find('li.comment[data-id="' + commentModel.id + '"]');

			var self = this;
			commentElements.each(function (index, commentEl) {
				var commentWrapper = self.createCommentWrapperElement(commentModel);
				$(commentEl).find('.actions').first().replaceWith(commentWrapper.find('.actions'));
			});
		},

		reRenderUpvotes: function reRenderUpvotes(id) {
			var commentModel = this.commentsById[id];
			var commentElements = this.$el.find('li.comment[data-id="' + commentModel.id + '"]');

			var self = this;
			commentElements.each(function (index, commentEl) {
				var upvotes = self.createUpvoteElement(commentModel);
				$(commentEl).find('.upvote').first().replaceWith(upvotes);
			});
		},

		createCssDeclarations: function createCssDeclarations() {
			$('head style.jquery-comments-css').remove();

			this.createCss('.jquery-comments ul.navigation li.active:after {background: ' + this.options.highlightColor + ' !important;', +'}');

			this.createCss('.jquery-comments ul.navigation ul.dropdown li.active {background: ' + this.options.highlightColor + ' !important;', +'}');

			this.createCss('.jquery-comments .highlight-background {background: ' + this.options.highlightColor + ' !important;', +'}');

			this.createCss('.jquery-comments .highlight-font {color: ' + this.options.highlightColor + ' !important;' + '}');
			this.createCss('.jquery-comments .highlight-font-bold {color: ' + this.options.highlightColor + ' !important;' + 'font-weight: bold;' + '}');
		},

		createCss: function createCss(css) {
			var styleEl = $('<style/>', {
				type: 'text/css',
				'class': 'jquery-comments-css',
				text: css
			});
			$('head').append(styleEl);
		},

		getComments: function getComments() {
			var self = this;
			var commentArr = __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(this.commentsById).map(function (id) {
				return self.commentsById[id];
			});
			var importantCmtArr = commentArr.filter(function (comment) {
				return comment.opinion;
			});
			var importantCmtUser = commentArr.filter(function (comment) {
				return comment.opinion && comment.createdByCurrentUser;
			});
			var attachCmtArr = commentArr.filter(function (comment) {
				return comment.fileURL != undefined;
			});
			if (commentArr.length > 3) {
				$('.data-container[data-container=comments]').addClass('lessEl');
			} else {
				$('.data-container[data-container=comments]').addClass('fullEl');
			}

			if (importantCmtArr.length > 3) {
				$('.data-container[data-container=importantCmt]').addClass('lessEl');
			} else {
				$('.data-container[data-container=importantCmt]').addClass('fullEl');
			}
			if (importantCmtUser.length > 0) {
				$('.opinion').hide();
			} else {
				$('.opinion').show();
			}

			if (attachCmtArr.length > 3) {
				$('.data-container[data-container=attachments]').addClass('lessEl');
			} else {
				$('.data-container[data-container=attachments]').addClass('fullEl');
			}

			return __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(this.commentsById).map(function (id) {
				return self.commentsById[id];
			});
		},

		getUsers: function getUsers() {
			var self = this;
			return __WEBPACK_IMPORTED_MODULE_1_babel_runtime_core_js_object_keys___default()(this.usersById).map(function (id) {
				return self.usersById[id];
			});
		},

		getChildComments: function getChildComments(parentId) {
			return this.getComments().filter(function (comment) {
				return comment.parent == parentId;
			});
		},

		getAttachments: function getAttachments() {
			var self = this;
			return this.getComments().filter(function (comment) {
				return comment.fileURL != undefined;
			});
		},
		getImportantCmt: function getImportantCmt() {
			var self = this;
			return this.getComments().filter(function (comment) {
				return comment.opinion == true;
			});
		},
		getOutermostParent: function getOutermostParent(directParentId) {
			var parentId = directParentId;
			do {
				var parentComment = this.commentsById[parentId];
				parentId = parentComment.parent;
			} while (parentComment.parent != null);
			return parentComment;
		},

		createCommentJSON: function createCommentJSON(textarea) {
			var time = new Date().toISOString();
			var commentJSON = {
				id: 'c' + (this.getComments().length + 1),
				parent: textarea.attr('data-parent') || null,
				created: time,
				modified: time,
				content: this.getTextareaContent(textarea),
				pings: this.getPings(textarea),
				fullname: this.options.textFormatter(this.options.youText),
				profilePictureURL: this.options.profilePictureURL,
				createdByCurrentUser: true,
				upvoteCount: 0,
				userHasUpvoted: false
			};
			return commentJSON;
		},

		isAllowedToDelete: function isAllowedToDelete(commentId) {
			if (this.options.enableDeleting) {
				var isAllowedToDelete = true;
				if (!this.options.enableDeletingCommentWithReplies) {
					$(this.getComments()).each(function (index, comment) {
						if (comment.parent == commentId) isAllowedToDelete = false;
					});
				}
				return isAllowedToDelete;
			}
			return false;
		},

		setToggleAllButtonText: function setToggleAllButtonText(toggleAllButton, toggle) {
			var self = this;
			var textContainer = toggleAllButton.find('span.text');
			var caret = toggleAllButton.find('.caret');

			var showExpandingText = function showExpandingText() {
				var text = self.options.textFormatter(self.options.viewAllRepliesText);
				var replyCount = toggleAllButton.siblings('.comment').length;
				text = text.replace('__replyCount__', replyCount);
				textContainer.text(text);
			};

			var hideRepliesText = this.options.textFormatter(this.options.hideRepliesText);

			if (toggle) {
				if (textContainer.text() == hideRepliesText) {
					showExpandingText();
				} else {
					textContainer.text(hideRepliesText);
				}

				caret.toggleClass('up');
			} else {
				if (textContainer.text() != hideRepliesText) {
					showExpandingText();
				}
			}
		},

		adjustTextareaHeight: function adjustTextareaHeight(textarea, focus) {
			var textareaBaseHeight = 2.2;
			var lineHeight = 1.45;

			var setRows = function setRows(rows) {
				var height = textareaBaseHeight + (rows - 1) * lineHeight;
				textarea.css('height', height + 'em');
			};

			textarea = $(textarea);
			var rowCount = focus == true ? this.options.textareaRowsOnFocus : this.options.textareaRows;
			do {
				setRows(rowCount);
				rowCount++;
				var isAreaScrollable = textarea[0].scrollHeight > textarea.outerHeight();
				var maxRowsUsed = this.options.textareaMaxRows == false ? false : rowCount > this.options.textareaMaxRows;
			} while (isAreaScrollable && !maxRowsUsed);
		},

		clearTextarea: function clearTextarea(textarea) {
			textarea.empty().trigger('input');
		},

		getTextareaContent: function getTextareaContent(textarea, humanReadable) {
			var textareaClone = textarea.clone();

			textareaClone.find('.reply-to.tag').remove();

			textareaClone.find('.tag.hashtag').replaceWith(function () {
				return humanReadable ? $(this).val() : '#' + $(this).attr('data-value');
			});
			textareaClone.find('.tag.ping').replaceWith(function () {
				return humanReadable ? $(this).val() : '@' + $(this).attr('data-value');
			});

			var ce = $('<pre/>').html(textareaClone.html());
			ce.find('div, p, br').replaceWith(function () {
				return '\n' + this.innerHTML;
			});

			var text = ce.text().replace(/^\s+/g, '');

			var text = this.normalizeSpaces(text);
			return text;
		},

		getFormattedCommentContent: function getFormattedCommentContent(commentModel, replaceNewLines) {
			var html = this.escape(commentModel.content);
			html = this.linkify(html);
			html = this.highlightTags(commentModel, html);
			if (replaceNewLines) html = html.replace(/(?:\n)/g, '<br>');
			return html;
		},

		getPings: function getPings(textarea) {
			return $.map(textarea.find('.ping'), function (el) {
				return parseInt($(el).attr('data-value'));
			});
		},

		moveCursorToEnd: function moveCursorToEnd(el) {
			el = $(el)[0];

			$(el).trigger('input');

			$(el).scrollTop(el.scrollHeight);

			if (typeof window.getSelection != 'undefined' && typeof document.createRange != 'undefined') {
				var range = document.createRange();
				range.selectNodeContents(el);
				range.collapse(false);
				var sel = window.getSelection();
				sel.removeAllRanges();
				sel.addRange(range);
			} else if (typeof document.body.createTextRange != 'undefined') {
				var textRange = document.body.createTextRange();
				textRange.moveToElementText(el);
				textRange.collapse(false);
				textRange.select();
			}

			el.focus();
		},

		escape: function escape(inputText) {
			return $('<pre/>').text(this.normalizeSpaces(inputText)).html();
		},

		normalizeSpaces: function normalizeSpaces(inputText) {
			return inputText.replace(new RegExp('\xA0', 'g'), ' ');
		},

		after: function after(times, func) {
			var self = this;
			return function () {
				times--;
				if (times == 0) {
					return func.apply(self, arguments);
				}
			};
		},

		highlightTags: function highlightTags(commentModel, html) {
			if (this.options.enableHashtags) html = this.highlightHashtags(commentModel, html);
			if (this.options.enablePinging) html = this.highlightPings(commentModel, html);
			return html;
		},

		highlightHashtags: function highlightHashtags(commentModel, html) {
			var self = this;

			if (html.indexOf('#') != -1) {
				var __createTag = function __createTag(tag) {
					var tag = self.createTagElement('#' + tag, 'hashtag', tag);
					return tag[0].outerHTML;
				};

				var regex = /(^|\s)#([a-zäöüß\d-_]+)/gim;
				html = html.replace(regex, function ($0, $1, $2) {
					return $1 + __createTag($2);
				});
			}
			return html;
		},

		highlightPings: function highlightPings(commentModel, html) {
			var self = this;

			if (html.indexOf('@') != -1) {

				var __createTag = function __createTag(user) {
					var tag = self.createTagElement('@' + user.fullname, 'ping', user.id);
					return tag[0].outerHTML;
				};

				var highlightedHtml = '';
				$(commentModel.pings).each(function (index, id) {
					if (id in self.usersById) {
						var user = self.usersById[id];
						var pingText = '@' + user.id;

						var endIndex = html.indexOf(pingText) + pingText.length;
						var current = html.slice(0, endIndex);
						highlightedHtml += current.replace(pingText, __createTag(user));

						html = html.slice(endIndex);
					}
				});
				highlightedHtml += html;
				return highlightedHtml;
			}
			return html;
		},

		linkify: function linkify(inputText) {
			var replacedText, replacePattern1, replacePattern2, replacePattern3;

			replacePattern1 = /(^|\s)((https?|ftp|file):\/\/[-A-Z0-9+&@#\/%?=~_|!:,.;]*[-A-Z0-9+&@#\/%=~_|])/gim;
			replacedText = inputText.replace(replacePattern1, '$1<a href="$2" target="_blank">$2</a>');

			replacePattern2 = /(^|\s)(www\.[\S]+(\b|$))/gim;
			replacedText = replacedText.replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>');

			replacePattern3 = /(^|\s)(([a-zA-Z0-9\-\_\.]+)@[a-zA-Z\_]+?(\.[a-zA-Z]{2,6})+)/gim;
			replacedText = replacedText.replace(replacePattern3, '$1<a href="mailto:$2">$2</a>');

			var count = inputText.match(/<a href/g) || [];

			if (count.length > 0) {
				var splitInput = inputText.split(/(<\/a>)/g);
				for (var i = 0; i < splitInput.length; i++) {
					if (splitInput[i].match(/<a href/g) == null) {
						splitInput[i] = splitInput[i].replace(replacePattern1, '<a href="$1" target="_blank">$1</a>').replace(replacePattern2, '$1<a href="http://$2" target="_blank">$2</a>').replace(replacePattern3, '<a href="mailto:$1">$1</a>');
					}
				}
				var combinedReplacedText = splitInput.join('');
				return combinedReplacedText;
			} else {
				return replacedText;
			}
		},

		waitUntil: function waitUntil(condition, callback) {
			var self = this;

			if (condition()) {
				callback();
			} else {
				setTimeout(function () {
					self.waitUntil(condition, callback);
				}, 100);
			}
		},

		applyInternalMappings: function applyInternalMappings(commentJSON) {
			var invertedMappings = {};
			var mappings = this.options.fieldMappings;
			for (var prop in mappings) {
				if (mappings.hasOwnProperty(prop)) {
					invertedMappings[mappings[prop]] = prop;
				}
			}

			return this.applyMappings(invertedMappings, commentJSON);
		},

		applyExternalMappings: function applyExternalMappings(commentJSON) {
			var mappings = this.options.fieldMappings;
			return this.applyMappings(mappings, commentJSON);
		},

		applyMappings: function applyMappings(mappings, commentJSON) {
			var result = {};

			for (var key1 in commentJSON) {
				if (key1 in mappings) {
					var key2 = mappings[key1];
					result[key2] = commentJSON[key1];
				}
			}
			return result;
		}

	};

	$.fn.comments = function (options) {
		return this.each(function () {
			var comments = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_object_create___default()(Comments);
			$.data(this, 'comments', comments);
			comments.init(options || {}, this);
		});
	};
});
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(36), __webpack_require__(719)(module)))

/***/ }),
/* 702 */,
/* 703 */,
/* 704 */,
/* 705 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_ctk_date_time_picker__ = __webpack_require__(646);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_vue_ctk_date_time_picker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_vue_ctk_date_time_picker__);



/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    'vue-ctk-date-time-picker': __WEBPACK_IMPORTED_MODULE_0_vue_ctk_date_time_picker___default.a
  },
  props: ['dueDateEdit'],
  data: function data() {
    return {
      dueDateInput: '',
      minDate: null
    };
  },
  created: function created() {
    var vm = this;
    vm.dueDateInput = vm.dueDateEdit ? vm.formatDateInput(vm.dueDateEdit) : '';
  },

  watch: {},
  mounted: function mounted() {
    this.dueDateInput = this.dueDateEdit ? this.formatDateInput(this.dueDateEdit) : '';

    this.minDate = this.getCurentDateTime('date');
  },

  methods: {
    getDateInput: function getDateInput() {
      var vm = this;

      var date = vm.dueDateInput ? new Date(vm.dueDateInput).getTime() : '';
      return date;
    },
    getCurentDateTime: function getCurentDateTime(type) {
      var date = new Date();
      if (type === 'datetime') {
        return date.getDate().toString().padStart(2, '0') + '/' + (date.getMonth() + 1).toString().padStart(2, '0') + '/' + date.getFullYear() + ' | ' + date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');
      } else if (type === 'date') {
        return date.getFullYear() + '-' + (date.getMonth() + 1).toString().padStart(2, '0') + '-' + date.getDate().toString().padStart(2, '0');
      }
    },
    formatDateInput: function formatDateInput(date) {
      return date.getFullYear() + '-' + (date.getMonth() + 1).toString().padStart(2, '0') + '-' + date.getDate().toString().padStart(2, '0') + ' ' + date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');
    },
    showDatePicker: function showDatePicker() {
      this.$refs.datepicker.showDatePicker();
    }
  }
});

/***/ }),
/* 706 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__ = __webpack_require__(689);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_ctk_date_time_picker__ = __webpack_require__(646);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_vue_ctk_date_time_picker___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_vue_ctk_date_time_picker__);




/* harmony default export */ __webpack_exports__["default"] = ({
  components: {
    'vue-ctk-date-time-picker': __WEBPACK_IMPORTED_MODULE_1_vue_ctk_date_time_picker___default.a
  },
  props: ['extendDateEdit', 'type'],
  data: function data() {
    return {
      extendDateInput: '',
      minDate: null,
      delayNote: ''
    };
  },
  created: function created() {
    var vm = this;
  },

  watch: {},
  mounted: function mounted() {
    this.extendDateInput = this.extendDateEdit ? this.parseCurrentDate(this.extendDateEdit) : this.formatDateInput(new Date());

    this.minDate = this.getCurentDateTime('date');
  },

  methods: {
    doExport: function doExport() {
      var vm = this;
      var date = vm.extendDateInput ? new Date(vm.extendDateInput).getTime() : '';
      var exportData;
      if (vm.type === 'overdue') {
        exportData = {
          text: vm.delayNote,
          extendDate: date,
          valid: vm.$refs.delayNoteForm.validate()
        };
      } else {
        exportData = {
          text: vm.delayNote,
          extendDate: date,
          valid: true
        };
      }
      return exportData;
    },
    getCurentDateTime: function getCurentDateTime(type) {
      var date = new Date();
      if (type === 'datetime') {
        return date.getDate().toString().padStart(2, '0') + '/' + (date.getMonth() + 1).toString().padStart(2, '0') + '/' + date.getFullYear() + ' | ' + date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');
      } else if (type === 'date') {
        return date.getFullYear() + '-' + (date.getMonth() + 1).toString().padStart(2, '0') + '-' + date.getDate().toString().padStart(2, '0');
      }
    },
    formatDateInput: function formatDateInput(date) {
      return date.getFullYear() + '-' + (date.getMonth() + 1).toString().padStart(2, '0') + '-' + date.getDate().toString().padStart(2, '0') + ' ' + date.getHours().toString().padStart(2, '0') + ':' + date.getMinutes().toString().padStart(2, '0');
    },
    showDatePicker: function showDatePicker() {
      this.$refs.datepicker.showDatePicker();
    },
    parseCurrentDate: function parseCurrentDate(date) {
      if (!date) {
        return null;
      }

      var _date$split = date.split(' '),
          _date$split2 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(_date$split, 2),
          day1 = _date$split2[0],
          time = _date$split2[1];

      var _$split = ('' + day1).split('/'),
          _$split2 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(_$split, 3),
          day2 = _$split2[0],
          month = _$split2[1],
          year = _$split2[2];

      var _$split3 = ('' + time).split(':'),
          _$split4 = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_helpers_slicedToArray___default()(_$split3, 3),
          hh = _$split4[0],
          mm = _$split4[1],
          ss = _$split4[2];

      return year + '-' + month.padStart(2, '0') + '-' + day2.padStart(2, '0') + ' ' + hh + ':' + mm;
    }
  }
});

/***/ }),
/* 707 */,
/* 708 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = { "default": __webpack_require__(709), __esModule: true };

/***/ }),
/* 709 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(710);
var $Object = __webpack_require__(30).Object;
module.exports = function create(P, D) {
  return $Object.create(P, D);
};


/***/ }),
/* 710 */
/***/ (function(module, exports, __webpack_require__) {

var $export = __webpack_require__(51);
// 19.1.2.2 / 15.2.3.5 Object.create(O [, Properties])
$export($export.S, 'Object', { create: __webpack_require__(218) });


/***/ }),
/* 711 */,
/* 712 */,
/* 713 */,
/* 714 */,
/* 715 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "phancong",
    staticStyle: {
      "background-color": "white",
      "width": "100%"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v("Ngày hẹn trả\n      ")]), _vm._v(" "), _c('v-card', [_c('v-card-text', [_c('v-layout', {
    staticClass: "pl-2",
    attrs: {
      "wrap": ""
    }
  }, [_c('v-icon', {
    staticClass: "hover-pointer ml-3",
    attrs: {
      "color": "blue"
    },
    on: {
      "click": _vm.showDatePicker
    }
  }, [_vm._v("event")]), _vm._v(" "), _c('vue-ctk-date-time-picker', {
    ref: "datepicker",
    staticClass: "ml-2",
    staticStyle: {
      "width": "auto!important"
    },
    attrs: {
      "format": "YYYY-MM-DDTHH:mm",
      "time-format": "HH:mm",
      "without-header": true,
      "formatted": "DD/MM/YYYY HH:mm",
      "label": _vm.dueDateInput ? '' : 'Chọn ngày',
      "min-date": _vm.minDate
    },
    model: {
      value: (_vm.dueDateInput),
      callback: function($$v) {
        _vm.dueDateInput = $$v
      },
      expression: "dueDateInput"
    }
  })], 1)], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-21461291", module.exports)
  }
}

/***/ }),
/* 716 */,
/* 717 */,
/* 718 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticStyle: {
      "background-color": "white",
      "width": "100%"
    }
  }, [(_vm.type === 'overdue') ? _c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" "), _c('span', [_vm._v("Lý do chậm hạn trả")]), _c('span', {
    staticStyle: {
      "color": "red"
    }
  }, [_vm._v(" *")])]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
    staticClass: "py-2 px-2"
  }, [_c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, [_c('v-flex', {
    attrs: {
      "xs12": ""
    }
  }, [(_vm.type === 'overdue') ? _c('v-form', {
    ref: "delayNoteForm",
    model: {
      value: (_vm.valid),
      callback: function($$v) {
        _vm.valid = $$v
      },
      expression: "valid"
    }
  }, [_c('v-text-field', {
    attrs: {
      "multi-line": "",
      "rows": 4,
      "rules": function () { return _vm.delayNote !== '' || 'Trường dữ liệu bắt buộc'; }
    },
    model: {
      value: (_vm.delayNote),
      callback: function($$v) {
        _vm.delayNote = $$v
      },
      expression: "delayNote"
    }
  })], 1) : _vm._e()], 1)], 1)], 1)], 1)], 1)], 1) : _vm._e(), _vm._v(" "), _c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" "), (_vm.type === 'overdue') ? _c('span', [_vm._v("Ngày hẹn lại")]) : _vm._e(), _vm._v(" "), (_vm.type === 'betimes') ? _c('span', [_vm._v("Ngày hẹn trả sớm")]) : _vm._e()]), _vm._v(" "), _c('v-card', [_c('v-card-text', [_c('v-layout', {
    staticClass: "pl-2",
    attrs: {
      "wrap": ""
    }
  }, [_c('v-icon', {
    staticClass: "hover-pointer ml-3",
    attrs: {
      "color": "blue"
    },
    on: {
      "click": _vm.showDatePicker
    }
  }, [_vm._v("event")]), _vm._v(" "), _c('vue-ctk-date-time-picker', {
    ref: "datepicker",
    staticClass: "ml-2",
    staticStyle: {
      "width": "auto!important"
    },
    attrs: {
      "format": "YYYY-MM-DDTHH:mm",
      "time-format": "HH:mm",
      "without-header": true,
      "formatted": "DD/MM/YYYY HH:mm",
      "label": _vm.extendDateInput ? '' : 'Chọn ngày',
      "min-date": _vm.minDate
    },
    model: {
      value: (_vm.extendDateInput),
      callback: function($$v) {
        _vm.extendDateInput = $$v
      },
      expression: "extendDateInput"
    }
  })], 1)], 1)], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-edbb7fea", module.exports)
  }
}

/***/ }),
/* 719 */
/***/ (function(module, exports) {

module.exports = function(originalModule) {
	if(!originalModule.webpackPolyfill) {
		var module = Object.create(originalModule);
		// module.parent = undefined by default
		if(!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		Object.defineProperty(module, "exports", {
			enumerable: true,
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),
/* 720 */,
/* 721 */,
/* 722 */,
/* 723 */,
/* 724 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__ = __webpack_require__(144);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__router__ = __webpack_require__(37);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_jquery___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_jquery__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__store_jquery_comment__ = __webpack_require__(701);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Comment_vue__ = __webpack_require__(224);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Comment_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4__Comment_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__form_xu_ly_ThongTinCoBanHoSo_vue__ = __webpack_require__(220);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__form_xu_ly_ThongTinCoBanHoSo_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5__form_xu_ly_ThongTinCoBanHoSo_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__form_xu_ly_PhanCongNguoiThucHien_vue__ = __webpack_require__(219);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__form_xu_ly_PhanCongNguoiThucHien_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6__form_xu_ly_PhanCongNguoiThucHien_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__form_xu_ly_TraKetQua_vue__ = __webpack_require__(221);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__form_xu_ly_TraKetQua_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7__form_xu_ly_TraKetQua_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__form_xu_ly_FeeDetail_vue__ = __webpack_require__(216);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__form_xu_ly_FeeDetail_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_8__form_xu_ly_FeeDetail_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__form_xu_ly_KyPheDuyetTaiLieu_vue__ = __webpack_require__(226);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__form_xu_ly_KyPheDuyetTaiLieu_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_9__form_xu_ly_KyPheDuyetTaiLieu_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__form_xu_ly_YkienCanBoThucHien_vue__ = __webpack_require__(222);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__form_xu_ly_YkienCanBoThucHien_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10__form_xu_ly_YkienCanBoThucHien_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__form_xu_ly_TaoTaiLieuKetQua_vue__ = __webpack_require__(227);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__form_xu_ly_TaoTaiLieuKetQua_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11__form_xu_ly_TaoTaiLieuKetQua_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__form_xu_ly_FormBoSungThongTinNgan_vue__ = __webpack_require__(225);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__form_xu_ly_FormBoSungThongTinNgan_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12__form_xu_ly_FormBoSungThongTinNgan_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__TiepNhan_TiepNhanHoSo_ThanhPhanHoSo_vue__ = __webpack_require__(212);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__TiepNhan_TiepNhanHoSo_ThanhPhanHoSo_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13__TiepNhan_TiepNhanHoSo_ThanhPhanHoSo_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__form_xu_ly_EditDate_vue__ = __webpack_require__(235);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__form_xu_ly_EditDate_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_14__form_xu_ly_EditDate_vue__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__form_xu_ly_ExtendDateEdit_vue__ = __webpack_require__(236);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15__form_xu_ly_ExtendDateEdit_vue___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_15__form_xu_ly_ExtendDateEdit_vue__);


















/* harmony default export */ __webpack_exports__["default"] = ({
  props: ['index', 'id'],
  components: {
    'comment': __WEBPACK_IMPORTED_MODULE_4__Comment_vue___default.a,
    'thong-tin-co-ban-ho-so': __WEBPACK_IMPORTED_MODULE_5__form_xu_ly_ThongTinCoBanHoSo_vue___default.a,
    'phan-cong': __WEBPACK_IMPORTED_MODULE_6__form_xu_ly_PhanCongNguoiThucHien_vue___default.a,
    'tra-ket-qua': __WEBPACK_IMPORTED_MODULE_7__form_xu_ly_TraKetQua_vue___default.a,
    'thu-phi': __WEBPACK_IMPORTED_MODULE_8__form_xu_ly_FeeDetail_vue___default.a,
    'ky-duyet': __WEBPACK_IMPORTED_MODULE_9__form_xu_ly_KyPheDuyetTaiLieu_vue___default.a,
    'y-kien-can-bo': __WEBPACK_IMPORTED_MODULE_10__form_xu_ly_YkienCanBoThucHien_vue___default.a,
    'tai-lieu-ket-qua': __WEBPACK_IMPORTED_MODULE_11__form_xu_ly_TaoTaiLieuKetQua_vue___default.a,
    'form-bo-sung-thong-tin': __WEBPACK_IMPORTED_MODULE_12__form_xu_ly_FormBoSungThongTinNgan_vue___default.a,
    'thanh-phan-ho-so': __WEBPACK_IMPORTED_MODULE_13__TiepNhan_TiepNhanHoSo_ThanhPhanHoSo_vue___default.a,
    'ngay-hen-tra': __WEBPACK_IMPORTED_MODULE_14__form_xu_ly_EditDate_vue___default.a,
    'ngay-gia-han': __WEBPACK_IMPORTED_MODULE_15__form_xu_ly_ExtendDateEdit_vue___default.a
  },
  data: function data() {
    return {
      inputTypes: [1, 3],
      outputTypes: [2],
      actionIdCurrent: 0,
      validateAction: true,
      btnIndex: -1,
      activeTab: 'tabs-1',
      btnDossierDynamics: [],
      btnStepsDynamics: [],
      loadingAction: false,
      indexAction: -1,
      indexActionStep: -1,
      dossierId: '',
      className: 'org.opencps.dossiermgt.model.Dossier',
      dossierFilesItems: [],
      dossierTemplatesItems: [],
      fileViews: [],
      showContactDetail: false,
      listHistoryProcessing: [],
      dossierTemplatesTN: [],
      dossierTemplatesKQ: [],
      thongTinChiTietHoSo: {},
      dialogPDF: false,
      dialogPDFLoading: true,
      loadingAlpacajsForm: false,
      nextActions: [],
      createFiles: [],
      processSteps: [],
      documents: [],
      payments: '',
      dossierActions: [],
      itemselect: '',
      dossierSyncs: [],
      stepModel: null,
      actionNote: '',
      actionsSubmitLoading: false,
      showThongTinCoBanHoSo: false,
      showYkienCanBoThucHien: false,
      showFormBoSungThongTinNgan: false,
      showPhanCongNguoiThucHien: false,
      showTaoTaiLieuKetQua: false,
      showKyPheDuyetTaiLieu: false,
      showTraKetQua: false,
      showThuPhi: false,
      showEditDate: false,
      showExtendDateEdit: false,
      checkInput: 0,
      viaPortalDetail: 0,
      showThucHienThanhToanDienTu: false,
      dossierItemDialogPick: '',
      itemDialogPick: '',
      resultDialogPick: '',
      indexDialogPick: '',
      userNote: 0,
      partView: '',
      stateView: false,
      payment_type: 0,
      type_assign: 0,
      returnFiles: [],
      assign_items: [],
      btnStateVisible: true,
      extendDateEdit: '',
      typeExtendDate: '',
      dueDateEdit: '',
      receiveDateEdit: '',
      dialogActionProcess: false,
      rollbackable: false,
      configNote: null,
      actionSpecial: false,
      headers: [{
        text: '#',
        align: 'center',
        sortable: false
      }, {
        text: 'Vai trò',
        align: 'center',
        sortable: false,
        class: 'vaitro_column'
      }, {
        text: 'Công việc',
        align: 'center',
        sortable: false,
        class: 'congviec_column'
      }, {
        text: 'Thời hạn quy định',
        align: 'center',
        sortable: false,
        class: 'thoihanquydinh_column'
      }, {
        text: 'Ngày bắt đầu',
        align: 'center',
        sortable: false,
        class: 'ngaybatdau_column'
      }, {
        text: 'Người thực hiện',
        align: 'center',
        sortable: false,
        class: 'nguoithuchien_column'
      }, {
        text: 'Kết quả',
        align: 'center',
        sortable: false,
        class: 'ketqua_column'
      }],
      headerSyncs: [{
        text: 'Nhật kí hồ sơ',
        align: 'center',
        sortable: false,
        class: 'nhatki_column'
      }, {
        text: 'Trao đổi trực tuyến',
        align: 'center',
        sortable: false,
        class: 'traodoitructuyen_column'
      }],
      filterDossierActionItems: [{
        text: 'Tất cả',
        value: ''
      }, {
        text: 'Có thao tác thực hiện',
        value: '1'
      }, {
        text: 'Không thao tác thực hiện',
        value: '2'
      }],
      filterDossierAction: null,
      filterDossierSyncItems: [{
        text: 'Tất cả',
        value: '1,2'
      }, {
        text: 'Thông tin trao đổi',
        value: '2'
      }],
      filterDossierSync: null,
      messageChat: '',
      isCallBack: true,
      printDocument: false,
      alertObj: {
        icon: 'check_circle',
        color: 'success',
        message: 'Thực hiện thành công!'
      },
      stateViewResult: true,
      stateViewDocument: true
    };
  },
  computed: {
    loading: function loading() {
      return this.$store.getters.loading;
    },
    originality: function originality() {
      var vm = this;
      return vm.getOriginality();
    },
    getCheckInput: function getCheckInput() {
      return this.$store.getters.getCheckInput;
    },
    usersNextAction: function usersNextAction() {
      return this.$store.getters.getUsersNextAction;
    },
    stepOverdueNextAction: function stepOverdueNextAction() {
      return this.$store.getters.getStepOverdueNextAction;
    },
    currentUser: function currentUser() {
      return this.$store.getters.loadingInitData.user;
    }
  },
  created: function created() {
    var vm = this;
    vm.$nextTick(function () {
      vm.initData(vm.id);
      vm.btnIndex = -1;
      var currentQuery = vm.$router.history.current.query;
      if (currentQuery.hasOwnProperty('activeTab')) {
        vm.activeTab = currentQuery.activeTab;
        vm.btnIndex = currentQuery['btnIndex'];
        if (currentQuery.hasOwnProperty('actionSpecial') && currentQuery['actionSpecial'] !== null && currentQuery['actionSpecial'] !== undefined && currentQuery['actionSpecial'] !== 'undefined') {
          vm.actionSpecial = currentQuery['actionSpecial'];
        }
        vm.thongTinChiTietHoSo['dossierId'] = vm.id;
        vm.btnStateVisible = true;
        if (currentQuery['btnIndex'].toString() !== '111' && currentQuery['btnIndex'].toString() !== '333') {
          vm.getNextActions();
        }
      }
    });
  },
  updated: function updated() {
    var vm = this;
    vm.$nextTick(function () {
      var currentParams = vm.$router.history.current.params;
      var currentQuery = vm.$router.history.current.query;
      if (currentParams.hasOwnProperty('activeTab') && vm.isCallBack) {
        vm.isCallBack = false;
        vm.btnDossierDynamics = [];
        vm.btnIndex = -1;
        vm.activeTab = currentQuery.activeTab;
        vm.btnIndex = currentQuery['btnIndex'];
        if (currentQuery.hasOwnProperty('actionSpecial') && currentQuery['actionSpecial'] !== null && currentQuery['actionSpecial'] !== undefined && currentQuery['actionSpecial'] !== 'undefined') {
          vm.actionSpecial = currentQuery['actionSpecial'];
        }
        vm.thongTinChiTietHoSo['dossierId'] = vm.id;
        vm.btnStateVisible = true;
        vm.getNextActions();
      }
    });
  },

  watch: {
    '$route': function $route(newRoute, oldRoute) {
      var vm = this;
      var currentQuery = newRoute.query;
    }
  },
  methods: {
    initData: function initData(data) {
      var vm = this;
      vm.dossierId = data;
      vm.$store.dispatch('getDetailDossier', data).then(function (resultDossier) {
        vm.thongTinChiTietHoSo = resultDossier;
        vm.getNextActions();
        vm.runComment();

        vm.$store.dispatch('loadDossierDocuments', resultDossier).then(function (resultDocuments) {
          if (Array.isArray(resultDocuments)) {
            vm.documents = resultDocuments;
          } else {
            vm.documents.push(resultDocuments);
          }
        });

        if (vm.$refs.thanhphanhoso) {
          vm.$refs.thanhphanhoso.initData(resultDossier);
        }
        if (vm.$refs.thanhphanhoso1) {
          vm.$refs.thanhphanhoso1.initData(resultDossier);
        }
        if (vm.$refs.thanhphanhoso2) {
          vm.$refs.thanhphanhoso2.initData(resultDossier);
        }
        vm.$store.dispatch('pullBtnConfigStep', resultDossier).then(function (result) {
          vm.btnStepsDynamics = result;
        });
      });
    },
    recountFileTemplates: function recountFileTemplates() {
      var vm = this;
      vm.dossierTemplatesItems.forEach(function (itemTemplate) {
        itemTemplate.count = 0;
        vm.dossierFilesItems.forEach(function (itemFile) {
          if (itemTemplate.partNo === itemFile.dossierPartNo) {
            itemTemplate.count++;
          }
        });
      });
    },
    runComment: function runComment() {
      var vm = this;
      if (vm.$refs.comment) {
        vm.$refs.comment.runComment();
      }
    },
    goBack: function goBack() {
      window.history.back();
    },
    viewFile: function viewFile(data) {
      var _this = this;

      var vm = this;
      vm.dossierFilesItems.forEach(function (val) {
        val['dossierId'] = vm.thongTinChiTietHoSo.dossierId;
        if (val.dossierPartNo === data.partNo) {
          _this.$store.dispatch('viewFile', val);
        }
      });
    },
    downloadFileLogs: function downloadFileLogs(data) {
      var vm = this;
      var dataCommit = {
        fileAttachId: data,
        dossierId: vm.id
      };
      this.$store.dispatch('downloadFile', dataCommit);
    },
    loadDossierActions: function loadDossierActions(data) {
      var vm = this;
      if (vm.thongTinChiTietHoSo.dossierId) {
        var dataParams = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          stepType: data
        };
        vm.$store.dispatch('loadDossierActions', dataParams).then(function (resultActions) {
          if (resultActions.data) {
            var resultTemp = resultActions.data;
            for (var i = 0; i < resultTemp.length; i++) {
              if (resultTemp[i].hasOwnProperty('actions') && resultTemp[i]['actions'] !== null && resultTemp[i]['actions'] !== undefined) {
                if (!Array.isArray(resultTemp[i]['actions'])) {
                  var arrActionsTemp = [];
                  arrActionsTemp.push(resultTemp[i]['actions']);
                  resultTemp[i]['actions'] = arrActionsTemp;
                }
              }
            }
            vm.dossierActions = resultTemp;
          }
        });
      }
    },
    loadDossierSyncs: function loadDossierSyncs(data) {
      var vm = this;
      if (vm.thongTinChiTietHoSo.dossierId) {
        var dataParams = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          info: '1,2'
        };
        vm.$store.dispatch('loadDossierSyncs', dataParams).then(function (resultSyncs) {
          if (resultSyncs !== null && resultSyncs !== undefined && resultSyncs !== 'undefined') {
            if (Array.isArray(resultSyncs)) {
              vm.dossierSyncs = resultSyncs;
            } else {
              vm.dossierSyncs = [resultSyncs];
            }
          } else {
            vm.dossierSyncs = [];
          }
        });
      }
    },
    loadDossierLogs: function loadDossierLogs(data) {
      var vm = this;

      var dataParams = {
        dossierId: vm.thongTinChiTietHoSo.dossierId
      };
      var promiseHisProcessing = vm.$store.dispatch('getListHistoryProcessingItems', dataParams);
      promiseHisProcessing.then(function (result) {
        vm.listHistoryProcessing = [];
        vm.listHistoryProcessing = result;
      });
    },
    deleteDossierFileVersion: function deleteDossierFileVersion(item) {
      var vm = this;
      item['dossierId'] = vm.thongTinChiTietHoSo.dossierId;
      vm.$store.dispatch('deleteAttackFiles', item).then(function (res) {});
    },
    pickFile: function pickFile(item) {
      document.getElementById('file' + item.partNo).click();
    },
    postChat: function postChat() {
      var vm = this;
      if (vm.messageChat) {
        var params = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          actionCode: vm.originality === 3 ? '8200' : '8100',
          actionNote: vm.messageChat,
          actionUser: ''
        };
        vm.$store.dispatch('postAction', params).then(function (result) {
          vm.loadDossierSyncs();
        });
        vm.messageChat = '';
      }
    },
    getNextAction: function getNextAction(item) {
      var vm = this;
      vm.actionIdCurrent = item.processActionId;
      if (item.type === 1) {
        var filter = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          actionId: item.processActionId
        };
        vm.$store.dispatch('getNextAction', filter).then(function (resultAction) {
          vm.stepModel = resultAction;
        }).catch(function (reject) {
          vm.stepModel = null;
        });
      } else {
        var _filter = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          actionId: item.processActionId
        };
        vm.$store.dispatch('loadPlugin', _filter).then(function (resultPlugin) {
          vm.stepModel = resultPlugin;
        }).catch(function (reject) {
          vm.stepModel = null;
        });
      }
    },
    processPullBtnDetailRouter: function processPullBtnDetailRouter(dossierItem, item, result, index) {
      var vm = this;
      var isPopup = false;
      vm.dossierId = dossierItem.dossierId;
      vm.showYkienCanBoThucHien = false;
      vm.showFormBoSungThongTinNgan = false;
      vm.showPhanCongNguoiThucHien = false;
      vm.showTaoTaiLieuKetQua = false;
      vm.showKyPheDuyetTaiLieu = false;
      vm.showTraKetQua = false;
      vm.showThuPhi = false;
      vm.showEditDate = false;
      vm.showExtendDateEdit = false;
      vm.showThucHienThanhToanDienTu = false;
      vm.dossierItemDialogPick = dossierItem;
      vm.itemDialogPick = item;
      vm.resultDialogPick = result;
      vm.indexDialogPick = index;
      vm.userNote = 0;
      if (result.hasOwnProperty('configNote') && result.configNote !== null && result.configNote !== undefined && result.configNote !== 'undefined') {
        try {
          vm.configNote = JSON.parse(result.configNote);
          if (vm.configNote.confirm) {
            isPopup = true;
          }
        } catch (e) {}
      }

      if (result !== null && result !== undefined && result !== 'undefined' && (result.hasOwnProperty('userNote') || result.hasOwnProperty('extraForm') || result.hasOwnProperty('allowAssignUser') || result.hasOwnProperty('createFiles') || result.hasOwnProperty('eSignature') || result.hasOwnProperty('returnFiles') || result.hasOwnProperty('payment') || result.hasOwnProperty('checkInput') || result.hasOwnProperty('overdue') || result.hasOwnProperty('betimes'))) {
        if (result.hasOwnProperty('userNote') && (result.userNote === 1 || result.userNote === '1' || result.userNote === 2 || result.userNote === '2')) {
          isPopup = true;
          vm.showYkienCanBoThucHien = true;
          vm.userNote = result.userNote;
        }
        if (result.hasOwnProperty('extraForm') && result.extraForm) {
          isPopup = true;
          vm.showFormBoSungThongTinNgan = true;
        }
        if (result.hasOwnProperty('allowAssignUser') && result.allowAssignUser !== 0) {
          if (Array.isArray(result.toUsers)) {
            vm.assign_items = result.toUsers;
          } else {
            vm.assign_items = [result.toUsers];
          }
          vm.type_assign = result.allowAssignUser;
          isPopup = true;
          vm.showPhanCongNguoiThucHien = true;
        }
        if (result.hasOwnProperty('createFiles') && result.createFiles !== null && result.createFiles !== undefined && result.createFiles !== 'undefined') {
          isPopup = true;
          if (Array.isArray(result.createFiles)) {
            vm.createFiles = result.createFiles;
          } else {
            vm.createFiles = [result.createFiles];
          }
          vm.showTaoTaiLieuKetQua = true;
        }
        if (result.hasOwnProperty('eSignature') && result.eSignature) {
          isPopup = true;
          vm.showKyPheDuyetTaiLieu = true;
        }
        if (result.hasOwnProperty('returnFiles') && result.returnFiles !== null && result.returnFiles !== undefined && result.returnFiles !== 'undefined' && result.returnFiles.length > 0) {
          isPopup = true;
          vm.showTraKetQua = true;
          vm.returnFiles = result.returnFiles;
        }
        if (result.hasOwnProperty('payment') && result.payment !== null && result.payment !== undefined && result.payment !== 'undefined' && result.payment.requestPayment > 0) {
          isPopup = true;
          vm.showThuPhi = true;
          vm.payments = result.payment;
          vm.viaPortalDetail = dossierItem.viaPostal;
        }
        if (result.hasOwnProperty('receiving') && result.receiving !== null && result.receiving !== undefined && result.receiving !== 'undefined' && result.receiving.editable === true) {
          isPopup = true;
          vm.showEditDate = true;
          vm.dueDateEdit = result.receiving.dueDate !== '' ? new Date(result.receiving.dueDate) : '';
          vm.receiveDateEdit = result.receiving.receiveDate;
        }
        if (result.hasOwnProperty('overdue')) {
          isPopup = true;
          vm.showExtendDateEdit = true;
          vm.extendDateEdit = result.overdue;
          vm.typeExtendDate = 'overdue';
        }
        if (result.hasOwnProperty('betimes')) {
          isPopup = true;
          vm.showExtendDateEdit = true;
          vm.extendDateEdit = result.betimes;
          vm.typeExtendDate = 'betimes';
        }
      }

      if (isPopup) {
        vm.loadingAction = false;
        vm.dialogActionProcess = true;
        vm.loadingActionProcess = false;
      } else {
        vm.loadingAction = true;
        vm.processAction(vm.thongTinChiTietHoSo, item, result, index, false);
      }
    },
    processPullBtnDetail: function processPullBtnDetail(item, index) {
      var vm = this;
      vm.btnIndex = index;
      vm.itemAction = item;
      vm.actionIdCurrent = item.processActionId;
      var filter = {
        dossierId: vm.thongTinChiTietHoSo.dossierId,
        actionId: item.processActionId
      };
      vm.dossierId = vm.thongTinChiTietHoSo.dossierId;
      vm.loadingAction = true;
      vm.dialogActionProcess = false;
      vm.loadingActionProcess = true;
      vm.$store.dispatch('processPullBtnDetail', filter).then(function (result) {
        vm.loadingActionProcess = false;
        vm.processPullBtnDetailRouter(vm.thongTinChiTietHoSo, item, result, index);
      }).catch(function (reject) {
        vm.loadingAction = false;
        vm.loadingActionProcess = false;
      });
    },
    btnActionEvent: function btnActionEvent(item, index) {
      var vm = this;
      vm.itemAction = item;
      vm.indexAction = index;
      if (String(item.form) === 'UPDATE') {
        __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
          path: '/danh-sach-ho-so/' + vm.index + '/ho-so/' + vm.thongTinChiTietHoSo.dossierId + '/' + vm.itemAction.form,
          query: vm.$router.history.current.query
        });
      } else if (String(item.form) === 'ADD') {
        __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
          path: '/danh-sach-ho-so/' + vm.index + '/bo-sung-ho-so/' + vm.thongTinChiTietHoSo.dossierId,
          query: vm.$router.history.current.query
        });
      } else if (String(item.form) === 'COPY') {
        vm.doCopy(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'CANCEL') {
        vm.doCancel(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'PRINT_01') {
        vm.doPrint01(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'PRINT_02') {
        vm.doPrint02(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'PRINT_03') {
        vm.doPrint03(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'GUIDE') {} else if (String(item.form) === 'PREVIEW') {
        vm.doPreview(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'ACTIONS') {} else if (String(item.form) === 'DELETE') {
        vm.doDeleteDossier(vm.thongTinChiTietHoSo, item, index);
      } else if (String(item.form) === 'ROLLBACK_01') {
        var result = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          actionCode: 9000
        };
        vm.doActionSpecial(result);
      } else if (String(item.form) === 'ROLLBACK_02') {
        var _result = {
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          actionCode: 9000
        };
        vm.doActionSpecial(_result);
      } else if (String(item.form) === 'OVERDUE') {
        vm.btnIndex = 111;
        var _result2 = {
          actionCode: 8500,
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          overdue: vm.thongTinChiTietHoSo['extendDate'] ? vm.thongTinChiTietHoSo['extendDate'] : ''
        };

        vm.processPullBtnDetailRouter(vm.thongTinChiTietHoSo, null, _result2, null);
      } else if (String(item.form) === 'BETIMES') {
        vm.btnIndex = 333;
        var _result3 = {
          actionCode: 8400,
          dossierId: vm.thongTinChiTietHoSo.dossierId,
          betimes: vm.thongTinChiTietHoSo['extendDate'] ? vm.thongTinChiTietHoSo['extendDate'] : ''
        };

        vm.processPullBtnDetailRouter(vm.thongTinChiTietHoSo, null, _result3, null);
      }
    },
    doPrint01: function doPrint01(dossierItem, item, index) {
      var vm = this;
      vm.dialogPDFLoading = true;
      vm.dialogPDF = true;
      var filter = {
        dossierId: dossierItem.dossierId,
        document: item.document
      };
      vm.$store.dispatch('doPrint01', filter).then(function (result) {
        vm.dialogPDFLoading = false;
        document.getElementById('dialogPDFPreview').src = result;
      });
    },
    doPreview: function doPreview(dossierItem, item, index) {
      var vm = this;
      vm.dialogPDFLoading = true;
      vm.dialogPDF = true;
      var filter = {
        dossierId: dossierItem.dossierId,
        document: item.document
      };
      vm.$store.dispatch('doPrint03', filter).then(function (result) {
        vm.dialogPDFLoading = false;
        document.getElementById('dialogPDFPreview').src = result;
      });
    },
    doCopy: function doCopy(dossierItem, item, index) {
      var vm = this;
      var filter = {
        dossierId: dossierItem.dossierId
      };
      vm.loadingAction = true;
      vm.$store.dispatch('doCopy', filter).then(function (result) {
        vm.loadingAction = false;
        __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
          path: '/danh-sach-ho-so/' + vm.index + '/ho-so/' + result.dossierId + '/' + vm.itemAction.form,
          query: vm.$router.history.current.query
        });
      }).catch(function (reject) {
        vm.loadingAction = false;
      });
    },
    doDeleteDossier: function doDeleteDossier(dossierItem, item, index) {
      var vm = this;
      var x = confirm('Bạn có muốn thực hiện hành động này?');
      if (x) {
        var filter = {
          dossierId: dossierItem.dossierId
        };
        var currentQuery = vm.$router.history.current.query;
        vm.$store.dispatch('deleteDossier', filter).then(function (result) {
          vm.dialogActionProcess = false;
          vm.loadingActionProcess = false;
          vm.goBack();
        });
      } else {
        return false;
      }
    },
    doCancel: function doCancel(dossierItem, item, index) {
      var vm = this;
      vm.loadingAction = true;
      var filter = {
        dossierId: dossierItem.dossierId
      };
      vm.$store.dispatch('doCancel', filter).then(function (result) {
        vm.loadingAction = false;
        vm.indexAction = -1;
        __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
          path: '/danh-sach-ho-so/' + vm.index + '/ho-so/' + result.dossierId + '/' + vm.itemAction.form,
          query: vm.$router.history.current.query
        });
      }).catch(function (reject) {
        vm.loadingAction = false;
      });
    },
    doCreateDossier: function doCreateDossier() {
      var vm = this;
      var data = {
        serviceCode: vm.serviceCode,
        govAgencyCode: vm.govAgencyCode,
        templateNo: vm.templateNo,
        originality: vm.getOriginality()
      };
      vm.loadingAction = true;
      vm.$store.dispatch('postDossier', data).then(function (result) {
        vm.loadingAction = false;
        vm.indexAction = -1;
        __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
          path: '/danh-sach-ho-so/' + vm.index + '/ho-so/' + result.dossierId + '/' + vm.itemAction.form,
          query: vm.$router.history.current.query
        });
      }).catch(function (reject) {
        vm.loadingAction = false;
      });
    },
    rollBack: function rollBack() {
      var vm = this;
      var params = {
        dossierId: vm.thongTinChiTietHoSo.dossierId
      };
      vm.$store.dispatch('rollBack', params).then(function (resRollBack) {
        vm.getNextActions();
        vm.rollbackable = false;
        vm.btnStateVisible = true;
      }).catch(function (reject) {
        vm.alertObj = {
          icon: 'error',
          color: 'error',
          message: 'Rút lại hồ sơ không thành công!'
        };
        vm.btnStateVisible = false;
      });
    },
    processAction: function processAction(dossierItem, item, result, index, isConfirm) {
      var vm = this;
      var validPhanCong = true;
      var validYKien = true;
      var validTreHan = true;
      var initData = vm.$store.getters.loadingInitData;
      var actionUser = initData.user.userName ? initData.user.userName : '';
      var filter = {
        dossierId: dossierItem.dossierId,
        actionCode: result.actionCode,
        actionUser: actionUser
      };
      if (vm.showPhanCongNguoiThucHien) {
        filter['toUsers'] = vm.assign_items;
        var _result4 = vm.$refs.phancong.doExport();
        if (_result4) {
          validPhanCong = true;
        } else {
          validPhanCong = false;
        }
      }
      var paymentsOut = null;
      if (vm.payments) {
        paymentsOut = {
          requestPayment: vm.payments['requestPayment'],
          paymentNote: vm.payments['paymentNote'],
          advanceAmount: Number(vm.payments['advanceAmount'].toString().replace(/\./g, '')),
          feeAmount: Number(vm.payments['feeAmount'].toString().replace(/\./g, '')),
          serviceAmount: Number(vm.payments['serviceAmount'].toString().replace(/\./g, '')),
          shipAmount: Number(vm.payments['shipAmount'].toString().replace(/\./g, ''))
        };
      }
      if (vm.showThuPhi) {
        filter['payment'] = paymentsOut;
      }
      if (vm.showEditDate) {
        var date = vm.$refs.ngayhentra.getDateInput();

        var payload = {
          'dueDate': date,
          'receiveDate': vm.receiveDateEdit
        };
        filter['payload'] = payload;
      }
      if (vm.showExtendDateEdit) {
        var data = vm.$refs.ngaygiahan.doExport();

        if (data.valid) {
          validTreHan = true;
        } else {
          validTreHan = false;
        }
        var _payload = {
          'extendDate': data.extendDate
        };
        if (vm.typeExtendDate === 'overdue') {
          _payload = {
            'extendDate': data.extendDate,
            'delayNote': data.text
          };
        }
        filter['payload'] = _payload;
      }
      if (vm.showFormBoSungThongTinNgan) {
        filter['payload'] = vm.$refs.formBoSungThongTinNgan.formSubmitData();
      }
      if (vm.showKyPheDuyetTaiLieu) {
        var _result5 = vm.$refs.kypheduyettailieu.doExport();
      }
      if (vm.showYkienCanBoThucHien) {
        var _result6 = vm.$refs.ykiencanbo.doExport();
        var note = '';
        if (_result6.valid) {
          validYKien = true;
          note = _result6.text;
        } else {
          validYKien = false;
        }
        filter['userNote'] = note;
      }
      if (validPhanCong && validYKien && validTreHan) {
        vm.validateAction = true;
      } else {
        vm.validateAction = false;
      }
      vm.dossierId = dossierItem.dossierId;
      var currentQuery = vm.$router.history.current.query;
      vm.loadingActionProcess = true;
      if (isConfirm) {
        var x = confirm('Bạn có muốn thực hiện hành động này?');
        if (x && vm.validateAction) {
          vm.$store.dispatch('processDossierRouter', filter).then(function (result) {
            vm.loadingAction = false;
            vm.dialogActionProcess = false;
            vm.loadingActionProcess = false;
            vm.alertObj = {
              icon: 'check_circle',
              color: 'success',
              message: 'Thực hiện thành công!'
            };
            vm.btnStateVisible = false;
            if (result.hasOwnProperty('rollbackable') && result['rollbackable'] !== null && result['rollbackable'] !== undefined) {
              vm.rollbackable = result.rollbackable;
            }
            if (result.hasOwnProperty('dossierDocumentId') && result['dossierDocumentId'] !== null && result['dossierDocumentId'] !== undefined && result['dossierDocumentId'] !== 0 && result['dossierDocumentId'] !== '0') {
              vm.printDocument = true;
            }

            __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
              path: vm.$router.history.current.path,
              query: {
                recount: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
                renew: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
                q: currentQuery['q']
              }
            });
          }).catch(function (reject) {
            vm.loadingAction = false;
            vm.loadingActionProcess = false;
          });
        } else {
          return false;
        }
      } else if (vm.validateAction) {
        if (vm.checkInput === 2 && vm.$refs.thanhphanhoso !== null && vm.$refs.thanhphanhoso !== undefined && vm.$refs.thanhphanhoso !== 'undefined') {
          var valid = vm.$refs.thanhphanhoso.validDossierTemplate();
          if (!valid) {
            return;
          }
        }
        vm.$store.dispatch('processDossierRouter', filter).then(function (result) {
          vm.loadingAction = false;
          vm.dialogActionProcess = false;
          vm.loadingActionProcess = false;
          vm.alertObj = {
            icon: 'check_circle',
            color: 'success',
            message: 'Thực hiện thành công!'
          };
          vm.btnStateVisible = false;
          if (result.hasOwnProperty('rollbackable') && result['rollbackable'] !== null && result['rollbackable'] !== undefined) {
            vm.rollbackable = result.rollbackable;
          }
          if (result.hasOwnProperty('dossierDocumentId') && result['dossierDocumentId'] !== null && result['dossierDocumentId'] !== undefined && result['dossierDocumentId'] !== 0 && result['dossierDocumentId'] !== '0') {
            vm.printDocument = true;
          }
          vm.checkInput = 0;
          vm.$store.commit('setCheckInput', 0);
          if (String(item.form) === 'ACTIONS') {} else {
            __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
              path: vm.$router.history.current.path,
              query: {
                recount: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
                renew: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
                q: currentQuery['q']
              }
            });
          }
        }).catch(function (reject) {
          vm.loadingAction = false;
          vm.loadingActionProcess = false;
        });
      }
    },
    doPrint02: function doPrint02(dossierItem, item, index, isGroup) {
      var vm = this;
      if (vm.thuTucHanhChinhSelected === null || vm.thuTucHanhChinhSelected === undefined || vm.thuTucHanhChinhSelected === 'undefined') {
        alert('Loại thủ tục bắt buộc phải chọn');
      } else {
        var filter = {
          document: item.document,
          'serviceCode': vm.thuTucHanhChinhSelected.serviceCode,
          'govAgencyCode': vm.thuTucHanhChinhSelected.govAgencyCode,
          dossiers: __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_json_stringify___default()(vm.selected)
        };
        vm.dialogPDFLoading = true;
        vm.dialogPDF = true;
        vm.$store.dispatch('doPrint02', filter).then(function (result) {
          vm.dialogPDFLoading = false;
          document.getElementById('dialogPDFPreview').src = result;
        });
      }
    },
    doPrint03: function doPrint03(dossierItem, item, index, isGroup) {
      var vm = this;
      vm.dialogPDFLoading = true;
      vm.dialogPDF = true;
      var filter = {
        dossierId: dossierItem.dossierId,
        document: item.document
      };
      vm.$store.dispatch('doPrint03', filter).then(function (result) {
        vm.dialogPDFLoading = false;
        document.getElementById('dialogPDFPreview').src = result;
      });
    },
    doGuiding: function doGuiding(dossierItem, item, index, isGroup) {
      var vm = this;
      if (vm.thuTucHanhChinhSelected === null || vm.thuTucHanhChinhSelected === undefined || vm.thuTucHanhChinhSelected === 'undefined') {
        alert('Loại thủ tục bắt buộc phải chọn');
      } else {
        var filter = {
          serviceConfigId: vm.thuTucHanhChinhSelected.serviceConfigId
        };
        vm.dialogPDFLoading = true;
        vm.dialogPDF = true;
        vm.$store.dispatch('doGuiding', filter).then(function (result) {
          vm.dialogPDFLoading = false;
          document.getElementById('dialogPDFPreview').src = result;
        });
      }
    },
    doActionSpecial: function doActionSpecial(filter) {
      var vm = this;
      var currentQuery = vm.$router.history.current.query;
      vm.$store.dispatch('postAction', filter).then(function (result) {
        vm.dialogActionProcess = false;
        vm.loadingActionProcess = false;
        vm.btnStateVisible = false;
        if (result.hasOwnProperty('rollbackable') && result['rollbackable'] !== null && result['rollbackable'] !== undefined) {
          vm.rollbackable = result.rollbackable;
        }
        if (result.hasOwnProperty('dossierDocumentId') && result['dossierDocumentId'] !== null && result['dossierDocumentId'] !== undefined && result['dossierDocumentId'] !== 0 && result['dossierDocumentId'] !== '0') {
          vm.printDocument = true;
        }
        vm.checkInput = 0;
        vm.$store.commit('setCheckInput', 0);
        __WEBPACK_IMPORTED_MODULE_1__router__["a" /* default */].push({
          path: vm.$router.history.current.path,
          query: {
            recount: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
            renew: Math.floor(Math.random() * (100 - 1 + 1)) + 1,
            q: currentQuery['q']
          }
        });
      }).catch(function (reject) {
        vm.loadingActionProcess = false;
      });
    },
    getNextActions: function getNextActions() {
      var vm = this;
      var query = vm.$router.history.current.query;
      var filter = {
        dossierId: vm.thongTinChiTietHoSo.dossierId
      };
      var currentQuery = vm.$router.history.current.query;
      vm.dossierId = vm.thongTinChiTietHoSo.dossierId;
      vm.$store.dispatch('pullNextactions', filter).then(function (result) {
        vm.btnDossierDynamics = result;
        if (currentQuery.hasOwnProperty('btnIndex') && currentQuery.btnIndex !== null && currentQuery.btnIndex !== '') {
          vm.btnStateVisible = true;
          vm.dialogActionProcess = true;
          if (currentQuery.btnIndex.toString() === '111') {
            var _result7 = {
              actionCode: 8500,
              dossierId: vm.thongTinChiTietHoSo.dossierId,
              overdue: vm.thongTinChiTietHoSo['extendDate']
            };
            vm.processPullBtnDetailRouter(vm.thongTinChiTietHoSo, null, _result7, null);
          } else if (currentQuery.btnIndex.toString() === '333') {
            var _result8 = {
              actionCode: 8400,
              dossierId: vm.thongTinChiTietHoSo.dossierId,
              betimes: vm.thongTinChiTietHoSo['extendDate']
            };
            vm.processPullBtnDetailRouter(vm.thongTinChiTietHoSo, null, _result8, null);
          } else {
            if (vm.btnDossierDynamics[currentQuery.btnIndex].enable === 1 || vm.btnDossierDynamics[currentQuery.btnIndex].enable === 2) {
              vm.processPullBtnDetail(vm.btnDossierDynamics[currentQuery.btnIndex], currentQuery.btnIndex);
            } else {
              vm.dialogActionProcess = false;
            }
          }
        }

        vm.checkInput = vm.getCheckInput;
        if (vm.getCheckInput !== null && vm.getCheckInput !== undefined) {
          if (vm.checkInput !== 0) {
            setTimeout(function () {
              vm.$refs.thanhphanhoso.initData(vm.thongTinChiTietHoSo);
            }, 300);
          }
        }
      });
      vm.loadDossierSyncs(vm.thongTinChiTietHoSo.dossierId);
    },
    showAlpacaJSFORM: function showAlpacaJSFORM(item) {
      var vm = this;
      if (item.eform) {
        vm.$store.dispatch('loadFormScript', item).then(function (resScript) {
          vm.$store.dispatch('loadFormData', item).then(function (resData) {
            var formScript, formData;

            if (resScript) {
              formScript = eval('(' + resScript + ')');
            } else {
              formScript = {};
            }
            if (resData) {
              formData = eval('(' + resData + ')');
            } else {
              formData = {};
            }

            formScript.data = formData;
            __WEBPACK_IMPORTED_MODULE_2_jquery___default()('#formAlpaca' + item.partNo).alpaca(formScript);
          });
        });
      }
    },
    onUploadSingleFile: function onUploadSingleFile(e, data, i) {
      var vm = this;
      e.dataItem = data;
      e['dossierId'] = vm.thongTinChiTietHoSo.dossierId;
      e['dossierTemplateNo'] = vm.thongTinChiTietHoSo.dossierTemplateNo;
      vm.$store.dispatch('uploadSingleFile', e).then(function (result) {}).catch(function (xhr) {});
    },
    submitAlpacajsForm: function submitAlpacajsForm(item) {
      var vm = this;
      var value = {
        dossierId: vm.thongTinChiTietHoSo.dossierId,
        dossierPartNo: item.partNo
      };
      vm.$store.dispatch('putAlpacaForm', value);
    },
    postNextActions: function postNextActions(stepModel) {
      var vm = this;
      stepModel['dossierId'] = vm.thongTinChiTietHoSo.dossierId;
      if (stepModel.allowAssignUser > 0) {
        vm.$store.dispatch('reassignDossier', stepModel).then(function (resReassign) {
          var params = {
            dossierId: vm.dossierId,
            actionCode: stepModel.actionCode,
            actionNote: vm.actionNote,
            actionUser: '',
            payload: '',
            security: '',
            assignUsers: '',
            payment: '',
            createDossiers: ''
          };
          vm.$store.dispatch('postAction', params).then(function (resPostAction) {});
        });
      } else {
        var params = {
          dossierId: vm.dossierId,
          actionCode: stepModel.actionCode,
          actionNote: vm.actionNote,
          actionUser: '',
          payload: '',
          security: '',
          assignUsers: '',
          payment: '',
          createDossiers: ''
        };
        vm.$store.dispatch('postAction', params).then(function (resPostAction) {});
      }
    },
    viewFileWithPartNo: function viewFileWithPartNo(item) {
      var vm = this;
      if (vm.dossierFilesItems) {
        var fileViewsTemp = vm.dossierFilesItems.filter(function (file) {
          return file.dossierPartNo === item.partNo;
        });
        if (fileViewsTemp) {
          vm.fileViews = fileViewsTemp;

          if (vm.partView !== item.partNo) {
            vm.stateView = true;
            vm.partView = item.partNo;
          } else {
            vm.stateView = !vm.stateView;
            vm.partView = item.partNo;
          }
        } else {
          return;
        }
      }
      return;
    },
    viewFile2: function viewFile2(data) {
      var vm = this;
      vm.dialogPDFLoading = true;
      vm.dialogPDF = true;
      data['dossierId'] = vm.thongTinChiTietHoSo.dossierId;
      vm.$store.dispatch('viewFile', data).then(function (result) {
        vm.dialogPDFLoading = false;
        document.getElementById('dialogPDFPreview').src = result;
      });
    },
    viewFileDocument: function viewFileDocument(item) {
      var vm = this;
      vm.dialogPDFLoading = true;
      vm.dialogPDF = true;
      item['dossierId'] = vm.thongTinChiTietHoSo.dossierId;
      vm.$store.dispatch('viewDocument', item).then(function (result) {
        vm.dialogPDFLoading = false;
        document.getElementById('dialogPDFPreview').src = result;
      });
    },
    loadTPHS: function loadTPHS() {
      var vm = this;

      if (vm.$refs.thanhphanhoso1) {
        setTimeout(function () {
          vm.$refs.thanhphanhoso1.initData(vm.thongTinChiTietHoSo);
        }, 150);
      }
      if (vm.$refs.thanhphanhoso2) {
        setTimeout(function () {
          vm.$refs.thanhphanhoso2.initData(vm.thongTinChiTietHoSo);
        }, 150);
      }
    },
    printViewDocument: function printViewDocument() {
      var vm = this;
      vm.dialogPDFLoading = true;
      vm.dialogPDF = true;
      var filter = {
        dossierId: vm.thongTinChiTietHoSo.dossierId
      };
      vm.$store.dispatch('doPrint03', filter).then(function (result) {
        vm.dialogPDFLoading = false;
        document.getElementById('dialogPDFPreview').src = result;
      });
    },
    filterNextActionEnable: function filterNextActionEnable(nextaction) {
      var isEnabale = false;
      if (nextaction && Array.isArray(nextaction)) {
        for (var key in nextaction) {
          if (nextaction[key]['enable'] !== 0) {
            isEnabale = true;
          }
        }
      }
      return isEnabale;
    },
    checkPemissionSpecialAction: function checkPemissionSpecialAction(form, currentUser, thongtinchitiet) {
      var vm = this;
      var checkValue = true;

      if (form !== 'PRINT_01' && form !== 'PRINT_02' && form !== 'PRINT_03' && form !== 'GUIDE' && form !== 'PREVIEW' && form !== 'BETIMES') {
        var userArr = vm.$store.getters.getUsersNextAction;
        if (userArr.length > 0) {
          var check = userArr.filter(function (item) {
            return item['userId'].toString() === currentUser['userId'].toString();
          });
          if (check.length > 0) {
            checkValue = true;
          } else {
            checkValue = false;
          }
        } else {
          checkValue = false;
        }
      }

      if (form === 'ROLLBACK_01' || form === 'ROLLBACK_02' || form === 'ROLLBACK_03') {
        checkValue = false;
      }
      return checkValue;
    },
    changeStateViewResult: function changeStateViewResult(data) {
      var vm = this;
      vm.stateViewResult = data;
    }
  },
  filters: {
    dateTimeView: function dateTimeView(arg) {
      if (arg) {
        var value = new Date(Number(arg));
        return value.getDate().toString().padStart(2, '0') + '/' + (value.getMonth() + 1).toString().padStart(2, '0') + '/' + value.getFullYear() + ' ' + value.getHours().toString().padStart(2, '0') + ':' + value.getMinutes().toString().padStart(2, '0');
      } else {
        return '';
      }
    },
    getMaxDueDate: function getMaxDueDate(arr) {
      var maxDue = Math.max.apply(Math, arr.map(function (item) {
        return item.actionOverdue;
      }));
      return maxDue;
    }
  }
});

/***/ }),
/* 725 */,
/* 726 */,
/* 727 */,
/* 728 */,
/* 729 */,
/* 730 */
/***/ (function(module, exports, __webpack_require__) {

module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;
  return _c('div', {
    staticClass: "form-chitiet"
  }, [(_vm.loading) ? _c('content-placeholders', {
    staticClass: "mt-3"
  }, [_c('content-placeholders-text', {
    attrs: {
      "lines": 1
    }
  })], 1) : _c('div', {
    staticClass: "row-header"
  }, [_c('div', {
    staticClass: "background-triangle-big"
  }, [_c('span', [_vm._v("CHI TIẾT HỒ SƠ")])]), _vm._v(" "), _c('div', {
    staticClass: "layout row wrap header_tools row-blue"
  }, [_c('div', {
    staticClass: "flex xs8 sm10 pl-3 text-ellipsis text-bold",
    attrs: {
      "title": _vm.thongTinChiTietHoSo.serviceName
    }
  }, [_vm._v("\n        " + _vm._s(_vm.thongTinChiTietHoSo.serviceCode) + " - " + _vm._s(_vm.thongTinChiTietHoSo.serviceName) + "\n      ")]), _vm._v(" "), _c('div', {
    staticClass: "flex xs4 sm2 text-right",
    staticStyle: {
      "margin-left": "auto"
    }
  }, [_c('v-btn', {
    staticClass: "my-0 mx-0 btn-border-left",
    attrs: {
      "flat": "",
      "active-class": "temp_active"
    },
    on: {
      "click": _vm.goBack
    }
  }, [_vm._v("\n          Quay lại  \n          "), _c('v-icon', {
    attrs: {
      "size": "16"
    }
  }, [_vm._v("undo")])], 1)], 1)])]), _vm._v(" "), _c('v-dialog', {
    staticStyle: {
      "overflow": "hidden"
    },
    attrs: {
      "max-width": "900",
      "transition": "fade-transition"
    },
    model: {
      value: (_vm.dialogPDF),
      callback: function($$v) {
        _vm.dialogPDF = $$v
      },
      expression: "dialogPDF"
    }
  }, [_c('v-card', [_c('v-card-title', {
    staticClass: "headline"
  }, [_vm._v("File đính kèm")]), _vm._v(" "), _c('v-btn', {
    staticClass: "mx-0 my-0 absolute__btn_panel mr-2",
    attrs: {
      "icon": "",
      "dark": ""
    },
    nativeOn: {
      "click": function($event) {
        _vm.dialogPDF = false
      }
    }
  }, [_c('v-icon', [_vm._v("clear")])], 1), _vm._v(" "), (_vm.dialogPDFLoading) ? _c('div', {
    staticStyle: {
      "min-height": "600px",
      "text-align": "center",
      "margin": "auto",
      "padding": "25%"
    }
  }, [_c('v-progress-circular', {
    attrs: {
      "size": 100,
      "width": 1,
      "color": "primary",
      "indeterminate": ""
    }
  })], 1) : _vm._e(), _vm._v(" "), _c('iframe', {
    directives: [{
      name: "show",
      rawName: "v-show",
      value: (!_vm.dialogPDFLoading),
      expression: "!dialogPDFLoading"
    }],
    staticStyle: {
      "overflow": "auto",
      "min-height": "600px"
    },
    attrs: {
      "id": "dialogPDFPreview",
      "src": "",
      "type": "application/pdf",
      "width": "100%",
      "height": "100%",
      "frameborder": "0"
    }
  })], 1)], 1), _vm._v(" "), _c('thong-tin-co-ban-ho-so', {
    ref: "thong-tin-co-ban-ho-so",
    attrs: {
      "detailDossier": _vm.thongTinChiTietHoSo
    }
  }), _vm._v(" "), _c('div', [_c('v-tabs', {
    staticClass: "mb-4",
    attrs: {
      "icons-and-text": "",
      "centered": ""
    },
    model: {
      value: (_vm.activeTab),
      callback: function($$v) {
        _vm.activeTab = $$v
      },
      expression: "activeTab"
    }
  }, [_c('v-tabs-slider', {
    attrs: {
      "color": "primary"
    }
  }), _vm._v(" "), _c('v-tab', {
    key: 1,
    attrs: {
      "href": "#tabs-1"
    },
    on: {
      "click": function($event) {
        _vm.getNextActions()
      }
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [(_vm.originality === 3) ? _c('span', [_vm._v("XỬ LÝ HỒ SƠ")]) : _c('span', [_vm._v("CHUẨN BỊ HỒ SƠ")])])], 1), _vm._v(" "), _c('v-tab', {
    key: 2,
    attrs: {
      "href": "#tabs-2"
    },
    on: {
      "click": function($event) {
        _vm.loadTPHS()
      }
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [_vm._v("\n          THÀNH PHẦN HỒ SƠ\n        ")])], 1), _vm._v(" "), (_vm.originality !== 1) ? _c('v-tab', {
    key: 3,
    attrs: {
      "href": "#tabs-3"
    },
    on: {
      "click": function($event) {
        _vm.loadDossierActions()
      }
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [_vm._v("\n          TIẾN TRÌNH THỤ LÝ\n        ")])], 1) : _vm._e(), _vm._v(" "), _c('v-tab', {
    key: 4,
    attrs: {
      "href": "#tabs-4"
    },
    on: {
      "click": function($event) {
        _vm.loadDossierLogs()
      }
    }
  }, [_c('v-btn', {
    staticClass: "px-0 py-0 mx-0 my-0",
    attrs: {
      "flat": ""
    }
  }, [_vm._v("\n          NHẬT KÝ SỬA ĐỔI\n        ")])], 1), _vm._v(" "), _c('v-tabs-items', {
    model: {
      value: (_vm.activeTab),
      callback: function($$v) {
        _vm.activeTab = $$v
      },
      expression: "activeTab"
    }
  }, [_c('v-tab-item', {
    key: 1,
    attrs: {
      "id": "tabs-1",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, [(_vm.btnStateVisible && _vm.originality === 3 && !_vm.thongTinChiTietHoSo.finishDate) ? _c('div', {
    staticClass: "px-2 py-2",
    style: ({
      border: _vm.filterNextActionEnable(_vm.btnDossierDynamics) || (_vm.usersNextAction && Array.isArray(_vm.usersNextAction) && _vm.usersNextAction.length > 0) ? '1px solid #4caf50' : ''
    })
  }, [(_vm.filterNextActionEnable(_vm.btnDossierDynamics)) ? _c('p', {
    staticClass: "mb-2"
  }, [_c('span', [_vm._v("Chuyển đến bởi: ")]), _vm._v(" "), _c('b', [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.lastActionUser))]), _vm._v(" "), (_vm.thongTinChiTietHoSo.lastActionNote && _vm.thongTinChiTietHoSo.lastActionNote !== 'null') ? _c('span', [_c('span', [_vm._v(" - Ý kiến: ")]), _vm._v(" "), _c('span', {
    staticStyle: {
      "color": "#0b72ba"
    }
  }, [_vm._v(" " + _vm._s(_vm.thongTinChiTietHoSo.lastActionNote))])]) : _vm._e()]) : _vm._e(), _vm._v(" "), (_vm.usersNextAction && Array.isArray(_vm.usersNextAction) && _vm.usersNextAction.length > 0) ? _c('p', {
    staticClass: "mb-0"
  }, [_c('span', [_vm._v("Người thực hiện:  ")]), _vm._v(" "), _vm._l((_vm.usersNextAction), function(item, index) {
    return _c('span', {
      key: item.userId
    }, [_vm._v("\n                 "), _c('b', [_vm._v(_vm._s(item.userName))]), (index !== (_vm.usersNextAction.length - 1)) ? _c('span', [_vm._v(",")]) : _vm._e()])
  }), _vm._v(" - \n              "), _c('span', {
    style: (_vm.stepOverdueNextAction && _vm.stepOverdueNextAction.indexOf('Quá hạn') < 0 ? 'color:green' : 'color:red')
  }, [_vm._v("\n                " + _vm._s(_vm.stepOverdueNextAction) + "\n              ")])], 2) : _vm._e()]) : _vm._e(), _vm._v(" "), (_vm.thongTinChiTietHoSo.finishDate) ? _c('div', {
    staticClass: "px-2 py-2",
    staticStyle: {
      "border": "1px solid #4caf50"
    }
  }, [_c('p', {
    staticClass: "mb-2"
  }, [_vm._v("\n              Hồ sơ đã hoàn thành quá trình xử lý\n            ")])]) : _vm._e(), _vm._v(" "), (_vm.checkInput !== 0 && _vm.filterNextActionEnable(_vm.btnDossierDynamics)) ? _c('div', {
    staticStyle: {
      "position": "relative"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" "), (_vm.checkInput === 2) ? _c('span', [_vm._v("Chỉnh sửa thành phần hồ sơ")]) : _c('span', [_vm._v("Kiểm tra thành phần hồ sơ")]), _vm._v("     \n                ")]), _vm._v(" "), _c('thanh-phan-ho-so', {
    ref: "thanhphanhoso",
    attrs: {
      "checkInput": _vm.checkInput,
      "onlyView": false,
      "id": 'ci',
      "partTypes": _vm.inputTypes
    }
  })], 1)], 1)], 1) : _vm._e(), _vm._v(" "), (_vm.btnStateVisible) ? _c('div', {
    staticClass: "py-3",
    staticStyle: {
      "border-bottom": "1px solid #dddddd"
    }
  }, [_vm._l((_vm.btnDossierDynamics), function(item, index) {
    return (item.enable > 0 || (item['autoEvent'] === 'special')) ? _c('v-btn', {
      key: index,
      class: {
        "deactive__btn": String(_vm.btnIndex) !== String(index)
      },
      attrs: {
        "color": "primary",
        "loading": _vm.loadingAction && index === _vm.btnIndex,
        "disabled": _vm.loadingAction || item.enable === 2
      },
      nativeOn: {
        "click": function($event) {
          _vm.processPullBtnDetail(item, index)
        }
      }
    }, [_vm._v("\n              " + _vm._s(item.actionName) + "\n              "), _c('span', {
      attrs: {
        "slot": "loader"
      },
      slot: "loader"
    }, [_vm._v("Loading...")])]) : _vm._e()
  }), _vm._v(" "), (_vm.btnStepsDynamics.length > 0) ? _c('v-menu', {
    attrs: {
      "bottom": "",
      "offset-y": ""
    }
  }, [_c('v-btn', {
    staticClass: "deactive__btn",
    attrs: {
      "slot": "activator",
      "color": "primary",
      "dark": ""
    },
    slot: "activator"
  }, [_vm._v("Khác   "), _c('v-icon', {
    attrs: {
      "size": "18"
    }
  }, [_vm._v("arrow_drop_down")])], 1), _vm._v(" "), _c('v-list', _vm._l((_vm.btnStepsDynamics), function(item, index) {
    return (_vm.checkPemissionSpecialAction(item.form, _vm.currentUser, _vm.thongTinChiTietHoSo)) ? _c('v-list-tile', {
      key: index,
      on: {
        "click": function($event) {
          _vm.btnActionEvent(item, index)
        }
      }
    }, [_c('v-list-tile-title', [_vm._v(_vm._s(item.title))])], 1) : _vm._e()
  }))], 1) : _vm._e()], 2) : _vm._e(), _vm._v(" "), (_vm.dialogActionProcess) ? _c('v-layout', {
    attrs: {
      "wrap": ""
    }
  }, [(_vm.showFormBoSungThongTinNgan) ? _c('form-bo-sung-thong-tin', {
    ref: "formBoSungThongTinNgan",
    attrs: {
      "dossier_id": Number(_vm.id),
      "action_id": Number(_vm.actionIdCurrent)
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showPhanCongNguoiThucHien) ? _c('phan-cong', {
    ref: "phancong",
    attrs: {
      "type": _vm.type_assign
    },
    model: {
      value: (_vm.assign_items),
      callback: function($$v) {
        _vm.assign_items = $$v
      },
      expression: "assign_items"
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showTaoTaiLieuKetQua) ? _c('tai-lieu-ket-qua', {
    attrs: {
      "detailDossier": _vm.thongTinChiTietHoSo,
      "createFiles": _vm.createFiles
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showTraKetQua) ? _c('tra-ket-qua', {
    attrs: {
      "resultFiles": _vm.returnFiles
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showThuPhi) ? _c('thu-phi', {
    attrs: {
      "viaPortal": _vm.viaPortalDetail
    },
    model: {
      value: (_vm.payments),
      callback: function($$v) {
        _vm.payments = $$v
      },
      expression: "payments"
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showKyPheDuyetTaiLieu) ? _c('ky-duyet', {
    ref: "kypheduyettailieu",
    attrs: {
      "detailDossier": _vm.thongTinChiTietHoSo
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showExtendDateEdit) ? _c('ngay-gia-han', {
    ref: "ngaygiahan",
    attrs: {
      "type": _vm.typeExtendDate,
      "extendDateEdit": _vm.extendDateEdit
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showEditDate) ? _c('ngay-hen-tra', {
    ref: "ngayhentra",
    attrs: {
      "dueDateEdit": _vm.dueDateEdit
    }
  }) : _vm._e(), _vm._v(" "), (_vm.showYkienCanBoThucHien) ? _c('y-kien-can-bo', {
    ref: "ykiencanbo",
    attrs: {
      "user_note": _vm.userNote,
      "configNote": _vm.configNote
    }
  }) : _vm._e(), _vm._v(" "), _c('div', {
    staticClass: "py-2",
    staticStyle: {
      "width": "100%",
      "border-bottom": "1px solid #dddddd"
    }
  }, [(_vm.dialogActionProcess) ? _c('v-btn', {
    attrs: {
      "color": "primary",
      "loading": _vm.loadingActionProcess,
      "disabled": _vm.loadingActionProcess
    },
    nativeOn: {
      "click": function($event) {
        _vm.processAction(_vm.dossierItemDialogPick, _vm.itemDialogPick, _vm.resultDialogPick, _vm.indexDialogPick, false)
      }
    }
  }, [_c('v-icon', [_vm._v("save")]), _vm._v(" \n                "), _vm._v("\n                Xác nhận\n                "), _c('span', {
    attrs: {
      "slot": "loader"
    },
    slot: "loader"
  }, [_vm._v("Loading...")])], 1) : _vm._e()], 1)], 1) : _vm._e(), _vm._v(" "), (!_vm.btnStateVisible) ? _c('v-alert', {
    attrs: {
      "outline": "",
      "color": _vm.alertObj.color,
      "icon": _vm.alertObj.icon,
      "value": true
    }
  }, [_vm._v("\n            " + _vm._s(_vm.alertObj.message) + "\n          ")]) : _vm._e(), _vm._v(" "), (_vm.rollbackable || _vm.printDocument) ? _c('div', {
    staticClass: "py-2",
    staticStyle: {
      "width": "100%",
      "border-bottom": "1px solid #dddddd"
    }
  }, [(_vm.rollbackable && _vm.currentUser.userId === _vm.thongTinChiTietHoSo.lastActionUserId) ? _c('v-btn', {
    attrs: {
      "color": "primary"
    },
    on: {
      "click": function($event) {
        _vm.rollBack()
      }
    }
  }, [_vm._v("Quay lui hồ sơ")]) : _vm._e(), _vm._v(" "), (_vm.printDocument) ? _c('v-btn', {
    attrs: {
      "color": "primary"
    },
    on: {
      "click": function($event) {
        _vm.printViewDocument()
      }
    }
  }, [_vm._v("In văn bản hành chính")]) : _vm._e()], 1) : _vm._e(), _vm._v(" "), (_vm.thongTinChiTietHoSo.online) ? _c('div', [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v(" "), (_vm.originality === 3) ? _c('span', [_vm._v("Trao đổi với người làm thủ tục")]) : _c('span', [_vm._v("Trao đổi với cán bộ xử lý")])]), _vm._v(" "), _c('v-card', [_c('v-card-text', {
    staticClass: "px-0 py-0 pr-3"
  }, [_c('v-flex', {
    attrs: {
      "xs12": ""
    }
  }, [(_vm.dossierSyncs.length > 0) ? _c('ul', {
    staticClass: "timeline overflowComment",
    staticStyle: {
      "max-height": "300px",
      "overflow": "auto"
    }
  }, _vm._l((_vm.dossierSyncs), function(item, index) {
    return (item.syncType !== 0 && item.infoType !== 0) ? _c('li', {
      key: index,
      staticClass: "timeline-item"
    }, [_c('div', {
      staticClass: "timeline-badge",
      class: item.syncType === 2 ? 'primary' : 'warning'
    }, [_c('v-icon', {
      attrs: {
        "color": "grey lighten-4",
        "size": "20"
      }
    }, [_vm._v(_vm._s(item.syncType === 2 ? 'account_balance' : 'perm_identity'))])], 1), _vm._v(" "), _c('div', {
      staticClass: "timeline-panel"
    }, [_c('div', {
      staticClass: "timeline-heading"
    }, [_c('div', {
      staticClass: "timeline-panel-controls"
    }, [_c('div', {
      staticClass: "timestamp"
    }, [_c('small', {
      staticClass: "text-muted"
    }, [_vm._v(_vm._s(_vm._f("dateTimeView")(item.createDate)))])])])]), _vm._v(" "), _c('div', {
      staticClass: "timeline-body"
    }, [(item.syncType === 2) ? _c('span', [_vm._v(_vm._s(item.actionName) + " ")]) : _vm._e(), _vm._v(" "), (item.syncType === 2 && item.actionNote && item.actionNote !== 'null') ? _c('span', [_vm._v(":")]) : _vm._e(), _vm._v(" "), (item.actionNote && item.actionNote !== 'null') ? _c('span', {
      staticStyle: {
        "color": "#0b72ba"
      }
    }, [_vm._v(_vm._s(item.actionNote))]) : _vm._e()])])]) : _vm._e()
  })) : _c('div', {
    staticClass: "no-comments no-data my-2"
  }, [_c('i', {
    staticClass: "fa fa-comments",
    staticStyle: {
      "font-size": "25px"
    }
  }), _c('br'), _vm._v(" "), _c('span', {
    staticStyle: {
      "font-size": "18px"
    }
  }, [_vm._v("Không có trao đổi nào")])]), _vm._v(" "), _c('div', {
    staticStyle: {
      "position": "relative"
    }
  }, [_c('v-text-field', {
    staticClass: "pl-5 my-3",
    attrs: {
      "placeholder": "Nhập trao đổi"
    },
    on: {
      "keyup": function($event) {
        if (!('button' in $event) && _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")) { return null; }
        return _vm.postChat($event)
      }
    },
    model: {
      value: (_vm.messageChat),
      callback: function($$v) {
        _vm.messageChat = $$v
      },
      expression: "messageChat"
    }
  }), _vm._v(" "), _c('v-icon', {
    staticClass: "hover-pointer",
    staticStyle: {
      "position": "absolute",
      "top": "0px",
      "right": "5px"
    },
    attrs: {
      "color": "blue"
    },
    on: {
      "click": _vm.postChat
    }
  }, [_vm._v("send")])], 1)])], 1)], 1)], 1)], 1)], 1) : _vm._e(), _vm._v(" "), (_vm.originality !== 1) ? _c('div', {
    staticStyle: {
      "position": "relative"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl"
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "hide-actions": "",
      "value": "1"
    }
  }, [_c('div', {
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_c('v-icon', {
    attrs: {
      "size": "18",
      "color": "white"
    }
  }, [_vm._v("star_rate")])], 1), _vm._v("\n                  Trao đổi nội bộ      \n                ")]), _vm._v(" "), _c('comment', {
    ref: "comment",
    attrs: {
      "classPK": _vm.id,
      "className": _vm.className
    }
  })], 1)], 1)], 1) : _vm._e()], 1), _vm._v(" "), _c('v-tab-item', {
    key: 2,
    attrs: {
      "id": "tabs-2",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, [_c('v-expansion-panel', {
    staticClass: "expansion-pl ext__form",
    attrs: {
      "expand": ""
    }
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "value": true
    }
  }, [_c('div', {
    staticClass: "text-bold",
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_vm._v(" I.")]), _vm._v("\n                Tài liệu nộp     \n                "), (_vm.thongTinChiTietHoSo.sampleCount !== 0 && !_vm.thongTinChiTietHoSo.online) ? _c('span', [_vm._v("(" + _vm._s(_vm.thongTinChiTietHoSo.sampleCount === 0 ? '?' : _vm.thongTinChiTietHoSo.sampleCount) + " bộ hồ sơ)")]) : _vm._e()]), _vm._v(" "), _c('thanh-phan-ho-so', {
    ref: "thanhphanhoso1",
    attrs: {
      "onlyView": true,
      "id": 'nm',
      "partTypes": _vm.inputTypes
    }
  })], 1)], 1), _vm._v(" "), (_vm.stateViewResult) ? _c('v-expansion-panel', {
    staticClass: "expansion-pl ext__form",
    attrs: {
      "expand": ""
    }
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "value": true
    }
  }, [_c('div', {
    staticClass: "text-bold",
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_vm._v(" II.")]), _vm._v("\n                Kết quả xử lý\n              ")]), _vm._v(" "), _c('thanh-phan-ho-so', {
    ref: "thanhphanhoso2",
    attrs: {
      "onlyView": true,
      "id": 'kq',
      "partTypes": _vm.outputTypes
    },
    on: {
      "tp:change-state-view-result": _vm.changeStateViewResult
    }
  })], 1)], 1) : _vm._e(), _vm._v(" "), (_vm.documents && _vm.documents.length > 0) ? _c('v-expansion-panel', {
    staticClass: "expansion-pl ext__form",
    attrs: {
      "expand": ""
    }
  }, [_c('v-expansion-panel-content', {
    attrs: {
      "value": true
    }
  }, [_c('div', {
    staticClass: "text-bold",
    attrs: {
      "slot": "header"
    },
    slot: "header"
  }, [_c('div', {
    staticClass: "background-triangle-small"
  }, [_vm._v(" III.")]), _vm._v("\n                Văn bản hành chính\n              ")]), _vm._v(" "), _vm._l((_vm.documents), function(item, index) {
    return _c('div', {
      key: index
    }, [_c('v-card', [_c('v-layout', {
      staticClass: "px-3 py-1 align-center row-list-style",
      attrs: {
        "wrap": ""
      }
    }, [_c('v-flex', {
      attrs: {
        "xs11": ""
      }
    }, [_c('span', {
      staticClass: "text-bold",
      staticStyle: {
        "position": "absolute"
      }
    }, [_vm._v(_vm._s(index + 1) + ".")]), _vm._v(" "), _c('div', {
      staticStyle: {
        "margin-left": "30px"
      }
    }, [_vm._v(_vm._s(item.documentName))])]), _vm._v(" "), _c('v-flex', {
      staticClass: "text-right",
      attrs: {
        "xs1": ""
      }
    }, [_c('v-tooltip', {
      attrs: {
        "top": ""
      }
    }, [_c('v-btn', {
      staticClass: "mx-0 my-0",
      staticStyle: {
        "height": "25px",
        "width": "25px"
      },
      attrs: {
        "slot": "activator",
        "fab": "",
        "dark": "",
        "small": "",
        "color": "primary"
      },
      on: {
        "click": function($event) {
          _vm.viewFileDocument(item)
        }
      },
      slot: "activator"
    }, [_c('v-icon', {
      staticStyle: {
        "font-size": "14px"
      }
    }, [_vm._v("visibility")])], 1), _vm._v(" "), _c('span', [_vm._v("Xem")])], 1)], 1)], 1)], 1)], 1)
  })], 2)], 1) : _vm._e()], 1), _vm._v(" "), (_vm.originality !== 1) ? _c('v-tab-item', {
    key: 3,
    attrs: {
      "id": "tabs-3",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, [_c('div', [_c('v-data-table', {
    staticClass: "table-landing table-bordered",
    attrs: {
      "headers": _vm.headers,
      "items": _vm.dossierActions,
      "hide-actions": "",
      "no-data-text": "Không có dữ liệu"
    },
    scopedSlots: _vm._u([{
      key: "headerCell",
      fn: function(props) {
        return [_c('v-tooltip', {
          attrs: {
            "bottom": ""
          }
        }, [_c('span', {
          attrs: {
            "slot": "activator"
          },
          slot: "activator"
        }, [_vm._v("\n                  " + _vm._s(props.header.text) + "\n                ")]), _vm._v(" "), _c('span', [_vm._v("\n                  " + _vm._s(props.header.text) + "\n                ")])])]
      }
    }, {
      key: "items",
      fn: function(props) {
        return [_c('td', {
          staticClass: "text-xs-center"
        }, [_vm._v(_vm._s(props.index + 1))]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left"
        }, [_vm._v(_vm._s(props.item.sequenceRole))]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left"
        }, [_vm._v(_vm._s(props.item.sequenceName))]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left"
        }, [_vm._v(_vm._s(props.item.durationCount) + " ngày")]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left"
        }, [_vm._v(_vm._s(_vm._f("dateTimeView")(props.item.startDate)))]), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left"
        }, _vm._l((props.item.assignUsers), function(itemUser) {
          return _c('div', {
            key: itemUser.userId
          }, [_vm._v("\n                  " + _vm._s(itemUser.userName) + " "), _c('br')])
        })), _vm._v(" "), _c('td', {
          staticClass: "text-xs-left"
        }, [_vm._l((props.item.actions), function(itemAction, index) {
          return _c('div', {
            key: index
          }, [_vm._v("\n                  " + _vm._s(_vm._f("dateTimeView")(itemAction.createDate)) + " : "), _c('span', {
            staticStyle: {
              "color": "#0b72ba"
            }
          }, [_vm._v(_vm._s(itemAction.actionName))])])
        }), _vm._v(" "), (props.item.statusText) ? _c('div', [_c('span', {
          staticStyle: {
            "color": "green"
          }
        }, [_vm._v(_vm._s(props.item.statusText))])]) : _vm._e()], 2)]
      }
    }])
  })], 1)]) : _vm._e(), _vm._v(" "), _c('v-tab-item', {
    key: 4,
    attrs: {
      "id": "tabs-4",
      "reverse-transition": "fade-transition",
      "transition": "fade-transition"
    }
  }, _vm._l((_vm.listHistoryProcessing), function(item, index) {
    return _c('div', {
      key: item.dossierLogId,
      staticClass: "list_history_style"
    }, [_c('td', {
      staticClass: "px-2 pt-2",
      class: index % 2 !== 0 ? 'col-tien-trinh-1' : 'col-tien-trinh-2'
    }, [_vm._v(_vm._s(index + 1))]), _vm._v(" "), _c('td', {
      staticClass: "text-xs-left px-2 py-2"
    }, [_c('p', {
      staticClass: "mb-1"
    }, [_c('span', [_vm._v(_vm._s(_vm._f("dateTimeView")(item.createDate)))]), _vm._v(" - "), _c('b', [_vm._v(_vm._s(item.author))]), _vm._v(" \n                  : "), _c('span', {
      staticStyle: {
        "color": "#0b72ba"
      }
    }, [_vm._v(_vm._s(item.payload.stepName))])]), _vm._v(" "), (item.content !== '' && item.content !== null) ? _c('p', {
      staticClass: "mb-1"
    }, [_vm._v("Ý kiến: "), _c('span', {
      domProps: {
        "innerHTML": _vm._s(item.content)
      }
    })]) : _vm._e(), _vm._v(" "), _vm._l((item.payload.files), function(file) {
      return _c('p', {
        key: file.dossierFileId,
        staticClass: "history__download__link hover-pointer-download mb-1",
        staticStyle: {
          "cursor": "pointer"
        },
        attrs: {
          "title": "Tải file"
        },
        on: {
          "click": function($event) {
            $event.preventDefault();
            $event.stopPropagation();
            _vm.downloadFileLogs(file.dossierFileId)
          }
        }
      }, [_c('v-icon', [_vm._v("file_download")]), _vm._v(" "), _c('span', [_vm._v(_vm._s(file.fileName))])], 1)
    })], 2)])
  }))], 1)], 1)], 1)], 1)
},staticRenderFns: []}
module.exports.render._withStripped = true
if (false) {
  module.hot.accept()
  if (module.hot.data) {
     require("vue-hot-reload-api").rerender("data-v-2b6b1f3f", module.exports)
  }
}

/***/ })
]));
//# sourceMappingURL=1.855b84d3bf24dad3ff47.js.map