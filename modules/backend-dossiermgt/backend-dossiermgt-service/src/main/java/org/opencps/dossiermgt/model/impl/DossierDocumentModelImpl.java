/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.DossierDocument;
import org.opencps.dossiermgt.model.DossierDocumentModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DossierDocument service. Represents a row in the &quot;opencps_dossierdocument&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DossierDocumentModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierDocumentImpl}.
 * </p>
 *
 * @author huymq
 * @see DossierDocumentImpl
 * @see DossierDocument
 * @see DossierDocumentModel
 * @generated
 */
@ProviderType
public class DossierDocumentModelImpl extends BaseModelImpl<DossierDocument>
	implements DossierDocumentModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier document model instance should use the {@link DossierDocument} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossierdocument";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "DossierDocumentId", Types.BIGINT },
			{ Field.GROUP_ID, Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierId", Types.BIGINT },
			{ "referenceUid", Types.VARCHAR },
			{ "dossierActionId", Types.BIGINT },
			{ "documentType", Types.VARCHAR },
			{ "documentName", Types.VARCHAR },
			{ "documentCode", Types.VARCHAR },
			{ "documentFileId", Types.BIGINT },
			{ "docSync", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DossierDocumentId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put(Field.GROUP_ID, Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("referenceUid", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("documentType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentFileId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("docSync", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dossierdocument (uuid_ VARCHAR(75) null,DossierDocumentId LONG not null primary key,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,dossierId LONG,referenceUid VARCHAR(75) null,dossierActionId LONG,documentType VARCHAR(255) null,documentName VARCHAR(255) null,documentCode VARCHAR(100) null,documentFileId LONG,docSync INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossierdocument";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierDocument.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossierdocument.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierDocument"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierDocument"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DossierDocument"),
			true);
	public static final long DOSSIERACTIONID_COLUMN_BITMASK = 1L;
	public static final long DOSSIERID_COLUMN_BITMASK = 2L;
	public static final long GROUPID_COLUMN_BITMASK = 4L;
	public static final long REFERENCEUID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long CREATEDATE_COLUMN_BITMASK = 32L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierDocument"));

	public DossierDocumentModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _DossierDocumentId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierDocumentId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _DossierDocumentId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierDocument.class;
	}

	@Override
	public String getModelClassName() {
		return DossierDocument.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("DossierDocumentId", getDossierDocumentId());
		attributes.put(Field.GROUP_ID, getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierId", getDossierId());
		attributes.put("referenceUid", getReferenceUid());
		attributes.put("dossierActionId", getDossierActionId());
		attributes.put("documentType", getDocumentType());
		attributes.put("documentName", getDocumentName());
		attributes.put("documentCode", getDocumentCode());
		attributes.put("documentFileId", getDocumentFileId());
		attributes.put("docSync", getDocSync());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long DossierDocumentId = (Long)attributes.get("DossierDocumentId");

		if (DossierDocumentId != null) {
			setDossierDocumentId(DossierDocumentId);
		}

		Long groupId = (Long)attributes.get(Field.GROUP_ID);

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String referenceUid = (String)attributes.get("referenceUid");

		if (referenceUid != null) {
			setReferenceUid(referenceUid);
		}

		Long dossierActionId = (Long)attributes.get("dossierActionId");

		if (dossierActionId != null) {
			setDossierActionId(dossierActionId);
		}

		String documentType = (String)attributes.get("documentType");

		if (documentType != null) {
			setDocumentType(documentType);
		}

		String documentName = (String)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		String documentCode = (String)attributes.get("documentCode");

		if (documentCode != null) {
			setDocumentCode(documentCode);
		}

		Long documentFileId = (Long)attributes.get("documentFileId");

		if (documentFileId != null) {
			setDocumentFileId(documentFileId);
		}

		Integer docSync = (Integer)attributes.get("docSync");

		if (docSync != null) {
			setDocSync(docSync);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierDocumentId() {
		return _DossierDocumentId;
	}

	@Override
	public void setDossierDocumentId(long DossierDocumentId) {
		_DossierDocumentId = DossierDocumentId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getReferenceUid() {
		if (_referenceUid == null) {
			return "";
		}
		else {
			return _referenceUid;
		}
	}

	@Override
	public void setReferenceUid(String referenceUid) {
		_columnBitmask |= REFERENCEUID_COLUMN_BITMASK;

		if (_originalReferenceUid == null) {
			_originalReferenceUid = _referenceUid;
		}

		_referenceUid = referenceUid;
	}

	public String getOriginalReferenceUid() {
		return GetterUtil.getString(_originalReferenceUid);
	}

	@Override
	public long getDossierActionId() {
		return _dossierActionId;
	}

	@Override
	public void setDossierActionId(long dossierActionId) {
		_columnBitmask |= DOSSIERACTIONID_COLUMN_BITMASK;

		if (!_setOriginalDossierActionId) {
			_setOriginalDossierActionId = true;

			_originalDossierActionId = _dossierActionId;
		}

		_dossierActionId = dossierActionId;
	}

	public long getOriginalDossierActionId() {
		return _originalDossierActionId;
	}

	@Override
	public String getDocumentType() {
		if (_documentType == null) {
			return "";
		}
		else {
			return _documentType;
		}
	}

	@Override
	public void setDocumentType(String documentType) {
		_documentType = documentType;
	}

	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		_documentName = documentName;
	}

	@Override
	public String getDocumentCode() {
		if (_documentCode == null) {
			return "";
		}
		else {
			return _documentCode;
		}
	}

	@Override
	public void setDocumentCode(String documentCode) {
		_documentCode = documentCode;
	}

	@Override
	public long getDocumentFileId() {
		return _documentFileId;
	}

	@Override
	public void setDocumentFileId(long documentFileId) {
		_documentFileId = documentFileId;
	}

	@Override
	public int getDocSync() {
		return _docSync;
	}

	@Override
	public void setDocSync(int docSync) {
		_docSync = docSync;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DossierDocument.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierDocument toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierDocument)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierDocumentImpl dossierDocumentImpl = new DossierDocumentImpl();

		dossierDocumentImpl.setUuid(getUuid());
		dossierDocumentImpl.setDossierDocumentId(getDossierDocumentId());
		dossierDocumentImpl.setGroupId(getGroupId());
		dossierDocumentImpl.setUserId(getUserId());
		dossierDocumentImpl.setCreateDate(getCreateDate());
		dossierDocumentImpl.setModifiedDate(getModifiedDate());
		dossierDocumentImpl.setDossierId(getDossierId());
		dossierDocumentImpl.setReferenceUid(getReferenceUid());
		dossierDocumentImpl.setDossierActionId(getDossierActionId());
		dossierDocumentImpl.setDocumentType(getDocumentType());
		dossierDocumentImpl.setDocumentName(getDocumentName());
		dossierDocumentImpl.setDocumentCode(getDocumentCode());
		dossierDocumentImpl.setDocumentFileId(getDocumentFileId());
		dossierDocumentImpl.setDocSync(getDocSync());

		dossierDocumentImpl.resetOriginalValues();

		return dossierDocumentImpl;
	}

	@Override
	public int compareTo(DossierDocument dossierDocument) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				dossierDocument.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierDocument)) {
			return false;
		}

		DossierDocument dossierDocument = (DossierDocument)obj;

		long primaryKey = dossierDocument.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DossierDocumentModelImpl dossierDocumentModelImpl = this;

		dossierDocumentModelImpl._originalUuid = dossierDocumentModelImpl._uuid;

		dossierDocumentModelImpl._originalGroupId = dossierDocumentModelImpl._groupId;

		dossierDocumentModelImpl._setOriginalGroupId = false;

		dossierDocumentModelImpl._setModifiedDate = false;

		dossierDocumentModelImpl._originalDossierId = dossierDocumentModelImpl._dossierId;

		dossierDocumentModelImpl._setOriginalDossierId = false;

		dossierDocumentModelImpl._originalReferenceUid = dossierDocumentModelImpl._referenceUid;

		dossierDocumentModelImpl._originalDossierActionId = dossierDocumentModelImpl._dossierActionId;

		dossierDocumentModelImpl._setOriginalDossierActionId = false;

		dossierDocumentModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierDocument> toCacheModel() {
		DossierDocumentCacheModel dossierDocumentCacheModel = new DossierDocumentCacheModel();

		dossierDocumentCacheModel.uuid = getUuid();

		String uuid = dossierDocumentCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierDocumentCacheModel.uuid = null;
		}

		dossierDocumentCacheModel.DossierDocumentId = getDossierDocumentId();

		dossierDocumentCacheModel.groupId = getGroupId();

		dossierDocumentCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierDocumentCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierDocumentCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierDocumentCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierDocumentCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierDocumentCacheModel.dossierId = getDossierId();

		dossierDocumentCacheModel.referenceUid = getReferenceUid();

		String referenceUid = dossierDocumentCacheModel.referenceUid;

		if ((referenceUid != null) && (referenceUid.length() == 0)) {
			dossierDocumentCacheModel.referenceUid = null;
		}

		dossierDocumentCacheModel.dossierActionId = getDossierActionId();

		dossierDocumentCacheModel.documentType = getDocumentType();

		String documentType = dossierDocumentCacheModel.documentType;

		if ((documentType != null) && (documentType.length() == 0)) {
			dossierDocumentCacheModel.documentType = null;
		}

		dossierDocumentCacheModel.documentName = getDocumentName();

		String documentName = dossierDocumentCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			dossierDocumentCacheModel.documentName = null;
		}

		dossierDocumentCacheModel.documentCode = getDocumentCode();

		String documentCode = dossierDocumentCacheModel.documentCode;

		if ((documentCode != null) && (documentCode.length() == 0)) {
			dossierDocumentCacheModel.documentCode = null;
		}

		dossierDocumentCacheModel.documentFileId = getDocumentFileId();

		dossierDocumentCacheModel.docSync = getDocSync();

		return dossierDocumentCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(29);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", DossierDocumentId=");
		sb.append(getDossierDocumentId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", referenceUid=");
		sb.append(getReferenceUid());
		sb.append(", dossierActionId=");
		sb.append(getDossierActionId());
		sb.append(", documentType=");
		sb.append(getDocumentType());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", documentCode=");
		sb.append(getDocumentCode());
		sb.append(", documentFileId=");
		sb.append(getDocumentFileId());
		sb.append(", docSync=");
		sb.append(getDocSync());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(46);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierDocument");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DossierDocumentId</column-name><column-value><![CDATA[");
		sb.append(getDossierDocumentId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>referenceUid</column-name><column-value><![CDATA[");
		sb.append(getReferenceUid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierActionId</column-name><column-value><![CDATA[");
		sb.append(getDossierActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentType</column-name><column-value><![CDATA[");
		sb.append(getDocumentType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentCode</column-name><column-value><![CDATA[");
		sb.append(getDocumentCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentFileId</column-name><column-value><![CDATA[");
		sb.append(getDocumentFileId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docSync</column-name><column-value><![CDATA[");
		sb.append(getDocSync());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DossierDocument.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierDocument.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _DossierDocumentId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _referenceUid;
	private String _originalReferenceUid;
	private long _dossierActionId;
	private long _originalDossierActionId;
	private boolean _setOriginalDossierActionId;
	private String _documentType;
	private String _documentName;
	private String _documentCode;
	private long _documentFileId;
	private int _docSync;
	private long _columnBitmask;
	private DossierDocument _escapedModel;
}