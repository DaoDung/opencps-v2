/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.ProcessSequence;
import org.opencps.dossiermgt.model.ProcessSequenceModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ProcessSequence service. Represents a row in the &quot;opencps_processsequence&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ProcessSequenceModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ProcessSequenceImpl}.
 * </p>
 *
 * @author huymq
 * @see ProcessSequenceImpl
 * @see ProcessSequence
 * @see ProcessSequenceModel
 * @generated
 */
@ProviderType
public class ProcessSequenceModelImpl extends BaseModelImpl<ProcessSequence>
	implements ProcessSequenceModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a process sequence model instance should use the {@link ProcessSequence} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_processsequence";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "processSequenceId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ Field.GROUP_ID, Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "serviceProcessId", Types.BIGINT },
			{ "sequenceNo", Types.VARCHAR },
			{ "sequenceName", Types.VARCHAR },
			{ "sequenceRole", Types.VARCHAR },
			{ "durationCount", Types.DOUBLE }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("processSequenceId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put(Field.GROUP_ID, Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("serviceProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceRole", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("durationCount", Types.DOUBLE);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_processsequence (uuid_ VARCHAR(75) null,processSequenceId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,serviceProcessId LONG,sequenceNo VARCHAR(255) null,sequenceName VARCHAR(512) null,sequenceRole VARCHAR(255) null,durationCount DOUBLE)";
	public static final String TABLE_SQL_DROP = "drop table opencps_processsequence";
	public static final String ORDER_BY_JPQL = " ORDER BY processSequence.sequenceNo ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_processsequence.sequenceNo ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.ProcessSequence"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.ProcessSequence"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.ProcessSequence"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long SEQUENCENO_COLUMN_BITMASK = 4L;
	public static final long SERVICEPROCESSID_COLUMN_BITMASK = 8L;
	public static final long UUID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.ProcessSequence"));

	public ProcessSequenceModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _processSequenceId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setProcessSequenceId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _processSequenceId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ProcessSequence.class;
	}

	@Override
	public String getModelClassName() {
		return ProcessSequence.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("processSequenceId", getProcessSequenceId());
		attributes.put("companyId", getCompanyId());
		attributes.put(Field.GROUP_ID, getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("serviceProcessId", getServiceProcessId());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("sequenceName", getSequenceName());
		attributes.put("sequenceRole", getSequenceRole());
		attributes.put("durationCount", getDurationCount());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long processSequenceId = (Long)attributes.get("processSequenceId");

		if (processSequenceId != null) {
			setProcessSequenceId(processSequenceId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get(Field.GROUP_ID);

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long serviceProcessId = (Long)attributes.get("serviceProcessId");

		if (serviceProcessId != null) {
			setServiceProcessId(serviceProcessId);
		}

		String sequenceNo = (String)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		String sequenceName = (String)attributes.get("sequenceName");

		if (sequenceName != null) {
			setSequenceName(sequenceName);
		}

		String sequenceRole = (String)attributes.get("sequenceRole");

		if (sequenceRole != null) {
			setSequenceRole(sequenceRole);
		}

		Double durationCount = (Double)attributes.get("durationCount");

		if (durationCount != null) {
			setDurationCount(durationCount);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getProcessSequenceId() {
		return _processSequenceId;
	}

	@Override
	public void setProcessSequenceId(long processSequenceId) {
		_processSequenceId = processSequenceId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getServiceProcessId() {
		return _serviceProcessId;
	}

	@Override
	public void setServiceProcessId(long serviceProcessId) {
		_columnBitmask |= SERVICEPROCESSID_COLUMN_BITMASK;

		if (!_setOriginalServiceProcessId) {
			_setOriginalServiceProcessId = true;

			_originalServiceProcessId = _serviceProcessId;
		}

		_serviceProcessId = serviceProcessId;
	}

	public long getOriginalServiceProcessId() {
		return _originalServiceProcessId;
	}

	@Override
	public String getSequenceNo() {
		if (_sequenceNo == null) {
			return "";
		}
		else {
			return _sequenceNo;
		}
	}

	@Override
	public void setSequenceNo(String sequenceNo) {
		_columnBitmask = -1L;

		if (_originalSequenceNo == null) {
			_originalSequenceNo = _sequenceNo;
		}

		_sequenceNo = sequenceNo;
	}

	public String getOriginalSequenceNo() {
		return GetterUtil.getString(_originalSequenceNo);
	}

	@Override
	public String getSequenceName() {
		if (_sequenceName == null) {
			return "";
		}
		else {
			return _sequenceName;
		}
	}

	@Override
	public void setSequenceName(String sequenceName) {
		_sequenceName = sequenceName;
	}

	@Override
	public String getSequenceRole() {
		if (_sequenceRole == null) {
			return "";
		}
		else {
			return _sequenceRole;
		}
	}

	@Override
	public void setSequenceRole(String sequenceRole) {
		_sequenceRole = sequenceRole;
	}

	@Override
	public double getDurationCount() {
		return _durationCount;
	}

	@Override
	public void setDurationCount(double durationCount) {
		_durationCount = durationCount;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ProcessSequence.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ProcessSequence.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ProcessSequence toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ProcessSequence)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ProcessSequenceImpl processSequenceImpl = new ProcessSequenceImpl();

		processSequenceImpl.setUuid(getUuid());
		processSequenceImpl.setProcessSequenceId(getProcessSequenceId());
		processSequenceImpl.setCompanyId(getCompanyId());
		processSequenceImpl.setGroupId(getGroupId());
		processSequenceImpl.setUserId(getUserId());
		processSequenceImpl.setUserName(getUserName());
		processSequenceImpl.setCreateDate(getCreateDate());
		processSequenceImpl.setModifiedDate(getModifiedDate());
		processSequenceImpl.setServiceProcessId(getServiceProcessId());
		processSequenceImpl.setSequenceNo(getSequenceNo());
		processSequenceImpl.setSequenceName(getSequenceName());
		processSequenceImpl.setSequenceRole(getSequenceRole());
		processSequenceImpl.setDurationCount(getDurationCount());

		processSequenceImpl.resetOriginalValues();

		return processSequenceImpl;
	}

	@Override
	public int compareTo(ProcessSequence processSequence) {
		int value = 0;

		value = getSequenceNo().compareTo(processSequence.getSequenceNo());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ProcessSequence)) {
			return false;
		}

		ProcessSequence processSequence = (ProcessSequence)obj;

		long primaryKey = processSequence.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ProcessSequenceModelImpl processSequenceModelImpl = this;

		processSequenceModelImpl._originalUuid = processSequenceModelImpl._uuid;

		processSequenceModelImpl._originalCompanyId = processSequenceModelImpl._companyId;

		processSequenceModelImpl._setOriginalCompanyId = false;

		processSequenceModelImpl._originalGroupId = processSequenceModelImpl._groupId;

		processSequenceModelImpl._setOriginalGroupId = false;

		processSequenceModelImpl._setModifiedDate = false;

		processSequenceModelImpl._originalServiceProcessId = processSequenceModelImpl._serviceProcessId;

		processSequenceModelImpl._setOriginalServiceProcessId = false;

		processSequenceModelImpl._originalSequenceNo = processSequenceModelImpl._sequenceNo;

		processSequenceModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ProcessSequence> toCacheModel() {
		ProcessSequenceCacheModel processSequenceCacheModel = new ProcessSequenceCacheModel();

		processSequenceCacheModel.uuid = getUuid();

		String uuid = processSequenceCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			processSequenceCacheModel.uuid = null;
		}

		processSequenceCacheModel.processSequenceId = getProcessSequenceId();

		processSequenceCacheModel.companyId = getCompanyId();

		processSequenceCacheModel.groupId = getGroupId();

		processSequenceCacheModel.userId = getUserId();

		processSequenceCacheModel.userName = getUserName();

		String userName = processSequenceCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			processSequenceCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			processSequenceCacheModel.createDate = createDate.getTime();
		}
		else {
			processSequenceCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			processSequenceCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			processSequenceCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		processSequenceCacheModel.serviceProcessId = getServiceProcessId();

		processSequenceCacheModel.sequenceNo = getSequenceNo();

		String sequenceNo = processSequenceCacheModel.sequenceNo;

		if ((sequenceNo != null) && (sequenceNo.length() == 0)) {
			processSequenceCacheModel.sequenceNo = null;
		}

		processSequenceCacheModel.sequenceName = getSequenceName();

		String sequenceName = processSequenceCacheModel.sequenceName;

		if ((sequenceName != null) && (sequenceName.length() == 0)) {
			processSequenceCacheModel.sequenceName = null;
		}

		processSequenceCacheModel.sequenceRole = getSequenceRole();

		String sequenceRole = processSequenceCacheModel.sequenceRole;

		if ((sequenceRole != null) && (sequenceRole.length() == 0)) {
			processSequenceCacheModel.sequenceRole = null;
		}

		processSequenceCacheModel.durationCount = getDurationCount();

		return processSequenceCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(27);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", processSequenceId=");
		sb.append(getProcessSequenceId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", serviceProcessId=");
		sb.append(getServiceProcessId());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", sequenceName=");
		sb.append(getSequenceName());
		sb.append(", sequenceRole=");
		sb.append(getSequenceRole());
		sb.append(", durationCount=");
		sb.append(getDurationCount());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(43);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.ProcessSequence");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>processSequenceId</column-name><column-value><![CDATA[");
		sb.append(getProcessSequenceId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceProcessId</column-name><column-value><![CDATA[");
		sb.append(getServiceProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceName</column-name><column-value><![CDATA[");
		sb.append(getSequenceName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceRole</column-name><column-value><![CDATA[");
		sb.append(getSequenceRole());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>durationCount</column-name><column-value><![CDATA[");
		sb.append(getDurationCount());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ProcessSequence.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ProcessSequence.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _processSequenceId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _serviceProcessId;
	private long _originalServiceProcessId;
	private boolean _setOriginalServiceProcessId;
	private String _sequenceNo;
	private String _originalSequenceNo;
	private String _sequenceName;
	private String _sequenceRole;
	private double _durationCount;
	private long _columnBitmask;
	private ProcessSequence _escapedModel;
}