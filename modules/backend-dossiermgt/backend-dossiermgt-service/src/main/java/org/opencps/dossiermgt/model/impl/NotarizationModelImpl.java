/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.Notarization;
import org.opencps.dossiermgt.model.NotarizationModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Notarization service. Represents a row in the &quot;opencps_notarization&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link NotarizationModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link NotarizationImpl}.
 * </p>
 *
 * @author huymq
 * @see NotarizationImpl
 * @see Notarization
 * @see NotarizationModel
 * @generated
 */
@ProviderType
public class NotarizationModelImpl extends BaseModelImpl<Notarization>
	implements NotarizationModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a notarization model instance should use the {@link Notarization} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_notarization";
	public static final Object[][] TABLE_COLUMNS = {
			{ "notarizationId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierId", Types.BIGINT },
			{ "fileName", Types.VARCHAR },
			{ "totalRecord", Types.INTEGER },
			{ "totalPage", Types.INTEGER },
			{ "totalCopy", Types.INTEGER },
			{ "totalFee", Types.BIGINT },
			{ "notarizationNo", Types.BIGINT },
			{ "notarizationYear", Types.INTEGER },
			{ "notarizationDate", Types.TIMESTAMP },
			{ "signerName", Types.VARCHAR },
			{ "signerPosition", Types.VARCHAR },
			{ "statusCode", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("notarizationId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("totalRecord", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalPage", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalCopy", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalFee", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("notarizationNo", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("notarizationYear", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("notarizationDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("signerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("signerPosition", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("statusCode", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_notarization (notarizationId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(255) null,createDate DATE null,modifiedDate DATE null,dossierId LONG,fileName VARCHAR(1024) null,totalRecord INTEGER,totalPage INTEGER,totalCopy INTEGER,totalFee LONG,notarizationNo LONG,notarizationYear INTEGER,notarizationDate DATE null,signerName VARCHAR(512) null,signerPosition VARCHAR(512) null,statusCode VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_notarization";
	public static final String ORDER_BY_JPQL = " ORDER BY notarization.notarizationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_notarization.notarizationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.Notarization"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.Notarization"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.Notarization"),
			true);
	public static final long DOSSIERID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long NOTARIZATIONID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.Notarization"));

	public NotarizationModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _notarizationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setNotarizationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _notarizationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return Notarization.class;
	}

	@Override
	public String getModelClassName() {
		return Notarization.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("notarizationId", getNotarizationId());
		attributes.put("groupId", getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierId", getDossierId());
		attributes.put("fileName", getFileName());
		attributes.put("totalRecord", getTotalRecord());
		attributes.put("totalPage", getTotalPage());
		attributes.put("totalCopy", getTotalCopy());
		attributes.put("totalFee", getTotalFee());
		attributes.put("notarizationNo", getNotarizationNo());
		attributes.put("notarizationYear", getNotarizationYear());
		attributes.put("notarizationDate", getNotarizationDate());
		attributes.put("signerName", getSignerName());
		attributes.put("signerPosition", getSignerPosition());
		attributes.put("statusCode", getStatusCode());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long notarizationId = (Long)attributes.get("notarizationId");

		if (notarizationId != null) {
			setNotarizationId(notarizationId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		Integer totalRecord = (Integer)attributes.get("totalRecord");

		if (totalRecord != null) {
			setTotalRecord(totalRecord);
		}

		Integer totalPage = (Integer)attributes.get("totalPage");

		if (totalPage != null) {
			setTotalPage(totalPage);
		}

		Integer totalCopy = (Integer)attributes.get("totalCopy");

		if (totalCopy != null) {
			setTotalCopy(totalCopy);
		}

		Long totalFee = (Long)attributes.get("totalFee");

		if (totalFee != null) {
			setTotalFee(totalFee);
		}

		Long notarizationNo = (Long)attributes.get("notarizationNo");

		if (notarizationNo != null) {
			setNotarizationNo(notarizationNo);
		}

		Integer notarizationYear = (Integer)attributes.get("notarizationYear");

		if (notarizationYear != null) {
			setNotarizationYear(notarizationYear);
		}

		Date notarizationDate = (Date)attributes.get("notarizationDate");

		if (notarizationDate != null) {
			setNotarizationDate(notarizationDate);
		}

		String signerName = (String)attributes.get("signerName");

		if (signerName != null) {
			setSignerName(signerName);
		}

		String signerPosition = (String)attributes.get("signerPosition");

		if (signerPosition != null) {
			setSignerPosition(signerPosition);
		}

		String statusCode = (String)attributes.get("statusCode");

		if (statusCode != null) {
			setStatusCode(statusCode);
		}
	}

	@Override
	public long getNotarizationId() {
		return _notarizationId;
	}

	@Override
	public void setNotarizationId(long notarizationId) {
		_notarizationId = notarizationId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return "";
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@Override
	public int getTotalRecord() {
		return _totalRecord;
	}

	@Override
	public void setTotalRecord(int totalRecord) {
		_totalRecord = totalRecord;
	}

	@Override
	public int getTotalPage() {
		return _totalPage;
	}

	@Override
	public void setTotalPage(int totalPage) {
		_totalPage = totalPage;
	}

	@Override
	public int getTotalCopy() {
		return _totalCopy;
	}

	@Override
	public void setTotalCopy(int totalCopy) {
		_totalCopy = totalCopy;
	}

	@Override
	public long getTotalFee() {
		return _totalFee;
	}

	@Override
	public void setTotalFee(long totalFee) {
		_totalFee = totalFee;
	}

	@Override
	public long getNotarizationNo() {
		return _notarizationNo;
	}

	@Override
	public void setNotarizationNo(long notarizationNo) {
		_notarizationNo = notarizationNo;
	}

	@Override
	public int getNotarizationYear() {
		return _notarizationYear;
	}

	@Override
	public void setNotarizationYear(int notarizationYear) {
		_notarizationYear = notarizationYear;
	}

	@Override
	public Date getNotarizationDate() {
		return _notarizationDate;
	}

	@Override
	public void setNotarizationDate(Date notarizationDate) {
		_notarizationDate = notarizationDate;
	}

	@Override
	public String getSignerName() {
		if (_signerName == null) {
			return "";
		}
		else {
			return _signerName;
		}
	}

	@Override
	public void setSignerName(String signerName) {
		_signerName = signerName;
	}

	@Override
	public String getSignerPosition() {
		if (_signerPosition == null) {
			return "";
		}
		else {
			return _signerPosition;
		}
	}

	@Override
	public void setSignerPosition(String signerPosition) {
		_signerPosition = signerPosition;
	}

	@Override
	public String getStatusCode() {
		if (_statusCode == null) {
			return "";
		}
		else {
			return _statusCode;
		}
	}

	@Override
	public void setStatusCode(String statusCode) {
		_statusCode = statusCode;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			Notarization.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public Notarization toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Notarization)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		NotarizationImpl notarizationImpl = new NotarizationImpl();

		notarizationImpl.setNotarizationId(getNotarizationId());
		notarizationImpl.setGroupId(getGroupId());
		notarizationImpl.setCompanyId(getCompanyId());
		notarizationImpl.setUserId(getUserId());
		notarizationImpl.setUserName(getUserName());
		notarizationImpl.setCreateDate(getCreateDate());
		notarizationImpl.setModifiedDate(getModifiedDate());
		notarizationImpl.setDossierId(getDossierId());
		notarizationImpl.setFileName(getFileName());
		notarizationImpl.setTotalRecord(getTotalRecord());
		notarizationImpl.setTotalPage(getTotalPage());
		notarizationImpl.setTotalCopy(getTotalCopy());
		notarizationImpl.setTotalFee(getTotalFee());
		notarizationImpl.setNotarizationNo(getNotarizationNo());
		notarizationImpl.setNotarizationYear(getNotarizationYear());
		notarizationImpl.setNotarizationDate(getNotarizationDate());
		notarizationImpl.setSignerName(getSignerName());
		notarizationImpl.setSignerPosition(getSignerPosition());
		notarizationImpl.setStatusCode(getStatusCode());

		notarizationImpl.resetOriginalValues();

		return notarizationImpl;
	}

	@Override
	public int compareTo(Notarization notarization) {
		long primaryKey = notarization.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Notarization)) {
			return false;
		}

		Notarization notarization = (Notarization)obj;

		long primaryKey = notarization.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		NotarizationModelImpl notarizationModelImpl = this;

		notarizationModelImpl._originalGroupId = notarizationModelImpl._groupId;

		notarizationModelImpl._setOriginalGroupId = false;

		notarizationModelImpl._setModifiedDate = false;

		notarizationModelImpl._originalDossierId = notarizationModelImpl._dossierId;

		notarizationModelImpl._setOriginalDossierId = false;

		notarizationModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Notarization> toCacheModel() {
		NotarizationCacheModel notarizationCacheModel = new NotarizationCacheModel();

		notarizationCacheModel.notarizationId = getNotarizationId();

		notarizationCacheModel.groupId = getGroupId();

		notarizationCacheModel.companyId = getCompanyId();

		notarizationCacheModel.userId = getUserId();

		notarizationCacheModel.userName = getUserName();

		String userName = notarizationCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			notarizationCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			notarizationCacheModel.createDate = createDate.getTime();
		}
		else {
			notarizationCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			notarizationCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			notarizationCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		notarizationCacheModel.dossierId = getDossierId();

		notarizationCacheModel.fileName = getFileName();

		String fileName = notarizationCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			notarizationCacheModel.fileName = null;
		}

		notarizationCacheModel.totalRecord = getTotalRecord();

		notarizationCacheModel.totalPage = getTotalPage();

		notarizationCacheModel.totalCopy = getTotalCopy();

		notarizationCacheModel.totalFee = getTotalFee();

		notarizationCacheModel.notarizationNo = getNotarizationNo();

		notarizationCacheModel.notarizationYear = getNotarizationYear();

		Date notarizationDate = getNotarizationDate();

		if (notarizationDate != null) {
			notarizationCacheModel.notarizationDate = notarizationDate.getTime();
		}
		else {
			notarizationCacheModel.notarizationDate = Long.MIN_VALUE;
		}

		notarizationCacheModel.signerName = getSignerName();

		String signerName = notarizationCacheModel.signerName;

		if ((signerName != null) && (signerName.length() == 0)) {
			notarizationCacheModel.signerName = null;
		}

		notarizationCacheModel.signerPosition = getSignerPosition();

		String signerPosition = notarizationCacheModel.signerPosition;

		if ((signerPosition != null) && (signerPosition.length() == 0)) {
			notarizationCacheModel.signerPosition = null;
		}

		notarizationCacheModel.statusCode = getStatusCode();

		String statusCode = notarizationCacheModel.statusCode;

		if ((statusCode != null) && (statusCode.length() == 0)) {
			notarizationCacheModel.statusCode = null;
		}

		return notarizationCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{notarizationId=");
		sb.append(getNotarizationId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", totalRecord=");
		sb.append(getTotalRecord());
		sb.append(", totalPage=");
		sb.append(getTotalPage());
		sb.append(", totalCopy=");
		sb.append(getTotalCopy());
		sb.append(", totalFee=");
		sb.append(getTotalFee());
		sb.append(", notarizationNo=");
		sb.append(getNotarizationNo());
		sb.append(", notarizationYear=");
		sb.append(getNotarizationYear());
		sb.append(", notarizationDate=");
		sb.append(getNotarizationDate());
		sb.append(", signerName=");
		sb.append(getSignerName());
		sb.append(", signerPosition=");
		sb.append(getSignerPosition());
		sb.append(", statusCode=");
		sb.append(getStatusCode());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.Notarization");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>notarizationId</column-name><column-value><![CDATA[");
		sb.append(getNotarizationId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalRecord</column-name><column-value><![CDATA[");
		sb.append(getTotalRecord());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalPage</column-name><column-value><![CDATA[");
		sb.append(getTotalPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalCopy</column-name><column-value><![CDATA[");
		sb.append(getTotalCopy());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>totalFee</column-name><column-value><![CDATA[");
		sb.append(getTotalFee());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notarizationNo</column-name><column-value><![CDATA[");
		sb.append(getNotarizationNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notarizationYear</column-name><column-value><![CDATA[");
		sb.append(getNotarizationYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>notarizationDate</column-name><column-value><![CDATA[");
		sb.append(getNotarizationDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerName</column-name><column-value><![CDATA[");
		sb.append(getSignerName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>signerPosition</column-name><column-value><![CDATA[");
		sb.append(getSignerPosition());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>statusCode</column-name><column-value><![CDATA[");
		sb.append(getStatusCode());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = Notarization.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			Notarization.class, ModelWrapper.class
		};
	private long _notarizationId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private String _fileName;
	private int _totalRecord;
	private int _totalPage;
	private int _totalCopy;
	private long _totalFee;
	private long _notarizationNo;
	private int _notarizationYear;
	private Date _notarizationDate;
	private String _signerName;
	private String _signerPosition;
	private String _statusCode;
	private long _columnBitmask;
	private Notarization _escapedModel;
}