/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.DocumentType;
import org.opencps.dossiermgt.model.DocumentTypeModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DocumentType service. Represents a row in the &quot;opencps_documenttype&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DocumentTypeModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DocumentTypeImpl}.
 * </p>
 *
 * @author huymq
 * @see DocumentTypeImpl
 * @see DocumentType
 * @see DocumentTypeModel
 * @generated
 */
@ProviderType
public class DocumentTypeModelImpl extends BaseModelImpl<DocumentType>
	implements DocumentTypeModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a document type model instance should use the {@link DocumentType} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_documenttype";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "DocumentTypeId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "typeCode", Types.VARCHAR },
			{ "templateClass", Types.INTEGER },
			{ "documentName", Types.VARCHAR },
			{ "codePattern", Types.VARCHAR },
			{ "documentScript", Types.VARCHAR },
			{ "docSync", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("DocumentTypeId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("typeCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("templateClass", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("documentName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("codePattern", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("documentScript", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("docSync", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_documenttype (uuid_ VARCHAR(75) null,DocumentTypeId LONG not null primary key,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,typeCode VARCHAR(75) null,templateClass INTEGER,documentName VARCHAR(75) null,codePattern VARCHAR(75) null,documentScript VARCHAR(75) null,docSync INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_documenttype";
	public static final String ORDER_BY_JPQL = " ORDER BY documentType.modifiedDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_documenttype.modifiedDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DocumentType"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DocumentType"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DocumentType"),
			true);
	public static final long GROUPID_COLUMN_BITMASK = 1L;
	public static final long TYPECODE_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long MODIFIEDDATE_COLUMN_BITMASK = 8L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DocumentType"));

	public DocumentTypeModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _DocumentTypeId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDocumentTypeId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _DocumentTypeId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DocumentType.class;
	}

	@Override
	public String getModelClassName() {
		return DocumentType.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("DocumentTypeId", getDocumentTypeId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("typeCode", getTypeCode());
		attributes.put("templateClass", getTemplateClass());
		attributes.put("documentName", getDocumentName());
		attributes.put("codePattern", getCodePattern());
		attributes.put("documentScript", getDocumentScript());
		attributes.put("docSync", getDocSync());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long DocumentTypeId = (Long)attributes.get("DocumentTypeId");

		if (DocumentTypeId != null) {
			setDocumentTypeId(DocumentTypeId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String typeCode = (String)attributes.get("typeCode");

		if (typeCode != null) {
			setTypeCode(typeCode);
		}

		Integer templateClass = (Integer)attributes.get("templateClass");

		if (templateClass != null) {
			setTemplateClass(templateClass);
		}

		String documentName = (String)attributes.get("documentName");

		if (documentName != null) {
			setDocumentName(documentName);
		}

		String codePattern = (String)attributes.get("codePattern");

		if (codePattern != null) {
			setCodePattern(codePattern);
		}

		String documentScript = (String)attributes.get("documentScript");

		if (documentScript != null) {
			setDocumentScript(documentScript);
		}

		Integer docSync = (Integer)attributes.get("docSync");

		if (docSync != null) {
			setDocSync(docSync);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDocumentTypeId() {
		return _DocumentTypeId;
	}

	@Override
	public void setDocumentTypeId(long DocumentTypeId) {
		_DocumentTypeId = DocumentTypeId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_columnBitmask = -1L;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getTypeCode() {
		if (_typeCode == null) {
			return "";
		}
		else {
			return _typeCode;
		}
	}

	@Override
	public void setTypeCode(String typeCode) {
		_columnBitmask |= TYPECODE_COLUMN_BITMASK;

		if (_originalTypeCode == null) {
			_originalTypeCode = _typeCode;
		}

		_typeCode = typeCode;
	}

	public String getOriginalTypeCode() {
		return GetterUtil.getString(_originalTypeCode);
	}

	@Override
	public int getTemplateClass() {
		return _templateClass;
	}

	@Override
	public void setTemplateClass(int templateClass) {
		_templateClass = templateClass;
	}

	@Override
	public String getDocumentName() {
		if (_documentName == null) {
			return "";
		}
		else {
			return _documentName;
		}
	}

	@Override
	public void setDocumentName(String documentName) {
		_documentName = documentName;
	}

	@Override
	public String getCodePattern() {
		if (_codePattern == null) {
			return "";
		}
		else {
			return _codePattern;
		}
	}

	@Override
	public void setCodePattern(String codePattern) {
		_codePattern = codePattern;
	}

	@Override
	public String getDocumentScript() {
		if (_documentScript == null) {
			return "";
		}
		else {
			return _documentScript;
		}
	}

	@Override
	public void setDocumentScript(String documentScript) {
		_documentScript = documentScript;
	}

	@Override
	public int getDocSync() {
		return _docSync;
	}

	@Override
	public void setDocSync(int docSync) {
		_docSync = docSync;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			DocumentType.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DocumentType toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DocumentType)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DocumentTypeImpl documentTypeImpl = new DocumentTypeImpl();

		documentTypeImpl.setUuid(getUuid());
		documentTypeImpl.setDocumentTypeId(getDocumentTypeId());
		documentTypeImpl.setGroupId(getGroupId());
		documentTypeImpl.setUserId(getUserId());
		documentTypeImpl.setCreateDate(getCreateDate());
		documentTypeImpl.setModifiedDate(getModifiedDate());
		documentTypeImpl.setTypeCode(getTypeCode());
		documentTypeImpl.setTemplateClass(getTemplateClass());
		documentTypeImpl.setDocumentName(getDocumentName());
		documentTypeImpl.setCodePattern(getCodePattern());
		documentTypeImpl.setDocumentScript(getDocumentScript());
		documentTypeImpl.setDocSync(getDocSync());

		documentTypeImpl.resetOriginalValues();

		return documentTypeImpl;
	}

	@Override
	public int compareTo(DocumentType documentType) {
		int value = 0;

		value = DateUtil.compareTo(getModifiedDate(),
				documentType.getModifiedDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DocumentType)) {
			return false;
		}

		DocumentType documentType = (DocumentType)obj;

		long primaryKey = documentType.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DocumentTypeModelImpl documentTypeModelImpl = this;

		documentTypeModelImpl._originalUuid = documentTypeModelImpl._uuid;

		documentTypeModelImpl._originalGroupId = documentTypeModelImpl._groupId;

		documentTypeModelImpl._setOriginalGroupId = false;

		documentTypeModelImpl._setModifiedDate = false;

		documentTypeModelImpl._originalTypeCode = documentTypeModelImpl._typeCode;

		documentTypeModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DocumentType> toCacheModel() {
		DocumentTypeCacheModel documentTypeCacheModel = new DocumentTypeCacheModel();

		documentTypeCacheModel.uuid = getUuid();

		String uuid = documentTypeCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			documentTypeCacheModel.uuid = null;
		}

		documentTypeCacheModel.DocumentTypeId = getDocumentTypeId();

		documentTypeCacheModel.groupId = getGroupId();

		documentTypeCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			documentTypeCacheModel.createDate = createDate.getTime();
		}
		else {
			documentTypeCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			documentTypeCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			documentTypeCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		documentTypeCacheModel.typeCode = getTypeCode();

		String typeCode = documentTypeCacheModel.typeCode;

		if ((typeCode != null) && (typeCode.length() == 0)) {
			documentTypeCacheModel.typeCode = null;
		}

		documentTypeCacheModel.templateClass = getTemplateClass();

		documentTypeCacheModel.documentName = getDocumentName();

		String documentName = documentTypeCacheModel.documentName;

		if ((documentName != null) && (documentName.length() == 0)) {
			documentTypeCacheModel.documentName = null;
		}

		documentTypeCacheModel.codePattern = getCodePattern();

		String codePattern = documentTypeCacheModel.codePattern;

		if ((codePattern != null) && (codePattern.length() == 0)) {
			documentTypeCacheModel.codePattern = null;
		}

		documentTypeCacheModel.documentScript = getDocumentScript();

		String documentScript = documentTypeCacheModel.documentScript;

		if ((documentScript != null) && (documentScript.length() == 0)) {
			documentTypeCacheModel.documentScript = null;
		}

		documentTypeCacheModel.docSync = getDocSync();

		return documentTypeCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", DocumentTypeId=");
		sb.append(getDocumentTypeId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", typeCode=");
		sb.append(getTypeCode());
		sb.append(", templateClass=");
		sb.append(getTemplateClass());
		sb.append(", documentName=");
		sb.append(getDocumentName());
		sb.append(", codePattern=");
		sb.append(getCodePattern());
		sb.append(", documentScript=");
		sb.append(getDocumentScript());
		sb.append(", docSync=");
		sb.append(getDocSync());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DocumentType");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>DocumentTypeId</column-name><column-value><![CDATA[");
		sb.append(getDocumentTypeId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>typeCode</column-name><column-value><![CDATA[");
		sb.append(getTypeCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>templateClass</column-name><column-value><![CDATA[");
		sb.append(getTemplateClass());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentName</column-name><column-value><![CDATA[");
		sb.append(getDocumentName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>codePattern</column-name><column-value><![CDATA[");
		sb.append(getCodePattern());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>documentScript</column-name><column-value><![CDATA[");
		sb.append(getDocumentScript());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>docSync</column-name><column-value><![CDATA[");
		sb.append(getDocSync());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DocumentType.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DocumentType.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _DocumentTypeId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _typeCode;
	private String _originalTypeCode;
	private int _templateClass;
	private String _documentName;
	private String _codePattern;
	private String _documentScript;
	private int _docSync;
	private long _columnBitmask;
	private DocumentType _escapedModel;
}