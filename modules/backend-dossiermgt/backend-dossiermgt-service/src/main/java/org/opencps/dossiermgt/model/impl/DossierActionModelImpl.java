/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.dossiermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.dossiermgt.model.DossierAction;
import org.opencps.dossiermgt.model.DossierActionModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the DossierAction service. Represents a row in the &quot;opencps_dossieraction&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link DossierActionModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DossierActionImpl}.
 * </p>
 *
 * @author huymq
 * @see DossierActionImpl
 * @see DossierAction
 * @see DossierActionModel
 * @generated
 */
@ProviderType
public class DossierActionModelImpl extends BaseModelImpl<DossierAction>
	implements DossierActionModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a dossier action model instance should use the {@link DossierAction} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_dossieraction";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "dossierActionId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "dossierId", Types.BIGINT },
			{ "serviceProcessId", Types.BIGINT },
			{ "previousActionId", Types.BIGINT },
			{ "fromStepCode", Types.VARCHAR },
			{ "fromStepName", Types.VARCHAR },
			{ "fromSequenceNo", Types.VARCHAR },
			{ "actionCode", Types.VARCHAR },
			{ "actionUser", Types.VARCHAR },
			{ "actionName", Types.VARCHAR },
			{ "actionNote", Types.VARCHAR },
			{ "actionOverdue", Types.INTEGER },
			{ "syncActionCode", Types.VARCHAR },
			{ "pending", Types.BOOLEAN },
			{ "rollbackable", Types.BOOLEAN },
			{ "stepCode", Types.VARCHAR },
			{ "stepName", Types.VARCHAR },
			{ "sequenceNo", Types.VARCHAR },
			{ "dueDate", Types.TIMESTAMP },
			{ "nextActionId", Types.BIGINT },
			{ "payload", Types.VARCHAR },
			{ "stepInstruction", Types.VARCHAR },
			{ "state_", Types.INTEGER },
			{ "eventStatus", Types.INTEGER }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("dossierId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("serviceProcessId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("previousActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("fromStepCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromStepName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fromSequenceNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionUser", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionNote", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("actionOverdue", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("syncActionCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("pending", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("rollbackable", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("stepCode", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stepName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sequenceNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dueDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nextActionId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("payload", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("stepInstruction", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("eventStatus", Types.INTEGER);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_dossieraction (uuid_ VARCHAR(75) null,dossierActionId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,dossierId LONG,serviceProcessId LONG,previousActionId LONG,fromStepCode VARCHAR(75) null,fromStepName VARCHAR(75) null,fromSequenceNo VARCHAR(75) null,actionCode VARCHAR(75) null,actionUser VARCHAR(75) null,actionName VARCHAR(75) null,actionNote VARCHAR(500) null,actionOverdue INTEGER,syncActionCode VARCHAR(75) null,pending BOOLEAN,rollbackable BOOLEAN,stepCode VARCHAR(75) null,stepName VARCHAR(75) null,sequenceNo VARCHAR(75) null,dueDate DATE null,nextActionId LONG,payload STRING null,stepInstruction STRING null,state_ INTEGER,eventStatus INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table opencps_dossieraction";
	public static final String ORDER_BY_JPQL = " ORDER BY dossierAction.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_dossieraction.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.dossiermgt.model.DossierAction"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.dossiermgt.model.DossierAction"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.dossiermgt.model.DossierAction"),
			true);
	public static final long ACTIONCODE_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long DOSSIERACTIONID_COLUMN_BITMASK = 4L;
	public static final long DOSSIERID_COLUMN_BITMASK = 8L;
	public static final long FROMSEQUENCENO_COLUMN_BITMASK = 16L;
	public static final long FROMSTEPCODE_COLUMN_BITMASK = 32L;
	public static final long GROUPID_COLUMN_BITMASK = 64L;
	public static final long NEXTACTIONID_COLUMN_BITMASK = 128L;
	public static final long PENDING_COLUMN_BITMASK = 256L;
	public static final long SEQUENCENO_COLUMN_BITMASK = 512L;
	public static final long STEPCODE_COLUMN_BITMASK = 1024L;
	public static final long USERID_COLUMN_BITMASK = 2048L;
	public static final long UUID_COLUMN_BITMASK = 4096L;
	public static final long CREATEDATE_COLUMN_BITMASK = 8192L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.dossiermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.dossiermgt.model.DossierAction"));

	public DossierActionModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dossierActionId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDossierActionId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dossierActionId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DossierAction.class;
	}

	@Override
	public String getModelClassName() {
		return DossierAction.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("dossierActionId", getDossierActionId());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("dossierId", getDossierId());
		attributes.put("serviceProcessId", getServiceProcessId());
		attributes.put("previousActionId", getPreviousActionId());
		attributes.put("fromStepCode", getFromStepCode());
		attributes.put("fromStepName", getFromStepName());
		attributes.put("fromSequenceNo", getFromSequenceNo());
		attributes.put("actionCode", getActionCode());
		attributes.put("actionUser", getActionUser());
		attributes.put("actionName", getActionName());
		attributes.put("actionNote", getActionNote());
		attributes.put("actionOverdue", getActionOverdue());
		attributes.put("syncActionCode", getSyncActionCode());
		attributes.put("pending", isPending());
		attributes.put("rollbackable", isRollbackable());
		attributes.put("stepCode", getStepCode());
		attributes.put("stepName", getStepName());
		attributes.put("sequenceNo", getSequenceNo());
		attributes.put("dueDate", getDueDate());
		attributes.put("nextActionId", getNextActionId());
		attributes.put("payload", getPayload());
		attributes.put("stepInstruction", getStepInstruction());
		attributes.put("state", getState());
		attributes.put("eventStatus", getEventStatus());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long dossierActionId = (Long)attributes.get("dossierActionId");

		if (dossierActionId != null) {
			setDossierActionId(dossierActionId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long dossierId = (Long)attributes.get("dossierId");

		if (dossierId != null) {
			setDossierId(dossierId);
		}

		Long serviceProcessId = (Long)attributes.get("serviceProcessId");

		if (serviceProcessId != null) {
			setServiceProcessId(serviceProcessId);
		}

		Long previousActionId = (Long)attributes.get("previousActionId");

		if (previousActionId != null) {
			setPreviousActionId(previousActionId);
		}

		String fromStepCode = (String)attributes.get("fromStepCode");

		if (fromStepCode != null) {
			setFromStepCode(fromStepCode);
		}

		String fromStepName = (String)attributes.get("fromStepName");

		if (fromStepName != null) {
			setFromStepName(fromStepName);
		}

		String fromSequenceNo = (String)attributes.get("fromSequenceNo");

		if (fromSequenceNo != null) {
			setFromSequenceNo(fromSequenceNo);
		}

		String actionCode = (String)attributes.get("actionCode");

		if (actionCode != null) {
			setActionCode(actionCode);
		}

		String actionUser = (String)attributes.get("actionUser");

		if (actionUser != null) {
			setActionUser(actionUser);
		}

		String actionName = (String)attributes.get("actionName");

		if (actionName != null) {
			setActionName(actionName);
		}

		String actionNote = (String)attributes.get("actionNote");

		if (actionNote != null) {
			setActionNote(actionNote);
		}

		Integer actionOverdue = (Integer)attributes.get("actionOverdue");

		if (actionOverdue != null) {
			setActionOverdue(actionOverdue);
		}

		String syncActionCode = (String)attributes.get("syncActionCode");

		if (syncActionCode != null) {
			setSyncActionCode(syncActionCode);
		}

		Boolean pending = (Boolean)attributes.get("pending");

		if (pending != null) {
			setPending(pending);
		}

		Boolean rollbackable = (Boolean)attributes.get("rollbackable");

		if (rollbackable != null) {
			setRollbackable(rollbackable);
		}

		String stepCode = (String)attributes.get("stepCode");

		if (stepCode != null) {
			setStepCode(stepCode);
		}

		String stepName = (String)attributes.get("stepName");

		if (stepName != null) {
			setStepName(stepName);
		}

		String sequenceNo = (String)attributes.get("sequenceNo");

		if (sequenceNo != null) {
			setSequenceNo(sequenceNo);
		}

		Date dueDate = (Date)attributes.get("dueDate");

		if (dueDate != null) {
			setDueDate(dueDate);
		}

		Long nextActionId = (Long)attributes.get("nextActionId");

		if (nextActionId != null) {
			setNextActionId(nextActionId);
		}

		String payload = (String)attributes.get("payload");

		if (payload != null) {
			setPayload(payload);
		}

		String stepInstruction = (String)attributes.get("stepInstruction");

		if (stepInstruction != null) {
			setStepInstruction(stepInstruction);
		}

		Integer state = (Integer)attributes.get("state");

		if (state != null) {
			setState(state);
		}

		Integer eventStatus = (Integer)attributes.get("eventStatus");

		if (eventStatus != null) {
			setEventStatus(eventStatus);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getDossierActionId() {
		return _dossierActionId;
	}

	@Override
	public void setDossierActionId(long dossierActionId) {
		_columnBitmask |= DOSSIERACTIONID_COLUMN_BITMASK;

		if (!_setOriginalDossierActionId) {
			_setOriginalDossierActionId = true;

			_originalDossierActionId = _dossierActionId;
		}

		_dossierActionId = dossierActionId;
	}

	public long getOriginalDossierActionId() {
		return _originalDossierActionId;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getDossierId() {
		return _dossierId;
	}

	@Override
	public void setDossierId(long dossierId) {
		_columnBitmask |= DOSSIERID_COLUMN_BITMASK;

		if (!_setOriginalDossierId) {
			_setOriginalDossierId = true;

			_originalDossierId = _dossierId;
		}

		_dossierId = dossierId;
	}

	public long getOriginalDossierId() {
		return _originalDossierId;
	}

	@Override
	public long getServiceProcessId() {
		return _serviceProcessId;
	}

	@Override
	public void setServiceProcessId(long serviceProcessId) {
		_serviceProcessId = serviceProcessId;
	}

	@Override
	public long getPreviousActionId() {
		return _previousActionId;
	}

	@Override
	public void setPreviousActionId(long previousActionId) {
		_previousActionId = previousActionId;
	}

	@Override
	public String getFromStepCode() {
		if (_fromStepCode == null) {
			return "";
		}
		else {
			return _fromStepCode;
		}
	}

	@Override
	public void setFromStepCode(String fromStepCode) {
		_columnBitmask |= FROMSTEPCODE_COLUMN_BITMASK;

		if (_originalFromStepCode == null) {
			_originalFromStepCode = _fromStepCode;
		}

		_fromStepCode = fromStepCode;
	}

	public String getOriginalFromStepCode() {
		return GetterUtil.getString(_originalFromStepCode);
	}

	@Override
	public String getFromStepName() {
		if (_fromStepName == null) {
			return "";
		}
		else {
			return _fromStepName;
		}
	}

	@Override
	public void setFromStepName(String fromStepName) {
		_fromStepName = fromStepName;
	}

	@Override
	public String getFromSequenceNo() {
		if (_fromSequenceNo == null) {
			return "";
		}
		else {
			return _fromSequenceNo;
		}
	}

	@Override
	public void setFromSequenceNo(String fromSequenceNo) {
		_columnBitmask |= FROMSEQUENCENO_COLUMN_BITMASK;

		if (_originalFromSequenceNo == null) {
			_originalFromSequenceNo = _fromSequenceNo;
		}

		_fromSequenceNo = fromSequenceNo;
	}

	public String getOriginalFromSequenceNo() {
		return GetterUtil.getString(_originalFromSequenceNo);
	}

	@Override
	public String getActionCode() {
		if (_actionCode == null) {
			return "";
		}
		else {
			return _actionCode;
		}
	}

	@Override
	public void setActionCode(String actionCode) {
		_columnBitmask |= ACTIONCODE_COLUMN_BITMASK;

		if (_originalActionCode == null) {
			_originalActionCode = _actionCode;
		}

		_actionCode = actionCode;
	}

	public String getOriginalActionCode() {
		return GetterUtil.getString(_originalActionCode);
	}

	@Override
	public String getActionUser() {
		if (_actionUser == null) {
			return "";
		}
		else {
			return _actionUser;
		}
	}

	@Override
	public void setActionUser(String actionUser) {
		_actionUser = actionUser;
	}

	@Override
	public String getActionName() {
		if (_actionName == null) {
			return "";
		}
		else {
			return _actionName;
		}
	}

	@Override
	public void setActionName(String actionName) {
		_actionName = actionName;
	}

	@Override
	public String getActionNote() {
		if (_actionNote == null) {
			return "";
		}
		else {
			return _actionNote;
		}
	}

	@Override
	public void setActionNote(String actionNote) {
		_actionNote = actionNote;
	}

	@Override
	public int getActionOverdue() {
		return _actionOverdue;
	}

	@Override
	public void setActionOverdue(int actionOverdue) {
		_actionOverdue = actionOverdue;
	}

	@Override
	public String getSyncActionCode() {
		if (_syncActionCode == null) {
			return "";
		}
		else {
			return _syncActionCode;
		}
	}

	@Override
	public void setSyncActionCode(String syncActionCode) {
		_syncActionCode = syncActionCode;
	}

	@Override
	public boolean getPending() {
		return _pending;
	}

	@Override
	public boolean isPending() {
		return _pending;
	}

	@Override
	public void setPending(boolean pending) {
		_columnBitmask |= PENDING_COLUMN_BITMASK;

		if (!_setOriginalPending) {
			_setOriginalPending = true;

			_originalPending = _pending;
		}

		_pending = pending;
	}

	public boolean getOriginalPending() {
		return _originalPending;
	}

	@Override
	public boolean getRollbackable() {
		return _rollbackable;
	}

	@Override
	public boolean isRollbackable() {
		return _rollbackable;
	}

	@Override
	public void setRollbackable(boolean rollbackable) {
		_rollbackable = rollbackable;
	}

	@Override
	public String getStepCode() {
		if (_stepCode == null) {
			return "";
		}
		else {
			return _stepCode;
		}
	}

	@Override
	public void setStepCode(String stepCode) {
		_columnBitmask |= STEPCODE_COLUMN_BITMASK;

		if (_originalStepCode == null) {
			_originalStepCode = _stepCode;
		}

		_stepCode = stepCode;
	}

	public String getOriginalStepCode() {
		return GetterUtil.getString(_originalStepCode);
	}

	@Override
	public String getStepName() {
		if (_stepName == null) {
			return "";
		}
		else {
			return _stepName;
		}
	}

	@Override
	public void setStepName(String stepName) {
		_stepName = stepName;
	}

	@Override
	public String getSequenceNo() {
		if (_sequenceNo == null) {
			return "";
		}
		else {
			return _sequenceNo;
		}
	}

	@Override
	public void setSequenceNo(String sequenceNo) {
		_columnBitmask |= SEQUENCENO_COLUMN_BITMASK;

		if (_originalSequenceNo == null) {
			_originalSequenceNo = _sequenceNo;
		}

		_sequenceNo = sequenceNo;
	}

	public String getOriginalSequenceNo() {
		return GetterUtil.getString(_originalSequenceNo);
	}

	@Override
	public Date getDueDate() {
		return _dueDate;
	}

	@Override
	public void setDueDate(Date dueDate) {
		_dueDate = dueDate;
	}

	@Override
	public long getNextActionId() {
		return _nextActionId;
	}

	@Override
	public void setNextActionId(long nextActionId) {
		_columnBitmask |= NEXTACTIONID_COLUMN_BITMASK;

		if (!_setOriginalNextActionId) {
			_setOriginalNextActionId = true;

			_originalNextActionId = _nextActionId;
		}

		_nextActionId = nextActionId;
	}

	public long getOriginalNextActionId() {
		return _originalNextActionId;
	}

	@Override
	public String getPayload() {
		if (_payload == null) {
			return "";
		}
		else {
			return _payload;
		}
	}

	@Override
	public void setPayload(String payload) {
		_payload = payload;
	}

	@Override
	public String getStepInstruction() {
		if (_stepInstruction == null) {
			return "";
		}
		else {
			return _stepInstruction;
		}
	}

	@Override
	public void setStepInstruction(String stepInstruction) {
		_stepInstruction = stepInstruction;
	}

	@Override
	public int getState() {
		return _state;
	}

	@Override
	public void setState(int state) {
		_state = state;
	}

	@Override
	public int getEventStatus() {
		return _eventStatus;
	}

	@Override
	public void setEventStatus(int eventStatus) {
		_eventStatus = eventStatus;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				DossierAction.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DossierAction.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DossierAction toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DossierAction)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DossierActionImpl dossierActionImpl = new DossierActionImpl();

		dossierActionImpl.setUuid(getUuid());
		dossierActionImpl.setDossierActionId(getDossierActionId());
		dossierActionImpl.setCompanyId(getCompanyId());
		dossierActionImpl.setGroupId(getGroupId());
		dossierActionImpl.setUserId(getUserId());
		dossierActionImpl.setUserName(getUserName());
		dossierActionImpl.setCreateDate(getCreateDate());
		dossierActionImpl.setModifiedDate(getModifiedDate());
		dossierActionImpl.setDossierId(getDossierId());
		dossierActionImpl.setServiceProcessId(getServiceProcessId());
		dossierActionImpl.setPreviousActionId(getPreviousActionId());
		dossierActionImpl.setFromStepCode(getFromStepCode());
		dossierActionImpl.setFromStepName(getFromStepName());
		dossierActionImpl.setFromSequenceNo(getFromSequenceNo());
		dossierActionImpl.setActionCode(getActionCode());
		dossierActionImpl.setActionUser(getActionUser());
		dossierActionImpl.setActionName(getActionName());
		dossierActionImpl.setActionNote(getActionNote());
		dossierActionImpl.setActionOverdue(getActionOverdue());
		dossierActionImpl.setSyncActionCode(getSyncActionCode());
		dossierActionImpl.setPending(isPending());
		dossierActionImpl.setRollbackable(isRollbackable());
		dossierActionImpl.setStepCode(getStepCode());
		dossierActionImpl.setStepName(getStepName());
		dossierActionImpl.setSequenceNo(getSequenceNo());
		dossierActionImpl.setDueDate(getDueDate());
		dossierActionImpl.setNextActionId(getNextActionId());
		dossierActionImpl.setPayload(getPayload());
		dossierActionImpl.setStepInstruction(getStepInstruction());
		dossierActionImpl.setState(getState());
		dossierActionImpl.setEventStatus(getEventStatus());

		dossierActionImpl.resetOriginalValues();

		return dossierActionImpl;
	}

	@Override
	public int compareTo(DossierAction dossierAction) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				dossierAction.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DossierAction)) {
			return false;
		}

		DossierAction dossierAction = (DossierAction)obj;

		long primaryKey = dossierAction.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		DossierActionModelImpl dossierActionModelImpl = this;

		dossierActionModelImpl._originalUuid = dossierActionModelImpl._uuid;

		dossierActionModelImpl._originalDossierActionId = dossierActionModelImpl._dossierActionId;

		dossierActionModelImpl._setOriginalDossierActionId = false;

		dossierActionModelImpl._originalCompanyId = dossierActionModelImpl._companyId;

		dossierActionModelImpl._setOriginalCompanyId = false;

		dossierActionModelImpl._originalGroupId = dossierActionModelImpl._groupId;

		dossierActionModelImpl._setOriginalGroupId = false;

		dossierActionModelImpl._originalUserId = dossierActionModelImpl._userId;

		dossierActionModelImpl._setOriginalUserId = false;

		dossierActionModelImpl._setModifiedDate = false;

		dossierActionModelImpl._originalDossierId = dossierActionModelImpl._dossierId;

		dossierActionModelImpl._setOriginalDossierId = false;

		dossierActionModelImpl._originalFromStepCode = dossierActionModelImpl._fromStepCode;

		dossierActionModelImpl._originalFromSequenceNo = dossierActionModelImpl._fromSequenceNo;

		dossierActionModelImpl._originalActionCode = dossierActionModelImpl._actionCode;

		dossierActionModelImpl._originalPending = dossierActionModelImpl._pending;

		dossierActionModelImpl._setOriginalPending = false;

		dossierActionModelImpl._originalStepCode = dossierActionModelImpl._stepCode;

		dossierActionModelImpl._originalSequenceNo = dossierActionModelImpl._sequenceNo;

		dossierActionModelImpl._originalNextActionId = dossierActionModelImpl._nextActionId;

		dossierActionModelImpl._setOriginalNextActionId = false;

		dossierActionModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DossierAction> toCacheModel() {
		DossierActionCacheModel dossierActionCacheModel = new DossierActionCacheModel();

		dossierActionCacheModel.uuid = getUuid();

		String uuid = dossierActionCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			dossierActionCacheModel.uuid = null;
		}

		dossierActionCacheModel.dossierActionId = getDossierActionId();

		dossierActionCacheModel.companyId = getCompanyId();

		dossierActionCacheModel.groupId = getGroupId();

		dossierActionCacheModel.userId = getUserId();

		dossierActionCacheModel.userName = getUserName();

		String userName = dossierActionCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			dossierActionCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			dossierActionCacheModel.createDate = createDate.getTime();
		}
		else {
			dossierActionCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			dossierActionCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			dossierActionCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		dossierActionCacheModel.dossierId = getDossierId();

		dossierActionCacheModel.serviceProcessId = getServiceProcessId();

		dossierActionCacheModel.previousActionId = getPreviousActionId();

		dossierActionCacheModel.fromStepCode = getFromStepCode();

		String fromStepCode = dossierActionCacheModel.fromStepCode;

		if ((fromStepCode != null) && (fromStepCode.length() == 0)) {
			dossierActionCacheModel.fromStepCode = null;
		}

		dossierActionCacheModel.fromStepName = getFromStepName();

		String fromStepName = dossierActionCacheModel.fromStepName;

		if ((fromStepName != null) && (fromStepName.length() == 0)) {
			dossierActionCacheModel.fromStepName = null;
		}

		dossierActionCacheModel.fromSequenceNo = getFromSequenceNo();

		String fromSequenceNo = dossierActionCacheModel.fromSequenceNo;

		if ((fromSequenceNo != null) && (fromSequenceNo.length() == 0)) {
			dossierActionCacheModel.fromSequenceNo = null;
		}

		dossierActionCacheModel.actionCode = getActionCode();

		String actionCode = dossierActionCacheModel.actionCode;

		if ((actionCode != null) && (actionCode.length() == 0)) {
			dossierActionCacheModel.actionCode = null;
		}

		dossierActionCacheModel.actionUser = getActionUser();

		String actionUser = dossierActionCacheModel.actionUser;

		if ((actionUser != null) && (actionUser.length() == 0)) {
			dossierActionCacheModel.actionUser = null;
		}

		dossierActionCacheModel.actionName = getActionName();

		String actionName = dossierActionCacheModel.actionName;

		if ((actionName != null) && (actionName.length() == 0)) {
			dossierActionCacheModel.actionName = null;
		}

		dossierActionCacheModel.actionNote = getActionNote();

		String actionNote = dossierActionCacheModel.actionNote;

		if ((actionNote != null) && (actionNote.length() == 0)) {
			dossierActionCacheModel.actionNote = null;
		}

		dossierActionCacheModel.actionOverdue = getActionOverdue();

		dossierActionCacheModel.syncActionCode = getSyncActionCode();

		String syncActionCode = dossierActionCacheModel.syncActionCode;

		if ((syncActionCode != null) && (syncActionCode.length() == 0)) {
			dossierActionCacheModel.syncActionCode = null;
		}

		dossierActionCacheModel.pending = isPending();

		dossierActionCacheModel.rollbackable = isRollbackable();

		dossierActionCacheModel.stepCode = getStepCode();

		String stepCode = dossierActionCacheModel.stepCode;

		if ((stepCode != null) && (stepCode.length() == 0)) {
			dossierActionCacheModel.stepCode = null;
		}

		dossierActionCacheModel.stepName = getStepName();

		String stepName = dossierActionCacheModel.stepName;

		if ((stepName != null) && (stepName.length() == 0)) {
			dossierActionCacheModel.stepName = null;
		}

		dossierActionCacheModel.sequenceNo = getSequenceNo();

		String sequenceNo = dossierActionCacheModel.sequenceNo;

		if ((sequenceNo != null) && (sequenceNo.length() == 0)) {
			dossierActionCacheModel.sequenceNo = null;
		}

		Date dueDate = getDueDate();

		if (dueDate != null) {
			dossierActionCacheModel.dueDate = dueDate.getTime();
		}
		else {
			dossierActionCacheModel.dueDate = Long.MIN_VALUE;
		}

		dossierActionCacheModel.nextActionId = getNextActionId();

		dossierActionCacheModel.payload = getPayload();

		String payload = dossierActionCacheModel.payload;

		if ((payload != null) && (payload.length() == 0)) {
			dossierActionCacheModel.payload = null;
		}

		dossierActionCacheModel.stepInstruction = getStepInstruction();

		String stepInstruction = dossierActionCacheModel.stepInstruction;

		if ((stepInstruction != null) && (stepInstruction.length() == 0)) {
			dossierActionCacheModel.stepInstruction = null;
		}

		dossierActionCacheModel.state = getState();

		dossierActionCacheModel.eventStatus = getEventStatus();

		return dossierActionCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(63);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", dossierActionId=");
		sb.append(getDossierActionId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", dossierId=");
		sb.append(getDossierId());
		sb.append(", serviceProcessId=");
		sb.append(getServiceProcessId());
		sb.append(", previousActionId=");
		sb.append(getPreviousActionId());
		sb.append(", fromStepCode=");
		sb.append(getFromStepCode());
		sb.append(", fromStepName=");
		sb.append(getFromStepName());
		sb.append(", fromSequenceNo=");
		sb.append(getFromSequenceNo());
		sb.append(", actionCode=");
		sb.append(getActionCode());
		sb.append(", actionUser=");
		sb.append(getActionUser());
		sb.append(", actionName=");
		sb.append(getActionName());
		sb.append(", actionNote=");
		sb.append(getActionNote());
		sb.append(", actionOverdue=");
		sb.append(getActionOverdue());
		sb.append(", syncActionCode=");
		sb.append(getSyncActionCode());
		sb.append(", pending=");
		sb.append(isPending());
		sb.append(", rollbackable=");
		sb.append(isRollbackable());
		sb.append(", stepCode=");
		sb.append(getStepCode());
		sb.append(", stepName=");
		sb.append(getStepName());
		sb.append(", sequenceNo=");
		sb.append(getSequenceNo());
		sb.append(", dueDate=");
		sb.append(getDueDate());
		sb.append(", nextActionId=");
		sb.append(getNextActionId());
		sb.append(", payload=");
		sb.append(getPayload());
		sb.append(", stepInstruction=");
		sb.append(getStepInstruction());
		sb.append(", state=");
		sb.append(getState());
		sb.append(", eventStatus=");
		sb.append(getEventStatus());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(97);

		sb.append("<model><model-name>");
		sb.append("org.opencps.dossiermgt.model.DossierAction");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierActionId</column-name><column-value><![CDATA[");
		sb.append(getDossierActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierId</column-name><column-value><![CDATA[");
		sb.append(getDossierId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceProcessId</column-name><column-value><![CDATA[");
		sb.append(getServiceProcessId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>previousActionId</column-name><column-value><![CDATA[");
		sb.append(getPreviousActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromStepCode</column-name><column-value><![CDATA[");
		sb.append(getFromStepCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromStepName</column-name><column-value><![CDATA[");
		sb.append(getFromStepName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fromSequenceNo</column-name><column-value><![CDATA[");
		sb.append(getFromSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionCode</column-name><column-value><![CDATA[");
		sb.append(getActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionUser</column-name><column-value><![CDATA[");
		sb.append(getActionUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionName</column-name><column-value><![CDATA[");
		sb.append(getActionName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionNote</column-name><column-value><![CDATA[");
		sb.append(getActionNote());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>actionOverdue</column-name><column-value><![CDATA[");
		sb.append(getActionOverdue());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>syncActionCode</column-name><column-value><![CDATA[");
		sb.append(getSyncActionCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>pending</column-name><column-value><![CDATA[");
		sb.append(isPending());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>rollbackable</column-name><column-value><![CDATA[");
		sb.append(isRollbackable());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepCode</column-name><column-value><![CDATA[");
		sb.append(getStepCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepName</column-name><column-value><![CDATA[");
		sb.append(getStepName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sequenceNo</column-name><column-value><![CDATA[");
		sb.append(getSequenceNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dueDate</column-name><column-value><![CDATA[");
		sb.append(getDueDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextActionId</column-name><column-value><![CDATA[");
		sb.append(getNextActionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>payload</column-name><column-value><![CDATA[");
		sb.append(getPayload());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>stepInstruction</column-name><column-value><![CDATA[");
		sb.append(getStepInstruction());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>state</column-name><column-value><![CDATA[");
		sb.append(getState());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>eventStatus</column-name><column-value><![CDATA[");
		sb.append(getEventStatus());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = DossierAction.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			DossierAction.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _dossierActionId;
	private long _originalDossierActionId;
	private boolean _setOriginalDossierActionId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _dossierId;
	private long _originalDossierId;
	private boolean _setOriginalDossierId;
	private long _serviceProcessId;
	private long _previousActionId;
	private String _fromStepCode;
	private String _originalFromStepCode;
	private String _fromStepName;
	private String _fromSequenceNo;
	private String _originalFromSequenceNo;
	private String _actionCode;
	private String _originalActionCode;
	private String _actionUser;
	private String _actionName;
	private String _actionNote;
	private int _actionOverdue;
	private String _syncActionCode;
	private boolean _pending;
	private boolean _originalPending;
	private boolean _setOriginalPending;
	private boolean _rollbackable;
	private String _stepCode;
	private String _originalStepCode;
	private String _stepName;
	private String _sequenceNo;
	private String _originalSequenceNo;
	private Date _dueDate;
	private long _nextActionId;
	private long _originalNextActionId;
	private boolean _setOriginalNextActionId;
	private String _payload;
	private String _stepInstruction;
	private int _state;
	private int _eventStatus;
	private long _columnBitmask;
	private DossierAction _escapedModel;
}