/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.adminconfig.model;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;

import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.model.BaseModel;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.service.ServiceContext;

import java.io.Serializable;

/**
 * The base model interface for the AdminConfig service. Represents a row in the &quot;opencps_adminconfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link org.opencps.adminconfig.model.impl.AdminConfigModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link org.opencps.adminconfig.model.impl.AdminConfigImpl}.
 * </p>
 *
 * @author binhth
 * @see AdminConfig
 * @see org.opencps.adminconfig.model.impl.AdminConfigImpl
 * @see org.opencps.adminconfig.model.impl.AdminConfigModelImpl
 * @generated
 */
@ProviderType
public interface AdminConfigModel extends BaseModel<AdminConfig> {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a admin config model instance should use the {@link AdminConfig} interface instead.
	 */

	/**
	 * Returns the primary key of this admin config.
	 *
	 * @return the primary key of this admin config
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this admin config.
	 *
	 * @param primaryKey the primary key of this admin config
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the ID of this admin config.
	 *
	 * @return the ID of this admin config
	 */
	public long getId();

	/**
	 * Sets the ID of this admin config.
	 *
	 * @param id the ID of this admin config
	 */
	public void setId(long id);

	/**
	 * Returns the code of this admin config.
	 *
	 * @return the code of this admin config
	 */
	@AutoEscape
	public String getCode();

	/**
	 * Sets the code of this admin config.
	 *
	 * @param code the code of this admin config
	 */
	public void setCode(String code);

	/**
	 * Returns the name of this admin config.
	 *
	 * @return the name of this admin config
	 */
	@AutoEscape
	public String getName();

	/**
	 * Sets the name of this admin config.
	 *
	 * @param name the name of this admin config
	 */
	public void setName(String name);

	/**
	 * Returns the bundle name of this admin config.
	 *
	 * @return the bundle name of this admin config
	 */
	@AutoEscape
	public String getBundleName();

	/**
	 * Sets the bundle name of this admin config.
	 *
	 * @param bundleName the bundle name of this admin config
	 */
	public void setBundleName(String bundleName);

	/**
	 * Returns the model name of this admin config.
	 *
	 * @return the model name of this admin config
	 */
	@AutoEscape
	public String getModelName();

	/**
	 * Sets the model name of this admin config.
	 *
	 * @param modelName the model name of this admin config
	 */
	public void setModelName(String modelName);

	/**
	 * Returns the service util name of this admin config.
	 *
	 * @return the service util name of this admin config
	 */
	@AutoEscape
	public String getServiceUtilName();

	/**
	 * Sets the service util name of this admin config.
	 *
	 * @param serviceUtilName the service util name of this admin config
	 */
	public void setServiceUtilName(String serviceUtilName);

	/**
	 * Returns the headers name of this admin config.
	 *
	 * @return the headers name of this admin config
	 */
	@AutoEscape
	public String getHeadersName();

	/**
	 * Sets the headers name of this admin config.
	 *
	 * @param headersName the headers name of this admin config
	 */
	public void setHeadersName(String headersName);

	/**
	 * Returns the columns of this admin config.
	 *
	 * @return the columns of this admin config
	 */
	@AutoEscape
	public String getColumns();

	/**
	 * Sets the columns of this admin config.
	 *
	 * @param columns the columns of this admin config
	 */
	public void setColumns(String columns);

	/**
	 * Returns the detail columns of this admin config.
	 *
	 * @return the detail columns of this admin config
	 */
	@AutoEscape
	public String getDetailColumns();

	/**
	 * Sets the detail columns of this admin config.
	 *
	 * @param detailColumns the detail columns of this admin config
	 */
	public void setDetailColumns(String detailColumns);

	/**
	 * Returns the ext form of this admin config.
	 *
	 * @return the ext form of this admin config
	 */
	public boolean getExtForm();

	/**
	 * Returns <code>true</code> if this admin config is ext form.
	 *
	 * @return <code>true</code> if this admin config is ext form; <code>false</code> otherwise
	 */
	public boolean isExtForm();

	/**
	 * Sets whether this admin config is ext form.
	 *
	 * @param extForm the ext form of this admin config
	 */
	public void setExtForm(boolean extForm);

	/**
	 * Returns the group filter of this admin config.
	 *
	 * @return the group filter of this admin config
	 */
	public boolean getGroupFilter();

	/**
	 * Returns <code>true</code> if this admin config is group filter.
	 *
	 * @return <code>true</code> if this admin config is group filter; <code>false</code> otherwise
	 */
	public boolean isGroupFilter();

	/**
	 * Sets whether this admin config is group filter.
	 *
	 * @param groupFilter the group filter of this admin config
	 */
	public void setGroupFilter(boolean groupFilter);

	/**
	 * Returns the public manager of this admin config.
	 *
	 * @return the public manager of this admin config
	 */
	public boolean getPublicManager();

	/**
	 * Returns <code>true</code> if this admin config is public manager.
	 *
	 * @return <code>true</code> if this admin config is public manager; <code>false</code> otherwise
	 */
	public boolean isPublicManager();

	/**
	 * Sets whether this admin config is public manager.
	 *
	 * @param publicManager the public manager of this admin config
	 */
	public void setPublicManager(boolean publicManager);

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	@Override
	public Object clone();

	@Override
	public int compareTo(AdminConfig adminConfig);

	@Override
	public int hashCode();

	@Override
	public CacheModel<AdminConfig> toCacheModel();

	@Override
	public AdminConfig toEscapedModel();

	@Override
	public AdminConfig toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}