/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.adminconfig.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.adminconfig.model.AdminConfig;
import org.opencps.adminconfig.model.AdminConfigModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the AdminConfig service. Represents a row in the &quot;opencps_adminconfig&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link AdminConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link AdminConfigImpl}.
 * </p>
 *
 * @author binhth
 * @see AdminConfigImpl
 * @see AdminConfig
 * @see AdminConfigModel
 * @generated
 */
@ProviderType
public class AdminConfigModelImpl extends BaseModelImpl<AdminConfig>
	implements AdminConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a admin config model instance should use the {@link AdminConfig} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_adminconfig";
	public static final Object[][] TABLE_COLUMNS = {
			{ "id_", Types.BIGINT },
			{ "code_", Types.VARCHAR },
			{ "name", Types.VARCHAR },
			{ "bundleName", Types.VARCHAR },
			{ "modelName", Types.VARCHAR },
			{ "serviceUtilName", Types.VARCHAR },
			{ "headersName", Types.VARCHAR },
			{ "columns", Types.VARCHAR },
			{ "detailColumns", Types.VARCHAR },
			{ "extForm", Types.BOOLEAN },
			{ "groupFilter", Types.BOOLEAN },
			{ "publicManager", Types.BOOLEAN }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("id_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("code_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("bundleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("modelName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serviceUtilName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("headersName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("columns", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("detailColumns", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extForm", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("groupFilter", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("publicManager", Types.BOOLEAN);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_adminconfig (id_ LONG not null primary key,code_ VARCHAR(255) null,name TEXT null,bundleName VARCHAR(255) null,modelName VARCHAR(255) null,serviceUtilName VARCHAR(255) null,headersName VARCHAR(1000) null,columns TEXT null,detailColumns TEXT null,extForm BOOLEAN,groupFilter BOOLEAN,publicManager BOOLEAN)";
	public static final String TABLE_SQL_DROP = "drop table opencps_adminconfig";
	public static final String ORDER_BY_JPQL = " ORDER BY adminConfig.id ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_adminconfig.id_ ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.admin.config.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.adminconfig.model.AdminConfig"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.admin.config.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.adminconfig.model.AdminConfig"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.admin.config.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.adminconfig.model.AdminConfig"),
			true);
	public static final long CODE_COLUMN_BITMASK = 1L;
	public static final long ID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.admin.config.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.adminconfig.model.AdminConfig"));

	public AdminConfigModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _id;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _id;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return AdminConfig.class;
	}

	@Override
	public String getModelClassName() {
		return AdminConfig.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("id", getId());
		attributes.put("code", getCode());
		attributes.put("name", getName());
		attributes.put("bundleName", getBundleName());
		attributes.put("modelName", getModelName());
		attributes.put("serviceUtilName", getServiceUtilName());
		attributes.put("headersName", getHeadersName());
		attributes.put("columns", getColumns());
		attributes.put("detailColumns", getDetailColumns());
		attributes.put("extForm", isExtForm());
		attributes.put("groupFilter", isGroupFilter());
		attributes.put("publicManager", isPublicManager());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long id = (Long)attributes.get("id");

		if (id != null) {
			setId(id);
		}

		String code = (String)attributes.get("code");

		if (code != null) {
			setCode(code);
		}

		String name = (String)attributes.get("name");

		if (name != null) {
			setName(name);
		}

		String bundleName = (String)attributes.get("bundleName");

		if (bundleName != null) {
			setBundleName(bundleName);
		}

		String modelName = (String)attributes.get("modelName");

		if (modelName != null) {
			setModelName(modelName);
		}

		String serviceUtilName = (String)attributes.get("serviceUtilName");

		if (serviceUtilName != null) {
			setServiceUtilName(serviceUtilName);
		}

		String headersName = (String)attributes.get("headersName");

		if (headersName != null) {
			setHeadersName(headersName);
		}

		String columns = (String)attributes.get("columns");

		if (columns != null) {
			setColumns(columns);
		}

		String detailColumns = (String)attributes.get("detailColumns");

		if (detailColumns != null) {
			setDetailColumns(detailColumns);
		}

		Boolean extForm = (Boolean)attributes.get("extForm");

		if (extForm != null) {
			setExtForm(extForm);
		}

		Boolean groupFilter = (Boolean)attributes.get("groupFilter");

		if (groupFilter != null) {
			setGroupFilter(groupFilter);
		}

		Boolean publicManager = (Boolean)attributes.get("publicManager");

		if (publicManager != null) {
			setPublicManager(publicManager);
		}
	}

	@Override
	public long getId() {
		return _id;
	}

	@Override
	public void setId(long id) {
		_columnBitmask = -1L;

		_id = id;
	}

	@Override
	public String getCode() {
		if (_code == null) {
			return "";
		}
		else {
			return _code;
		}
	}

	@Override
	public void setCode(String code) {
		_columnBitmask |= CODE_COLUMN_BITMASK;

		if (_originalCode == null) {
			_originalCode = _code;
		}

		_code = code;
	}

	public String getOriginalCode() {
		return GetterUtil.getString(_originalCode);
	}

	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@Override
	public String getBundleName() {
		if (_bundleName == null) {
			return "";
		}
		else {
			return _bundleName;
		}
	}

	@Override
	public void setBundleName(String bundleName) {
		_bundleName = bundleName;
	}

	@Override
	public String getModelName() {
		if (_modelName == null) {
			return "";
		}
		else {
			return _modelName;
		}
	}

	@Override
	public void setModelName(String modelName) {
		_modelName = modelName;
	}

	@Override
	public String getServiceUtilName() {
		if (_serviceUtilName == null) {
			return "";
		}
		else {
			return _serviceUtilName;
		}
	}

	@Override
	public void setServiceUtilName(String serviceUtilName) {
		_serviceUtilName = serviceUtilName;
	}

	@Override
	public String getHeadersName() {
		if (_headersName == null) {
			return "";
		}
		else {
			return _headersName;
		}
	}

	@Override
	public void setHeadersName(String headersName) {
		_headersName = headersName;
	}

	@Override
	public String getColumns() {
		if (_columns == null) {
			return "";
		}
		else {
			return _columns;
		}
	}

	@Override
	public void setColumns(String columns) {
		_columns = columns;
	}

	@Override
	public String getDetailColumns() {
		if (_detailColumns == null) {
			return "";
		}
		else {
			return _detailColumns;
		}
	}

	@Override
	public void setDetailColumns(String detailColumns) {
		_detailColumns = detailColumns;
	}

	@Override
	public boolean getExtForm() {
		return _extForm;
	}

	@Override
	public boolean isExtForm() {
		return _extForm;
	}

	@Override
	public void setExtForm(boolean extForm) {
		_extForm = extForm;
	}

	@Override
	public boolean getGroupFilter() {
		return _groupFilter;
	}

	@Override
	public boolean isGroupFilter() {
		return _groupFilter;
	}

	@Override
	public void setGroupFilter(boolean groupFilter) {
		_groupFilter = groupFilter;
	}

	@Override
	public boolean getPublicManager() {
		return _publicManager;
	}

	@Override
	public boolean isPublicManager() {
		return _publicManager;
	}

	@Override
	public void setPublicManager(boolean publicManager) {
		_publicManager = publicManager;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			AdminConfig.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public AdminConfig toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (AdminConfig)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		AdminConfigImpl adminConfigImpl = new AdminConfigImpl();

		adminConfigImpl.setId(getId());
		adminConfigImpl.setCode(getCode());
		adminConfigImpl.setName(getName());
		adminConfigImpl.setBundleName(getBundleName());
		adminConfigImpl.setModelName(getModelName());
		adminConfigImpl.setServiceUtilName(getServiceUtilName());
		adminConfigImpl.setHeadersName(getHeadersName());
		adminConfigImpl.setColumns(getColumns());
		adminConfigImpl.setDetailColumns(getDetailColumns());
		adminConfigImpl.setExtForm(isExtForm());
		adminConfigImpl.setGroupFilter(isGroupFilter());
		adminConfigImpl.setPublicManager(isPublicManager());

		adminConfigImpl.resetOriginalValues();

		return adminConfigImpl;
	}

	@Override
	public int compareTo(AdminConfig adminConfig) {
		int value = 0;

		if (getId() < adminConfig.getId()) {
			value = -1;
		}
		else if (getId() > adminConfig.getId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof AdminConfig)) {
			return false;
		}

		AdminConfig adminConfig = (AdminConfig)obj;

		long primaryKey = adminConfig.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		AdminConfigModelImpl adminConfigModelImpl = this;

		adminConfigModelImpl._originalCode = adminConfigModelImpl._code;

		adminConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<AdminConfig> toCacheModel() {
		AdminConfigCacheModel adminConfigCacheModel = new AdminConfigCacheModel();

		adminConfigCacheModel.id = getId();

		adminConfigCacheModel.code = getCode();

		String code = adminConfigCacheModel.code;

		if ((code != null) && (code.length() == 0)) {
			adminConfigCacheModel.code = null;
		}

		adminConfigCacheModel.name = getName();

		String name = adminConfigCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			adminConfigCacheModel.name = null;
		}

		adminConfigCacheModel.bundleName = getBundleName();

		String bundleName = adminConfigCacheModel.bundleName;

		if ((bundleName != null) && (bundleName.length() == 0)) {
			adminConfigCacheModel.bundleName = null;
		}

		adminConfigCacheModel.modelName = getModelName();

		String modelName = adminConfigCacheModel.modelName;

		if ((modelName != null) && (modelName.length() == 0)) {
			adminConfigCacheModel.modelName = null;
		}

		adminConfigCacheModel.serviceUtilName = getServiceUtilName();

		String serviceUtilName = adminConfigCacheModel.serviceUtilName;

		if ((serviceUtilName != null) && (serviceUtilName.length() == 0)) {
			adminConfigCacheModel.serviceUtilName = null;
		}

		adminConfigCacheModel.headersName = getHeadersName();

		String headersName = adminConfigCacheModel.headersName;

		if ((headersName != null) && (headersName.length() == 0)) {
			adminConfigCacheModel.headersName = null;
		}

		adminConfigCacheModel.columns = getColumns();

		String columns = adminConfigCacheModel.columns;

		if ((columns != null) && (columns.length() == 0)) {
			adminConfigCacheModel.columns = null;
		}

		adminConfigCacheModel.detailColumns = getDetailColumns();

		String detailColumns = adminConfigCacheModel.detailColumns;

		if ((detailColumns != null) && (detailColumns.length() == 0)) {
			adminConfigCacheModel.detailColumns = null;
		}

		adminConfigCacheModel.extForm = isExtForm();

		adminConfigCacheModel.groupFilter = isGroupFilter();

		adminConfigCacheModel.publicManager = isPublicManager();

		return adminConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{id=");
		sb.append(getId());
		sb.append(", code=");
		sb.append(getCode());
		sb.append(", name=");
		sb.append(getName());
		sb.append(", bundleName=");
		sb.append(getBundleName());
		sb.append(", modelName=");
		sb.append(getModelName());
		sb.append(", serviceUtilName=");
		sb.append(getServiceUtilName());
		sb.append(", headersName=");
		sb.append(getHeadersName());
		sb.append(", columns=");
		sb.append(getColumns());
		sb.append(", detailColumns=");
		sb.append(getDetailColumns());
		sb.append(", extForm=");
		sb.append(isExtForm());
		sb.append(", groupFilter=");
		sb.append(isGroupFilter());
		sb.append(", publicManager=");
		sb.append(isPublicManager());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("org.opencps.adminconfig.model.AdminConfig");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>id</column-name><column-value><![CDATA[");
		sb.append(getId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>code</column-name><column-value><![CDATA[");
		sb.append(getCode());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>name</column-name><column-value><![CDATA[");
		sb.append(getName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>bundleName</column-name><column-value><![CDATA[");
		sb.append(getBundleName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modelName</column-name><column-value><![CDATA[");
		sb.append(getModelName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>serviceUtilName</column-name><column-value><![CDATA[");
		sb.append(getServiceUtilName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>headersName</column-name><column-value><![CDATA[");
		sb.append(getHeadersName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>columns</column-name><column-value><![CDATA[");
		sb.append(getColumns());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>detailColumns</column-name><column-value><![CDATA[");
		sb.append(getDetailColumns());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>extForm</column-name><column-value><![CDATA[");
		sb.append(isExtForm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupFilter</column-name><column-value><![CDATA[");
		sb.append(isGroupFilter());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>publicManager</column-name><column-value><![CDATA[");
		sb.append(isPublicManager());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = AdminConfig.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			AdminConfig.class, ModelWrapper.class
		};
	private long _id;
	private String _code;
	private String _originalCode;
	private String _name;
	private String _bundleName;
	private String _modelName;
	private String _serviceUtilName;
	private String _headersName;
	private String _columns;
	private String _detailColumns;
	private boolean _extForm;
	private boolean _groupFilter;
	private boolean _publicManager;
	private long _columnBitmask;
	private AdminConfig _escapedModel;
}