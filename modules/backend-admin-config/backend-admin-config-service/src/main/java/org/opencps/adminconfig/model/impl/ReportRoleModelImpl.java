/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.adminconfig.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.adminconfig.model.ReportRole;
import org.opencps.adminconfig.model.ReportRoleModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ReportRole service. Represents a row in the &quot;opencps_reportrole&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ReportRoleModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ReportRoleImpl}.
 * </p>
 *
 * @author binhth
 * @see ReportRoleImpl
 * @see ReportRole
 * @see ReportRoleModel
 * @generated
 */
@ProviderType
public class ReportRoleModelImpl extends BaseModelImpl<ReportRole>
	implements ReportRoleModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a report role model instance should use the {@link ReportRole} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_reportrole";
	public static final Object[][] TABLE_COLUMNS = {
			{ "reportRoleId", Types.BIGINT },
			{ "dynamicReportId", Types.BIGINT },
			{ "roleId", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("reportRoleId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("dynamicReportId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("roleId", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_reportrole (reportRoleId LONG not null primary key,dynamicReportId LONG,roleId LONG)";
	public static final String TABLE_SQL_DROP = "drop table opencps_reportrole";
	public static final String ORDER_BY_JPQL = " ORDER BY reportRole.reportRoleId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_reportrole.reportRoleId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(backend.admin.config.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.adminconfig.model.ReportRole"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(backend.admin.config.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.adminconfig.model.ReportRole"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(backend.admin.config.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.adminconfig.model.ReportRole"),
			true);
	public static final long DYNAMICREPORTID_COLUMN_BITMASK = 1L;
	public static final long ROLEID_COLUMN_BITMASK = 2L;
	public static final long REPORTROLEID_COLUMN_BITMASK = 4L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(backend.admin.config.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.adminconfig.model.ReportRole"));

	public ReportRoleModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _reportRoleId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setReportRoleId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _reportRoleId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ReportRole.class;
	}

	@Override
	public String getModelClassName() {
		return ReportRole.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("reportRoleId", getReportRoleId());
		attributes.put("dynamicReportId", getDynamicReportId());
		attributes.put("roleId", getRoleId());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long reportRoleId = (Long)attributes.get("reportRoleId");

		if (reportRoleId != null) {
			setReportRoleId(reportRoleId);
		}

		Long dynamicReportId = (Long)attributes.get("dynamicReportId");

		if (dynamicReportId != null) {
			setDynamicReportId(dynamicReportId);
		}

		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}
	}

	@Override
	public long getReportRoleId() {
		return _reportRoleId;
	}

	@Override
	public void setReportRoleId(long reportRoleId) {
		_reportRoleId = reportRoleId;
	}

	@Override
	public long getDynamicReportId() {
		return _dynamicReportId;
	}

	@Override
	public void setDynamicReportId(long dynamicReportId) {
		_columnBitmask |= DYNAMICREPORTID_COLUMN_BITMASK;

		if (!_setOriginalDynamicReportId) {
			_setOriginalDynamicReportId = true;

			_originalDynamicReportId = _dynamicReportId;
		}

		_dynamicReportId = dynamicReportId;
	}

	public long getOriginalDynamicReportId() {
		return _originalDynamicReportId;
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_columnBitmask |= ROLEID_COLUMN_BITMASK;

		if (!_setOriginalRoleId) {
			_setOriginalRoleId = true;

			_originalRoleId = _roleId;
		}

		_roleId = roleId;
	}

	public long getOriginalRoleId() {
		return _originalRoleId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			ReportRole.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ReportRole toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ReportRole)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ReportRoleImpl reportRoleImpl = new ReportRoleImpl();

		reportRoleImpl.setReportRoleId(getReportRoleId());
		reportRoleImpl.setDynamicReportId(getDynamicReportId());
		reportRoleImpl.setRoleId(getRoleId());

		reportRoleImpl.resetOriginalValues();

		return reportRoleImpl;
	}

	@Override
	public int compareTo(ReportRole reportRole) {
		long primaryKey = reportRole.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ReportRole)) {
			return false;
		}

		ReportRole reportRole = (ReportRole)obj;

		long primaryKey = reportRole.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ReportRoleModelImpl reportRoleModelImpl = this;

		reportRoleModelImpl._originalDynamicReportId = reportRoleModelImpl._dynamicReportId;

		reportRoleModelImpl._setOriginalDynamicReportId = false;

		reportRoleModelImpl._originalRoleId = reportRoleModelImpl._roleId;

		reportRoleModelImpl._setOriginalRoleId = false;

		reportRoleModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ReportRole> toCacheModel() {
		ReportRoleCacheModel reportRoleCacheModel = new ReportRoleCacheModel();

		reportRoleCacheModel.reportRoleId = getReportRoleId();

		reportRoleCacheModel.dynamicReportId = getDynamicReportId();

		reportRoleCacheModel.roleId = getRoleId();

		return reportRoleCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(7);

		sb.append("{reportRoleId=");
		sb.append(getReportRoleId());
		sb.append(", dynamicReportId=");
		sb.append(getDynamicReportId());
		sb.append(", roleId=");
		sb.append(getRoleId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(13);

		sb.append("<model><model-name>");
		sb.append("org.opencps.adminconfig.model.ReportRole");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>reportRoleId</column-name><column-value><![CDATA[");
		sb.append(getReportRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dynamicReportId</column-name><column-value><![CDATA[");
		sb.append(getDynamicReportId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ReportRole.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ReportRole.class, ModelWrapper.class
		};
	private long _reportRoleId;
	private long _dynamicReportId;
	private long _originalDynamicReportId;
	private boolean _setOriginalDynamicReportId;
	private long _roleId;
	private long _originalRoleId;
	private boolean _setOriginalRoleId;
	private long _columnBitmask;
	private ReportRole _escapedModel;
}