/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.deliverable.service.base;

import aQute.bnd.annotation.ProviderType;

import com.liferay.exportimport.kernel.lar.ExportImportHelperUtil;
import com.liferay.exportimport.kernel.lar.ManifestSummary;
import com.liferay.exportimport.kernel.lar.PortletDataContext;
import com.liferay.exportimport.kernel.lar.StagedModelDataHandlerUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.BeanReference;
import com.liferay.portal.kernel.dao.db.DB;
import com.liferay.portal.kernel.dao.db.DBManagerUtil;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdate;
import com.liferay.portal.kernel.dao.jdbc.SqlUpdateFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DefaultActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQuery;
import com.liferay.portal.kernel.dao.orm.DynamicQueryFactoryUtil;
import com.liferay.portal.kernel.dao.orm.ExportActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.IndexableActionableDynamicQuery;
import com.liferay.portal.kernel.dao.orm.Projection;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.model.PersistedModel;
import com.liferay.portal.kernel.module.framework.service.IdentifiableOSGiService;
import com.liferay.portal.kernel.search.Indexable;
import com.liferay.portal.kernel.search.IndexableType;
import com.liferay.portal.kernel.service.BaseLocalServiceImpl;
import com.liferay.portal.kernel.service.PersistedModelLocalServiceRegistry;
import com.liferay.portal.kernel.service.persistence.ClassNamePersistence;
import com.liferay.portal.kernel.service.persistence.UserPersistence;
import com.liferay.portal.kernel.transaction.Transactional;
import com.liferay.portal.kernel.util.OrderByComparator;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.spring.extender.service.ServiceReference;

import org.opencps.deliverable.model.OpenCPSDeliverableLog;
import org.opencps.deliverable.service.OpenCPSDeliverableLogLocalService;
import org.opencps.deliverable.service.persistence.OpenCPSDeliverableLogPersistence;
import org.opencps.deliverable.service.persistence.OpenCPSDeliverablePersistence;
import org.opencps.deliverable.service.persistence.OpenCPSDeliverableTypePersistence;
import org.opencps.deliverable.service.persistence.OpenCPSDeliverableTypeRolePersistence;

import java.io.Serializable;

import java.util.List;

import javax.sql.DataSource;

/**
 * Provides the base implementation for the open cps deliverable log local service.
 *
 * <p>
 * This implementation exists only as a container for the default service methods generated by ServiceBuilder. All custom service methods should be put in {@link org.opencps.deliverable.service.impl.OpenCPSDeliverableLogLocalServiceImpl}.
 * </p>
 *
 * @author binhth
 * @see org.opencps.deliverable.service.impl.OpenCPSDeliverableLogLocalServiceImpl
 * @see org.opencps.deliverable.service.OpenCPSDeliverableLogLocalServiceUtil
 * @generated
 */
@ProviderType
public abstract class OpenCPSDeliverableLogLocalServiceBaseImpl
	extends BaseLocalServiceImpl implements OpenCPSDeliverableLogLocalService,
		IdentifiableOSGiService {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. Always use {@link org.opencps.deliverable.service.OpenCPSDeliverableLogLocalServiceUtil} to access the open cps deliverable log local service.
	 */

	/**
	 * Adds the open cps deliverable log to the database. Also notifies the appropriate model listeners.
	 *
	 * @param openCPSDeliverableLog the open cps deliverable log
	 * @return the open cps deliverable log that was added
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public OpenCPSDeliverableLog addOpenCPSDeliverableLog(
		OpenCPSDeliverableLog openCPSDeliverableLog) {
		openCPSDeliverableLog.setNew(true);

		return openCPSDeliverableLogPersistence.update(openCPSDeliverableLog);
	}

	/**
	 * Creates a new open cps deliverable log with the primary key. Does not add the open cps deliverable log to the database.
	 *
	 * @param deliverableLogId the primary key for the new open cps deliverable log
	 * @return the new open cps deliverable log
	 */
	@Override
	@Transactional(enabled = false)
	public OpenCPSDeliverableLog createOpenCPSDeliverableLog(
		long deliverableLogId) {
		return openCPSDeliverableLogPersistence.create(deliverableLogId);
	}

	/**
	 * Deletes the open cps deliverable log with the primary key from the database. Also notifies the appropriate model listeners.
	 *
	 * @param deliverableLogId the primary key of the open cps deliverable log
	 * @return the open cps deliverable log that was removed
	 * @throws PortalException if a open cps deliverable log with the primary key could not be found
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public OpenCPSDeliverableLog deleteOpenCPSDeliverableLog(
		long deliverableLogId) throws PortalException {
		return openCPSDeliverableLogPersistence.remove(deliverableLogId);
	}

	/**
	 * Deletes the open cps deliverable log from the database. Also notifies the appropriate model listeners.
	 *
	 * @param openCPSDeliverableLog the open cps deliverable log
	 * @return the open cps deliverable log that was removed
	 */
	@Indexable(type = IndexableType.DELETE)
	@Override
	public OpenCPSDeliverableLog deleteOpenCPSDeliverableLog(
		OpenCPSDeliverableLog openCPSDeliverableLog) {
		return openCPSDeliverableLogPersistence.remove(openCPSDeliverableLog);
	}

	@Override
	public DynamicQuery dynamicQuery() {
		Class<?> clazz = getClass();

		return DynamicQueryFactoryUtil.forClass(OpenCPSDeliverableLog.class,
			clazz.getClassLoader());
	}

	/**
	 * Performs a dynamic query on the database and returns the matching rows.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery) {
		return openCPSDeliverableLogPersistence.findWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Performs a dynamic query on the database and returns a range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.deliverable.model.impl.OpenCPSDeliverableLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @return the range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end) {
		return openCPSDeliverableLogPersistence.findWithDynamicQuery(dynamicQuery,
			start, end);
	}

	/**
	 * Performs a dynamic query on the database and returns an ordered range of the matching rows.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.deliverable.model.impl.OpenCPSDeliverableLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param dynamicQuery the dynamic query
	 * @param start the lower bound of the range of model instances
	 * @param end the upper bound of the range of model instances (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the ordered range of matching rows
	 */
	@Override
	public <T> List<T> dynamicQuery(DynamicQuery dynamicQuery, int start,
		int end, OrderByComparator<T> orderByComparator) {
		return openCPSDeliverableLogPersistence.findWithDynamicQuery(dynamicQuery,
			start, end, orderByComparator);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery) {
		return openCPSDeliverableLogPersistence.countWithDynamicQuery(dynamicQuery);
	}

	/**
	 * Returns the number of rows matching the dynamic query.
	 *
	 * @param dynamicQuery the dynamic query
	 * @param projection the projection to apply to the query
	 * @return the number of rows matching the dynamic query
	 */
	@Override
	public long dynamicQueryCount(DynamicQuery dynamicQuery,
		Projection projection) {
		return openCPSDeliverableLogPersistence.countWithDynamicQuery(dynamicQuery,
			projection);
	}

	@Override
	public OpenCPSDeliverableLog fetchOpenCPSDeliverableLog(
		long deliverableLogId) {
		return openCPSDeliverableLogPersistence.fetchByPrimaryKey(deliverableLogId);
	}

	/**
	 * Returns the open cps deliverable log matching the UUID and group.
	 *
	 * @param uuid the open cps deliverable log's UUID
	 * @param groupId the primary key of the group
	 * @return the matching open cps deliverable log, or <code>null</code> if a matching open cps deliverable log could not be found
	 */
	@Override
	public OpenCPSDeliverableLog fetchOpenCPSDeliverableLogByUuidAndGroupId(
		String uuid, long groupId) {
		return openCPSDeliverableLogPersistence.fetchByUUID_G(uuid, groupId);
	}

	/**
	 * Returns the open cps deliverable log with the primary key.
	 *
	 * @param deliverableLogId the primary key of the open cps deliverable log
	 * @return the open cps deliverable log
	 * @throws PortalException if a open cps deliverable log with the primary key could not be found
	 */
	@Override
	public OpenCPSDeliverableLog getOpenCPSDeliverableLog(long deliverableLogId)
		throws PortalException {
		return openCPSDeliverableLogPersistence.findByPrimaryKey(deliverableLogId);
	}

	@Override
	public ActionableDynamicQuery getActionableDynamicQuery() {
		ActionableDynamicQuery actionableDynamicQuery = new DefaultActionableDynamicQuery();

		actionableDynamicQuery.setBaseLocalService(openCPSDeliverableLogLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(OpenCPSDeliverableLog.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("deliverableLogId");

		return actionableDynamicQuery;
	}

	@Override
	public IndexableActionableDynamicQuery getIndexableActionableDynamicQuery() {
		IndexableActionableDynamicQuery indexableActionableDynamicQuery = new IndexableActionableDynamicQuery();

		indexableActionableDynamicQuery.setBaseLocalService(openCPSDeliverableLogLocalService);
		indexableActionableDynamicQuery.setClassLoader(getClassLoader());
		indexableActionableDynamicQuery.setModelClass(OpenCPSDeliverableLog.class);

		indexableActionableDynamicQuery.setPrimaryKeyPropertyName(
			"deliverableLogId");

		return indexableActionableDynamicQuery;
	}

	protected void initActionableDynamicQuery(
		ActionableDynamicQuery actionableDynamicQuery) {
		actionableDynamicQuery.setBaseLocalService(openCPSDeliverableLogLocalService);
		actionableDynamicQuery.setClassLoader(getClassLoader());
		actionableDynamicQuery.setModelClass(OpenCPSDeliverableLog.class);

		actionableDynamicQuery.setPrimaryKeyPropertyName("deliverableLogId");
	}

	@Override
	public ExportActionableDynamicQuery getExportActionableDynamicQuery(
		final PortletDataContext portletDataContext) {
		final ExportActionableDynamicQuery exportActionableDynamicQuery = new ExportActionableDynamicQuery() {
				@Override
				public long performCount() throws PortalException {
					ManifestSummary manifestSummary = portletDataContext.getManifestSummary();

					StagedModelType stagedModelType = getStagedModelType();

					long modelAdditionCount = super.performCount();

					manifestSummary.addModelAdditionCount(stagedModelType,
						modelAdditionCount);

					long modelDeletionCount = ExportImportHelperUtil.getModelDeletionCount(portletDataContext,
							stagedModelType);

					manifestSummary.addModelDeletionCount(stagedModelType,
						modelDeletionCount);

					return modelAdditionCount;
				}
			};

		initActionableDynamicQuery(exportActionableDynamicQuery);

		exportActionableDynamicQuery.setAddCriteriaMethod(new ActionableDynamicQuery.AddCriteriaMethod() {
				@Override
				public void addCriteria(DynamicQuery dynamicQuery) {
					portletDataContext.addDateRangeCriteria(dynamicQuery,
						"modifiedDate");
				}
			});

		exportActionableDynamicQuery.setCompanyId(portletDataContext.getCompanyId());

		exportActionableDynamicQuery.setPerformActionMethod(new ActionableDynamicQuery.PerformActionMethod<OpenCPSDeliverableLog>() {
				@Override
				public void performAction(
					OpenCPSDeliverableLog openCPSDeliverableLog)
					throws PortalException {
					StagedModelDataHandlerUtil.exportStagedModel(portletDataContext,
						openCPSDeliverableLog);
				}
			});
		exportActionableDynamicQuery.setStagedModelType(new StagedModelType(
				PortalUtil.getClassNameId(OpenCPSDeliverableLog.class.getName())));

		return exportActionableDynamicQuery;
	}

	/**
	 * @throws PortalException
	 */
	@Override
	public PersistedModel deletePersistedModel(PersistedModel persistedModel)
		throws PortalException {
		return openCPSDeliverableLogLocalService.deleteOpenCPSDeliverableLog((OpenCPSDeliverableLog)persistedModel);
	}

	@Override
	public PersistedModel getPersistedModel(Serializable primaryKeyObj)
		throws PortalException {
		return openCPSDeliverableLogPersistence.findByPrimaryKey(primaryKeyObj);
	}

	/**
	 * Returns all the open cps deliverable logs matching the UUID and company.
	 *
	 * @param uuid the UUID of the open cps deliverable logs
	 * @param companyId the primary key of the company
	 * @return the matching open cps deliverable logs, or an empty list if no matches were found
	 */
	@Override
	public List<OpenCPSDeliverableLog> getOpenCPSDeliverableLogsByUuidAndCompanyId(
		String uuid, long companyId) {
		return openCPSDeliverableLogPersistence.findByUuid_C(uuid, companyId);
	}

	/**
	 * Returns a range of open cps deliverable logs matching the UUID and company.
	 *
	 * @param uuid the UUID of the open cps deliverable logs
	 * @param companyId the primary key of the company
	 * @param start the lower bound of the range of open cps deliverable logs
	 * @param end the upper bound of the range of open cps deliverable logs (not inclusive)
	 * @param orderByComparator the comparator to order the results by (optionally <code>null</code>)
	 * @return the range of matching open cps deliverable logs, or an empty list if no matches were found
	 */
	@Override
	public List<OpenCPSDeliverableLog> getOpenCPSDeliverableLogsByUuidAndCompanyId(
		String uuid, long companyId, int start, int end,
		OrderByComparator<OpenCPSDeliverableLog> orderByComparator) {
		return openCPSDeliverableLogPersistence.findByUuid_C(uuid, companyId,
			start, end, orderByComparator);
	}

	/**
	 * Returns the open cps deliverable log matching the UUID and group.
	 *
	 * @param uuid the open cps deliverable log's UUID
	 * @param groupId the primary key of the group
	 * @return the matching open cps deliverable log
	 * @throws PortalException if a matching open cps deliverable log could not be found
	 */
	@Override
	public OpenCPSDeliverableLog getOpenCPSDeliverableLogByUuidAndGroupId(
		String uuid, long groupId) throws PortalException {
		return openCPSDeliverableLogPersistence.findByUUID_G(uuid, groupId);
	}

	/**
	 * Returns a range of all the open cps deliverable logs.
	 *
	 * <p>
	 * Useful when paginating results. Returns a maximum of <code>end - start</code> instances. <code>start</code> and <code>end</code> are not primary keys, they are indexes in the result set. Thus, <code>0</code> refers to the first result in the set. Setting both <code>start</code> and <code>end</code> to {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS} will return the full result set. If <code>orderByComparator</code> is specified, then the query will include the given ORDER BY logic. If <code>orderByComparator</code> is absent and pagination is required (<code>start</code> and <code>end</code> are not {@link com.liferay.portal.kernel.dao.orm.QueryUtil#ALL_POS}), then the query will include the default ORDER BY logic from {@link org.opencps.deliverable.model.impl.OpenCPSDeliverableLogModelImpl}. If both <code>orderByComparator</code> and pagination are absent, for performance reasons, the query will not have an ORDER BY clause and the returned result set will be sorted on by the primary key in an ascending order.
	 * </p>
	 *
	 * @param start the lower bound of the range of open cps deliverable logs
	 * @param end the upper bound of the range of open cps deliverable logs (not inclusive)
	 * @return the range of open cps deliverable logs
	 */
	@Override
	public List<OpenCPSDeliverableLog> getOpenCPSDeliverableLogs(int start,
		int end) {
		return openCPSDeliverableLogPersistence.findAll(start, end);
	}

	/**
	 * Returns the number of open cps deliverable logs.
	 *
	 * @return the number of open cps deliverable logs
	 */
	@Override
	public int getOpenCPSDeliverableLogsCount() {
		return openCPSDeliverableLogPersistence.countAll();
	}

	/**
	 * Updates the open cps deliverable log in the database or adds it if it does not yet exist. Also notifies the appropriate model listeners.
	 *
	 * @param openCPSDeliverableLog the open cps deliverable log
	 * @return the open cps deliverable log that was updated
	 */
	@Indexable(type = IndexableType.REINDEX)
	@Override
	public OpenCPSDeliverableLog updateOpenCPSDeliverableLog(
		OpenCPSDeliverableLog openCPSDeliverableLog) {
		return openCPSDeliverableLogPersistence.update(openCPSDeliverableLog);
	}

	/**
	 * Returns the open cps deliverable local service.
	 *
	 * @return the open cps deliverable local service
	 */
	public org.opencps.deliverable.service.OpenCPSDeliverableLocalService getOpenCPSDeliverableLocalService() {
		return openCPSDeliverableLocalService;
	}

	/**
	 * Sets the open cps deliverable local service.
	 *
	 * @param openCPSDeliverableLocalService the open cps deliverable local service
	 */
	public void setOpenCPSDeliverableLocalService(
		org.opencps.deliverable.service.OpenCPSDeliverableLocalService openCPSDeliverableLocalService) {
		this.openCPSDeliverableLocalService = openCPSDeliverableLocalService;
	}

	/**
	 * Returns the open cps deliverable persistence.
	 *
	 * @return the open cps deliverable persistence
	 */
	public OpenCPSDeliverablePersistence getOpenCPSDeliverablePersistence() {
		return openCPSDeliverablePersistence;
	}

	/**
	 * Sets the open cps deliverable persistence.
	 *
	 * @param openCPSDeliverablePersistence the open cps deliverable persistence
	 */
	public void setOpenCPSDeliverablePersistence(
		OpenCPSDeliverablePersistence openCPSDeliverablePersistence) {
		this.openCPSDeliverablePersistence = openCPSDeliverablePersistence;
	}

	/**
	 * Returns the open cps deliverable log local service.
	 *
	 * @return the open cps deliverable log local service
	 */
	public OpenCPSDeliverableLogLocalService getOpenCPSDeliverableLogLocalService() {
		return openCPSDeliverableLogLocalService;
	}

	/**
	 * Sets the open cps deliverable log local service.
	 *
	 * @param openCPSDeliverableLogLocalService the open cps deliverable log local service
	 */
	public void setOpenCPSDeliverableLogLocalService(
		OpenCPSDeliverableLogLocalService openCPSDeliverableLogLocalService) {
		this.openCPSDeliverableLogLocalService = openCPSDeliverableLogLocalService;
	}

	/**
	 * Returns the open cps deliverable log persistence.
	 *
	 * @return the open cps deliverable log persistence
	 */
	public OpenCPSDeliverableLogPersistence getOpenCPSDeliverableLogPersistence() {
		return openCPSDeliverableLogPersistence;
	}

	/**
	 * Sets the open cps deliverable log persistence.
	 *
	 * @param openCPSDeliverableLogPersistence the open cps deliverable log persistence
	 */
	public void setOpenCPSDeliverableLogPersistence(
		OpenCPSDeliverableLogPersistence openCPSDeliverableLogPersistence) {
		this.openCPSDeliverableLogPersistence = openCPSDeliverableLogPersistence;
	}

	/**
	 * Returns the open cps deliverable type local service.
	 *
	 * @return the open cps deliverable type local service
	 */
	public org.opencps.deliverable.service.OpenCPSDeliverableTypeLocalService getOpenCPSDeliverableTypeLocalService() {
		return openCPSDeliverableTypeLocalService;
	}

	/**
	 * Sets the open cps deliverable type local service.
	 *
	 * @param openCPSDeliverableTypeLocalService the open cps deliverable type local service
	 */
	public void setOpenCPSDeliverableTypeLocalService(
		org.opencps.deliverable.service.OpenCPSDeliverableTypeLocalService openCPSDeliverableTypeLocalService) {
		this.openCPSDeliverableTypeLocalService = openCPSDeliverableTypeLocalService;
	}

	/**
	 * Returns the open cps deliverable type persistence.
	 *
	 * @return the open cps deliverable type persistence
	 */
	public OpenCPSDeliverableTypePersistence getOpenCPSDeliverableTypePersistence() {
		return openCPSDeliverableTypePersistence;
	}

	/**
	 * Sets the open cps deliverable type persistence.
	 *
	 * @param openCPSDeliverableTypePersistence the open cps deliverable type persistence
	 */
	public void setOpenCPSDeliverableTypePersistence(
		OpenCPSDeliverableTypePersistence openCPSDeliverableTypePersistence) {
		this.openCPSDeliverableTypePersistence = openCPSDeliverableTypePersistence;
	}

	/**
	 * Returns the open cps deliverable type role local service.
	 *
	 * @return the open cps deliverable type role local service
	 */
	public org.opencps.deliverable.service.OpenCPSDeliverableTypeRoleLocalService getOpenCPSDeliverableTypeRoleLocalService() {
		return openCPSDeliverableTypeRoleLocalService;
	}

	/**
	 * Sets the open cps deliverable type role local service.
	 *
	 * @param openCPSDeliverableTypeRoleLocalService the open cps deliverable type role local service
	 */
	public void setOpenCPSDeliverableTypeRoleLocalService(
		org.opencps.deliverable.service.OpenCPSDeliverableTypeRoleLocalService openCPSDeliverableTypeRoleLocalService) {
		this.openCPSDeliverableTypeRoleLocalService = openCPSDeliverableTypeRoleLocalService;
	}

	/**
	 * Returns the open cps deliverable type role persistence.
	 *
	 * @return the open cps deliverable type role persistence
	 */
	public OpenCPSDeliverableTypeRolePersistence getOpenCPSDeliverableTypeRolePersistence() {
		return openCPSDeliverableTypeRolePersistence;
	}

	/**
	 * Sets the open cps deliverable type role persistence.
	 *
	 * @param openCPSDeliverableTypeRolePersistence the open cps deliverable type role persistence
	 */
	public void setOpenCPSDeliverableTypeRolePersistence(
		OpenCPSDeliverableTypeRolePersistence openCPSDeliverableTypeRolePersistence) {
		this.openCPSDeliverableTypeRolePersistence = openCPSDeliverableTypeRolePersistence;
	}

	/**
	 * Returns the counter local service.
	 *
	 * @return the counter local service
	 */
	public com.liferay.counter.kernel.service.CounterLocalService getCounterLocalService() {
		return counterLocalService;
	}

	/**
	 * Sets the counter local service.
	 *
	 * @param counterLocalService the counter local service
	 */
	public void setCounterLocalService(
		com.liferay.counter.kernel.service.CounterLocalService counterLocalService) {
		this.counterLocalService = counterLocalService;
	}

	/**
	 * Returns the class name local service.
	 *
	 * @return the class name local service
	 */
	public com.liferay.portal.kernel.service.ClassNameLocalService getClassNameLocalService() {
		return classNameLocalService;
	}

	/**
	 * Sets the class name local service.
	 *
	 * @param classNameLocalService the class name local service
	 */
	public void setClassNameLocalService(
		com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService) {
		this.classNameLocalService = classNameLocalService;
	}

	/**
	 * Returns the class name persistence.
	 *
	 * @return the class name persistence
	 */
	public ClassNamePersistence getClassNamePersistence() {
		return classNamePersistence;
	}

	/**
	 * Sets the class name persistence.
	 *
	 * @param classNamePersistence the class name persistence
	 */
	public void setClassNamePersistence(
		ClassNamePersistence classNamePersistence) {
		this.classNamePersistence = classNamePersistence;
	}

	/**
	 * Returns the resource local service.
	 *
	 * @return the resource local service
	 */
	public com.liferay.portal.kernel.service.ResourceLocalService getResourceLocalService() {
		return resourceLocalService;
	}

	/**
	 * Sets the resource local service.
	 *
	 * @param resourceLocalService the resource local service
	 */
	public void setResourceLocalService(
		com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService) {
		this.resourceLocalService = resourceLocalService;
	}

	/**
	 * Returns the user local service.
	 *
	 * @return the user local service
	 */
	public com.liferay.portal.kernel.service.UserLocalService getUserLocalService() {
		return userLocalService;
	}

	/**
	 * Sets the user local service.
	 *
	 * @param userLocalService the user local service
	 */
	public void setUserLocalService(
		com.liferay.portal.kernel.service.UserLocalService userLocalService) {
		this.userLocalService = userLocalService;
	}

	/**
	 * Returns the user persistence.
	 *
	 * @return the user persistence
	 */
	public UserPersistence getUserPersistence() {
		return userPersistence;
	}

	/**
	 * Sets the user persistence.
	 *
	 * @param userPersistence the user persistence
	 */
	public void setUserPersistence(UserPersistence userPersistence) {
		this.userPersistence = userPersistence;
	}

	public void afterPropertiesSet() {
		persistedModelLocalServiceRegistry.register("org.opencps.deliverable.model.OpenCPSDeliverableLog",
			openCPSDeliverableLogLocalService);
	}

	public void destroy() {
		persistedModelLocalServiceRegistry.unregister(
			"org.opencps.deliverable.model.OpenCPSDeliverableLog");
	}

	/**
	 * Returns the OSGi service identifier.
	 *
	 * @return the OSGi service identifier
	 */
	@Override
	public String getOSGiServiceIdentifier() {
		return OpenCPSDeliverableLogLocalService.class.getName();
	}

	protected Class<?> getModelClass() {
		return OpenCPSDeliverableLog.class;
	}

	protected String getModelClassName() {
		return OpenCPSDeliverableLog.class.getName();
	}

	/**
	 * Performs a SQL query.
	 *
	 * @param sql the sql query
	 */
	protected void runSQL(String sql) {
		try {
			DataSource dataSource = openCPSDeliverableLogPersistence.getDataSource();

			DB db = DBManagerUtil.getDB();

			sql = db.buildSQL(sql);
			sql = PortalUtil.transformSQL(sql);

			SqlUpdate sqlUpdate = SqlUpdateFactoryUtil.getSqlUpdate(dataSource,
					sql);

			sqlUpdate.update();
		}
		catch (Exception e) {
			throw new SystemException(e);
		}
	}

	@BeanReference(type = org.opencps.deliverable.service.OpenCPSDeliverableLocalService.class)
	protected org.opencps.deliverable.service.OpenCPSDeliverableLocalService openCPSDeliverableLocalService;
	@BeanReference(type = OpenCPSDeliverablePersistence.class)
	protected OpenCPSDeliverablePersistence openCPSDeliverablePersistence;
	@BeanReference(type = OpenCPSDeliverableLogLocalService.class)
	protected OpenCPSDeliverableLogLocalService openCPSDeliverableLogLocalService;
	@BeanReference(type = OpenCPSDeliverableLogPersistence.class)
	protected OpenCPSDeliverableLogPersistence openCPSDeliverableLogPersistence;
	@BeanReference(type = org.opencps.deliverable.service.OpenCPSDeliverableTypeLocalService.class)
	protected org.opencps.deliverable.service.OpenCPSDeliverableTypeLocalService openCPSDeliverableTypeLocalService;
	@BeanReference(type = OpenCPSDeliverableTypePersistence.class)
	protected OpenCPSDeliverableTypePersistence openCPSDeliverableTypePersistence;
	@BeanReference(type = org.opencps.deliverable.service.OpenCPSDeliverableTypeRoleLocalService.class)
	protected org.opencps.deliverable.service.OpenCPSDeliverableTypeRoleLocalService openCPSDeliverableTypeRoleLocalService;
	@BeanReference(type = OpenCPSDeliverableTypeRolePersistence.class)
	protected OpenCPSDeliverableTypeRolePersistence openCPSDeliverableTypeRolePersistence;
	@ServiceReference(type = com.liferay.counter.kernel.service.CounterLocalService.class)
	protected com.liferay.counter.kernel.service.CounterLocalService counterLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.ClassNameLocalService.class)
	protected com.liferay.portal.kernel.service.ClassNameLocalService classNameLocalService;
	@ServiceReference(type = ClassNamePersistence.class)
	protected ClassNamePersistence classNamePersistence;
	@ServiceReference(type = com.liferay.portal.kernel.service.ResourceLocalService.class)
	protected com.liferay.portal.kernel.service.ResourceLocalService resourceLocalService;
	@ServiceReference(type = com.liferay.portal.kernel.service.UserLocalService.class)
	protected com.liferay.portal.kernel.service.UserLocalService userLocalService;
	@ServiceReference(type = UserPersistence.class)
	protected UserPersistence userPersistence;
	@ServiceReference(type = PersistedModelLocalServiceRegistry.class)
	protected PersistedModelLocalServiceRegistry persistedModelLocalServiceRegistry;
}