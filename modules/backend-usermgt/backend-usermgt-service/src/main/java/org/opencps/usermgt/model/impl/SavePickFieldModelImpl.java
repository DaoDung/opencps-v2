/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.usermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.usermgt.model.SavePickField;
import org.opencps.usermgt.model.SavePickFieldModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SavePickField service. Represents a row in the &quot;opencps_save_pick_field&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SavePickFieldModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SavePickFieldImpl}.
 * </p>
 *
 * @author khoavu
 * @see SavePickFieldImpl
 * @see SavePickField
 * @see SavePickFieldModel
 * @generated
 */
@ProviderType
public class SavePickFieldModelImpl extends BaseModelImpl<SavePickField>
	implements SavePickFieldModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a save pick field model instance should use the {@link SavePickField} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_save_pick_field";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "fieldPickId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "formData", Types.VARCHAR },
			{ "classPK", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fieldPickId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("formData", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("classPK", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_save_pick_field (uuid_ VARCHAR(75) null,fieldPickId LONG not null primary key,groupId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,formData VARCHAR(2048) null,classPK VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_save_pick_field";
	public static final String ORDER_BY_JPQL = " ORDER BY savePickField.fieldPickId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_save_pick_field.fieldPickId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.usermgt.model.SavePickField"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.usermgt.model.SavePickField"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.usermgt.model.SavePickField"),
			true);
	public static final long CLASSPK_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long USERID_COLUMN_BITMASK = 4L;
	public static final long UUID_COLUMN_BITMASK = 8L;
	public static final long FIELDPICKID_COLUMN_BITMASK = 16L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.usermgt.model.SavePickField"));

	public SavePickFieldModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _fieldPickId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setFieldPickId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _fieldPickId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SavePickField.class;
	}

	@Override
	public String getModelClassName() {
		return SavePickField.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("fieldPickId", getFieldPickId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("formData", getFormData());
		attributes.put("classPK", getClassPK());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long fieldPickId = (Long)attributes.get("fieldPickId");

		if (fieldPickId != null) {
			setFieldPickId(fieldPickId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String formData = (String)attributes.get("formData");

		if (formData != null) {
			setFormData(formData);
		}

		String classPK = (String)attributes.get("classPK");

		if (classPK != null) {
			setClassPK(classPK);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getFieldPickId() {
		return _fieldPickId;
	}

	@Override
	public void setFieldPickId(long fieldPickId) {
		_fieldPickId = fieldPickId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getFormData() {
		if (_formData == null) {
			return "";
		}
		else {
			return _formData;
		}
	}

	@Override
	public void setFormData(String formData) {
		_formData = formData;
	}

	@Override
	public String getClassPK() {
		if (_classPK == null) {
			return "";
		}
		else {
			return _classPK;
		}
	}

	@Override
	public void setClassPK(String classPK) {
		_columnBitmask |= CLASSPK_COLUMN_BITMASK;

		if (_originalClassPK == null) {
			_originalClassPK = _classPK;
		}

		_classPK = classPK;
	}

	public String getOriginalClassPK() {
		return GetterUtil.getString(_originalClassPK);
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SavePickField.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SavePickField toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SavePickField)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SavePickFieldImpl savePickFieldImpl = new SavePickFieldImpl();

		savePickFieldImpl.setUuid(getUuid());
		savePickFieldImpl.setFieldPickId(getFieldPickId());
		savePickFieldImpl.setGroupId(getGroupId());
		savePickFieldImpl.setUserId(getUserId());
		savePickFieldImpl.setCreateDate(getCreateDate());
		savePickFieldImpl.setModifiedDate(getModifiedDate());
		savePickFieldImpl.setFormData(getFormData());
		savePickFieldImpl.setClassPK(getClassPK());

		savePickFieldImpl.resetOriginalValues();

		return savePickFieldImpl;
	}

	@Override
	public int compareTo(SavePickField savePickField) {
		long primaryKey = savePickField.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SavePickField)) {
			return false;
		}

		SavePickField savePickField = (SavePickField)obj;

		long primaryKey = savePickField.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SavePickFieldModelImpl savePickFieldModelImpl = this;

		savePickFieldModelImpl._originalUuid = savePickFieldModelImpl._uuid;

		savePickFieldModelImpl._originalGroupId = savePickFieldModelImpl._groupId;

		savePickFieldModelImpl._setOriginalGroupId = false;

		savePickFieldModelImpl._originalUserId = savePickFieldModelImpl._userId;

		savePickFieldModelImpl._setOriginalUserId = false;

		savePickFieldModelImpl._setModifiedDate = false;

		savePickFieldModelImpl._originalClassPK = savePickFieldModelImpl._classPK;

		savePickFieldModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SavePickField> toCacheModel() {
		SavePickFieldCacheModel savePickFieldCacheModel = new SavePickFieldCacheModel();

		savePickFieldCacheModel.uuid = getUuid();

		String uuid = savePickFieldCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			savePickFieldCacheModel.uuid = null;
		}

		savePickFieldCacheModel.fieldPickId = getFieldPickId();

		savePickFieldCacheModel.groupId = getGroupId();

		savePickFieldCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			savePickFieldCacheModel.createDate = createDate.getTime();
		}
		else {
			savePickFieldCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			savePickFieldCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			savePickFieldCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		savePickFieldCacheModel.formData = getFormData();

		String formData = savePickFieldCacheModel.formData;

		if ((formData != null) && (formData.length() == 0)) {
			savePickFieldCacheModel.formData = null;
		}

		savePickFieldCacheModel.classPK = getClassPK();

		String classPK = savePickFieldCacheModel.classPK;

		if ((classPK != null) && (classPK.length() == 0)) {
			savePickFieldCacheModel.classPK = null;
		}

		return savePickFieldCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(17);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", fieldPickId=");
		sb.append(getFieldPickId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", formData=");
		sb.append(getFormData());
		sb.append(", classPK=");
		sb.append(getClassPK());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(28);

		sb.append("<model><model-name>");
		sb.append("org.opencps.usermgt.model.SavePickField");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fieldPickId</column-name><column-value><![CDATA[");
		sb.append(getFieldPickId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>formData</column-name><column-value><![CDATA[");
		sb.append(getFormData());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>classPK</column-name><column-value><![CDATA[");
		sb.append(getClassPK());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SavePickField.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SavePickField.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _fieldPickId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _formData;
	private String _classPK;
	private String _originalClassPK;
	private long _columnBitmask;
	private SavePickField _escapedModel;
}