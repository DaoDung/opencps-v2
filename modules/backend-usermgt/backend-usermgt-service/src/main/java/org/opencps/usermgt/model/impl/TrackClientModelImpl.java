/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.usermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.usermgt.model.TrackClient;
import org.opencps.usermgt.model.TrackClientModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the TrackClient service. Represents a row in the &quot;opencps_track_client&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link TrackClientModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link TrackClientImpl}.
 * </p>
 *
 * @author khoavu
 * @see TrackClientImpl
 * @see TrackClient
 * @see TrackClientModel
 * @generated
 */
@ProviderType
public class TrackClientModelImpl extends BaseModelImpl<TrackClient>
	implements TrackClientModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a track client model instance should use the {@link TrackClient} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_track_client";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "trackClientId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "sessionId", Types.VARCHAR },
			{ "url", Types.VARCHAR },
			{ "year", Types.INTEGER },
			{ "month", Types.INTEGER },
			{ "day", Types.INTEGER },
			{ "visitDate", Types.TIMESTAMP },
			{ "leaveDate", Types.TIMESTAMP },
			{ "clientIP", Types.VARCHAR },
			{ "macAddress", Types.VARCHAR },
			{ "region", Types.VARCHAR },
			{ "nation", Types.VARCHAR },
			{ "latitude", Types.VARCHAR },
			{ "longitude", Types.VARCHAR },
			{ "timeOnPage", Types.BIGINT },
			{ "desktop", Types.BOOLEAN },
			{ "mobile", Types.BOOLEAN },
			{ "tablet", Types.BOOLEAN },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("trackClientId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("sessionId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("url", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("year", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("month", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("day", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("visitDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("leaveDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("clientIP", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("macAddress", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("region", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("nation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("latitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("longitude", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("timeOnPage", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("desktop", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("mobile", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("tablet", Types.BOOLEAN);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_track_client (uuid_ VARCHAR(75) null,trackClientId LONG not null primary key,createDate DATE null,modifiedDate DATE null,sessionId VARCHAR(128) null,url VARCHAR(512) null,year INTEGER,month INTEGER,day INTEGER,visitDate DATE null,leaveDate DATE null,clientIP VARCHAR(128) null,macAddress VARCHAR(128) null,region VARCHAR(512) null,nation VARCHAR(512) null,latitude VARCHAR(128) null,longitude VARCHAR(128) null,timeOnPage LONG,desktop BOOLEAN,mobile BOOLEAN,tablet BOOLEAN,userId LONG,userName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_track_client";
	public static final String ORDER_BY_JPQL = " ORDER BY trackClient.createDate ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_track_client.createDate ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.usermgt.model.TrackClient"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.usermgt.model.TrackClient"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.usermgt.model.TrackClient"),
			true);
	public static final long UUID_COLUMN_BITMASK = 1L;
	public static final long CREATEDATE_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.usermgt.model.TrackClient"));

	public TrackClientModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _trackClientId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setTrackClientId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _trackClientId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return TrackClient.class;
	}

	@Override
	public String getModelClassName() {
		return TrackClient.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("trackClientId", getTrackClientId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("sessionId", getSessionId());
		attributes.put("url", getUrl());
		attributes.put("year", getYear());
		attributes.put("month", getMonth());
		attributes.put("day", getDay());
		attributes.put("visitDate", getVisitDate());
		attributes.put("leaveDate", getLeaveDate());
		attributes.put("clientIP", getClientIP());
		attributes.put("macAddress", getMacAddress());
		attributes.put("region", getRegion());
		attributes.put("nation", getNation());
		attributes.put("latitude", getLatitude());
		attributes.put("longitude", getLongitude());
		attributes.put("timeOnPage", getTimeOnPage());
		attributes.put("desktop", isDesktop());
		attributes.put("mobile", isMobile());
		attributes.put("tablet", isTablet());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long trackClientId = (Long)attributes.get("trackClientId");

		if (trackClientId != null) {
			setTrackClientId(trackClientId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String sessionId = (String)attributes.get("sessionId");

		if (sessionId != null) {
			setSessionId(sessionId);
		}

		String url = (String)attributes.get("url");

		if (url != null) {
			setUrl(url);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer month = (Integer)attributes.get("month");

		if (month != null) {
			setMonth(month);
		}

		Integer day = (Integer)attributes.get("day");

		if (day != null) {
			setDay(day);
		}

		Date visitDate = (Date)attributes.get("visitDate");

		if (visitDate != null) {
			setVisitDate(visitDate);
		}

		Date leaveDate = (Date)attributes.get("leaveDate");

		if (leaveDate != null) {
			setLeaveDate(leaveDate);
		}

		String clientIP = (String)attributes.get("clientIP");

		if (clientIP != null) {
			setClientIP(clientIP);
		}

		String macAddress = (String)attributes.get("macAddress");

		if (macAddress != null) {
			setMacAddress(macAddress);
		}

		String region = (String)attributes.get("region");

		if (region != null) {
			setRegion(region);
		}

		String nation = (String)attributes.get("nation");

		if (nation != null) {
			setNation(nation);
		}

		String latitude = (String)attributes.get("latitude");

		if (latitude != null) {
			setLatitude(latitude);
		}

		String longitude = (String)attributes.get("longitude");

		if (longitude != null) {
			setLongitude(longitude);
		}

		Long timeOnPage = (Long)attributes.get("timeOnPage");

		if (timeOnPage != null) {
			setTimeOnPage(timeOnPage);
		}

		Boolean desktop = (Boolean)attributes.get("desktop");

		if (desktop != null) {
			setDesktop(desktop);
		}

		Boolean mobile = (Boolean)attributes.get("mobile");

		if (mobile != null) {
			setMobile(mobile);
		}

		Boolean tablet = (Boolean)attributes.get("tablet");

		if (tablet != null) {
			setTablet(tablet);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getTrackClientId() {
		return _trackClientId;
	}

	@Override
	public void setTrackClientId(long trackClientId) {
		_trackClientId = trackClientId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public String getSessionId() {
		if (_sessionId == null) {
			return "";
		}
		else {
			return _sessionId;
		}
	}

	@Override
	public void setSessionId(String sessionId) {
		_sessionId = sessionId;
	}

	@Override
	public String getUrl() {
		if (_url == null) {
			return "";
		}
		else {
			return _url;
		}
	}

	@Override
	public void setUrl(String url) {
		_url = url;
	}

	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_year = year;
	}

	@Override
	public int getMonth() {
		return _month;
	}

	@Override
	public void setMonth(int month) {
		_month = month;
	}

	@Override
	public int getDay() {
		return _day;
	}

	@Override
	public void setDay(int day) {
		_day = day;
	}

	@Override
	public Date getVisitDate() {
		return _visitDate;
	}

	@Override
	public void setVisitDate(Date visitDate) {
		_visitDate = visitDate;
	}

	@Override
	public Date getLeaveDate() {
		return _leaveDate;
	}

	@Override
	public void setLeaveDate(Date leaveDate) {
		_leaveDate = leaveDate;
	}

	@Override
	public String getClientIP() {
		if (_clientIP == null) {
			return "";
		}
		else {
			return _clientIP;
		}
	}

	@Override
	public void setClientIP(String clientIP) {
		_clientIP = clientIP;
	}

	@Override
	public String getMacAddress() {
		if (_macAddress == null) {
			return "";
		}
		else {
			return _macAddress;
		}
	}

	@Override
	public void setMacAddress(String macAddress) {
		_macAddress = macAddress;
	}

	@Override
	public String getRegion() {
		if (_region == null) {
			return "";
		}
		else {
			return _region;
		}
	}

	@Override
	public void setRegion(String region) {
		_region = region;
	}

	@Override
	public String getNation() {
		if (_nation == null) {
			return "";
		}
		else {
			return _nation;
		}
	}

	@Override
	public void setNation(String nation) {
		_nation = nation;
	}

	@Override
	public String getLatitude() {
		if (_latitude == null) {
			return "";
		}
		else {
			return _latitude;
		}
	}

	@Override
	public void setLatitude(String latitude) {
		_latitude = latitude;
	}

	@Override
	public String getLongitude() {
		if (_longitude == null) {
			return "";
		}
		else {
			return _longitude;
		}
	}

	@Override
	public void setLongitude(String longitude) {
		_longitude = longitude;
	}

	@Override
	public long getTimeOnPage() {
		return _timeOnPage;
	}

	@Override
	public void setTimeOnPage(long timeOnPage) {
		_timeOnPage = timeOnPage;
	}

	@Override
	public boolean getDesktop() {
		return _desktop;
	}

	@Override
	public boolean isDesktop() {
		return _desktop;
	}

	@Override
	public void setDesktop(boolean desktop) {
		_desktop = desktop;
	}

	@Override
	public boolean getMobile() {
		return _mobile;
	}

	@Override
	public boolean isMobile() {
		return _mobile;
	}

	@Override
	public void setMobile(boolean mobile) {
		_mobile = mobile;
	}

	@Override
	public boolean getTablet() {
		return _tablet;
	}

	@Override
	public boolean isTablet() {
		return _tablet;
	}

	@Override
	public void setTablet(boolean tablet) {
		_tablet = tablet;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			TrackClient.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public TrackClient toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (TrackClient)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		TrackClientImpl trackClientImpl = new TrackClientImpl();

		trackClientImpl.setUuid(getUuid());
		trackClientImpl.setTrackClientId(getTrackClientId());
		trackClientImpl.setCreateDate(getCreateDate());
		trackClientImpl.setModifiedDate(getModifiedDate());
		trackClientImpl.setSessionId(getSessionId());
		trackClientImpl.setUrl(getUrl());
		trackClientImpl.setYear(getYear());
		trackClientImpl.setMonth(getMonth());
		trackClientImpl.setDay(getDay());
		trackClientImpl.setVisitDate(getVisitDate());
		trackClientImpl.setLeaveDate(getLeaveDate());
		trackClientImpl.setClientIP(getClientIP());
		trackClientImpl.setMacAddress(getMacAddress());
		trackClientImpl.setRegion(getRegion());
		trackClientImpl.setNation(getNation());
		trackClientImpl.setLatitude(getLatitude());
		trackClientImpl.setLongitude(getLongitude());
		trackClientImpl.setTimeOnPage(getTimeOnPage());
		trackClientImpl.setDesktop(isDesktop());
		trackClientImpl.setMobile(isMobile());
		trackClientImpl.setTablet(isTablet());
		trackClientImpl.setUserId(getUserId());
		trackClientImpl.setUserName(getUserName());

		trackClientImpl.resetOriginalValues();

		return trackClientImpl;
	}

	@Override
	public int compareTo(TrackClient trackClient) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(), trackClient.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof TrackClient)) {
			return false;
		}

		TrackClient trackClient = (TrackClient)obj;

		long primaryKey = trackClient.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		TrackClientModelImpl trackClientModelImpl = this;

		trackClientModelImpl._originalUuid = trackClientModelImpl._uuid;

		trackClientModelImpl._setModifiedDate = false;

		trackClientModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<TrackClient> toCacheModel() {
		TrackClientCacheModel trackClientCacheModel = new TrackClientCacheModel();

		trackClientCacheModel.uuid = getUuid();

		String uuid = trackClientCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			trackClientCacheModel.uuid = null;
		}

		trackClientCacheModel.trackClientId = getTrackClientId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			trackClientCacheModel.createDate = createDate.getTime();
		}
		else {
			trackClientCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			trackClientCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			trackClientCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		trackClientCacheModel.sessionId = getSessionId();

		String sessionId = trackClientCacheModel.sessionId;

		if ((sessionId != null) && (sessionId.length() == 0)) {
			trackClientCacheModel.sessionId = null;
		}

		trackClientCacheModel.url = getUrl();

		String url = trackClientCacheModel.url;

		if ((url != null) && (url.length() == 0)) {
			trackClientCacheModel.url = null;
		}

		trackClientCacheModel.year = getYear();

		trackClientCacheModel.month = getMonth();

		trackClientCacheModel.day = getDay();

		Date visitDate = getVisitDate();

		if (visitDate != null) {
			trackClientCacheModel.visitDate = visitDate.getTime();
		}
		else {
			trackClientCacheModel.visitDate = Long.MIN_VALUE;
		}

		Date leaveDate = getLeaveDate();

		if (leaveDate != null) {
			trackClientCacheModel.leaveDate = leaveDate.getTime();
		}
		else {
			trackClientCacheModel.leaveDate = Long.MIN_VALUE;
		}

		trackClientCacheModel.clientIP = getClientIP();

		String clientIP = trackClientCacheModel.clientIP;

		if ((clientIP != null) && (clientIP.length() == 0)) {
			trackClientCacheModel.clientIP = null;
		}

		trackClientCacheModel.macAddress = getMacAddress();

		String macAddress = trackClientCacheModel.macAddress;

		if ((macAddress != null) && (macAddress.length() == 0)) {
			trackClientCacheModel.macAddress = null;
		}

		trackClientCacheModel.region = getRegion();

		String region = trackClientCacheModel.region;

		if ((region != null) && (region.length() == 0)) {
			trackClientCacheModel.region = null;
		}

		trackClientCacheModel.nation = getNation();

		String nation = trackClientCacheModel.nation;

		if ((nation != null) && (nation.length() == 0)) {
			trackClientCacheModel.nation = null;
		}

		trackClientCacheModel.latitude = getLatitude();

		String latitude = trackClientCacheModel.latitude;

		if ((latitude != null) && (latitude.length() == 0)) {
			trackClientCacheModel.latitude = null;
		}

		trackClientCacheModel.longitude = getLongitude();

		String longitude = trackClientCacheModel.longitude;

		if ((longitude != null) && (longitude.length() == 0)) {
			trackClientCacheModel.longitude = null;
		}

		trackClientCacheModel.timeOnPage = getTimeOnPage();

		trackClientCacheModel.desktop = isDesktop();

		trackClientCacheModel.mobile = isMobile();

		trackClientCacheModel.tablet = isTablet();

		trackClientCacheModel.userId = getUserId();

		trackClientCacheModel.userName = getUserName();

		String userName = trackClientCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			trackClientCacheModel.userName = null;
		}

		return trackClientCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(47);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", trackClientId=");
		sb.append(getTrackClientId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", sessionId=");
		sb.append(getSessionId());
		sb.append(", url=");
		sb.append(getUrl());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", month=");
		sb.append(getMonth());
		sb.append(", day=");
		sb.append(getDay());
		sb.append(", visitDate=");
		sb.append(getVisitDate());
		sb.append(", leaveDate=");
		sb.append(getLeaveDate());
		sb.append(", clientIP=");
		sb.append(getClientIP());
		sb.append(", macAddress=");
		sb.append(getMacAddress());
		sb.append(", region=");
		sb.append(getRegion());
		sb.append(", nation=");
		sb.append(getNation());
		sb.append(", latitude=");
		sb.append(getLatitude());
		sb.append(", longitude=");
		sb.append(getLongitude());
		sb.append(", timeOnPage=");
		sb.append(getTimeOnPage());
		sb.append(", desktop=");
		sb.append(isDesktop());
		sb.append(", mobile=");
		sb.append(isMobile());
		sb.append(", tablet=");
		sb.append(isTablet());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(73);

		sb.append("<model><model-name>");
		sb.append("org.opencps.usermgt.model.TrackClient");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>trackClientId</column-name><column-value><![CDATA[");
		sb.append(getTrackClientId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>sessionId</column-name><column-value><![CDATA[");
		sb.append(getSessionId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>url</column-name><column-value><![CDATA[");
		sb.append(getUrl());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>month</column-name><column-value><![CDATA[");
		sb.append(getMonth());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>day</column-name><column-value><![CDATA[");
		sb.append(getDay());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>visitDate</column-name><column-value><![CDATA[");
		sb.append(getVisitDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>leaveDate</column-name><column-value><![CDATA[");
		sb.append(getLeaveDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>clientIP</column-name><column-value><![CDATA[");
		sb.append(getClientIP());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>macAddress</column-name><column-value><![CDATA[");
		sb.append(getMacAddress());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>region</column-name><column-value><![CDATA[");
		sb.append(getRegion());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nation</column-name><column-value><![CDATA[");
		sb.append(getNation());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>latitude</column-name><column-value><![CDATA[");
		sb.append(getLatitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>longitude</column-name><column-value><![CDATA[");
		sb.append(getLongitude());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>timeOnPage</column-name><column-value><![CDATA[");
		sb.append(getTimeOnPage());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>desktop</column-name><column-value><![CDATA[");
		sb.append(isDesktop());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>mobile</column-name><column-value><![CDATA[");
		sb.append(isMobile());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tablet</column-name><column-value><![CDATA[");
		sb.append(isTablet());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = TrackClient.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			TrackClient.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _trackClientId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _sessionId;
	private String _url;
	private int _year;
	private int _month;
	private int _day;
	private Date _visitDate;
	private Date _leaveDate;
	private String _clientIP;
	private String _macAddress;
	private String _region;
	private String _nation;
	private String _latitude;
	private String _longitude;
	private long _timeOnPage;
	private boolean _desktop;
	private boolean _mobile;
	private boolean _tablet;
	private long _userId;
	private String _userName;
	private long _columnBitmask;
	private TrackClient _escapedModel;
}