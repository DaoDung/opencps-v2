/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.usermgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.usermgt.model.ApplicantData;
import org.opencps.usermgt.model.ApplicantDataModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the ApplicantData service. Represents a row in the &quot;opencps_applicant_data&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link ApplicantDataModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link ApplicantDataImpl}.
 * </p>
 *
 * @author khoavu
 * @see ApplicantDataImpl
 * @see ApplicantData
 * @see ApplicantDataModel
 * @generated
 */
@ProviderType
public class ApplicantDataModelImpl extends BaseModelImpl<ApplicantData>
	implements ApplicantDataModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a applicant data model instance should use the {@link ApplicantData} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_applicant_data";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "applicantDataId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "companyId", Types.BIGINT },
			{ "groupId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "fileTemplateNo", Types.VARCHAR },
			{ "fileNo", Types.VARCHAR },
			{ "fileName", Types.VARCHAR },
			{ "fileEntryId", Types.BIGINT },
			{ "metadata", Types.VARCHAR },
			{ "status", Types.INTEGER },
			{ "applicantIdNo", Types.VARCHAR },
			{ "applicantDataType", Types.INTEGER },
			{ "dossierNo", Types.VARCHAR },
			{ "log_", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantDataId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileTemplateNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("fileEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("metadata", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("applicantIdNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicantDataType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("log_", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_applicant_data (uuid_ VARCHAR(75) null,applicantDataId LONG not null primary key,createDate DATE null,modifiedDate DATE null,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(255) null,fileTemplateNo VARCHAR(255) null,fileNo VARCHAR(255) null,fileName VARCHAR(1024) null,fileEntryId LONG,metadata TEXT null,status INTEGER,applicantIdNo VARCHAR(128) null,applicantDataType INTEGER,dossierNo VARCHAR(128) null,log_ TEXT null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_applicant_data";
	public static final String ORDER_BY_JPQL = " ORDER BY applicantData.applicantDataId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_applicant_data.applicantDataId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.usermgt.model.ApplicantData"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.usermgt.model.ApplicantData"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.usermgt.model.ApplicantData"),
			true);
	public static final long APPLICANTIDNO_COLUMN_BITMASK = 1L;
	public static final long COMPANYID_COLUMN_BITMASK = 2L;
	public static final long DOSSIERNO_COLUMN_BITMASK = 4L;
	public static final long FILETEMPLATENO_COLUMN_BITMASK = 8L;
	public static final long GROUPID_COLUMN_BITMASK = 16L;
	public static final long UUID_COLUMN_BITMASK = 32L;
	public static final long APPLICANTDATAID_COLUMN_BITMASK = 64L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.backend.usermgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.usermgt.model.ApplicantData"));

	public ApplicantDataModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _applicantDataId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setApplicantDataId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _applicantDataId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return ApplicantData.class;
	}

	@Override
	public String getModelClassName() {
		return ApplicantData.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("applicantDataId", getApplicantDataId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("companyId", getCompanyId());
		attributes.put("groupId", getGroupId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("fileTemplateNo", getFileTemplateNo());
		attributes.put("fileNo", getFileNo());
		attributes.put("fileName", getFileName());
		attributes.put("fileEntryId", getFileEntryId());
		attributes.put("metadata", getMetadata());
		attributes.put("status", getStatus());
		attributes.put("applicantIdNo", getApplicantIdNo());
		attributes.put("applicantDataType", getApplicantDataType());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("log", getLog());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long applicantDataId = (Long)attributes.get("applicantDataId");

		if (applicantDataId != null) {
			setApplicantDataId(applicantDataId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long groupId = (Long)attributes.get("groupId");

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		String fileTemplateNo = (String)attributes.get("fileTemplateNo");

		if (fileTemplateNo != null) {
			setFileTemplateNo(fileTemplateNo);
		}

		String fileNo = (String)attributes.get("fileNo");

		if (fileNo != null) {
			setFileNo(fileNo);
		}

		String fileName = (String)attributes.get("fileName");

		if (fileName != null) {
			setFileName(fileName);
		}

		Long fileEntryId = (Long)attributes.get("fileEntryId");

		if (fileEntryId != null) {
			setFileEntryId(fileEntryId);
		}

		String metadata = (String)attributes.get("metadata");

		if (metadata != null) {
			setMetadata(metadata);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		String applicantIdNo = (String)attributes.get("applicantIdNo");

		if (applicantIdNo != null) {
			setApplicantIdNo(applicantIdNo);
		}

		Integer applicantDataType = (Integer)attributes.get("applicantDataType");

		if (applicantDataType != null) {
			setApplicantDataType(applicantDataType);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		String log = (String)attributes.get("log");

		if (log != null) {
			setLog(log);
		}
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getApplicantDataId() {
		return _applicantDataId;
	}

	@Override
	public void setApplicantDataId(long applicantDataId) {
		_applicantDataId = applicantDataId;
	}

	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@Override
	public String getFileTemplateNo() {
		if (_fileTemplateNo == null) {
			return "";
		}
		else {
			return _fileTemplateNo;
		}
	}

	@Override
	public void setFileTemplateNo(String fileTemplateNo) {
		_columnBitmask |= FILETEMPLATENO_COLUMN_BITMASK;

		if (_originalFileTemplateNo == null) {
			_originalFileTemplateNo = _fileTemplateNo;
		}

		_fileTemplateNo = fileTemplateNo;
	}

	public String getOriginalFileTemplateNo() {
		return GetterUtil.getString(_originalFileTemplateNo);
	}

	@Override
	public String getFileNo() {
		if (_fileNo == null) {
			return "";
		}
		else {
			return _fileNo;
		}
	}

	@Override
	public void setFileNo(String fileNo) {
		_fileNo = fileNo;
	}

	@Override
	public String getFileName() {
		if (_fileName == null) {
			return "";
		}
		else {
			return _fileName;
		}
	}

	@Override
	public void setFileName(String fileName) {
		_fileName = fileName;
	}

	@Override
	public long getFileEntryId() {
		return _fileEntryId;
	}

	@Override
	public void setFileEntryId(long fileEntryId) {
		_fileEntryId = fileEntryId;
	}

	@Override
	public String getMetadata() {
		if (_metadata == null) {
			return "";
		}
		else {
			return _metadata;
		}
	}

	@Override
	public void setMetadata(String metadata) {
		_metadata = metadata;
	}

	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@Override
	public String getApplicantIdNo() {
		if (_applicantIdNo == null) {
			return "";
		}
		else {
			return _applicantIdNo;
		}
	}

	@Override
	public void setApplicantIdNo(String applicantIdNo) {
		_columnBitmask |= APPLICANTIDNO_COLUMN_BITMASK;

		if (_originalApplicantIdNo == null) {
			_originalApplicantIdNo = _applicantIdNo;
		}

		_applicantIdNo = applicantIdNo;
	}

	public String getOriginalApplicantIdNo() {
		return GetterUtil.getString(_originalApplicantIdNo);
	}

	@Override
	public int getApplicantDataType() {
		return _applicantDataType;
	}

	@Override
	public void setApplicantDataType(int applicantDataType) {
		_applicantDataType = applicantDataType;
	}

	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return "";
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_columnBitmask |= DOSSIERNO_COLUMN_BITMASK;

		if (_originalDossierNo == null) {
			_originalDossierNo = _dossierNo;
		}

		_dossierNo = dossierNo;
	}

	public String getOriginalDossierNo() {
		return GetterUtil.getString(_originalDossierNo);
	}

	@Override
	public String getLog() {
		if (_log == null) {
			return "";
		}
		else {
			return _log;
		}
	}

	@Override
	public void setLog(String log) {
		_log = log;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				ApplicantData.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			ApplicantData.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public ApplicantData toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (ApplicantData)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		ApplicantDataImpl applicantDataImpl = new ApplicantDataImpl();

		applicantDataImpl.setUuid(getUuid());
		applicantDataImpl.setApplicantDataId(getApplicantDataId());
		applicantDataImpl.setCreateDate(getCreateDate());
		applicantDataImpl.setModifiedDate(getModifiedDate());
		applicantDataImpl.setCompanyId(getCompanyId());
		applicantDataImpl.setGroupId(getGroupId());
		applicantDataImpl.setUserId(getUserId());
		applicantDataImpl.setUserName(getUserName());
		applicantDataImpl.setFileTemplateNo(getFileTemplateNo());
		applicantDataImpl.setFileNo(getFileNo());
		applicantDataImpl.setFileName(getFileName());
		applicantDataImpl.setFileEntryId(getFileEntryId());
		applicantDataImpl.setMetadata(getMetadata());
		applicantDataImpl.setStatus(getStatus());
		applicantDataImpl.setApplicantIdNo(getApplicantIdNo());
		applicantDataImpl.setApplicantDataType(getApplicantDataType());
		applicantDataImpl.setDossierNo(getDossierNo());
		applicantDataImpl.setLog(getLog());

		applicantDataImpl.resetOriginalValues();

		return applicantDataImpl;
	}

	@Override
	public int compareTo(ApplicantData applicantData) {
		long primaryKey = applicantData.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof ApplicantData)) {
			return false;
		}

		ApplicantData applicantData = (ApplicantData)obj;

		long primaryKey = applicantData.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		ApplicantDataModelImpl applicantDataModelImpl = this;

		applicantDataModelImpl._originalUuid = applicantDataModelImpl._uuid;

		applicantDataModelImpl._setModifiedDate = false;

		applicantDataModelImpl._originalCompanyId = applicantDataModelImpl._companyId;

		applicantDataModelImpl._setOriginalCompanyId = false;

		applicantDataModelImpl._originalGroupId = applicantDataModelImpl._groupId;

		applicantDataModelImpl._setOriginalGroupId = false;

		applicantDataModelImpl._originalFileTemplateNo = applicantDataModelImpl._fileTemplateNo;

		applicantDataModelImpl._originalApplicantIdNo = applicantDataModelImpl._applicantIdNo;

		applicantDataModelImpl._originalDossierNo = applicantDataModelImpl._dossierNo;

		applicantDataModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<ApplicantData> toCacheModel() {
		ApplicantDataCacheModel applicantDataCacheModel = new ApplicantDataCacheModel();

		applicantDataCacheModel.uuid = getUuid();

		String uuid = applicantDataCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			applicantDataCacheModel.uuid = null;
		}

		applicantDataCacheModel.applicantDataId = getApplicantDataId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			applicantDataCacheModel.createDate = createDate.getTime();
		}
		else {
			applicantDataCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			applicantDataCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			applicantDataCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		applicantDataCacheModel.companyId = getCompanyId();

		applicantDataCacheModel.groupId = getGroupId();

		applicantDataCacheModel.userId = getUserId();

		applicantDataCacheModel.userName = getUserName();

		String userName = applicantDataCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			applicantDataCacheModel.userName = null;
		}

		applicantDataCacheModel.fileTemplateNo = getFileTemplateNo();

		String fileTemplateNo = applicantDataCacheModel.fileTemplateNo;

		if ((fileTemplateNo != null) && (fileTemplateNo.length() == 0)) {
			applicantDataCacheModel.fileTemplateNo = null;
		}

		applicantDataCacheModel.fileNo = getFileNo();

		String fileNo = applicantDataCacheModel.fileNo;

		if ((fileNo != null) && (fileNo.length() == 0)) {
			applicantDataCacheModel.fileNo = null;
		}

		applicantDataCacheModel.fileName = getFileName();

		String fileName = applicantDataCacheModel.fileName;

		if ((fileName != null) && (fileName.length() == 0)) {
			applicantDataCacheModel.fileName = null;
		}

		applicantDataCacheModel.fileEntryId = getFileEntryId();

		applicantDataCacheModel.metadata = getMetadata();

		String metadata = applicantDataCacheModel.metadata;

		if ((metadata != null) && (metadata.length() == 0)) {
			applicantDataCacheModel.metadata = null;
		}

		applicantDataCacheModel.status = getStatus();

		applicantDataCacheModel.applicantIdNo = getApplicantIdNo();

		String applicantIdNo = applicantDataCacheModel.applicantIdNo;

		if ((applicantIdNo != null) && (applicantIdNo.length() == 0)) {
			applicantDataCacheModel.applicantIdNo = null;
		}

		applicantDataCacheModel.applicantDataType = getApplicantDataType();

		applicantDataCacheModel.dossierNo = getDossierNo();

		String dossierNo = applicantDataCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			applicantDataCacheModel.dossierNo = null;
		}

		applicantDataCacheModel.log = getLog();

		String log = applicantDataCacheModel.log;

		if ((log != null) && (log.length() == 0)) {
			applicantDataCacheModel.log = null;
		}

		return applicantDataCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(37);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", applicantDataId=");
		sb.append(getApplicantDataId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", fileTemplateNo=");
		sb.append(getFileTemplateNo());
		sb.append(", fileNo=");
		sb.append(getFileNo());
		sb.append(", fileName=");
		sb.append(getFileName());
		sb.append(", fileEntryId=");
		sb.append(getFileEntryId());
		sb.append(", metadata=");
		sb.append(getMetadata());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", applicantIdNo=");
		sb.append(getApplicantIdNo());
		sb.append(", applicantDataType=");
		sb.append(getApplicantDataType());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", log=");
		sb.append(getLog());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(58);

		sb.append("<model><model-name>");
		sb.append("org.opencps.usermgt.model.ApplicantData");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantDataId</column-name><column-value><![CDATA[");
		sb.append(getApplicantDataId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileTemplateNo</column-name><column-value><![CDATA[");
		sb.append(getFileTemplateNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileNo</column-name><column-value><![CDATA[");
		sb.append(getFileNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileName</column-name><column-value><![CDATA[");
		sb.append(getFileName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>fileEntryId</column-name><column-value><![CDATA[");
		sb.append(getFileEntryId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>metadata</column-name><column-value><![CDATA[");
		sb.append(getMetadata());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantIdNo</column-name><column-value><![CDATA[");
		sb.append(getApplicantIdNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicantDataType</column-name><column-value><![CDATA[");
		sb.append(getApplicantDataType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>log</column-name><column-value><![CDATA[");
		sb.append(getLog());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = ApplicantData.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			ApplicantData.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _applicantDataId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private String _fileTemplateNo;
	private String _originalFileTemplateNo;
	private String _fileNo;
	private String _fileName;
	private long _fileEntryId;
	private String _metadata;
	private int _status;
	private String _applicantIdNo;
	private String _originalApplicantIdNo;
	private int _applicantDataType;
	private String _dossierNo;
	private String _originalDossierNo;
	private String _log;
	private long _columnBitmask;
	private ApplicantData _escapedModel;
}