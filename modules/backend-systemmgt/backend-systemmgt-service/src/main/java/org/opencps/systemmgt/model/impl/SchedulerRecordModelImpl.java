/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.systemmgt.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.systemmgt.model.SchedulerRecord;
import org.opencps.systemmgt.model.SchedulerRecordModel;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the SchedulerRecord service. Represents a row in the &quot;opencps_scheduler&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SchedulerRecordModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SchedulerRecordImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see SchedulerRecordImpl
 * @see SchedulerRecord
 * @see SchedulerRecordModel
 * @generated
 */
@ProviderType
public class SchedulerRecordModelImpl extends BaseModelImpl<SchedulerRecord>
	implements SchedulerRecordModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a scheduler record model instance should use the {@link SchedulerRecord} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_scheduler";
	public static final Object[][] TABLE_COLUMNS = {
			{ "schedulerId", Types.BIGINT },
			{ "schedulerType", Types.VARCHAR },
			{ "onTime", Types.TIMESTAMP },
			{ "nextTime", Types.TIMESTAMP },
			{ "expiredTime", Types.TIMESTAMP },
			{ "minDuration", Types.BIGINT },
			{ "maxDuration", Types.BIGINT }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("schedulerId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("schedulerType", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("onTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("nextTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("expiredTime", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("minDuration", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("maxDuration", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_scheduler (schedulerId LONG not null primary key,schedulerType VARCHAR(255) null,onTime DATE null,nextTime DATE null,expiredTime DATE null,minDuration LONG,maxDuration LONG)";
	public static final String TABLE_SQL_DROP = "drop table opencps_scheduler";
	public static final String ORDER_BY_JPQL = " ORDER BY schedulerRecord.schedulerId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_scheduler.schedulerId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.systemmgt.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.systemmgt.model.SchedulerRecord"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.systemmgt.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.systemmgt.model.SchedulerRecord"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.systemmgt.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.systemmgt.model.SchedulerRecord"),
			true);
	public static final long SCHEDULERTYPE_COLUMN_BITMASK = 1L;
	public static final long SCHEDULERID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.systemmgt.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.systemmgt.model.SchedulerRecord"));

	public SchedulerRecordModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _schedulerId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSchedulerId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _schedulerId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SchedulerRecord.class;
	}

	@Override
	public String getModelClassName() {
		return SchedulerRecord.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("schedulerId", getSchedulerId());
		attributes.put("schedulerType", getSchedulerType());
		attributes.put("onTime", getOnTime());
		attributes.put("nextTime", getNextTime());
		attributes.put("expiredTime", getExpiredTime());
		attributes.put("minDuration", getMinDuration());
		attributes.put("maxDuration", getMaxDuration());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long schedulerId = (Long)attributes.get("schedulerId");

		if (schedulerId != null) {
			setSchedulerId(schedulerId);
		}

		String schedulerType = (String)attributes.get("schedulerType");

		if (schedulerType != null) {
			setSchedulerType(schedulerType);
		}

		Date onTime = (Date)attributes.get("onTime");

		if (onTime != null) {
			setOnTime(onTime);
		}

		Date nextTime = (Date)attributes.get("nextTime");

		if (nextTime != null) {
			setNextTime(nextTime);
		}

		Date expiredTime = (Date)attributes.get("expiredTime");

		if (expiredTime != null) {
			setExpiredTime(expiredTime);
		}

		Long minDuration = (Long)attributes.get("minDuration");

		if (minDuration != null) {
			setMinDuration(minDuration);
		}

		Long maxDuration = (Long)attributes.get("maxDuration");

		if (maxDuration != null) {
			setMaxDuration(maxDuration);
		}
	}

	@Override
	public long getSchedulerId() {
		return _schedulerId;
	}

	@Override
	public void setSchedulerId(long schedulerId) {
		_schedulerId = schedulerId;
	}

	@Override
	public String getSchedulerType() {
		if (_schedulerType == null) {
			return "";
		}
		else {
			return _schedulerType;
		}
	}

	@Override
	public void setSchedulerType(String schedulerType) {
		_columnBitmask |= SCHEDULERTYPE_COLUMN_BITMASK;

		if (_originalSchedulerType == null) {
			_originalSchedulerType = _schedulerType;
		}

		_schedulerType = schedulerType;
	}

	public String getOriginalSchedulerType() {
		return GetterUtil.getString(_originalSchedulerType);
	}

	@Override
	public Date getOnTime() {
		return _onTime;
	}

	@Override
	public void setOnTime(Date onTime) {
		_onTime = onTime;
	}

	@Override
	public Date getNextTime() {
		return _nextTime;
	}

	@Override
	public void setNextTime(Date nextTime) {
		_nextTime = nextTime;
	}

	@Override
	public Date getExpiredTime() {
		return _expiredTime;
	}

	@Override
	public void setExpiredTime(Date expiredTime) {
		_expiredTime = expiredTime;
	}

	@Override
	public long getMinDuration() {
		return _minDuration;
	}

	@Override
	public void setMinDuration(long minDuration) {
		_minDuration = minDuration;
	}

	@Override
	public long getMaxDuration() {
		return _maxDuration;
	}

	@Override
	public void setMaxDuration(long maxDuration) {
		_maxDuration = maxDuration;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			SchedulerRecord.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SchedulerRecord toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SchedulerRecord)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SchedulerRecordImpl schedulerRecordImpl = new SchedulerRecordImpl();

		schedulerRecordImpl.setSchedulerId(getSchedulerId());
		schedulerRecordImpl.setSchedulerType(getSchedulerType());
		schedulerRecordImpl.setOnTime(getOnTime());
		schedulerRecordImpl.setNextTime(getNextTime());
		schedulerRecordImpl.setExpiredTime(getExpiredTime());
		schedulerRecordImpl.setMinDuration(getMinDuration());
		schedulerRecordImpl.setMaxDuration(getMaxDuration());

		schedulerRecordImpl.resetOriginalValues();

		return schedulerRecordImpl;
	}

	@Override
	public int compareTo(SchedulerRecord schedulerRecord) {
		long primaryKey = schedulerRecord.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SchedulerRecord)) {
			return false;
		}

		SchedulerRecord schedulerRecord = (SchedulerRecord)obj;

		long primaryKey = schedulerRecord.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SchedulerRecordModelImpl schedulerRecordModelImpl = this;

		schedulerRecordModelImpl._originalSchedulerType = schedulerRecordModelImpl._schedulerType;

		schedulerRecordModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SchedulerRecord> toCacheModel() {
		SchedulerRecordCacheModel schedulerRecordCacheModel = new SchedulerRecordCacheModel();

		schedulerRecordCacheModel.schedulerId = getSchedulerId();

		schedulerRecordCacheModel.schedulerType = getSchedulerType();

		String schedulerType = schedulerRecordCacheModel.schedulerType;

		if ((schedulerType != null) && (schedulerType.length() == 0)) {
			schedulerRecordCacheModel.schedulerType = null;
		}

		Date onTime = getOnTime();

		if (onTime != null) {
			schedulerRecordCacheModel.onTime = onTime.getTime();
		}
		else {
			schedulerRecordCacheModel.onTime = Long.MIN_VALUE;
		}

		Date nextTime = getNextTime();

		if (nextTime != null) {
			schedulerRecordCacheModel.nextTime = nextTime.getTime();
		}
		else {
			schedulerRecordCacheModel.nextTime = Long.MIN_VALUE;
		}

		Date expiredTime = getExpiredTime();

		if (expiredTime != null) {
			schedulerRecordCacheModel.expiredTime = expiredTime.getTime();
		}
		else {
			schedulerRecordCacheModel.expiredTime = Long.MIN_VALUE;
		}

		schedulerRecordCacheModel.minDuration = getMinDuration();

		schedulerRecordCacheModel.maxDuration = getMaxDuration();

		return schedulerRecordCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(15);

		sb.append("{schedulerId=");
		sb.append(getSchedulerId());
		sb.append(", schedulerType=");
		sb.append(getSchedulerType());
		sb.append(", onTime=");
		sb.append(getOnTime());
		sb.append(", nextTime=");
		sb.append(getNextTime());
		sb.append(", expiredTime=");
		sb.append(getExpiredTime());
		sb.append(", minDuration=");
		sb.append(getMinDuration());
		sb.append(", maxDuration=");
		sb.append(getMaxDuration());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(25);

		sb.append("<model><model-name>");
		sb.append("org.opencps.systemmgt.model.SchedulerRecord");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>schedulerId</column-name><column-value><![CDATA[");
		sb.append(getSchedulerId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>schedulerType</column-name><column-value><![CDATA[");
		sb.append(getSchedulerType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>onTime</column-name><column-value><![CDATA[");
		sb.append(getOnTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>nextTime</column-name><column-value><![CDATA[");
		sb.append(getNextTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>expiredTime</column-name><column-value><![CDATA[");
		sb.append(getExpiredTime());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>minDuration</column-name><column-value><![CDATA[");
		sb.append(getMinDuration());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>maxDuration</column-name><column-value><![CDATA[");
		sb.append(getMaxDuration());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SchedulerRecord.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SchedulerRecord.class, ModelWrapper.class
		};
	private long _schedulerId;
	private String _schedulerType;
	private String _originalSchedulerType;
	private Date _onTime;
	private Date _nextTime;
	private Date _expiredTime;
	private long _minDuration;
	private long _maxDuration;
	private long _columnBitmask;
	private SchedulerRecord _escapedModel;
}