/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package org.opencps.sms.model.impl;

import aQute.bnd.annotation.ProviderType;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;

import com.liferay.exportimport.kernel.lar.StagedModelType;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;

import org.opencps.sms.model.SMSGatewayLog;
import org.opencps.sms.model.SMSGatewayLogModel;
import org.opencps.sms.model.SMSGatewayLogSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the SMSGatewayLog service. Represents a row in the &quot;opencps_smsgatewaylog&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link SMSGatewayLogModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link SMSGatewayLogImpl}.
 * </p>
 *
 * @author khoa
 * @see SMSGatewayLogImpl
 * @see SMSGatewayLog
 * @see SMSGatewayLogModel
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class SMSGatewayLogModelImpl extends BaseModelImpl<SMSGatewayLog>
	implements SMSGatewayLogModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a sms gateway log model instance should use the {@link SMSGatewayLog} interface instead.
	 */
	public static final String TABLE_NAME = "opencps_smsgatewaylog";
	public static final Object[][] TABLE_COLUMNS = {
			{ "uuid_", Types.VARCHAR },
			{ "smsId", Types.BIGINT },
			{ Field.GROUP_ID, Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "src", Types.VARCHAR },
			{ "smsReq", Types.VARCHAR },
			{ "smsReply", Types.VARCHAR },
			{ "dossierNo", Types.VARCHAR },
			{ "applicationName", Types.VARCHAR },
			{ "reqDate", Types.TIMESTAMP },
			{ "replyDate", Types.TIMESTAMP },
			{ "status", Types.INTEGER },
			{ "smsType", Types.INTEGER },
			{ "lastReplyManualDate", Types.TIMESTAMP },
			{ "lastReplyManualUserId", Types.BIGINT },
			{ "lastReplyManualUserName", Types.VARCHAR }
		};
	public static final Map<String, Integer> TABLE_COLUMNS_MAP = new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("smsId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put(Field.GROUP_ID, Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("src", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("smsReq", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("smsReply", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("dossierNo", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("applicationName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("reqDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("replyDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("smsType", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("lastReplyManualDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("lastReplyManualUserId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("lastReplyManualUserName", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE = "create table opencps_smsgatewaylog (uuid_ VARCHAR(75) null,smsId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,createDate DATE null,modifiedDate DATE null,src VARCHAR(75) null,smsReq VARCHAR(75) null,smsReply VARCHAR(75) null,dossierNo VARCHAR(75) null,applicationName VARCHAR(75) null,reqDate DATE null,replyDate DATE null,status INTEGER,smsType INTEGER,lastReplyManualDate DATE null,lastReplyManualUserId LONG,lastReplyManualUserName VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table opencps_smsgatewaylog";
	public static final String ORDER_BY_JPQL = " ORDER BY smsGatewayLog.createDate DESC";
	public static final String ORDER_BY_SQL = " ORDER BY opencps_smsgatewaylog.createDate DESC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.sms.service.util.ServiceProps.get(
				"value.object.entity.cache.enabled.org.opencps.sms.model.SMSGatewayLog"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(org.opencps.sms.service.util.ServiceProps.get(
				"value.object.finder.cache.enabled.org.opencps.sms.model.SMSGatewayLog"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(org.opencps.sms.service.util.ServiceProps.get(
				"value.object.column.bitmask.enabled.org.opencps.sms.model.SMSGatewayLog"),
			true);
	public static final long COMPANYID_COLUMN_BITMASK = 1L;
	public static final long GROUPID_COLUMN_BITMASK = 2L;
	public static final long UUID_COLUMN_BITMASK = 4L;
	public static final long CREATEDATE_COLUMN_BITMASK = 8L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static SMSGatewayLog toModel(SMSGatewayLogSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		SMSGatewayLog model = new SMSGatewayLogImpl();

		model.setUuid(soapModel.getUuid());
		model.setSmsId(soapModel.getSmsId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setSrc(soapModel.getSrc());
		model.setSmsReq(soapModel.getSmsReq());
		model.setSmsReply(soapModel.getSmsReply());
		model.setDossierNo(soapModel.getDossierNo());
		model.setApplicationName(soapModel.getApplicationName());
		model.setReqDate(soapModel.getReqDate());
		model.setReplyDate(soapModel.getReplyDate());
		model.setStatus(soapModel.getStatus());
		model.setSmsType(soapModel.getSmsType());
		model.setLastReplyManualDate(soapModel.getLastReplyManualDate());
		model.setLastReplyManualUserId(soapModel.getLastReplyManualUserId());
		model.setLastReplyManualUserName(soapModel.getLastReplyManualUserName());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<SMSGatewayLog> toModels(SMSGatewayLogSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<SMSGatewayLog> models = new ArrayList<SMSGatewayLog>(soapModels.length);

		for (SMSGatewayLogSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(org.opencps.sms.service.util.ServiceProps.get(
				"lock.expiration.time.org.opencps.sms.model.SMSGatewayLog"));

	public SMSGatewayLogModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _smsId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setSmsId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _smsId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return SMSGatewayLog.class;
	}

	@Override
	public String getModelClassName() {
		return SMSGatewayLog.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("uuid", getUuid());
		attributes.put("smsId", getSmsId());
		attributes.put(Field.GROUP_ID, getGroupId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("src", getSrc());
		attributes.put("smsReq", getSmsReq());
		attributes.put("smsReply", getSmsReply());
		attributes.put("dossierNo", getDossierNo());
		attributes.put("applicationName", getApplicationName());
		attributes.put("reqDate", getReqDate());
		attributes.put("replyDate", getReplyDate());
		attributes.put("status", getStatus());
		attributes.put("smsType", getSmsType());
		attributes.put("lastReplyManualDate", getLastReplyManualDate());
		attributes.put("lastReplyManualUserId", getLastReplyManualUserId());
		attributes.put("lastReplyManualUserName", getLastReplyManualUserName());

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String uuid = (String)attributes.get("uuid");

		if (uuid != null) {
			setUuid(uuid);
		}

		Long smsId = (Long)attributes.get("smsId");

		if (smsId != null) {
			setSmsId(smsId);
		}

		Long groupId = (Long)attributes.get(Field.GROUP_ID);

		if (groupId != null) {
			setGroupId(groupId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		String src = (String)attributes.get("src");

		if (src != null) {
			setSrc(src);
		}

		String smsReq = (String)attributes.get("smsReq");

		if (smsReq != null) {
			setSmsReq(smsReq);
		}

		String smsReply = (String)attributes.get("smsReply");

		if (smsReply != null) {
			setSmsReply(smsReply);
		}

		String dossierNo = (String)attributes.get("dossierNo");

		if (dossierNo != null) {
			setDossierNo(dossierNo);
		}

		String applicationName = (String)attributes.get("applicationName");

		if (applicationName != null) {
			setApplicationName(applicationName);
		}

		Date reqDate = (Date)attributes.get("reqDate");

		if (reqDate != null) {
			setReqDate(reqDate);
		}

		Date replyDate = (Date)attributes.get("replyDate");

		if (replyDate != null) {
			setReplyDate(replyDate);
		}

		Integer status = (Integer)attributes.get("status");

		if (status != null) {
			setStatus(status);
		}

		Integer smsType = (Integer)attributes.get("smsType");

		if (smsType != null) {
			setSmsType(smsType);
		}

		Date lastReplyManualDate = (Date)attributes.get("lastReplyManualDate");

		if (lastReplyManualDate != null) {
			setLastReplyManualDate(lastReplyManualDate);
		}

		Long lastReplyManualUserId = (Long)attributes.get(
				"lastReplyManualUserId");

		if (lastReplyManualUserId != null) {
			setLastReplyManualUserId(lastReplyManualUserId);
		}

		String lastReplyManualUserName = (String)attributes.get(
				"lastReplyManualUserName");

		if (lastReplyManualUserName != null) {
			setLastReplyManualUserName(lastReplyManualUserName);
		}
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getSmsId() {
		return _smsId;
	}

	@Override
	public void setSmsId(long smsId) {
		_smsId = smsId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getSrc() {
		if (_src == null) {
			return "";
		}
		else {
			return _src;
		}
	}

	@Override
	public void setSrc(String src) {
		_src = src;
	}

	@JSON
	@Override
	public String getSmsReq() {
		if (_smsReq == null) {
			return "";
		}
		else {
			return _smsReq;
		}
	}

	@Override
	public void setSmsReq(String smsReq) {
		_smsReq = smsReq;
	}

	@JSON
	@Override
	public String getSmsReply() {
		if (_smsReply == null) {
			return "";
		}
		else {
			return _smsReply;
		}
	}

	@Override
	public void setSmsReply(String smsReply) {
		_smsReply = smsReply;
	}

	@JSON
	@Override
	public String getDossierNo() {
		if (_dossierNo == null) {
			return "";
		}
		else {
			return _dossierNo;
		}
	}

	@Override
	public void setDossierNo(String dossierNo) {
		_dossierNo = dossierNo;
	}

	@JSON
	@Override
	public String getApplicationName() {
		if (_applicationName == null) {
			return "";
		}
		else {
			return _applicationName;
		}
	}

	@Override
	public void setApplicationName(String applicationName) {
		_applicationName = applicationName;
	}

	@JSON
	@Override
	public Date getReqDate() {
		return _reqDate;
	}

	@Override
	public void setReqDate(Date reqDate) {
		_reqDate = reqDate;
	}

	@JSON
	@Override
	public Date getReplyDate() {
		return _replyDate;
	}

	@Override
	public void setReplyDate(Date replyDate) {
		_replyDate = replyDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_status = status;
	}

	@JSON
	@Override
	public int getSmsType() {
		return _smsType;
	}

	@Override
	public void setSmsType(int smsType) {
		_smsType = smsType;
	}

	@JSON
	@Override
	public Date getLastReplyManualDate() {
		return _lastReplyManualDate;
	}

	@Override
	public void setLastReplyManualDate(Date lastReplyManualDate) {
		_lastReplyManualDate = lastReplyManualDate;
	}

	@JSON
	@Override
	public long getLastReplyManualUserId() {
		return _lastReplyManualUserId;
	}

	@Override
	public void setLastReplyManualUserId(long lastReplyManualUserId) {
		_lastReplyManualUserId = lastReplyManualUserId;
	}

	@Override
	public String getLastReplyManualUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getLastReplyManualUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setLastReplyManualUserUuid(String lastReplyManualUserUuid) {
	}

	@JSON
	@Override
	public String getLastReplyManualUserName() {
		if (_lastReplyManualUserName == null) {
			return "";
		}
		else {
			return _lastReplyManualUserName;
		}
	}

	@Override
	public void setLastReplyManualUserName(String lastReplyManualUserName) {
		_lastReplyManualUserName = lastReplyManualUserName;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(PortalUtil.getClassNameId(
				SMSGatewayLog.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			SMSGatewayLog.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public SMSGatewayLog toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (SMSGatewayLog)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		SMSGatewayLogImpl smsGatewayLogImpl = new SMSGatewayLogImpl();

		smsGatewayLogImpl.setUuid(getUuid());
		smsGatewayLogImpl.setSmsId(getSmsId());
		smsGatewayLogImpl.setGroupId(getGroupId());
		smsGatewayLogImpl.setCompanyId(getCompanyId());
		smsGatewayLogImpl.setUserId(getUserId());
		smsGatewayLogImpl.setCreateDate(getCreateDate());
		smsGatewayLogImpl.setModifiedDate(getModifiedDate());
		smsGatewayLogImpl.setSrc(getSrc());
		smsGatewayLogImpl.setSmsReq(getSmsReq());
		smsGatewayLogImpl.setSmsReply(getSmsReply());
		smsGatewayLogImpl.setDossierNo(getDossierNo());
		smsGatewayLogImpl.setApplicationName(getApplicationName());
		smsGatewayLogImpl.setReqDate(getReqDate());
		smsGatewayLogImpl.setReplyDate(getReplyDate());
		smsGatewayLogImpl.setStatus(getStatus());
		smsGatewayLogImpl.setSmsType(getSmsType());
		smsGatewayLogImpl.setLastReplyManualDate(getLastReplyManualDate());
		smsGatewayLogImpl.setLastReplyManualUserId(getLastReplyManualUserId());
		smsGatewayLogImpl.setLastReplyManualUserName(getLastReplyManualUserName());

		smsGatewayLogImpl.resetOriginalValues();

		return smsGatewayLogImpl;
	}

	@Override
	public int compareTo(SMSGatewayLog smsGatewayLog) {
		int value = 0;

		value = DateUtil.compareTo(getCreateDate(),
				smsGatewayLog.getCreateDate());

		value = value * -1;

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof SMSGatewayLog)) {
			return false;
		}

		SMSGatewayLog smsGatewayLog = (SMSGatewayLog)obj;

		long primaryKey = smsGatewayLog.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return ENTITY_CACHE_ENABLED;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return FINDER_CACHE_ENABLED;
	}

	@Override
	public void resetOriginalValues() {
		SMSGatewayLogModelImpl smsGatewayLogModelImpl = this;

		smsGatewayLogModelImpl._originalUuid = smsGatewayLogModelImpl._uuid;

		smsGatewayLogModelImpl._originalGroupId = smsGatewayLogModelImpl._groupId;

		smsGatewayLogModelImpl._setOriginalGroupId = false;

		smsGatewayLogModelImpl._originalCompanyId = smsGatewayLogModelImpl._companyId;

		smsGatewayLogModelImpl._setOriginalCompanyId = false;

		smsGatewayLogModelImpl._setModifiedDate = false;

		smsGatewayLogModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<SMSGatewayLog> toCacheModel() {
		SMSGatewayLogCacheModel smsGatewayLogCacheModel = new SMSGatewayLogCacheModel();

		smsGatewayLogCacheModel.uuid = getUuid();

		String uuid = smsGatewayLogCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			smsGatewayLogCacheModel.uuid = null;
		}

		smsGatewayLogCacheModel.smsId = getSmsId();

		smsGatewayLogCacheModel.groupId = getGroupId();

		smsGatewayLogCacheModel.companyId = getCompanyId();

		smsGatewayLogCacheModel.userId = getUserId();

		Date createDate = getCreateDate();

		if (createDate != null) {
			smsGatewayLogCacheModel.createDate = createDate.getTime();
		}
		else {
			smsGatewayLogCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			smsGatewayLogCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			smsGatewayLogCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		smsGatewayLogCacheModel.src = getSrc();

		String src = smsGatewayLogCacheModel.src;

		if ((src != null) && (src.length() == 0)) {
			smsGatewayLogCacheModel.src = null;
		}

		smsGatewayLogCacheModel.smsReq = getSmsReq();

		String smsReq = smsGatewayLogCacheModel.smsReq;

		if ((smsReq != null) && (smsReq.length() == 0)) {
			smsGatewayLogCacheModel.smsReq = null;
		}

		smsGatewayLogCacheModel.smsReply = getSmsReply();

		String smsReply = smsGatewayLogCacheModel.smsReply;

		if ((smsReply != null) && (smsReply.length() == 0)) {
			smsGatewayLogCacheModel.smsReply = null;
		}

		smsGatewayLogCacheModel.dossierNo = getDossierNo();

		String dossierNo = smsGatewayLogCacheModel.dossierNo;

		if ((dossierNo != null) && (dossierNo.length() == 0)) {
			smsGatewayLogCacheModel.dossierNo = null;
		}

		smsGatewayLogCacheModel.applicationName = getApplicationName();

		String applicationName = smsGatewayLogCacheModel.applicationName;

		if ((applicationName != null) && (applicationName.length() == 0)) {
			smsGatewayLogCacheModel.applicationName = null;
		}

		Date reqDate = getReqDate();

		if (reqDate != null) {
			smsGatewayLogCacheModel.reqDate = reqDate.getTime();
		}
		else {
			smsGatewayLogCacheModel.reqDate = Long.MIN_VALUE;
		}

		Date replyDate = getReplyDate();

		if (replyDate != null) {
			smsGatewayLogCacheModel.replyDate = replyDate.getTime();
		}
		else {
			smsGatewayLogCacheModel.replyDate = Long.MIN_VALUE;
		}

		smsGatewayLogCacheModel.status = getStatus();

		smsGatewayLogCacheModel.smsType = getSmsType();

		Date lastReplyManualDate = getLastReplyManualDate();

		if (lastReplyManualDate != null) {
			smsGatewayLogCacheModel.lastReplyManualDate = lastReplyManualDate.getTime();
		}
		else {
			smsGatewayLogCacheModel.lastReplyManualDate = Long.MIN_VALUE;
		}

		smsGatewayLogCacheModel.lastReplyManualUserId = getLastReplyManualUserId();

		smsGatewayLogCacheModel.lastReplyManualUserName = getLastReplyManualUserName();

		String lastReplyManualUserName = smsGatewayLogCacheModel.lastReplyManualUserName;

		if ((lastReplyManualUserName != null) &&
				(lastReplyManualUserName.length() == 0)) {
			smsGatewayLogCacheModel.lastReplyManualUserName = null;
		}

		return smsGatewayLogCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(39);

		sb.append("{uuid=");
		sb.append(getUuid());
		sb.append(", smsId=");
		sb.append(getSmsId());
		sb.append(", groupId=");
		sb.append(getGroupId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", src=");
		sb.append(getSrc());
		sb.append(", smsReq=");
		sb.append(getSmsReq());
		sb.append(", smsReply=");
		sb.append(getSmsReply());
		sb.append(", dossierNo=");
		sb.append(getDossierNo());
		sb.append(", applicationName=");
		sb.append(getApplicationName());
		sb.append(", reqDate=");
		sb.append(getReqDate());
		sb.append(", replyDate=");
		sb.append(getReplyDate());
		sb.append(", status=");
		sb.append(getStatus());
		sb.append(", smsType=");
		sb.append(getSmsType());
		sb.append(", lastReplyManualDate=");
		sb.append(getLastReplyManualDate());
		sb.append(", lastReplyManualUserId=");
		sb.append(getLastReplyManualUserId());
		sb.append(", lastReplyManualUserName=");
		sb.append(getLastReplyManualUserName());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(61);

		sb.append("<model><model-name>");
		sb.append("org.opencps.sms.model.SMSGatewayLog");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>uuid</column-name><column-value><![CDATA[");
		sb.append(getUuid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smsId</column-name><column-value><![CDATA[");
		sb.append(getSmsId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>groupId</column-name><column-value><![CDATA[");
		sb.append(getGroupId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>src</column-name><column-value><![CDATA[");
		sb.append(getSrc());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smsReq</column-name><column-value><![CDATA[");
		sb.append(getSmsReq());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smsReply</column-name><column-value><![CDATA[");
		sb.append(getSmsReply());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dossierNo</column-name><column-value><![CDATA[");
		sb.append(getDossierNo());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>applicationName</column-name><column-value><![CDATA[");
		sb.append(getApplicationName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>reqDate</column-name><column-value><![CDATA[");
		sb.append(getReqDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>replyDate</column-name><column-value><![CDATA[");
		sb.append(getReplyDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>status</column-name><column-value><![CDATA[");
		sb.append(getStatus());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>smsType</column-name><column-value><![CDATA[");
		sb.append(getSmsType());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastReplyManualDate</column-name><column-value><![CDATA[");
		sb.append(getLastReplyManualDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastReplyManualUserId</column-name><column-value><![CDATA[");
		sb.append(getLastReplyManualUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>lastReplyManualUserName</column-name><column-value><![CDATA[");
		sb.append(getLastReplyManualUserName());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = SMSGatewayLog.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
			SMSGatewayLog.class, ModelWrapper.class
		};
	private String _uuid;
	private String _originalUuid;
	private long _smsId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _src;
	private String _smsReq;
	private String _smsReply;
	private String _dossierNo;
	private String _applicationName;
	private Date _reqDate;
	private Date _replyDate;
	private int _status;
	private int _smsType;
	private Date _lastReplyManualDate;
	private long _lastReplyManualUserId;
	private String _lastReplyManualUserName;
	private long _columnBitmask;
	private SMSGatewayLog _escapedModel;
}